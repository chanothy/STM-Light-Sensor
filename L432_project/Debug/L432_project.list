
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e8c  08004e8c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  08004efc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004efc  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e066  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f0  00000000  00000000  0002e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00030838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087c  00000000  00000000  00031378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c47  00000000  00000000  00031bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb23  00000000  00000000  0005383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c280d  00000000  00000000  0006235e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f0  00000000  00000000  00124b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d60 	.word	0x08004d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004d60 	.word	0x08004d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <prompt>:
#include <queue.h>
#include <stm32l4xx_it.h>
#include <main.h>
#include <string.h>

void prompt() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	printf("> ");
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <prompt+0x10>)
 8000572:	f003 fcbf 	bl	8003ef4 <iprintf>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	08004d78 	.word	0x08004d78

08000580 <help_command>:
void help_command() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	printf("Available Commands:\n\r");
 8000584:	4808      	ldr	r0, [pc, #32]	; (80005a8 <help_command+0x28>)
 8000586:	f003 fcb5 	bl	8003ef4 <iprintf>
	printf("help\n\r");
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <help_command+0x2c>)
 800058c:	f003 fcb2 	bl	8003ef4 <iprintf>
	printf("lof\n\r");
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <help_command+0x30>)
 8000592:	f003 fcaf 	bl	8003ef4 <iprintf>
	printf("lon\n\r");
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <help_command+0x34>)
 8000598:	f003 fcac 	bl	8003ef4 <iprintf>
	printf("test\n\r");
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <help_command+0x38>)
 800059e:	f003 fca9 	bl	8003ef4 <iprintf>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08004d7c 	.word	0x08004d7c
 80005ac:	08004d94 	.word	0x08004d94
 80005b0:	08004d9c 	.word	0x08004d9c
 80005b4:	08004da4 	.word	0x08004da4
 80005b8:	08004dac 	.word	0x08004dac

080005bc <lof_command>:

void test_command(char *arguments) {

}
void lof_command() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	printf("led_off\n\r");
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <lof_command+0x18>)
 80005c2:	f003 fc97 	bl	8003ef4 <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <lof_command+0x1c>)
 80005cc:	f000 ffc4 	bl	8001558 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08004db4 	.word	0x08004db4
 80005d8:	48000400 	.word	0x48000400

080005dc <lon_command>:

void lon_command() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	printf("led_on\n\r");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <lon_command+0x18>)
 80005e2:	f003 fc87 	bl	8003ef4 <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2108      	movs	r1, #8
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <lon_command+0x1c>)
 80005ec:	f000 ffb4 	bl	8001558 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004dc0 	.word	0x08004dc0
 80005f8:	48000400 	.word	0x48000400

080005fc <get_command>:
void get_command(uint8_t command[]) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	const char *led_on = "lon";
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <get_command+0x64>)
 8000606:	617b      	str	r3, [r7, #20]
	const char *led_off = "lof";
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <get_command+0x68>)
 800060a:	613b      	str	r3, [r7, #16]
	const char *help = "help";
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <get_command+0x6c>)
 800060e:	60fb      	str	r3, [r7, #12]

	if (strstr(command,led_on) != NULL) {
 8000610:	6979      	ldr	r1, [r7, #20]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f003 fc88 	bl	8003f28 <strstr>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <get_command+0x28>
	  lon_command();
 800061e:	f7ff ffdd 	bl	80005dc <lon_command>
 8000622:	e016      	b.n	8000652 <get_command+0x56>
	}
	else if (strstr(command,led_off) != NULL) {
 8000624:	6939      	ldr	r1, [r7, #16]
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f003 fc7e 	bl	8003f28 <strstr>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <get_command+0x3c>
	  lof_command();
 8000632:	f7ff ffc3 	bl	80005bc <lof_command>
 8000636:	e00c      	b.n	8000652 <get_command+0x56>
	}
	else if (strstr(command,help) != NULL) {
 8000638:	68f9      	ldr	r1, [r7, #12]
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f003 fc74 	bl	8003f28 <strstr>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <get_command+0x50>
	  help_command();
 8000646:	f7ff ff9b 	bl	8000580 <help_command>
 800064a:	e002      	b.n	8000652 <get_command+0x56>
	}
	else {
	  printf("invalid_command\n\r");
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <get_command+0x70>)
 800064e:	f003 fc51 	bl	8003ef4 <iprintf>
	}
	prompt();
 8000652:	f7ff ff8b 	bl	800056c <prompt>
}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08004dcc 	.word	0x08004dcc
 8000664:	08004dd0 	.word	0x08004dd0
 8000668:	08004dd4 	.word	0x08004dd4
 800066c:	08004ddc 	.word	0x08004ddc

08000670 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800067a:	f3ef 8310 	mrs	r3, PRIMASK
 800067e:	603b      	str	r3, [r7, #0]
  return(result);
 8000680:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000682:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <restore>:

void restore(uint32_t priority_mask) {
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f383 8810 	msr	PRIMASK, r3
}
 80006a8:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b089      	sub	sp, #36	; 0x24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	e853 3f00 	ldrex	r3, [r3]
 80006c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	69fa      	ldr	r2, [r7, #28]
 80006d6:	61ba      	str	r2, [r7, #24]
 80006d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006da:	6979      	ldr	r1, [r7, #20]
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	e841 2300 	strex	r3, r2, [r1]
 80006e2:	613b      	str	r3, [r7, #16]
   return(result);
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1e9      	bne.n	80006be <LL_USART_EnableIT_RXNE+0x8>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <main+0x90>)
 8000700:	f000 f92f 	bl	8000962 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fbb9 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f84a 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f8da 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f8a8 	bl	8000864 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000714:	481d      	ldr	r0, [pc, #116]	; (800078c <main+0x94>)
 8000716:	f000 f99b 	bl	8000a50 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 800071a:	481d      	ldr	r0, [pc, #116]	; (8000790 <main+0x98>)
 800071c:	f7ff ffcb 	bl	80006b6 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000720:	481c      	ldr	r0, [pc, #112]	; (8000794 <main+0x9c>)
 8000722:	f003 fbe7 	bl	8003ef4 <iprintf>
  static uint32_t counter = 0;
  uint8_t data;
  prompt();
 8000726:	f7ff ff21 	bl	800056c <prompt>
  while (1)
  {
	  data = dequeue(&buf);
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <main+0x90>)
 800072c:	f000 f966 	bl	80009fc <dequeue>
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
	  while (data!=0) {
 8000734:	e024      	b.n	8000780 <main+0x88>
		  if (data=='\n'||data=='\r') {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d002      	beq.n	8000742 <main+0x4a>
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b0d      	cmp	r3, #13
 8000740:	d10a      	bne.n	8000758 <main+0x60>
			  get_command(command);
 8000742:	4815      	ldr	r0, [pc, #84]	; (8000798 <main+0xa0>)
 8000744:	f7ff ff5a 	bl	80005fc <get_command>
			  memset(command, 0, sizeof(command));
 8000748:	2210      	movs	r2, #16
 800074a:	2100      	movs	r1, #0
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <main+0xa0>)
 800074e:	f003 fc01 	bl	8003f54 <memset>
			  counter = 0;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
		  }
		  command[counter] = data;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0xa4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	490e      	ldr	r1, [pc, #56]	; (8000798 <main+0xa0>)
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	54ca      	strb	r2, [r1, r3]
		  counter++;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <main+0xa4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <main+0xa4>)
 800076a:	6013      	str	r3, [r2, #0]
		  command[counter] = '\0';
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0xa4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <main+0xa0>)
 8000772:	2100      	movs	r1, #0
 8000774:	54d1      	strb	r1, [r2, r3]
		  data = dequeue(&buf);
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <main+0x90>)
 8000778:	f000 f940 	bl	80009fc <dequeue>
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
	  while (data!=0) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1d7      	bne.n	8000736 <main+0x3e>
	  data = dequeue(&buf);
 8000786:	e7d0      	b.n	800072a <main+0x32>
 8000788:	2000010c 	.word	0x2000010c
 800078c:	20000084 	.word	0x20000084
 8000790:	40004400 	.word	0x40004400
 8000794:	08004df0 	.word	0x08004df0
 8000798:	20000134 	.word	0x20000134
 800079c:	20000144 	.word	0x20000144

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2244      	movs	r2, #68	; 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fbd0 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c6:	f000 fefd 	bl	80015c4 <HAL_PWREx_ControlVoltageScaling>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d0:	f000 f8c2 	bl	8000958 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d4:	f000 fed8 	bl	8001588 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <SystemClock_Config+0xc0>)
 80007da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <SystemClock_Config+0xc0>)
 80007e0:	f023 0318 	bic.w	r3, r3, #24
 80007e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007e8:	2314      	movs	r3, #20
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000800:	2301      	movs	r3, #1
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000808:	2310      	movs	r3, #16
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080c:	2307      	movs	r3, #7
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f000 ff27 	bl	8001670 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000828:	f000 f896 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2303      	movs	r3, #3
 8000832:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fb27 	bl	8001e98 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000850:	f000 f882 	bl	8000958 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000854:	f001 ff3a 	bl	80026cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	f002 f812 	bl	80028d0 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f851 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000084 	.word	0x20000084
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0x8c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <MX_GPIO_Init+0x8c>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_GPIO_Init+0x8c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_GPIO_Init+0x8c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <MX_GPIO_Init+0x8c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_GPIO_Init+0x8c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_GPIO_Init+0x8c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <MX_GPIO_Init+0x8c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_GPIO_Init+0x8c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2108      	movs	r1, #8
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0x90>)
 8000928:	f000 fe16 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800092c:	2308      	movs	r3, #8
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x90>)
 8000944:	f000 fc9e 	bl	8001284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>

08000962 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 800096a:	f7ff fe81 	bl	8000670 <disable>
 800096e:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  restore(mask);
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff fe8a 	bl	8000696 <restore>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 800099a:	f7ff fe69 	bl	8000670 <disable>
 800099e:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	425a      	negs	r2, r3
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	f002 021f 	and.w	r2, r2, #31
 80009b0:	bf58      	it	pl
 80009b2:	4253      	negpl	r3, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d014      	beq.n	80009e6 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	425a      	negs	r2, r3
 80009d0:	f003 031f 	and.w	r3, r3, #31
 80009d4:	f002 021f 	and.w	r2, r2, #31
 80009d8:	bf58      	it	pl
 80009da:	4253      	negpl	r3, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
    return_val=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e002      	b.n	80009ec <enqueue+0x62>
  }
  else {
    return_val=-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ea:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f7ff fe52 	bl	8000696 <restore>
  return (return_val);
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <dequeue>:

uint8_t dequeue (queue_t *buf) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000a08:	f7ff fe32 	bl	8000670 <disable>
 8000a0c:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d011      	beq.n	8000a3e <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	7a1b      	ldrb	r3, [r3, #8]
 8000a24:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	425a      	negs	r2, r3
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	f002 021f 	and.w	r2, r2, #31
 8000a36:	bf58      	it	pl
 8000a38:	4253      	negpl	r3, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	f7ff fe29 	bl	8000696 <restore>
  return(return_val);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	b2db      	uxtb	r3, r3
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <RetargetInit+0x28>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <RetargetInit+0x2c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6898      	ldr	r0, [r3, #8]
 8000a64:	2300      	movs	r3, #0
 8000a66:	2202      	movs	r2, #2
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f003 f869 	bl	8003b40 <setvbuf>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000148 	.word	0x20000148
 8000a7c:	20000064 	.word	0x20000064

08000a80 <_isatty>:

int _isatty(int fd) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db04      	blt.n	8000a98 <_isatty+0x18>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	dc01      	bgt.n	8000a98 <_isatty+0x18>
    return 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e005      	b.n	8000aa4 <_isatty+0x24>

  errno = EBADF;
 8000a98:	f003 fa86 	bl	8003fa8 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2209      	movs	r2, #9
 8000aa0:	601a      	str	r2, [r3, #0]
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_write>:

int _write(int fd, char* ptr, int len) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d002      	beq.n	8000ac4 <_write+0x18>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d111      	bne.n	8000ae8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <_write+0x54>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	f001 ff4b 	bl	800296c <HAL_UART_Transmit>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <_write+0x38>
      return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	e008      	b.n	8000af6 <_write+0x4a>
    else
      return EIO;
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	e006      	b.n	8000af6 <_write+0x4a>
  }
  errno = EBADF;
 8000ae8:	f003 fa5e 	bl	8003fa8 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2209      	movs	r2, #9
 8000af0:	601a      	str	r2, [r3, #0]
  return -1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000148 	.word	0x20000148

08000b04 <_close>:

int _close(int fd) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db04      	blt.n	8000b1c <_close+0x18>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	dc01      	bgt.n	8000b1c <_close+0x18>
    return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e006      	b.n	8000b2a <_close+0x26>

  errno = EBADF;
 8000b1c:	f003 fa44 	bl	8003fa8 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2209      	movs	r2, #9
 8000b24:	601a      	str	r2, [r3, #0]
  return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b3e:	f003 fa33 	bl	8003fa8 <__errno>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2209      	movs	r2, #9
 8000b46:	601a      	str	r2, [r3, #0]
  return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d110      	bne.n	8000b88 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <_read+0x4c>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6e:	2201      	movs	r2, #1
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	f001 ff85 	bl	8002a80 <HAL_UART_Receive>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <_read+0x30>
      return 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e008      	b.n	8000b96 <_read+0x42>
    else
      return EIO;
 8000b84:	2305      	movs	r3, #5
 8000b86:	e006      	b.n	8000b96 <_read+0x42>
  }
  errno = EBADF;
 8000b88:	f003 fa0e 	bl	8003fa8 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2209      	movs	r2, #9
 8000b90:	601a      	str	r2, [r3, #0]
  return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000148 	.word	0x20000148

08000ba4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db08      	blt.n	8000bc6 <_fstat+0x22>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	dc05      	bgt.n	8000bc6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc0:	605a      	str	r2, [r3, #4]
    return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e005      	b.n	8000bd2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000bc6:	f003 f9ef 	bl	8003fa8 <__errno>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2209      	movs	r2, #9
 8000bce:	601a      	str	r2, [r3, #0]
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	; 0x60
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09e      	sub	sp, #120	; 0x78
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2254      	movs	r2, #84	; 0x54
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f985 	bl	8003f54 <memset>
  if(huart->Instance==USART2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <HAL_UART_MspInit+0xdc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d150      	bne.n	8000cf6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fb3d 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c6c:	f7ff fe74 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0xe0>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 fae1 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f000 facf 	bl	8001284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2026      	movs	r0, #38	; 0x26
 8000cec:	f000 fa15 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf0:	2026      	movs	r0, #38	; 0x26
 8000cf2:	f000 fa2e 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3778      	adds	r7, #120	; 0x78
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40021000 	.word	0x40021000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8e6 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d60:	480a      	ldr	r0, [pc, #40]	; (8000d8c <USART2_IRQHandler+0x30>)
 8000d62:	f001 ff57 	bl	8002c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8000d66:	f003 f85b 	bl	8003e20 <getchar>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <USART2_IRQHandler+0x34>)
 8000d70:	701a      	strb	r2, [r3, #0]
  putchar(ch);
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <USART2_IRQHandler+0x34>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 f8ce 	bl	8003f18 <putchar>
  enqueue(&buf,ch);
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <USART2_IRQHandler+0x34>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <USART2_IRQHandler+0x38>)
 8000d84:	f7ff fe01 	bl	800098a <enqueue>
  /* USER CODE END USART2_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000084 	.word	0x20000084
 8000d90:	2000014c 	.word	0x2000014c
 8000d94:	2000010c 	.word	0x2000010c

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f003 f8ee 	bl	8003fa8 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20010000 	.word	0x20010000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000150 	.word	0x20000150
 8000e00:	200002a8 	.word	0x200002a8

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 f8ad 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fc4d 	bl	80006f8 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e6c:	08004e94 	.word	0x08004e94
  ldr r2, =_sbss
 8000e70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e74:	200002a4 	.word	0x200002a4

08000e78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_IRQHandler>

08000e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f93d 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f80e 	bl	8000eac <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e001      	b.n	8000ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9c:	f7ff fe9e 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_InitTick+0x6c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d023      	beq.n	8000f08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_InitTick+0x70>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_InitTick+0x6c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f949 	bl	800116e <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d809      	bhi.n	8000efc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f000 f913 	bl	800111a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_InitTick+0x74>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e004      	b.n	8000f0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e001      	b.n	8000f0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000154 	.word	0x20000154

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000154 	.word	0x20000154

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff3e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff31 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d008      	beq.n	80011b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e022      	b.n	80011f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f003 021c 	and.w	r2, r3, #28
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d005      	beq.n	8001226 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e029      	b.n	800127a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 020e 	bic.w	r2, r2, #14
 8001234:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 021c 	and.w	r2, r3, #28
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
    }
  }
  return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e148      	b.n	8001526 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 813a 	beq.w	8001520 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_GPIO_Init+0x40>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 0201 	and.w	r2, r3, #1
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b03      	cmp	r3, #3
 8001330:	d017      	beq.n	8001362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0203 	and.w	r2, r3, #3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8094 	beq.w	8001520 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x2c0>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	4a51      	ldr	r2, [pc, #324]	; (8001544 <HAL_GPIO_Init+0x2c0>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6613      	str	r3, [r2, #96]	; 0x60
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x2c0>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001410:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_GPIO_Init+0x2c4>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800143a:	d00d      	beq.n	8001458 <HAL_GPIO_Init+0x1d4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a43      	ldr	r2, [pc, #268]	; (800154c <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x1d0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a42      	ldr	r2, [pc, #264]	; (8001550 <HAL_GPIO_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_Init+0x1cc>
 800144c:	2302      	movs	r3, #2
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x1d6>
 8001450:	2307      	movs	r3, #7
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x1d6>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x1d6>
 8001458:	2300      	movs	r3, #0
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146a:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2c4>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f aeaf 	bne.w	8001294 <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001574:	e002      	b.n	800157c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d130      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e0:	d038      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001608:	e002      	b.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3b01      	subs	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d102      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f2      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d110      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e00f      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d007      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 bc02 	b.w	8001e88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001684:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168e:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80e4 	beq.w	800186e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_OscConfig+0x4c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f040 808b 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 8087 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x64>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e3d9      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_RCC_OscConfig+0x7e>
 80016e4:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	e005      	b.n	80016fa <HAL_RCC_OscConfig+0x8a>
 80016ee:	4b7c      	ldr	r3, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d223      	bcs.n	8001746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd8c 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e3ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	496d      	ldr	r1, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4968      	ldr	r1, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e025      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4960      	ldr	r1, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	495b      	ldr	r1, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd4c 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e37a      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001792:	f000 fc81 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	4950      	ldr	r1, [pc, #320]	; (80018e4 <HAL_RCC_OscConfig+0x274>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb78 	bl	8000eac <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d052      	beq.n	800186c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	e35e      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d032      	beq.n	8001838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017de:	f7ff fbb5 	bl	8000f4c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e6:	f7ff fbb1 	bl	8000f4c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e347      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4930      	ldr	r1, [pc, #192]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	492b      	ldr	r1, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e01a      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb82 	bl	8000f4c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184c:	f7ff fb7e 	bl	8000f4c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e314      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1dc>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d073      	beq.n	8001962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x21c>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d063      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d15f      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e2f1      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x24c>
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e025      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d114      	bne.n	80018f0 <HAL_RCC_OscConfig+0x280>
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08004e08 	.word	0x08004e08
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a9f      	ldr	r2, [pc, #636]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fb1c 	bl	8000f4c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fb18 	bl	8000f4c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e2ae      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fb08 	bl	8000f4c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fb04 	bl	8000f4c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e29a      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d060      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x310>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d119      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x328>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e277      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4973      	ldr	r1, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e040      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fac3 	bl	8000f4c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fabf 	bl	8000f4c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e255      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	495f      	ldr	r1, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a5c      	ldr	r2, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fa9f 	bl	8000f4c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fa9b 	bl	8000f4c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e231      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff fa7a 	bl	8000f4c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fa76 	bl	8000f4c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e20c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fa5d 	bl	8000f4c <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fa59 	bl	8000f4c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1ef      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fa20 	bl	8000f4c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff fa1c 	bl	8000f4c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1b2      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e029      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_OscConfig+0x50c>
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	4b9a      	ldr	r3, [pc, #616]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a99      	ldr	r2, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8c:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a95      	ldr	r2, [pc, #596]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f9d2 	bl	8000f4c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9ce 	bl	8000f4c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e162      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ed      	beq.n	8001bac <HAL_RCC_OscConfig+0x53c>
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f9bb 	bl	8000f4c <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9b7 	bl	8000f4c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e14b      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ed      	bne.n	8001bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c24:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	4a6f      	ldr	r2, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f98a 	bl	8000f4c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff f986 	bl	8000f4c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e11c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5cc>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	4a60      	ldr	r2, [pc, #384]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f96d 	bl	8000f4c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff f969 	bl	8000f4c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0ff      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80f3 	beq.w	8001e86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 80c9 	bne.w	8001e3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001caa:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d12c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d123      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d113      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d06b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d062      	beq.n	8001de4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0ac      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2d      	ldr	r2, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3a:	f7ff f907 	bl	8000f4c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f903 	bl	8000f4c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e099      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x77c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0552      	lsls	r2, r2, #21
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0652      	lsls	r2, r2, #25
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9a:	06d2      	lsls	r2, r2, #27
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	4912      	ldr	r1, [pc, #72]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dbc:	f7ff f8c6 	bl	8000f4c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f8c2 	bl	8000f4c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e058      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de2:	e050      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e04f      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d144      	bne.n	8001e86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e14:	f7ff f89a 	bl	8000f4c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f896 	bl	8000f4c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e02c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x7ac>
 8001e3a:	e024      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d01f      	beq.n	8001e82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f87d 	bl	8000f4c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f879 	bl	8000f4c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4905      	ldr	r1, [pc, #20]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x824>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
 8001e80:	e001      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	feeefffc 	.word	0xfeeefffc

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0e7      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4970      	ldr	r1, [pc, #448]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b6e      	ldr	r3, [pc, #440]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cf      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d04c      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d121      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0a6      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e09a      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e086      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4943      	ldr	r1, [pc, #268]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f80:	f7fe ffe4 	bl	8000f4c <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7fe ffe0 	bl	8000f4c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e06e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d208      	bcs.n	8001fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	492b      	ldr	r1, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d210      	bcs.n	800200e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4923      	ldr	r1, [pc, #140]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e036      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204c:	f000 f824 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	490b      	ldr	r1, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1f4>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1fc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff1b 	bl	8000eac <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	72fb      	strb	r3, [r7, #11]

  return status;
 800207a:	7afb      	ldrb	r3, [r7, #11]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08004e08 	.word	0x08004e08
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d121      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11e      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d102      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e004      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d101      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 800211e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d134      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0xa6>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d003      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0xac>
 800213c:	e005      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002140:	617b      	str	r3, [r7, #20]
      break;
 8002142:	e005      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002146:	617b      	str	r3, [r7, #20]
      break;
 8002148:	e002      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	fb03 f202 	mul.w	r2, r3, r2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0e5b      	lsrs	r3, r3, #25
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	3301      	adds	r3, #1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002190:	69bb      	ldr	r3, [r7, #24]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004e20 	.word	0x08004e20
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	007a1200 	.word	0x007a1200

080021b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08004e18 	.word	0x08004e18

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f8:	f7ff ffda 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x28>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08004e18 	.word	0x08004e18

08002220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002238:	f7ff f9b6 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 800223c:	6178      	str	r0, [r7, #20]
 800223e:	e014      	b.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002258:	f7ff f9a6 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 800225c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d10b      	bne.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d919      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2ba0      	cmp	r3, #160	; 0xa0
 800227c:	d902      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227e:	2302      	movs	r3, #2
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e013      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e010      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d902      	bls.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002290:	2303      	movs	r3, #3
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e00a      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d102      	bne.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e004      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b70      	cmp	r3, #112	; 0x70
 80022a6:	d101      	bne.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 0207 	bic.w	r2, r3, #7
 80022b4:	4909      	ldr	r1, [pc, #36]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40022000 	.word	0x40022000

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d031      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002304:	d01a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230a:	d814      	bhi.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002314:	d10f      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4a5c      	ldr	r2, [pc, #368]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002322:	e00c      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f9de 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002334:	e003      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	74fb      	strb	r3, [r7, #19]
      break;
 800233a:	e000      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800233c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	494e      	ldr	r1, [pc, #312]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800235a:	e001      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 809e 	beq.w	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a39      	ldr	r2, [pc, #228]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fdcc 	bl	8000f4c <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b6:	e009      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe fdc8 	bl	8000f4c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d902      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	74fb      	strb	r3, [r7, #19]
        break;
 80023ca:	e005      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d15a      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01e      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d019      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	4a1f      	ldr	r2, [pc, #124]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002426:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fd88 	bl	8000f4c <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	e00b      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe fd84 	bl	8000f4c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d902      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	74fb      	strb	r3, [r7, #19]
            break;
 8002456:	e006      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ec      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002482:	e009      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
 8002488:	e006      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002498:	7c7b      	ldrb	r3, [r7, #17]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b8a      	ldr	r3, [pc, #552]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	4a89      	ldr	r2, [pc, #548]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b6:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f023 0203 	bic.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4980      	ldr	r1, [pc, #512]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f023 020c 	bic.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	4978      	ldr	r1, [pc, #480]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	496f      	ldr	r1, [pc, #444]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	4967      	ldr	r1, [pc, #412]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800253e:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	495e      	ldr	r1, [pc, #376]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	4956      	ldr	r1, [pc, #344]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d028      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4945      	ldr	r1, [pc, #276]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a3f      	ldr	r2, [pc, #252]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ce:	60d3      	str	r3, [r2, #12]
 80025d0:	e011      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025da:	d10c      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f882 	bl	80026ec <RCCEx_PLLSAI1_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d028      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	492d      	ldr	r1, [pc, #180]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002620:	d106      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262c:	60d3      	str	r3, [r2, #12]
 800262e:	e011      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002638:	d10c      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f853 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267e:	d10c      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	2102      	movs	r1, #2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f830 	bl	80026ec <RCCEx_PLLSAI1_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000

080026ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fa:	4b74      	ldr	r3, [pc, #464]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002706:	4b71      	ldr	r3, [pc, #452]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d10d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
       ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800271e:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
       ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d047      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e044      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d018      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x86>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d825      	bhi.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <RCCEx_PLLSAI1_Config+0x62>
 8002748:	2b02      	cmp	r3, #2
 800274a:	d009      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0x74>
 800274c:	e020      	b.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e01a      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002760:	4b5a      	ldr	r3, [pc, #360]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e013      	b.n	800279a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002772:	4b56      	ldr	r3, [pc, #344]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278e:	e006      	b.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e004      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279e:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	430b      	orrs	r3, r1
 80027bc:	4943      	ldr	r1, [pc, #268]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d17c      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027c8:	4b40      	ldr	r3, [pc, #256]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3f      	ldr	r2, [pc, #252]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe fbba 	bl	8000f4c <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027dc:	f7fe fbb6 	bl	8000f4c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
        break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ef      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d15f      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d110      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	0211      	lsls	r1, r2, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	06d2      	lsls	r2, r2, #27
 8002820:	430a      	orrs	r2, r1
 8002822:	492a      	ldr	r1, [pc, #168]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	610b      	str	r3, [r1, #16]
 8002828:	e027      	b.n	800287a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d112      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	0211      	lsls	r1, r2, #8
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	0852      	lsrs	r2, r2, #1
 8002848:	3a01      	subs	r2, #1
 800284a:	0552      	lsls	r2, r2, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	491f      	ldr	r1, [pc, #124]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
 8002854:	e011      	b.n	800287a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800285e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	0211      	lsls	r1, r2, #8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6952      	ldr	r2, [r2, #20]
 800286c:	0852      	lsrs	r2, r2, #1
 800286e:	3a01      	subs	r2, #1
 8002870:	0652      	lsls	r2, r2, #25
 8002872:	430a      	orrs	r2, r1
 8002874:	4915      	ldr	r1, [pc, #84]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002884:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fb61 	bl	8000f4c <HAL_GetTick>
 800288a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288c:	e009      	b.n	80028a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800288e:	f7fe fb5d 	bl	8000f4c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	73fb      	strb	r3, [r7, #15]
          break;
 80028a0:	e005      	b.n	80028ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e040      	b.n	8002964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe f996 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 feb2 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fc83 	bl	8003228 <UART_SetConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01b      	b.n	8002964 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 ff31 	bl	80037c4 <UART_CheckIdleState>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002980:	2b20      	cmp	r3, #32
 8002982:	d178      	bne.n	8002a76 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_UART_Transmit+0x24>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e071      	b.n	8002a78 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2221      	movs	r2, #33	; 0x21
 80029a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe fad3 	bl	8000f4c <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x68>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029dc:	e030      	b.n	8002a40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 ff93 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e03c      	b.n	8002a78 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	b292      	uxth	r2, r2
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3302      	adds	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e008      	b.n	8002a2e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1c8      	bne.n	80029de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 ff5c 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e005      	b.n	8002a78 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 80b6 	bne.w	8002c08 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Receive+0x28>
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0ae      	b.n	8002c0a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2222      	movs	r2, #34	; 0x22
 8002ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ac2:	f7fe fa43 	bl	8000f4c <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae0:	d10e      	bne.n	8002b00 <HAL_UART_Receive+0x80>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_UART_Receive+0x76>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af4:	e02d      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002afe:	e028      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_UART_Receive+0xa4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_UART_Receive+0x9a>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b18:	e01b      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	227f      	movs	r2, #127	; 0x7f
 8002b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b22:	e016      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d10d      	bne.n	8002b4a <HAL_UART_Receive+0xca>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <HAL_UART_Receive+0xc0>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	227f      	movs	r2, #127	; 0x7f
 8002b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b3e:	e008      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b48:	e003      	b.n	8002b52 <HAL_UART_Receive+0xd2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b58:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	d108      	bne.n	8002b76 <HAL_UART_Receive+0xf6>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e003      	b.n	8002b7e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b7e:	e037      	b.n	8002bf0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2120      	movs	r1, #32
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fec2 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e033      	b.n	8002c0a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	8a7b      	ldrh	r3, [r7, #18]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e00d      	b.n	8002bde <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8a7b      	ldrh	r3, [r7, #18]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1c1      	bne.n	8002b80 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0ba      	sub	sp, #232	; 0xe8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c42:	4013      	ands	r3, r2
 8002c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00f      	beq.n	8002c7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 82ae 	beq.w	80031ce <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
      }
      return;
 8002c7a:	e2a8      	b.n	80031ce <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8117 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c96:	4b85      	ldr	r3, [pc, #532]	; (8002eac <HAL_UART_IRQHandler+0x298>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 810a 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d011      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xbc>
 8002cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d011      	beq.n	8002d00 <HAL_UART_IRQHandler+0xec>
 8002cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2202      	movs	r2, #2
 8002cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	f043 0204 	orr.w	r2, r3, #4
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d011      	beq.n	8002d30 <HAL_UART_IRQHandler+0x11c>
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d62:	f043 0208 	orr.w	r2, r3, #8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d012      	beq.n	8002d9e <HAL_UART_IRQHandler+0x18a>
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00c      	beq.n	8002d9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8214 	beq.w	80031d2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d005      	beq.n	8002df6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04f      	beq.n	8002e96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fdf3 	bl	80039e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d141      	bne.n	8002e8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3308      	adds	r3, #8
 8002e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1d9      	bne.n	8002e0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d013      	beq.n	8002e86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_UART_IRQHandler+0x29c>)
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f9c9 	bl	8001202 <HAL_DMA_Abort_IT>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e80:	4610      	mov	r0, r2
 8002e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	e00f      	b.n	8002ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f9b8 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	e00b      	b.n	8002ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9b4 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e007      	b.n	8002ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b0 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ea4:	e195      	b.n	80031d2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	bf00      	nop
    return;
 8002ea8:	e193      	b.n	80031d2 <HAL_UART_IRQHandler+0x5be>
 8002eaa:	bf00      	nop
 8002eac:	04000120 	.word	0x04000120
 8002eb0:	08003aab 	.word	0x08003aab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 814e 	bne.w	800315a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8147 	beq.w	800315a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8140 	beq.w	800315a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	f040 80b8 	bne.w	8003062 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002efe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8167 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f12:	429a      	cmp	r2, r3
 8002f14:	f080 815f 	bcs.w	80031d6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 8086 	bne.w	8003040 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1da      	bne.n	8002f34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e1      	bne.n	8002f7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	f023 0310 	bic.w	r3, r3, #16
 8003014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003022:	65bb      	str	r3, [r7, #88]	; 0x58
 8003024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f8a3 	bl	8001186 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003052:	b29b      	uxth	r3, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8d8 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003060:	e0b9      	b.n	80031d6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800306e:	b29b      	uxth	r3, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80ab 	beq.w	80031da <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a6 	beq.w	80031da <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
 80030b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e4      	bne.n	800308e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	623b      	str	r3, [r7, #32]
   return(result);
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3308      	adds	r3, #8
 80030e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030e8:	633a      	str	r2, [r7, #48]	; 0x30
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e3      	bne.n	80030c4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	60fb      	str	r3, [r7, #12]
   return(result);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	617b      	str	r3, [r7, #20]
   return(result);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e4      	bne.n	8003110 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f85c 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003158:	e03f      	b.n	80031da <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <HAL_UART_IRQHandler+0x570>
 8003166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800317a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fcd4 	bl	8003b2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003182:	e02d      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
    }
    return;
 80031ac:	e017      	b.n	80031de <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fc85 	bl	8003ad6 <UART_EndTransmit_IT>
    return;
 80031cc:	e008      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80031ce:	bf00      	nop
 80031d0:	e006      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80031d2:	bf00      	nop
 80031d4:	e004      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80031de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031e0:	37e8      	adds	r7, #232	; 0xe8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4bb4      	ldr	r3, [pc, #720]	; (8003528 <UART_SetConfig+0x300>)
 8003258:	4013      	ands	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4aa9      	ldr	r2, [pc, #676]	; (800352c <UART_SetConfig+0x304>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	4313      	orrs	r3, r2
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4aa0      	ldr	r2, [pc, #640]	; (8003530 <UART_SetConfig+0x308>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d126      	bne.n	8003300 <UART_SetConfig+0xd8>
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <UART_SetConfig+0x30c>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0xd0>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <UART_SetConfig+0xa0>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032e9 	.word	0x080032e9
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032f1 	.word	0x080032f1
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e080      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e07c      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e078      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e074      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e070      	b.n	80033e2 <UART_SetConfig+0x1ba>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a8c      	ldr	r2, [pc, #560]	; (8003538 <UART_SetConfig+0x310>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d138      	bne.n	800337c <UART_SetConfig+0x154>
 800330a:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <UART_SetConfig+0x30c>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d82d      	bhi.n	8003374 <UART_SetConfig+0x14c>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0xf8>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003355 	.word	0x08003355
 8003324:	08003375 	.word	0x08003375
 8003328:	08003375 	.word	0x08003375
 800332c:	08003375 	.word	0x08003375
 8003330:	08003365 	.word	0x08003365
 8003334:	08003375 	.word	0x08003375
 8003338:	08003375 	.word	0x08003375
 800333c:	08003375 	.word	0x08003375
 8003340:	0800335d 	.word	0x0800335d
 8003344:	08003375 	.word	0x08003375
 8003348:	08003375 	.word	0x08003375
 800334c:	08003375 	.word	0x08003375
 8003350:	0800336d 	.word	0x0800336d
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e042      	b.n	80033e2 <UART_SetConfig+0x1ba>
 800335c:	2302      	movs	r3, #2
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003362:	e03e      	b.n	80033e2 <UART_SetConfig+0x1ba>
 8003364:	2304      	movs	r3, #4
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336a:	e03a      	b.n	80033e2 <UART_SetConfig+0x1ba>
 800336c:	2308      	movs	r3, #8
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e036      	b.n	80033e2 <UART_SetConfig+0x1ba>
 8003374:	2310      	movs	r3, #16
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337a:	e032      	b.n	80033e2 <UART_SetConfig+0x1ba>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6a      	ldr	r2, [pc, #424]	; (800352c <UART_SetConfig+0x304>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d12a      	bne.n	80033dc <UART_SetConfig+0x1b4>
 8003386:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <UART_SetConfig+0x30c>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003394:	d01a      	beq.n	80033cc <UART_SetConfig+0x1a4>
 8003396:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800339a:	d81b      	bhi.n	80033d4 <UART_SetConfig+0x1ac>
 800339c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a0:	d00c      	beq.n	80033bc <UART_SetConfig+0x194>
 80033a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a6:	d815      	bhi.n	80033d4 <UART_SetConfig+0x1ac>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <UART_SetConfig+0x18c>
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d008      	beq.n	80033c4 <UART_SetConfig+0x19c>
 80033b2:	e00f      	b.n	80033d4 <UART_SetConfig+0x1ac>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e012      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80033bc:	2302      	movs	r3, #2
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e00e      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80033c4:	2304      	movs	r3, #4
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e00a      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80033cc:	2308      	movs	r3, #8
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e006      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80033d4:	2310      	movs	r3, #16
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033da:	e002      	b.n	80033e2 <UART_SetConfig+0x1ba>
 80033dc:	2310      	movs	r3, #16
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a51      	ldr	r2, [pc, #324]	; (800352c <UART_SetConfig+0x304>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d17a      	bne.n	80034e2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d824      	bhi.n	800343e <UART_SetConfig+0x216>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0x1d4>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003421 	.word	0x08003421
 8003400:	0800343f 	.word	0x0800343f
 8003404:	08003429 	.word	0x08003429
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800342f 	.word	0x0800342f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	0800343f 	.word	0x0800343f
 8003418:	0800343f 	.word	0x0800343f
 800341c:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fed2 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b44      	ldr	r3, [pc, #272]	; (800353c <UART_SetConfig+0x314>)
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fe33 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003432:	61f8      	str	r0, [r7, #28]
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8107 	beq.w	8003660 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	429a      	cmp	r2, r3
 8003460:	d305      	bcc.n	800346e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	429a      	cmp	r2, r3
 800346c:	d903      	bls.n	8003476 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003474:	e0f4      	b.n	8003660 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2200      	movs	r2, #0
 800347a:	461c      	mov	r4, r3
 800347c:	4615      	mov	r5, r2
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	022b      	lsls	r3, r5, #8
 8003488:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800348c:	0222      	lsls	r2, r4, #8
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	6849      	ldr	r1, [r1, #4]
 8003492:	0849      	lsrs	r1, r1, #1
 8003494:	2000      	movs	r0, #0
 8003496:	4688      	mov	r8, r1
 8003498:	4681      	mov	r9, r0
 800349a:	eb12 0a08 	adds.w	sl, r2, r8
 800349e:	eb43 0b09 	adc.w	fp, r3, r9
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034b0:	4650      	mov	r0, sl
 80034b2:	4659      	mov	r1, fp
 80034b4:	f7fc fedc 	bl	8000270 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c6:	d308      	bcc.n	80034da <UART_SetConfig+0x2b2>
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d204      	bcs.n	80034da <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	e0c2      	b.n	8003660 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034e0:	e0be      	b.n	8003660 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d16a      	bne.n	80035c2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d834      	bhi.n	800355e <UART_SetConfig+0x336>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x2d4>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003541 	.word	0x08003541
 8003504:	08003549 	.word	0x08003549
 8003508:	0800355f 	.word	0x0800355f
 800350c:	0800354f 	.word	0x0800354f
 8003510:	0800355f 	.word	0x0800355f
 8003514:	0800355f 	.word	0x0800355f
 8003518:	0800355f 	.word	0x0800355f
 800351c:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fe52 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003524:	61f8      	str	r0, [r7, #28]
        break;
 8003526:	e020      	b.n	800356a <UART_SetConfig+0x342>
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40008000 	.word	0x40008000
 8003530:	40013800 	.word	0x40013800
 8003534:	40021000 	.word	0x40021000
 8003538:	40004400 	.word	0x40004400
 800353c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003540:	f7fe fe58 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003544:	61f8      	str	r0, [r7, #28]
        break;
 8003546:	e010      	b.n	800356a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <UART_SetConfig+0x454>)
 800354a:	61fb      	str	r3, [r7, #28]
        break;
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe fda3 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003552:	61f8      	str	r0, [r7, #28]
        break;
 8003554:	e009      	b.n	800356a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	61fb      	str	r3, [r7, #28]
        break;
 800355c:	e005      	b.n	800356a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d077      	beq.n	8003660 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	441a      	add	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d916      	bls.n	80035ba <UART_SetConfig+0x392>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d212      	bcs.n	80035ba <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f023 030f 	bic.w	r3, r3, #15
 800359c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	8afa      	ldrh	r2, [r7, #22]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	e052      	b.n	8003660 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035c0:	e04e      	b.n	8003660 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d827      	bhi.n	800361a <UART_SetConfig+0x3f2>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <UART_SetConfig+0x3a8>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	0800361b 	.word	0x0800361b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800361b 	.word	0x0800361b
 80035e8:	0800361b 	.word	0x0800361b
 80035ec:	0800361b 	.word	0x0800361b
 80035f0:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7fe fde8 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61f8      	str	r0, [r7, #28]
        break;
 80035fa:	e014      	b.n	8003626 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe fdfa 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003600:	61f8      	str	r0, [r7, #28]
        break;
 8003602:	e010      	b.n	8003626 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <UART_SetConfig+0x454>)
 8003606:	61fb      	str	r3, [r7, #28]
        break;
 8003608:	e00d      	b.n	8003626 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7fe fd45 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800360e:	61f8      	str	r0, [r7, #28]
        break;
 8003610:	e009      	b.n	8003626 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003616:	61fb      	str	r3, [r7, #28]
        break;
 8003618:	e005      	b.n	8003626 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003624:	bf00      	nop
    }

    if (pclk != 0U)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d019      	beq.n	8003660 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	085a      	lsrs	r2, r3, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d909      	bls.n	800365a <UART_SetConfig+0x432>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d205      	bcs.n	800365a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	e002      	b.n	8003660 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800366c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	00f42400 	.word	0x00f42400

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377e:	d10a      	bne.n	8003796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b098      	sub	sp, #96	; 0x60
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d4:	f7fd fbba 	bl	8000f4c <HAL_GetTick>
 80037d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d12e      	bne.n	8003846 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f88c 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d021      	beq.n	8003846 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
 8003822:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e062      	b.n	800390c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d149      	bne.n	80038e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385c:	2200      	movs	r2, #0
 800385e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f856 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d03c      	beq.n	80038e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	623b      	str	r3, [r7, #32]
   return(result);
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	633b      	str	r3, [r7, #48]	; 0x30
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e6      	bne.n	800386e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3308      	adds	r3, #8
 80038be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c0:	61fa      	str	r2, [r7, #28]
 80038c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	617b      	str	r3, [r7, #20]
   return(result);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e5      	bne.n	80038a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e011      	b.n	800390c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3758      	adds	r7, #88	; 0x58
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003924:	e049      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392c:	d045      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fd fb0d 	bl	8000f4c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <UART_WaitOnFlagUntilTimeout+0x30>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e048      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d031      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d110      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2208      	movs	r2, #8
 800396a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f838 	bl	80039e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2208      	movs	r2, #8
 8003976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e029      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003994:	d111      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800399e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f81e 	bl	80039e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e00f      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d0a6      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b095      	sub	sp, #84	; 0x54
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d118      	bne.n	8003a8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f023 0310 	bic.w	r3, r3, #16
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	613b      	str	r3, [r7, #16]
   return(result);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a9e:	bf00      	nop
 8003aa0:	3754      	adds	r7, #84	; 0x54
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fb97 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b088      	sub	sp, #32
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e6      	bne.n	8003ade <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fb63 	bl	80031e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b22:	bf00      	nop
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <setvbuf>:
 8003b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b44:	461d      	mov	r5, r3
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <setvbuf+0x158>)
 8003b48:	681f      	ldr	r7, [r3, #0]
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	460e      	mov	r6, r1
 8003b4e:	4690      	mov	r8, r2
 8003b50:	b127      	cbz	r7, 8003b5c <setvbuf+0x1c>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	b913      	cbnz	r3, 8003b5c <setvbuf+0x1c>
 8003b56:	4638      	mov	r0, r7
 8003b58:	f000 f92c 	bl	8003db4 <__sinit>
 8003b5c:	f1b8 0f02 	cmp.w	r8, #2
 8003b60:	d006      	beq.n	8003b70 <setvbuf+0x30>
 8003b62:	f1b8 0f01 	cmp.w	r8, #1
 8003b66:	f200 8094 	bhi.w	8003c92 <setvbuf+0x152>
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	f2c0 8091 	blt.w	8003c92 <setvbuf+0x152>
 8003b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b72:	07da      	lsls	r2, r3, #31
 8003b74:	d405      	bmi.n	8003b82 <setvbuf+0x42>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	059b      	lsls	r3, r3, #22
 8003b7a:	d402      	bmi.n	8003b82 <setvbuf+0x42>
 8003b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b7e:	f000 fa3e 	bl	8003ffe <__retarget_lock_acquire_recursive>
 8003b82:	4621      	mov	r1, r4
 8003b84:	4638      	mov	r0, r7
 8003b86:	f000 fe8b 	bl	80048a0 <_fflush_r>
 8003b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b8c:	b141      	cbz	r1, 8003ba0 <setvbuf+0x60>
 8003b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b92:	4299      	cmp	r1, r3
 8003b94:	d002      	beq.n	8003b9c <setvbuf+0x5c>
 8003b96:	4638      	mov	r0, r7
 8003b98:	f000 fa34 	bl	8004004 <_free_r>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6363      	str	r3, [r4, #52]	; 0x34
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61a3      	str	r3, [r4, #24]
 8003ba4:	6063      	str	r3, [r4, #4]
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	0618      	lsls	r0, r3, #24
 8003baa:	d503      	bpl.n	8003bb4 <setvbuf+0x74>
 8003bac:	6921      	ldr	r1, [r4, #16]
 8003bae:	4638      	mov	r0, r7
 8003bb0:	f000 fa28 	bl	8004004 <_free_r>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	f1b8 0f02 	cmp.w	r8, #2
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	d05f      	beq.n	8003c86 <setvbuf+0x146>
 8003bc6:	ab01      	add	r3, sp, #4
 8003bc8:	466a      	mov	r2, sp
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f000 f92f 	bl	8003e30 <__swhatbuf_r>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	4318      	orrs	r0, r3
 8003bd6:	81a0      	strh	r0, [r4, #12]
 8003bd8:	bb2d      	cbnz	r5, 8003c26 <setvbuf+0xe6>
 8003bda:	9d00      	ldr	r5, [sp, #0]
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f000 fba1 	bl	8004324 <malloc>
 8003be2:	4606      	mov	r6, r0
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d150      	bne.n	8003c8a <setvbuf+0x14a>
 8003be8:	f8dd 9000 	ldr.w	r9, [sp]
 8003bec:	45a9      	cmp	r9, r5
 8003bee:	d13e      	bne.n	8003c6e <setvbuf+0x12e>
 8003bf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	60a2      	str	r2, [r4, #8]
 8003bf8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003bfc:	6022      	str	r2, [r4, #0]
 8003bfe:	6122      	str	r2, [r4, #16]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c06:	6162      	str	r2, [r4, #20]
 8003c08:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c0a:	f043 0302 	orr.w	r3, r3, #2
 8003c0e:	07d1      	lsls	r1, r2, #31
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	d404      	bmi.n	8003c1e <setvbuf+0xde>
 8003c14:	059b      	lsls	r3, r3, #22
 8003c16:	d402      	bmi.n	8003c1e <setvbuf+0xde>
 8003c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c1a:	f000 f9f1 	bl	8004000 <__retarget_lock_release_recursive>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	b003      	add	sp, #12
 8003c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	d0d8      	beq.n	8003bdc <setvbuf+0x9c>
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	b913      	cbnz	r3, 8003c34 <setvbuf+0xf4>
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f000 f8c0 	bl	8003db4 <__sinit>
 8003c34:	f1b8 0f01 	cmp.w	r8, #1
 8003c38:	bf08      	it	eq
 8003c3a:	89a3      	ldrheq	r3, [r4, #12]
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	bf04      	itt	eq
 8003c40:	f043 0301 	orreq.w	r3, r3, #1
 8003c44:	81a3      	strheq	r3, [r4, #12]
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f013 0208 	ands.w	r2, r3, #8
 8003c4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003c50:	d01d      	beq.n	8003c8e <setvbuf+0x14e>
 8003c52:	07da      	lsls	r2, r3, #31
 8003c54:	bf41      	itttt	mi
 8003c56:	2200      	movmi	r2, #0
 8003c58:	426d      	negmi	r5, r5
 8003c5a:	60a2      	strmi	r2, [r4, #8]
 8003c5c:	61a5      	strmi	r5, [r4, #24]
 8003c5e:	bf58      	it	pl
 8003c60:	60a5      	strpl	r5, [r4, #8]
 8003c62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003c64:	f015 0501 	ands.w	r5, r5, #1
 8003c68:	d0d4      	beq.n	8003c14 <setvbuf+0xd4>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	e7d7      	b.n	8003c1e <setvbuf+0xde>
 8003c6e:	4648      	mov	r0, r9
 8003c70:	f000 fb58 	bl	8004324 <malloc>
 8003c74:	4606      	mov	r6, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d0ba      	beq.n	8003bf0 <setvbuf+0xb0>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	464d      	mov	r5, r9
 8003c84:	e7d1      	b.n	8003c2a <setvbuf+0xea>
 8003c86:	2500      	movs	r5, #0
 8003c88:	e7b4      	b.n	8003bf4 <setvbuf+0xb4>
 8003c8a:	46a9      	mov	r9, r5
 8003c8c:	e7f5      	b.n	8003c7a <setvbuf+0x13a>
 8003c8e:	60a2      	str	r2, [r4, #8]
 8003c90:	e7e7      	b.n	8003c62 <setvbuf+0x122>
 8003c92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c96:	e7c2      	b.n	8003c1e <setvbuf+0xde>
 8003c98:	20000064 	.word	0x20000064

08003c9c <std>:
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003caa:	6083      	str	r3, [r0, #8]
 8003cac:	8181      	strh	r1, [r0, #12]
 8003cae:	6643      	str	r3, [r0, #100]	; 0x64
 8003cb0:	81c2      	strh	r2, [r0, #14]
 8003cb2:	6183      	str	r3, [r0, #24]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	305c      	adds	r0, #92	; 0x5c
 8003cba:	f000 f94b 	bl	8003f54 <memset>
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <std+0x58>)
 8003cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x5c>)
 8003cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <std+0x60>)
 8003cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <std+0x64>)
 8003ccc:	6323      	str	r3, [r4, #48]	; 0x30
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <std+0x68>)
 8003cd0:	6224      	str	r4, [r4, #32]
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d006      	beq.n	8003ce4 <std+0x48>
 8003cd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cda:	4294      	cmp	r4, r2
 8003cdc:	d002      	beq.n	8003ce4 <std+0x48>
 8003cde:	33d0      	adds	r3, #208	; 0xd0
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d105      	bne.n	8003cf0 <std+0x54>
 8003ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f000 b986 	b.w	8003ffc <__retarget_lock_init_recursive>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08004909 	.word	0x08004909
 8003cf8:	0800492b 	.word	0x0800492b
 8003cfc:	08004963 	.word	0x08004963
 8003d00:	08004987 	.word	0x08004987
 8003d04:	20000158 	.word	0x20000158

08003d08 <stdio_exit_handler>:
 8003d08:	4a02      	ldr	r2, [pc, #8]	; (8003d14 <stdio_exit_handler+0xc>)
 8003d0a:	4903      	ldr	r1, [pc, #12]	; (8003d18 <stdio_exit_handler+0x10>)
 8003d0c:	4803      	ldr	r0, [pc, #12]	; (8003d1c <stdio_exit_handler+0x14>)
 8003d0e:	f000 b869 	b.w	8003de4 <_fwalk_sglue>
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c
 8003d18:	080048a1 	.word	0x080048a1
 8003d1c:	20000018 	.word	0x20000018

08003d20 <cleanup_stdio>:
 8003d20:	6841      	ldr	r1, [r0, #4]
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <cleanup_stdio+0x34>)
 8003d24:	4299      	cmp	r1, r3
 8003d26:	b510      	push	{r4, lr}
 8003d28:	4604      	mov	r4, r0
 8003d2a:	d001      	beq.n	8003d30 <cleanup_stdio+0x10>
 8003d2c:	f000 fdb8 	bl	80048a0 <_fflush_r>
 8003d30:	68a1      	ldr	r1, [r4, #8]
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <cleanup_stdio+0x38>)
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <cleanup_stdio+0x1e>
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fdb1 	bl	80048a0 <_fflush_r>
 8003d3e:	68e1      	ldr	r1, [r4, #12]
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <cleanup_stdio+0x3c>)
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d004      	beq.n	8003d50 <cleanup_stdio+0x30>
 8003d46:	4620      	mov	r0, r4
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f000 bda8 	b.w	80048a0 <_fflush_r>
 8003d50:	bd10      	pop	{r4, pc}
 8003d52:	bf00      	nop
 8003d54:	20000158 	.word	0x20000158
 8003d58:	200001c0 	.word	0x200001c0
 8003d5c:	20000228 	.word	0x20000228

08003d60 <global_stdio_init.part.0>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <global_stdio_init.part.0+0x30>)
 8003d64:	4c0b      	ldr	r4, [pc, #44]	; (8003d94 <global_stdio_init.part.0+0x34>)
 8003d66:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <global_stdio_init.part.0+0x38>)
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2104      	movs	r1, #4
 8003d70:	f7ff ff94 	bl	8003c9c <std>
 8003d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2109      	movs	r1, #9
 8003d7c:	f7ff ff8e 	bl	8003c9c <std>
 8003d80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d84:	2202      	movs	r2, #2
 8003d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8a:	2112      	movs	r1, #18
 8003d8c:	f7ff bf86 	b.w	8003c9c <std>
 8003d90:	20000290 	.word	0x20000290
 8003d94:	20000158 	.word	0x20000158
 8003d98:	08003d09 	.word	0x08003d09

08003d9c <__sfp_lock_acquire>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sfp_lock_acquire+0x8>)
 8003d9e:	f000 b92e 	b.w	8003ffe <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000295 	.word	0x20000295

08003da8 <__sfp_lock_release>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__sfp_lock_release+0x8>)
 8003daa:	f000 b929 	b.w	8004000 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	20000295 	.word	0x20000295

08003db4 <__sinit>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4604      	mov	r4, r0
 8003db8:	f7ff fff0 	bl	8003d9c <__sfp_lock_acquire>
 8003dbc:	6a23      	ldr	r3, [r4, #32]
 8003dbe:	b11b      	cbz	r3, 8003dc8 <__sinit+0x14>
 8003dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc4:	f7ff bff0 	b.w	8003da8 <__sfp_lock_release>
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__sinit+0x28>)
 8003dca:	6223      	str	r3, [r4, #32]
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__sinit+0x2c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f5      	bne.n	8003dc0 <__sinit+0xc>
 8003dd4:	f7ff ffc4 	bl	8003d60 <global_stdio_init.part.0>
 8003dd8:	e7f2      	b.n	8003dc0 <__sinit+0xc>
 8003dda:	bf00      	nop
 8003ddc:	08003d21 	.word	0x08003d21
 8003de0:	20000290 	.word	0x20000290

08003de4 <_fwalk_sglue>:
 8003de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de8:	4607      	mov	r7, r0
 8003dea:	4688      	mov	r8, r1
 8003dec:	4614      	mov	r4, r2
 8003dee:	2600      	movs	r6, #0
 8003df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df4:	f1b9 0901 	subs.w	r9, r9, #1
 8003df8:	d505      	bpl.n	8003e06 <_fwalk_sglue+0x22>
 8003dfa:	6824      	ldr	r4, [r4, #0]
 8003dfc:	2c00      	cmp	r4, #0
 8003dfe:	d1f7      	bne.n	8003df0 <_fwalk_sglue+0xc>
 8003e00:	4630      	mov	r0, r6
 8003e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d907      	bls.n	8003e1c <_fwalk_sglue+0x38>
 8003e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e10:	3301      	adds	r3, #1
 8003e12:	d003      	beq.n	8003e1c <_fwalk_sglue+0x38>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c0      	blx	r8
 8003e1a:	4306      	orrs	r6, r0
 8003e1c:	3568      	adds	r5, #104	; 0x68
 8003e1e:	e7e9      	b.n	8003df4 <_fwalk_sglue+0x10>

08003e20 <getchar>:
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <getchar+0xc>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	6841      	ldr	r1, [r0, #4]
 8003e26:	f000 bdb2 	b.w	800498e <_getc_r>
 8003e2a:	bf00      	nop
 8003e2c:	20000064 	.word	0x20000064

08003e30 <__swhatbuf_r>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	460c      	mov	r4, r1
 8003e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e38:	2900      	cmp	r1, #0
 8003e3a:	b096      	sub	sp, #88	; 0x58
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	461e      	mov	r6, r3
 8003e40:	da0d      	bge.n	8003e5e <__swhatbuf_r+0x2e>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003e52:	2340      	movne	r3, #64	; 0x40
 8003e54:	2000      	movs	r0, #0
 8003e56:	6031      	str	r1, [r6, #0]
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	b016      	add	sp, #88	; 0x58
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
 8003e5e:	466a      	mov	r2, sp
 8003e60:	f000 f880 	bl	8003f64 <_fstat_r>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	dbec      	blt.n	8003e42 <__swhatbuf_r+0x12>
 8003e68:	9901      	ldr	r1, [sp, #4]
 8003e6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003e6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003e72:	4259      	negs	r1, r3
 8003e74:	4159      	adcs	r1, r3
 8003e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7a:	e7eb      	b.n	8003e54 <__swhatbuf_r+0x24>

08003e7c <__smakebuf_r>:
 8003e7c:	898b      	ldrh	r3, [r1, #12]
 8003e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e80:	079d      	lsls	r5, r3, #30
 8003e82:	4606      	mov	r6, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	d507      	bpl.n	8003e98 <__smakebuf_r+0x1c>
 8003e88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	6123      	str	r3, [r4, #16]
 8003e90:	2301      	movs	r3, #1
 8003e92:	6163      	str	r3, [r4, #20]
 8003e94:	b002      	add	sp, #8
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	ab01      	add	r3, sp, #4
 8003e9a:	466a      	mov	r2, sp
 8003e9c:	f7ff ffc8 	bl	8003e30 <__swhatbuf_r>
 8003ea0:	9900      	ldr	r1, [sp, #0]
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f000 fa65 	bl	8004374 <_malloc_r>
 8003eaa:	b948      	cbnz	r0, 8003ec0 <__smakebuf_r+0x44>
 8003eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb0:	059a      	lsls	r2, r3, #22
 8003eb2:	d4ef      	bmi.n	8003e94 <__smakebuf_r+0x18>
 8003eb4:	f023 0303 	bic.w	r3, r3, #3
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	e7e3      	b.n	8003e88 <__smakebuf_r+0xc>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	6020      	str	r0, [r4, #0]
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	9b00      	ldr	r3, [sp, #0]
 8003ecc:	6163      	str	r3, [r4, #20]
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	6120      	str	r0, [r4, #16]
 8003ed2:	b15b      	cbz	r3, 8003eec <__smakebuf_r+0x70>
 8003ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f000 f855 	bl	8003f88 <_isatty_r>
 8003ede:	b128      	cbz	r0, 8003eec <__smakebuf_r+0x70>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	431d      	orrs	r5, r3
 8003ef0:	81a5      	strh	r5, [r4, #12]
 8003ef2:	e7cf      	b.n	8003e94 <__smakebuf_r+0x18>

08003ef4 <iprintf>:
 8003ef4:	b40f      	push	{r0, r1, r2, r3}
 8003ef6:	b507      	push	{r0, r1, r2, lr}
 8003ef8:	4906      	ldr	r1, [pc, #24]	; (8003f14 <iprintf+0x20>)
 8003efa:	ab04      	add	r3, sp, #16
 8003efc:	6808      	ldr	r0, [r1, #0]
 8003efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f02:	6881      	ldr	r1, [r0, #8]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	f000 f8f3 	bl	80040f0 <_vfiprintf_r>
 8003f0a:	b003      	add	sp, #12
 8003f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f10:	b004      	add	sp, #16
 8003f12:	4770      	bx	lr
 8003f14:	20000064 	.word	0x20000064

08003f18 <putchar>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <putchar+0xc>)
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	6882      	ldr	r2, [r0, #8]
 8003f20:	f000 bdf6 	b.w	8004b10 <_putc_r>
 8003f24:	20000064 	.word	0x20000064

08003f28 <strstr>:
 8003f28:	780a      	ldrb	r2, [r1, #0]
 8003f2a:	b570      	push	{r4, r5, r6, lr}
 8003f2c:	b96a      	cbnz	r2, 8003f4a <strstr+0x22>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d109      	bne.n	8003f48 <strstr+0x20>
 8003f34:	460c      	mov	r4, r1
 8003f36:	4605      	mov	r5, r0
 8003f38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f6      	beq.n	8003f2e <strstr+0x6>
 8003f40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f44:	429e      	cmp	r6, r3
 8003f46:	d0f7      	beq.n	8003f38 <strstr+0x10>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	7803      	ldrb	r3, [r0, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ef      	bne.n	8003f30 <strstr+0x8>
 8003f50:	4618      	mov	r0, r3
 8003f52:	e7ec      	b.n	8003f2e <strstr+0x6>

08003f54 <memset>:
 8003f54:	4402      	add	r2, r0
 8003f56:	4603      	mov	r3, r0
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <_fstat_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	; (8003f84 <_fstat_r+0x20>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	f7fc fe17 	bl	8000ba4 <_fstat>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	d102      	bne.n	8003f80 <_fstat_r+0x1c>
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	b103      	cbz	r3, 8003f80 <_fstat_r+0x1c>
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
 8003f82:	bf00      	nop
 8003f84:	200002a0 	.word	0x200002a0

08003f88 <_isatty_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d06      	ldr	r5, [pc, #24]	; (8003fa4 <_isatty_r+0x1c>)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	f7fc fd74 	bl	8000a80 <_isatty>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_isatty_r+0x1a>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_isatty_r+0x1a>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200002a0 	.word	0x200002a0

08003fa8 <__errno>:
 8003fa8:	4b01      	ldr	r3, [pc, #4]	; (8003fb0 <__errno+0x8>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000064 	.word	0x20000064

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	; (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	; (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 feca 	bl	8004d60 <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004e8c 	.word	0x08004e8c
 8003ff0:	08004e8c 	.word	0x08004e8c
 8003ff4:	08004e8c 	.word	0x08004e8c
 8003ff8:	08004e90 	.word	0x08004e90

08003ffc <__retarget_lock_init_recursive>:
 8003ffc:	4770      	bx	lr

08003ffe <__retarget_lock_acquire_recursive>:
 8003ffe:	4770      	bx	lr

08004000 <__retarget_lock_release_recursive>:
 8004000:	4770      	bx	lr
	...

08004004 <_free_r>:
 8004004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004006:	2900      	cmp	r1, #0
 8004008:	d044      	beq.n	8004094 <_free_r+0x90>
 800400a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400e:	9001      	str	r0, [sp, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f1a1 0404 	sub.w	r4, r1, #4
 8004016:	bfb8      	it	lt
 8004018:	18e4      	addlt	r4, r4, r3
 800401a:	f000 fc69 	bl	80048f0 <__malloc_lock>
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <_free_r+0x94>)
 8004020:	9801      	ldr	r0, [sp, #4]
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	b933      	cbnz	r3, 8004034 <_free_r+0x30>
 8004026:	6063      	str	r3, [r4, #4]
 8004028:	6014      	str	r4, [r2, #0]
 800402a:	b003      	add	sp, #12
 800402c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004030:	f000 bc64 	b.w	80048fc <__malloc_unlock>
 8004034:	42a3      	cmp	r3, r4
 8004036:	d908      	bls.n	800404a <_free_r+0x46>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	1961      	adds	r1, r4, r5
 800403c:	428b      	cmp	r3, r1
 800403e:	bf01      	itttt	eq
 8004040:	6819      	ldreq	r1, [r3, #0]
 8004042:	685b      	ldreq	r3, [r3, #4]
 8004044:	1949      	addeq	r1, r1, r5
 8004046:	6021      	streq	r1, [r4, #0]
 8004048:	e7ed      	b.n	8004026 <_free_r+0x22>
 800404a:	461a      	mov	r2, r3
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	b10b      	cbz	r3, 8004054 <_free_r+0x50>
 8004050:	42a3      	cmp	r3, r4
 8004052:	d9fa      	bls.n	800404a <_free_r+0x46>
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	1855      	adds	r5, r2, r1
 8004058:	42a5      	cmp	r5, r4
 800405a:	d10b      	bne.n	8004074 <_free_r+0x70>
 800405c:	6824      	ldr	r4, [r4, #0]
 800405e:	4421      	add	r1, r4
 8004060:	1854      	adds	r4, r2, r1
 8004062:	42a3      	cmp	r3, r4
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	d1e0      	bne.n	800402a <_free_r+0x26>
 8004068:	681c      	ldr	r4, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6053      	str	r3, [r2, #4]
 800406e:	440c      	add	r4, r1
 8004070:	6014      	str	r4, [r2, #0]
 8004072:	e7da      	b.n	800402a <_free_r+0x26>
 8004074:	d902      	bls.n	800407c <_free_r+0x78>
 8004076:	230c      	movs	r3, #12
 8004078:	6003      	str	r3, [r0, #0]
 800407a:	e7d6      	b.n	800402a <_free_r+0x26>
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	1961      	adds	r1, r4, r5
 8004080:	428b      	cmp	r3, r1
 8004082:	bf04      	itt	eq
 8004084:	6819      	ldreq	r1, [r3, #0]
 8004086:	685b      	ldreq	r3, [r3, #4]
 8004088:	6063      	str	r3, [r4, #4]
 800408a:	bf04      	itt	eq
 800408c:	1949      	addeq	r1, r1, r5
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	6054      	str	r4, [r2, #4]
 8004092:	e7ca      	b.n	800402a <_free_r+0x26>
 8004094:	b003      	add	sp, #12
 8004096:	bd30      	pop	{r4, r5, pc}
 8004098:	20000298 	.word	0x20000298

0800409c <__sfputc_r>:
 800409c:	6893      	ldr	r3, [r2, #8]
 800409e:	3b01      	subs	r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	b410      	push	{r4}
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	da08      	bge.n	80040ba <__sfputc_r+0x1e>
 80040a8:	6994      	ldr	r4, [r2, #24]
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	db01      	blt.n	80040b2 <__sfputc_r+0x16>
 80040ae:	290a      	cmp	r1, #10
 80040b0:	d103      	bne.n	80040ba <__sfputc_r+0x1e>
 80040b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b6:	f000 bc95 	b.w	80049e4 <__swbuf_r>
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	1c58      	adds	r0, r3, #1
 80040be:	6010      	str	r0, [r2, #0]
 80040c0:	7019      	strb	r1, [r3, #0]
 80040c2:	4608      	mov	r0, r1
 80040c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <__sfputs_r>:
 80040ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	4614      	mov	r4, r2
 80040d2:	18d5      	adds	r5, r2, r3
 80040d4:	42ac      	cmp	r4, r5
 80040d6:	d101      	bne.n	80040dc <__sfputs_r+0x12>
 80040d8:	2000      	movs	r0, #0
 80040da:	e007      	b.n	80040ec <__sfputs_r+0x22>
 80040dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e0:	463a      	mov	r2, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7ff ffda 	bl	800409c <__sfputc_r>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d1f3      	bne.n	80040d4 <__sfputs_r+0xa>
 80040ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040f0 <_vfiprintf_r>:
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f4:	460d      	mov	r5, r1
 80040f6:	b09d      	sub	sp, #116	; 0x74
 80040f8:	4614      	mov	r4, r2
 80040fa:	4698      	mov	r8, r3
 80040fc:	4606      	mov	r6, r0
 80040fe:	b118      	cbz	r0, 8004108 <_vfiprintf_r+0x18>
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	b90b      	cbnz	r3, 8004108 <_vfiprintf_r+0x18>
 8004104:	f7ff fe56 	bl	8003db4 <__sinit>
 8004108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800410a:	07d9      	lsls	r1, r3, #31
 800410c:	d405      	bmi.n	800411a <_vfiprintf_r+0x2a>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	059a      	lsls	r2, r3, #22
 8004112:	d402      	bmi.n	800411a <_vfiprintf_r+0x2a>
 8004114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004116:	f7ff ff72 	bl	8003ffe <__retarget_lock_acquire_recursive>
 800411a:	89ab      	ldrh	r3, [r5, #12]
 800411c:	071b      	lsls	r3, r3, #28
 800411e:	d501      	bpl.n	8004124 <_vfiprintf_r+0x34>
 8004120:	692b      	ldr	r3, [r5, #16]
 8004122:	b99b      	cbnz	r3, 800414c <_vfiprintf_r+0x5c>
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f000 fc9a 	bl	8004a60 <__swsetup_r>
 800412c:	b170      	cbz	r0, 800414c <_vfiprintf_r+0x5c>
 800412e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004130:	07dc      	lsls	r4, r3, #31
 8004132:	d504      	bpl.n	800413e <_vfiprintf_r+0x4e>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004138:	b01d      	add	sp, #116	; 0x74
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	0598      	lsls	r0, r3, #22
 8004142:	d4f7      	bmi.n	8004134 <_vfiprintf_r+0x44>
 8004144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004146:	f7ff ff5b 	bl	8004000 <__retarget_lock_release_recursive>
 800414a:	e7f3      	b.n	8004134 <_vfiprintf_r+0x44>
 800414c:	2300      	movs	r3, #0
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	2320      	movs	r3, #32
 8004152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004156:	f8cd 800c 	str.w	r8, [sp, #12]
 800415a:	2330      	movs	r3, #48	; 0x30
 800415c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004310 <_vfiprintf_r+0x220>
 8004160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004164:	f04f 0901 	mov.w	r9, #1
 8004168:	4623      	mov	r3, r4
 800416a:	469a      	mov	sl, r3
 800416c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004170:	b10a      	cbz	r2, 8004176 <_vfiprintf_r+0x86>
 8004172:	2a25      	cmp	r2, #37	; 0x25
 8004174:	d1f9      	bne.n	800416a <_vfiprintf_r+0x7a>
 8004176:	ebba 0b04 	subs.w	fp, sl, r4
 800417a:	d00b      	beq.n	8004194 <_vfiprintf_r+0xa4>
 800417c:	465b      	mov	r3, fp
 800417e:	4622      	mov	r2, r4
 8004180:	4629      	mov	r1, r5
 8004182:	4630      	mov	r0, r6
 8004184:	f7ff ffa1 	bl	80040ca <__sfputs_r>
 8004188:	3001      	adds	r0, #1
 800418a:	f000 80a9 	beq.w	80042e0 <_vfiprintf_r+0x1f0>
 800418e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004190:	445a      	add	r2, fp
 8004192:	9209      	str	r2, [sp, #36]	; 0x24
 8004194:	f89a 3000 	ldrb.w	r3, [sl]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a1 	beq.w	80042e0 <_vfiprintf_r+0x1f0>
 800419e:	2300      	movs	r3, #0
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041a8:	f10a 0a01 	add.w	sl, sl, #1
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	9307      	str	r3, [sp, #28]
 80041b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b4:	931a      	str	r3, [sp, #104]	; 0x68
 80041b6:	4654      	mov	r4, sl
 80041b8:	2205      	movs	r2, #5
 80041ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041be:	4854      	ldr	r0, [pc, #336]	; (8004310 <_vfiprintf_r+0x220>)
 80041c0:	f7fc f806 	bl	80001d0 <memchr>
 80041c4:	9a04      	ldr	r2, [sp, #16]
 80041c6:	b9d8      	cbnz	r0, 8004200 <_vfiprintf_r+0x110>
 80041c8:	06d1      	lsls	r1, r2, #27
 80041ca:	bf44      	itt	mi
 80041cc:	2320      	movmi	r3, #32
 80041ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d2:	0713      	lsls	r3, r2, #28
 80041d4:	bf44      	itt	mi
 80041d6:	232b      	movmi	r3, #43	; 0x2b
 80041d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041dc:	f89a 3000 	ldrb.w	r3, [sl]
 80041e0:	2b2a      	cmp	r3, #42	; 0x2a
 80041e2:	d015      	beq.n	8004210 <_vfiprintf_r+0x120>
 80041e4:	9a07      	ldr	r2, [sp, #28]
 80041e6:	4654      	mov	r4, sl
 80041e8:	2000      	movs	r0, #0
 80041ea:	f04f 0c0a 	mov.w	ip, #10
 80041ee:	4621      	mov	r1, r4
 80041f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f4:	3b30      	subs	r3, #48	; 0x30
 80041f6:	2b09      	cmp	r3, #9
 80041f8:	d94d      	bls.n	8004296 <_vfiprintf_r+0x1a6>
 80041fa:	b1b0      	cbz	r0, 800422a <_vfiprintf_r+0x13a>
 80041fc:	9207      	str	r2, [sp, #28]
 80041fe:	e014      	b.n	800422a <_vfiprintf_r+0x13a>
 8004200:	eba0 0308 	sub.w	r3, r0, r8
 8004204:	fa09 f303 	lsl.w	r3, r9, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	46a2      	mov	sl, r4
 800420e:	e7d2      	b.n	80041b6 <_vfiprintf_r+0xc6>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	1d19      	adds	r1, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9103      	str	r1, [sp, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bfbb      	ittet	lt
 800421c:	425b      	neglt	r3, r3
 800421e:	f042 0202 	orrlt.w	r2, r2, #2
 8004222:	9307      	strge	r3, [sp, #28]
 8004224:	9307      	strlt	r3, [sp, #28]
 8004226:	bfb8      	it	lt
 8004228:	9204      	strlt	r2, [sp, #16]
 800422a:	7823      	ldrb	r3, [r4, #0]
 800422c:	2b2e      	cmp	r3, #46	; 0x2e
 800422e:	d10c      	bne.n	800424a <_vfiprintf_r+0x15a>
 8004230:	7863      	ldrb	r3, [r4, #1]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d134      	bne.n	80042a0 <_vfiprintf_r+0x1b0>
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	1d1a      	adds	r2, r3, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	9203      	str	r2, [sp, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfb8      	it	lt
 8004242:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004246:	3402      	adds	r4, #2
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004320 <_vfiprintf_r+0x230>
 800424e:	7821      	ldrb	r1, [r4, #0]
 8004250:	2203      	movs	r2, #3
 8004252:	4650      	mov	r0, sl
 8004254:	f7fb ffbc 	bl	80001d0 <memchr>
 8004258:	b138      	cbz	r0, 800426a <_vfiprintf_r+0x17a>
 800425a:	9b04      	ldr	r3, [sp, #16]
 800425c:	eba0 000a 	sub.w	r0, r0, sl
 8004260:	2240      	movs	r2, #64	; 0x40
 8004262:	4082      	lsls	r2, r0
 8004264:	4313      	orrs	r3, r2
 8004266:	3401      	adds	r4, #1
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426e:	4829      	ldr	r0, [pc, #164]	; (8004314 <_vfiprintf_r+0x224>)
 8004270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004274:	2206      	movs	r2, #6
 8004276:	f7fb ffab 	bl	80001d0 <memchr>
 800427a:	2800      	cmp	r0, #0
 800427c:	d03f      	beq.n	80042fe <_vfiprintf_r+0x20e>
 800427e:	4b26      	ldr	r3, [pc, #152]	; (8004318 <_vfiprintf_r+0x228>)
 8004280:	bb1b      	cbnz	r3, 80042ca <_vfiprintf_r+0x1da>
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	3307      	adds	r3, #7
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	3308      	adds	r3, #8
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004290:	443b      	add	r3, r7
 8004292:	9309      	str	r3, [sp, #36]	; 0x24
 8004294:	e768      	b.n	8004168 <_vfiprintf_r+0x78>
 8004296:	fb0c 3202 	mla	r2, ip, r2, r3
 800429a:	460c      	mov	r4, r1
 800429c:	2001      	movs	r0, #1
 800429e:	e7a6      	b.n	80041ee <_vfiprintf_r+0xfe>
 80042a0:	2300      	movs	r3, #0
 80042a2:	3401      	adds	r4, #1
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	4619      	mov	r1, r3
 80042a8:	f04f 0c0a 	mov.w	ip, #10
 80042ac:	4620      	mov	r0, r4
 80042ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b2:	3a30      	subs	r2, #48	; 0x30
 80042b4:	2a09      	cmp	r2, #9
 80042b6:	d903      	bls.n	80042c0 <_vfiprintf_r+0x1d0>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0c6      	beq.n	800424a <_vfiprintf_r+0x15a>
 80042bc:	9105      	str	r1, [sp, #20]
 80042be:	e7c4      	b.n	800424a <_vfiprintf_r+0x15a>
 80042c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042c4:	4604      	mov	r4, r0
 80042c6:	2301      	movs	r3, #1
 80042c8:	e7f0      	b.n	80042ac <_vfiprintf_r+0x1bc>
 80042ca:	ab03      	add	r3, sp, #12
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	462a      	mov	r2, r5
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <_vfiprintf_r+0x22c>)
 80042d2:	a904      	add	r1, sp, #16
 80042d4:	4630      	mov	r0, r6
 80042d6:	f3af 8000 	nop.w
 80042da:	4607      	mov	r7, r0
 80042dc:	1c78      	adds	r0, r7, #1
 80042de:	d1d6      	bne.n	800428e <_vfiprintf_r+0x19e>
 80042e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042e2:	07d9      	lsls	r1, r3, #31
 80042e4:	d405      	bmi.n	80042f2 <_vfiprintf_r+0x202>
 80042e6:	89ab      	ldrh	r3, [r5, #12]
 80042e8:	059a      	lsls	r2, r3, #22
 80042ea:	d402      	bmi.n	80042f2 <_vfiprintf_r+0x202>
 80042ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ee:	f7ff fe87 	bl	8004000 <__retarget_lock_release_recursive>
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	065b      	lsls	r3, r3, #25
 80042f6:	f53f af1d 	bmi.w	8004134 <_vfiprintf_r+0x44>
 80042fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fc:	e71c      	b.n	8004138 <_vfiprintf_r+0x48>
 80042fe:	ab03      	add	r3, sp, #12
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	462a      	mov	r2, r5
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <_vfiprintf_r+0x22c>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f921 	bl	8004550 <_printf_i>
 800430e:	e7e4      	b.n	80042da <_vfiprintf_r+0x1ea>
 8004310:	08004e50 	.word	0x08004e50
 8004314:	08004e5a 	.word	0x08004e5a
 8004318:	00000000 	.word	0x00000000
 800431c:	080040cb 	.word	0x080040cb
 8004320:	08004e56 	.word	0x08004e56

08004324 <malloc>:
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <malloc+0xc>)
 8004326:	4601      	mov	r1, r0
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f000 b823 	b.w	8004374 <_malloc_r>
 800432e:	bf00      	nop
 8004330:	20000064 	.word	0x20000064

08004334 <sbrk_aligned>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4e0e      	ldr	r6, [pc, #56]	; (8004370 <sbrk_aligned+0x3c>)
 8004338:	460c      	mov	r4, r1
 800433a:	6831      	ldr	r1, [r6, #0]
 800433c:	4605      	mov	r5, r0
 800433e:	b911      	cbnz	r1, 8004346 <sbrk_aligned+0x12>
 8004340:	f000 fc66 	bl	8004c10 <_sbrk_r>
 8004344:	6030      	str	r0, [r6, #0]
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 fc61 	bl	8004c10 <_sbrk_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	d00a      	beq.n	8004368 <sbrk_aligned+0x34>
 8004352:	1cc4      	adds	r4, r0, #3
 8004354:	f024 0403 	bic.w	r4, r4, #3
 8004358:	42a0      	cmp	r0, r4
 800435a:	d007      	beq.n	800436c <sbrk_aligned+0x38>
 800435c:	1a21      	subs	r1, r4, r0
 800435e:	4628      	mov	r0, r5
 8004360:	f000 fc56 	bl	8004c10 <_sbrk_r>
 8004364:	3001      	adds	r0, #1
 8004366:	d101      	bne.n	800436c <sbrk_aligned+0x38>
 8004368:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800436c:	4620      	mov	r0, r4
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	2000029c 	.word	0x2000029c

08004374 <_malloc_r>:
 8004374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004378:	1ccd      	adds	r5, r1, #3
 800437a:	f025 0503 	bic.w	r5, r5, #3
 800437e:	3508      	adds	r5, #8
 8004380:	2d0c      	cmp	r5, #12
 8004382:	bf38      	it	cc
 8004384:	250c      	movcc	r5, #12
 8004386:	2d00      	cmp	r5, #0
 8004388:	4607      	mov	r7, r0
 800438a:	db01      	blt.n	8004390 <_malloc_r+0x1c>
 800438c:	42a9      	cmp	r1, r5
 800438e:	d905      	bls.n	800439c <_malloc_r+0x28>
 8004390:	230c      	movs	r3, #12
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	2600      	movs	r6, #0
 8004396:	4630      	mov	r0, r6
 8004398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004470 <_malloc_r+0xfc>
 80043a0:	f000 faa6 	bl	80048f0 <__malloc_lock>
 80043a4:	f8d8 3000 	ldr.w	r3, [r8]
 80043a8:	461c      	mov	r4, r3
 80043aa:	bb5c      	cbnz	r4, 8004404 <_malloc_r+0x90>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4638      	mov	r0, r7
 80043b0:	f7ff ffc0 	bl	8004334 <sbrk_aligned>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	4604      	mov	r4, r0
 80043b8:	d155      	bne.n	8004466 <_malloc_r+0xf2>
 80043ba:	f8d8 4000 	ldr.w	r4, [r8]
 80043be:	4626      	mov	r6, r4
 80043c0:	2e00      	cmp	r6, #0
 80043c2:	d145      	bne.n	8004450 <_malloc_r+0xdc>
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	d048      	beq.n	800445a <_malloc_r+0xe6>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4631      	mov	r1, r6
 80043cc:	4638      	mov	r0, r7
 80043ce:	eb04 0903 	add.w	r9, r4, r3
 80043d2:	f000 fc1d 	bl	8004c10 <_sbrk_r>
 80043d6:	4581      	cmp	r9, r0
 80043d8:	d13f      	bne.n	800445a <_malloc_r+0xe6>
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	1a6d      	subs	r5, r5, r1
 80043de:	4629      	mov	r1, r5
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7ff ffa7 	bl	8004334 <sbrk_aligned>
 80043e6:	3001      	adds	r0, #1
 80043e8:	d037      	beq.n	800445a <_malloc_r+0xe6>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	442b      	add	r3, r5
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	f8d8 3000 	ldr.w	r3, [r8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d038      	beq.n	800446a <_malloc_r+0xf6>
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	42a2      	cmp	r2, r4
 80043fc:	d12b      	bne.n	8004456 <_malloc_r+0xe2>
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e00f      	b.n	8004424 <_malloc_r+0xb0>
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	1b52      	subs	r2, r2, r5
 8004408:	d41f      	bmi.n	800444a <_malloc_r+0xd6>
 800440a:	2a0b      	cmp	r2, #11
 800440c:	d917      	bls.n	800443e <_malloc_r+0xca>
 800440e:	1961      	adds	r1, r4, r5
 8004410:	42a3      	cmp	r3, r4
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	bf18      	it	ne
 8004416:	6059      	strne	r1, [r3, #4]
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	bf08      	it	eq
 800441c:	f8c8 1000 	streq.w	r1, [r8]
 8004420:	5162      	str	r2, [r4, r5]
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	4638      	mov	r0, r7
 8004426:	f104 060b 	add.w	r6, r4, #11
 800442a:	f000 fa67 	bl	80048fc <__malloc_unlock>
 800442e:	f026 0607 	bic.w	r6, r6, #7
 8004432:	1d23      	adds	r3, r4, #4
 8004434:	1af2      	subs	r2, r6, r3
 8004436:	d0ae      	beq.n	8004396 <_malloc_r+0x22>
 8004438:	1b9b      	subs	r3, r3, r6
 800443a:	50a3      	str	r3, [r4, r2]
 800443c:	e7ab      	b.n	8004396 <_malloc_r+0x22>
 800443e:	42a3      	cmp	r3, r4
 8004440:	6862      	ldr	r2, [r4, #4]
 8004442:	d1dd      	bne.n	8004400 <_malloc_r+0x8c>
 8004444:	f8c8 2000 	str.w	r2, [r8]
 8004448:	e7ec      	b.n	8004424 <_malloc_r+0xb0>
 800444a:	4623      	mov	r3, r4
 800444c:	6864      	ldr	r4, [r4, #4]
 800444e:	e7ac      	b.n	80043aa <_malloc_r+0x36>
 8004450:	4634      	mov	r4, r6
 8004452:	6876      	ldr	r6, [r6, #4]
 8004454:	e7b4      	b.n	80043c0 <_malloc_r+0x4c>
 8004456:	4613      	mov	r3, r2
 8004458:	e7cc      	b.n	80043f4 <_malloc_r+0x80>
 800445a:	230c      	movs	r3, #12
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4638      	mov	r0, r7
 8004460:	f000 fa4c 	bl	80048fc <__malloc_unlock>
 8004464:	e797      	b.n	8004396 <_malloc_r+0x22>
 8004466:	6025      	str	r5, [r4, #0]
 8004468:	e7dc      	b.n	8004424 <_malloc_r+0xb0>
 800446a:	605b      	str	r3, [r3, #4]
 800446c:	deff      	udf	#255	; 0xff
 800446e:	bf00      	nop
 8004470:	20000298 	.word	0x20000298

08004474 <_printf_common>:
 8004474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	4616      	mov	r6, r2
 800447a:	4699      	mov	r9, r3
 800447c:	688a      	ldr	r2, [r1, #8]
 800447e:	690b      	ldr	r3, [r1, #16]
 8004480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004484:	4293      	cmp	r3, r2
 8004486:	bfb8      	it	lt
 8004488:	4613      	movlt	r3, r2
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004490:	4607      	mov	r7, r0
 8004492:	460c      	mov	r4, r1
 8004494:	b10a      	cbz	r2, 800449a <_printf_common+0x26>
 8004496:	3301      	adds	r3, #1
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	0699      	lsls	r1, r3, #26
 800449e:	bf42      	ittt	mi
 80044a0:	6833      	ldrmi	r3, [r6, #0]
 80044a2:	3302      	addmi	r3, #2
 80044a4:	6033      	strmi	r3, [r6, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
 80044a8:	f015 0506 	ands.w	r5, r5, #6
 80044ac:	d106      	bne.n	80044bc <_printf_common+0x48>
 80044ae:	f104 0a19 	add.w	sl, r4, #25
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	6832      	ldr	r2, [r6, #0]
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dc26      	bgt.n	800450a <_printf_common+0x96>
 80044bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044c0:	1e13      	subs	r3, r2, #0
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	bf18      	it	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	0692      	lsls	r2, r2, #26
 80044ca:	d42b      	bmi.n	8004524 <_printf_common+0xb0>
 80044cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044d0:	4649      	mov	r1, r9
 80044d2:	4638      	mov	r0, r7
 80044d4:	47c0      	blx	r8
 80044d6:	3001      	adds	r0, #1
 80044d8:	d01e      	beq.n	8004518 <_printf_common+0xa4>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	f003 0306 	and.w	r3, r3, #6
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf02      	ittt	eq
 80044e6:	68e5      	ldreq	r5, [r4, #12]
 80044e8:	6833      	ldreq	r3, [r6, #0]
 80044ea:	1aed      	subeq	r5, r5, r3
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	bf0c      	ite	eq
 80044f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f4:	2500      	movne	r5, #0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	bfc4      	itt	gt
 80044fa:	1a9b      	subgt	r3, r3, r2
 80044fc:	18ed      	addgt	r5, r5, r3
 80044fe:	2600      	movs	r6, #0
 8004500:	341a      	adds	r4, #26
 8004502:	42b5      	cmp	r5, r6
 8004504:	d11a      	bne.n	800453c <_printf_common+0xc8>
 8004506:	2000      	movs	r0, #0
 8004508:	e008      	b.n	800451c <_printf_common+0xa8>
 800450a:	2301      	movs	r3, #1
 800450c:	4652      	mov	r2, sl
 800450e:	4649      	mov	r1, r9
 8004510:	4638      	mov	r0, r7
 8004512:	47c0      	blx	r8
 8004514:	3001      	adds	r0, #1
 8004516:	d103      	bne.n	8004520 <_printf_common+0xac>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800451c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004520:	3501      	adds	r5, #1
 8004522:	e7c6      	b.n	80044b2 <_printf_common+0x3e>
 8004524:	18e1      	adds	r1, r4, r3
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	2030      	movs	r0, #48	; 0x30
 800452a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800452e:	4422      	add	r2, r4
 8004530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004538:	3302      	adds	r3, #2
 800453a:	e7c7      	b.n	80044cc <_printf_common+0x58>
 800453c:	2301      	movs	r3, #1
 800453e:	4622      	mov	r2, r4
 8004540:	4649      	mov	r1, r9
 8004542:	4638      	mov	r0, r7
 8004544:	47c0      	blx	r8
 8004546:	3001      	adds	r0, #1
 8004548:	d0e6      	beq.n	8004518 <_printf_common+0xa4>
 800454a:	3601      	adds	r6, #1
 800454c:	e7d9      	b.n	8004502 <_printf_common+0x8e>
	...

08004550 <_printf_i>:
 8004550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	7e0f      	ldrb	r7, [r1, #24]
 8004556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004558:	2f78      	cmp	r7, #120	; 0x78
 800455a:	4691      	mov	r9, r2
 800455c:	4680      	mov	r8, r0
 800455e:	460c      	mov	r4, r1
 8004560:	469a      	mov	sl, r3
 8004562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004566:	d807      	bhi.n	8004578 <_printf_i+0x28>
 8004568:	2f62      	cmp	r7, #98	; 0x62
 800456a:	d80a      	bhi.n	8004582 <_printf_i+0x32>
 800456c:	2f00      	cmp	r7, #0
 800456e:	f000 80d4 	beq.w	800471a <_printf_i+0x1ca>
 8004572:	2f58      	cmp	r7, #88	; 0x58
 8004574:	f000 80c0 	beq.w	80046f8 <_printf_i+0x1a8>
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004580:	e03a      	b.n	80045f8 <_printf_i+0xa8>
 8004582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004586:	2b15      	cmp	r3, #21
 8004588:	d8f6      	bhi.n	8004578 <_printf_i+0x28>
 800458a:	a101      	add	r1, pc, #4	; (adr r1, 8004590 <_printf_i+0x40>)
 800458c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004590:	080045e9 	.word	0x080045e9
 8004594:	080045fd 	.word	0x080045fd
 8004598:	08004579 	.word	0x08004579
 800459c:	08004579 	.word	0x08004579
 80045a0:	08004579 	.word	0x08004579
 80045a4:	08004579 	.word	0x08004579
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004579 	.word	0x08004579
 80045b0:	08004579 	.word	0x08004579
 80045b4:	08004579 	.word	0x08004579
 80045b8:	08004579 	.word	0x08004579
 80045bc:	08004701 	.word	0x08004701
 80045c0:	08004629 	.word	0x08004629
 80045c4:	080046bb 	.word	0x080046bb
 80045c8:	08004579 	.word	0x08004579
 80045cc:	08004579 	.word	0x08004579
 80045d0:	08004723 	.word	0x08004723
 80045d4:	08004579 	.word	0x08004579
 80045d8:	08004629 	.word	0x08004629
 80045dc:	08004579 	.word	0x08004579
 80045e0:	08004579 	.word	0x08004579
 80045e4:	080046c3 	.word	0x080046c3
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	602a      	str	r2, [r5, #0]
 80045f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f8:	2301      	movs	r3, #1
 80045fa:	e09f      	b.n	800473c <_printf_i+0x1ec>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	0607      	lsls	r7, r0, #24
 8004602:	f103 0104 	add.w	r1, r3, #4
 8004606:	6029      	str	r1, [r5, #0]
 8004608:	d501      	bpl.n	800460e <_printf_i+0xbe>
 800460a:	681e      	ldr	r6, [r3, #0]
 800460c:	e003      	b.n	8004616 <_printf_i+0xc6>
 800460e:	0646      	lsls	r6, r0, #25
 8004610:	d5fb      	bpl.n	800460a <_printf_i+0xba>
 8004612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004616:	2e00      	cmp	r6, #0
 8004618:	da03      	bge.n	8004622 <_printf_i+0xd2>
 800461a:	232d      	movs	r3, #45	; 0x2d
 800461c:	4276      	negs	r6, r6
 800461e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004622:	485a      	ldr	r0, [pc, #360]	; (800478c <_printf_i+0x23c>)
 8004624:	230a      	movs	r3, #10
 8004626:	e012      	b.n	800464e <_printf_i+0xfe>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1d19      	adds	r1, r3, #4
 800462e:	6029      	str	r1, [r5, #0]
 8004630:	0605      	lsls	r5, r0, #24
 8004632:	d501      	bpl.n	8004638 <_printf_i+0xe8>
 8004634:	681e      	ldr	r6, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0xee>
 8004638:	0641      	lsls	r1, r0, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0xe4>
 800463c:	881e      	ldrh	r6, [r3, #0]
 800463e:	4853      	ldr	r0, [pc, #332]	; (800478c <_printf_i+0x23c>)
 8004640:	2f6f      	cmp	r7, #111	; 0x6f
 8004642:	bf0c      	ite	eq
 8004644:	2308      	moveq	r3, #8
 8004646:	230a      	movne	r3, #10
 8004648:	2100      	movs	r1, #0
 800464a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800464e:	6865      	ldr	r5, [r4, #4]
 8004650:	60a5      	str	r5, [r4, #8]
 8004652:	2d00      	cmp	r5, #0
 8004654:	bfa2      	ittt	ge
 8004656:	6821      	ldrge	r1, [r4, #0]
 8004658:	f021 0104 	bicge.w	r1, r1, #4
 800465c:	6021      	strge	r1, [r4, #0]
 800465e:	b90e      	cbnz	r6, 8004664 <_printf_i+0x114>
 8004660:	2d00      	cmp	r5, #0
 8004662:	d04b      	beq.n	80046fc <_printf_i+0x1ac>
 8004664:	4615      	mov	r5, r2
 8004666:	fbb6 f1f3 	udiv	r1, r6, r3
 800466a:	fb03 6711 	mls	r7, r3, r1, r6
 800466e:	5dc7      	ldrb	r7, [r0, r7]
 8004670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004674:	4637      	mov	r7, r6
 8004676:	42bb      	cmp	r3, r7
 8004678:	460e      	mov	r6, r1
 800467a:	d9f4      	bls.n	8004666 <_printf_i+0x116>
 800467c:	2b08      	cmp	r3, #8
 800467e:	d10b      	bne.n	8004698 <_printf_i+0x148>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	07de      	lsls	r6, r3, #31
 8004684:	d508      	bpl.n	8004698 <_printf_i+0x148>
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	6861      	ldr	r1, [r4, #4]
 800468a:	4299      	cmp	r1, r3
 800468c:	bfde      	ittt	le
 800468e:	2330      	movle	r3, #48	; 0x30
 8004690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004694:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004698:	1b52      	subs	r2, r2, r5
 800469a:	6122      	str	r2, [r4, #16]
 800469c:	f8cd a000 	str.w	sl, [sp]
 80046a0:	464b      	mov	r3, r9
 80046a2:	aa03      	add	r2, sp, #12
 80046a4:	4621      	mov	r1, r4
 80046a6:	4640      	mov	r0, r8
 80046a8:	f7ff fee4 	bl	8004474 <_printf_common>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d14a      	bne.n	8004746 <_printf_i+0x1f6>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b4:	b004      	add	sp, #16
 80046b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f043 0320 	orr.w	r3, r3, #32
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	4833      	ldr	r0, [pc, #204]	; (8004790 <_printf_i+0x240>)
 80046c4:	2778      	movs	r7, #120	; 0x78
 80046c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	6829      	ldr	r1, [r5, #0]
 80046ce:	061f      	lsls	r7, r3, #24
 80046d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80046d4:	d402      	bmi.n	80046dc <_printf_i+0x18c>
 80046d6:	065f      	lsls	r7, r3, #25
 80046d8:	bf48      	it	mi
 80046da:	b2b6      	uxthmi	r6, r6
 80046dc:	07df      	lsls	r7, r3, #31
 80046de:	bf48      	it	mi
 80046e0:	f043 0320 	orrmi.w	r3, r3, #32
 80046e4:	6029      	str	r1, [r5, #0]
 80046e6:	bf48      	it	mi
 80046e8:	6023      	strmi	r3, [r4, #0]
 80046ea:	b91e      	cbnz	r6, 80046f4 <_printf_i+0x1a4>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	f023 0320 	bic.w	r3, r3, #32
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	2310      	movs	r3, #16
 80046f6:	e7a7      	b.n	8004648 <_printf_i+0xf8>
 80046f8:	4824      	ldr	r0, [pc, #144]	; (800478c <_printf_i+0x23c>)
 80046fa:	e7e4      	b.n	80046c6 <_printf_i+0x176>
 80046fc:	4615      	mov	r5, r2
 80046fe:	e7bd      	b.n	800467c <_printf_i+0x12c>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	6826      	ldr	r6, [r4, #0]
 8004704:	6961      	ldr	r1, [r4, #20]
 8004706:	1d18      	adds	r0, r3, #4
 8004708:	6028      	str	r0, [r5, #0]
 800470a:	0635      	lsls	r5, r6, #24
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	d501      	bpl.n	8004714 <_printf_i+0x1c4>
 8004710:	6019      	str	r1, [r3, #0]
 8004712:	e002      	b.n	800471a <_printf_i+0x1ca>
 8004714:	0670      	lsls	r0, r6, #25
 8004716:	d5fb      	bpl.n	8004710 <_printf_i+0x1c0>
 8004718:	8019      	strh	r1, [r3, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	6123      	str	r3, [r4, #16]
 800471e:	4615      	mov	r5, r2
 8004720:	e7bc      	b.n	800469c <_printf_i+0x14c>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	1d1a      	adds	r2, r3, #4
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	681d      	ldr	r5, [r3, #0]
 800472a:	6862      	ldr	r2, [r4, #4]
 800472c:	2100      	movs	r1, #0
 800472e:	4628      	mov	r0, r5
 8004730:	f7fb fd4e 	bl	80001d0 <memchr>
 8004734:	b108      	cbz	r0, 800473a <_printf_i+0x1ea>
 8004736:	1b40      	subs	r0, r0, r5
 8004738:	6060      	str	r0, [r4, #4]
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	2300      	movs	r3, #0
 8004740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004744:	e7aa      	b.n	800469c <_printf_i+0x14c>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	462a      	mov	r2, r5
 800474a:	4649      	mov	r1, r9
 800474c:	4640      	mov	r0, r8
 800474e:	47d0      	blx	sl
 8004750:	3001      	adds	r0, #1
 8004752:	d0ad      	beq.n	80046b0 <_printf_i+0x160>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	d413      	bmi.n	8004782 <_printf_i+0x232>
 800475a:	68e0      	ldr	r0, [r4, #12]
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	4298      	cmp	r0, r3
 8004760:	bfb8      	it	lt
 8004762:	4618      	movlt	r0, r3
 8004764:	e7a6      	b.n	80046b4 <_printf_i+0x164>
 8004766:	2301      	movs	r3, #1
 8004768:	4632      	mov	r2, r6
 800476a:	4649      	mov	r1, r9
 800476c:	4640      	mov	r0, r8
 800476e:	47d0      	blx	sl
 8004770:	3001      	adds	r0, #1
 8004772:	d09d      	beq.n	80046b0 <_printf_i+0x160>
 8004774:	3501      	adds	r5, #1
 8004776:	68e3      	ldr	r3, [r4, #12]
 8004778:	9903      	ldr	r1, [sp, #12]
 800477a:	1a5b      	subs	r3, r3, r1
 800477c:	42ab      	cmp	r3, r5
 800477e:	dcf2      	bgt.n	8004766 <_printf_i+0x216>
 8004780:	e7eb      	b.n	800475a <_printf_i+0x20a>
 8004782:	2500      	movs	r5, #0
 8004784:	f104 0619 	add.w	r6, r4, #25
 8004788:	e7f5      	b.n	8004776 <_printf_i+0x226>
 800478a:	bf00      	nop
 800478c:	08004e61 	.word	0x08004e61
 8004790:	08004e72 	.word	0x08004e72

08004794 <__sflush_r>:
 8004794:	898a      	ldrh	r2, [r1, #12]
 8004796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479a:	4605      	mov	r5, r0
 800479c:	0710      	lsls	r0, r2, #28
 800479e:	460c      	mov	r4, r1
 80047a0:	d458      	bmi.n	8004854 <__sflush_r+0xc0>
 80047a2:	684b      	ldr	r3, [r1, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dc05      	bgt.n	80047b4 <__sflush_r+0x20>
 80047a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dc02      	bgt.n	80047b4 <__sflush_r+0x20>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	d0f9      	beq.n	80047ae <__sflush_r+0x1a>
 80047ba:	2300      	movs	r3, #0
 80047bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047c0:	682f      	ldr	r7, [r5, #0]
 80047c2:	6a21      	ldr	r1, [r4, #32]
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	d032      	beq.n	800482e <__sflush_r+0x9a>
 80047c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	075a      	lsls	r2, r3, #29
 80047ce:	d505      	bpl.n	80047dc <__sflush_r+0x48>
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	1ac0      	subs	r0, r0, r3
 80047d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047d6:	b10b      	cbz	r3, 80047dc <__sflush_r+0x48>
 80047d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047da:	1ac0      	subs	r0, r0, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	4602      	mov	r2, r0
 80047e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e2:	6a21      	ldr	r1, [r4, #32]
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b0      	blx	r6
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	d106      	bne.n	80047fc <__sflush_r+0x68>
 80047ee:	6829      	ldr	r1, [r5, #0]
 80047f0:	291d      	cmp	r1, #29
 80047f2:	d82b      	bhi.n	800484c <__sflush_r+0xb8>
 80047f4:	4a29      	ldr	r2, [pc, #164]	; (800489c <__sflush_r+0x108>)
 80047f6:	410a      	asrs	r2, r1
 80047f8:	07d6      	lsls	r6, r2, #31
 80047fa:	d427      	bmi.n	800484c <__sflush_r+0xb8>
 80047fc:	2200      	movs	r2, #0
 80047fe:	6062      	str	r2, [r4, #4]
 8004800:	04d9      	lsls	r1, r3, #19
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	d504      	bpl.n	8004812 <__sflush_r+0x7e>
 8004808:	1c42      	adds	r2, r0, #1
 800480a:	d101      	bne.n	8004810 <__sflush_r+0x7c>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b903      	cbnz	r3, 8004812 <__sflush_r+0x7e>
 8004810:	6560      	str	r0, [r4, #84]	; 0x54
 8004812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004814:	602f      	str	r7, [r5, #0]
 8004816:	2900      	cmp	r1, #0
 8004818:	d0c9      	beq.n	80047ae <__sflush_r+0x1a>
 800481a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800481e:	4299      	cmp	r1, r3
 8004820:	d002      	beq.n	8004828 <__sflush_r+0x94>
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff fbee 	bl	8004004 <_free_r>
 8004828:	2000      	movs	r0, #0
 800482a:	6360      	str	r0, [r4, #52]	; 0x34
 800482c:	e7c0      	b.n	80047b0 <__sflush_r+0x1c>
 800482e:	2301      	movs	r3, #1
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	1c41      	adds	r1, r0, #1
 8004836:	d1c8      	bne.n	80047ca <__sflush_r+0x36>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0c5      	beq.n	80047ca <__sflush_r+0x36>
 800483e:	2b1d      	cmp	r3, #29
 8004840:	d001      	beq.n	8004846 <__sflush_r+0xb2>
 8004842:	2b16      	cmp	r3, #22
 8004844:	d101      	bne.n	800484a <__sflush_r+0xb6>
 8004846:	602f      	str	r7, [r5, #0]
 8004848:	e7b1      	b.n	80047ae <__sflush_r+0x1a>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	e7ad      	b.n	80047b0 <__sflush_r+0x1c>
 8004854:	690f      	ldr	r7, [r1, #16]
 8004856:	2f00      	cmp	r7, #0
 8004858:	d0a9      	beq.n	80047ae <__sflush_r+0x1a>
 800485a:	0793      	lsls	r3, r2, #30
 800485c:	680e      	ldr	r6, [r1, #0]
 800485e:	bf08      	it	eq
 8004860:	694b      	ldreq	r3, [r1, #20]
 8004862:	600f      	str	r7, [r1, #0]
 8004864:	bf18      	it	ne
 8004866:	2300      	movne	r3, #0
 8004868:	eba6 0807 	sub.w	r8, r6, r7
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	f1b8 0f00 	cmp.w	r8, #0
 8004872:	dd9c      	ble.n	80047ae <__sflush_r+0x1a>
 8004874:	6a21      	ldr	r1, [r4, #32]
 8004876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004878:	4643      	mov	r3, r8
 800487a:	463a      	mov	r2, r7
 800487c:	4628      	mov	r0, r5
 800487e:	47b0      	blx	r6
 8004880:	2800      	cmp	r0, #0
 8004882:	dc06      	bgt.n	8004892 <__sflush_r+0xfe>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004890:	e78e      	b.n	80047b0 <__sflush_r+0x1c>
 8004892:	4407      	add	r7, r0
 8004894:	eba8 0800 	sub.w	r8, r8, r0
 8004898:	e7e9      	b.n	800486e <__sflush_r+0xda>
 800489a:	bf00      	nop
 800489c:	dfbffffe 	.word	0xdfbffffe

080048a0 <_fflush_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	4605      	mov	r5, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	b913      	cbnz	r3, 80048b0 <_fflush_r+0x10>
 80048aa:	2500      	movs	r5, #0
 80048ac:	4628      	mov	r0, r5
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	b118      	cbz	r0, 80048ba <_fflush_r+0x1a>
 80048b2:	6a03      	ldr	r3, [r0, #32]
 80048b4:	b90b      	cbnz	r3, 80048ba <_fflush_r+0x1a>
 80048b6:	f7ff fa7d 	bl	8003db4 <__sinit>
 80048ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f3      	beq.n	80048aa <_fflush_r+0xa>
 80048c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c4:	07d0      	lsls	r0, r2, #31
 80048c6:	d404      	bmi.n	80048d2 <_fflush_r+0x32>
 80048c8:	0599      	lsls	r1, r3, #22
 80048ca:	d402      	bmi.n	80048d2 <_fflush_r+0x32>
 80048cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ce:	f7ff fb96 	bl	8003ffe <__retarget_lock_acquire_recursive>
 80048d2:	4628      	mov	r0, r5
 80048d4:	4621      	mov	r1, r4
 80048d6:	f7ff ff5d 	bl	8004794 <__sflush_r>
 80048da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048dc:	07da      	lsls	r2, r3, #31
 80048de:	4605      	mov	r5, r0
 80048e0:	d4e4      	bmi.n	80048ac <_fflush_r+0xc>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	059b      	lsls	r3, r3, #22
 80048e6:	d4e1      	bmi.n	80048ac <_fflush_r+0xc>
 80048e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ea:	f7ff fb89 	bl	8004000 <__retarget_lock_release_recursive>
 80048ee:	e7dd      	b.n	80048ac <_fflush_r+0xc>

080048f0 <__malloc_lock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_lock+0x8>)
 80048f2:	f7ff bb84 	b.w	8003ffe <__retarget_lock_acquire_recursive>
 80048f6:	bf00      	nop
 80048f8:	20000294 	.word	0x20000294

080048fc <__malloc_unlock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_unlock+0x8>)
 80048fe:	f7ff bb7f 	b.w	8004000 <__retarget_lock_release_recursive>
 8004902:	bf00      	nop
 8004904:	20000294 	.word	0x20000294

08004908 <__sread>:
 8004908:	b510      	push	{r4, lr}
 800490a:	460c      	mov	r4, r1
 800490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004910:	f000 f96c 	bl	8004bec <_read_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	bfab      	itete	ge
 8004918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800491a:	89a3      	ldrhlt	r3, [r4, #12]
 800491c:	181b      	addge	r3, r3, r0
 800491e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004922:	bfac      	ite	ge
 8004924:	6563      	strge	r3, [r4, #84]	; 0x54
 8004926:	81a3      	strhlt	r3, [r4, #12]
 8004928:	bd10      	pop	{r4, pc}

0800492a <__swrite>:
 800492a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492e:	461f      	mov	r7, r3
 8004930:	898b      	ldrh	r3, [r1, #12]
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	4605      	mov	r5, r0
 8004936:	460c      	mov	r4, r1
 8004938:	4616      	mov	r6, r2
 800493a:	d505      	bpl.n	8004948 <__swrite+0x1e>
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	2302      	movs	r3, #2
 8004942:	2200      	movs	r2, #0
 8004944:	f000 f940 	bl	8004bc8 <_lseek_r>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800494e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	4632      	mov	r2, r6
 8004956:	463b      	mov	r3, r7
 8004958:	4628      	mov	r0, r5
 800495a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800495e:	f000 b967 	b.w	8004c30 <_write_r>

08004962 <__sseek>:
 8004962:	b510      	push	{r4, lr}
 8004964:	460c      	mov	r4, r1
 8004966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496a:	f000 f92d 	bl	8004bc8 <_lseek_r>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	bf15      	itete	ne
 8004974:	6560      	strne	r0, [r4, #84]	; 0x54
 8004976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800497a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800497e:	81a3      	strheq	r3, [r4, #12]
 8004980:	bf18      	it	ne
 8004982:	81a3      	strhne	r3, [r4, #12]
 8004984:	bd10      	pop	{r4, pc}

08004986 <__sclose>:
 8004986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498a:	f000 b90d 	b.w	8004ba8 <_close_r>

0800498e <_getc_r>:
 800498e:	b538      	push	{r3, r4, r5, lr}
 8004990:	460c      	mov	r4, r1
 8004992:	4605      	mov	r5, r0
 8004994:	b118      	cbz	r0, 800499e <_getc_r+0x10>
 8004996:	6a03      	ldr	r3, [r0, #32]
 8004998:	b90b      	cbnz	r3, 800499e <_getc_r+0x10>
 800499a:	f7ff fa0b 	bl	8003db4 <__sinit>
 800499e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a0:	07d8      	lsls	r0, r3, #31
 80049a2:	d405      	bmi.n	80049b0 <_getc_r+0x22>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	0599      	lsls	r1, r3, #22
 80049a8:	d402      	bmi.n	80049b0 <_getc_r+0x22>
 80049aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ac:	f7ff fb27 	bl	8003ffe <__retarget_lock_acquire_recursive>
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	da0f      	bge.n	80049da <_getc_r+0x4c>
 80049ba:	4628      	mov	r0, r5
 80049bc:	4621      	mov	r1, r4
 80049be:	f000 f8db 	bl	8004b78 <__srget_r>
 80049c2:	4605      	mov	r5, r0
 80049c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c6:	07da      	lsls	r2, r3, #31
 80049c8:	d405      	bmi.n	80049d6 <_getc_r+0x48>
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	059b      	lsls	r3, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_getc_r+0x48>
 80049d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d2:	f7ff fb15 	bl	8004000 <__retarget_lock_release_recursive>
 80049d6:	4628      	mov	r0, r5
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	781d      	ldrb	r5, [r3, #0]
 80049e2:	e7ef      	b.n	80049c4 <_getc_r+0x36>

080049e4 <__swbuf_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	460e      	mov	r6, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	4605      	mov	r5, r0
 80049ec:	b118      	cbz	r0, 80049f6 <__swbuf_r+0x12>
 80049ee:	6a03      	ldr	r3, [r0, #32]
 80049f0:	b90b      	cbnz	r3, 80049f6 <__swbuf_r+0x12>
 80049f2:	f7ff f9df 	bl	8003db4 <__sinit>
 80049f6:	69a3      	ldr	r3, [r4, #24]
 80049f8:	60a3      	str	r3, [r4, #8]
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	071a      	lsls	r2, r3, #28
 80049fe:	d525      	bpl.n	8004a4c <__swbuf_r+0x68>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	b31b      	cbz	r3, 8004a4c <__swbuf_r+0x68>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	6922      	ldr	r2, [r4, #16]
 8004a08:	1a98      	subs	r0, r3, r2
 8004a0a:	6963      	ldr	r3, [r4, #20]
 8004a0c:	b2f6      	uxtb	r6, r6
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	4637      	mov	r7, r6
 8004a12:	dc04      	bgt.n	8004a1e <__swbuf_r+0x3a>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7ff ff42 	bl	80048a0 <_fflush_r>
 8004a1c:	b9e0      	cbnz	r0, 8004a58 <__swbuf_r+0x74>
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	701e      	strb	r6, [r3, #0]
 8004a2c:	6962      	ldr	r2, [r4, #20]
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d004      	beq.n	8004a3e <__swbuf_r+0x5a>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	07db      	lsls	r3, r3, #31
 8004a38:	d506      	bpl.n	8004a48 <__swbuf_r+0x64>
 8004a3a:	2e0a      	cmp	r6, #10
 8004a3c:	d104      	bne.n	8004a48 <__swbuf_r+0x64>
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f7ff ff2d 	bl	80048a0 <_fflush_r>
 8004a46:	b938      	cbnz	r0, 8004a58 <__swbuf_r+0x74>
 8004a48:	4638      	mov	r0, r7
 8004a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f806 	bl	8004a60 <__swsetup_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0d5      	beq.n	8004a04 <__swbuf_r+0x20>
 8004a58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a5c:	e7f4      	b.n	8004a48 <__swbuf_r+0x64>
	...

08004a60 <__swsetup_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <__swsetup_r+0xac>)
 8004a64:	4605      	mov	r5, r0
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b118      	cbz	r0, 8004a74 <__swsetup_r+0x14>
 8004a6c:	6a03      	ldr	r3, [r0, #32]
 8004a6e:	b90b      	cbnz	r3, 8004a74 <__swsetup_r+0x14>
 8004a70:	f7ff f9a0 	bl	8003db4 <__sinit>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a7a:	0718      	lsls	r0, r3, #28
 8004a7c:	d422      	bmi.n	8004ac4 <__swsetup_r+0x64>
 8004a7e:	06d9      	lsls	r1, r3, #27
 8004a80:	d407      	bmi.n	8004a92 <__swsetup_r+0x32>
 8004a82:	2309      	movs	r3, #9
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a90:	e034      	b.n	8004afc <__swsetup_r+0x9c>
 8004a92:	0758      	lsls	r0, r3, #29
 8004a94:	d512      	bpl.n	8004abc <__swsetup_r+0x5c>
 8004a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a98:	b141      	cbz	r1, 8004aac <__swsetup_r+0x4c>
 8004a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	d002      	beq.n	8004aa8 <__swsetup_r+0x48>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff faae 	bl	8004004 <_free_r>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6363      	str	r3, [r4, #52]	; 0x34
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f043 0308 	orr.w	r3, r3, #8
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	6923      	ldr	r3, [r4, #16]
 8004ac6:	b94b      	cbnz	r3, 8004adc <__swsetup_r+0x7c>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d003      	beq.n	8004adc <__swsetup_r+0x7c>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f7ff f9d0 	bl	8003e7c <__smakebuf_r>
 8004adc:	89a0      	ldrh	r0, [r4, #12]
 8004ade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ae2:	f010 0301 	ands.w	r3, r0, #1
 8004ae6:	d00a      	beq.n	8004afe <__swsetup_r+0x9e>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	6963      	ldr	r3, [r4, #20]
 8004aee:	425b      	negs	r3, r3
 8004af0:	61a3      	str	r3, [r4, #24]
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	b943      	cbnz	r3, 8004b08 <__swsetup_r+0xa8>
 8004af6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004afa:	d1c4      	bne.n	8004a86 <__swsetup_r+0x26>
 8004afc:	bd38      	pop	{r3, r4, r5, pc}
 8004afe:	0781      	lsls	r1, r0, #30
 8004b00:	bf58      	it	pl
 8004b02:	6963      	ldrpl	r3, [r4, #20]
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	e7f4      	b.n	8004af2 <__swsetup_r+0x92>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7f7      	b.n	8004afc <__swsetup_r+0x9c>
 8004b0c:	20000064 	.word	0x20000064

08004b10 <_putc_r>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	460d      	mov	r5, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	4606      	mov	r6, r0
 8004b18:	b118      	cbz	r0, 8004b22 <_putc_r+0x12>
 8004b1a:	6a03      	ldr	r3, [r0, #32]
 8004b1c:	b90b      	cbnz	r3, 8004b22 <_putc_r+0x12>
 8004b1e:	f7ff f949 	bl	8003db4 <__sinit>
 8004b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b24:	07d8      	lsls	r0, r3, #31
 8004b26:	d405      	bmi.n	8004b34 <_putc_r+0x24>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	0599      	lsls	r1, r3, #22
 8004b2c:	d402      	bmi.n	8004b34 <_putc_r+0x24>
 8004b2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b30:	f7ff fa65 	bl	8003ffe <__retarget_lock_acquire_recursive>
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	60a3      	str	r3, [r4, #8]
 8004b3c:	da05      	bge.n	8004b4a <_putc_r+0x3a>
 8004b3e:	69a2      	ldr	r2, [r4, #24]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	db12      	blt.n	8004b6a <_putc_r+0x5a>
 8004b44:	b2eb      	uxtb	r3, r5
 8004b46:	2b0a      	cmp	r3, #10
 8004b48:	d00f      	beq.n	8004b6a <_putc_r+0x5a>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	701d      	strb	r5, [r3, #0]
 8004b52:	b2ed      	uxtb	r5, r5
 8004b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b56:	07da      	lsls	r2, r3, #31
 8004b58:	d405      	bmi.n	8004b66 <_putc_r+0x56>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	059b      	lsls	r3, r3, #22
 8004b5e:	d402      	bmi.n	8004b66 <_putc_r+0x56>
 8004b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b62:	f7ff fa4d 	bl	8004000 <__retarget_lock_release_recursive>
 8004b66:	4628      	mov	r0, r5
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7ff ff38 	bl	80049e4 <__swbuf_r>
 8004b74:	4605      	mov	r5, r0
 8004b76:	e7ed      	b.n	8004b54 <_putc_r+0x44>

08004b78 <__srget_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	b118      	cbz	r0, 8004b88 <__srget_r+0x10>
 8004b80:	6a03      	ldr	r3, [r0, #32]
 8004b82:	b90b      	cbnz	r3, 8004b88 <__srget_r+0x10>
 8004b84:	f7ff f916 	bl	8003db4 <__sinit>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f870 	bl	8004c70 <__srefill_r>
 8004b90:	b938      	cbnz	r0, 8004ba2 <__srget_r+0x2a>
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	6022      	str	r2, [r4, #0]
 8004b9e:	7818      	ldrb	r0, [r3, #0]
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba6:	e7fb      	b.n	8004ba0 <__srget_r+0x28>

08004ba8 <_close_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	; (8004bc4 <_close_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fb ffa6 	bl	8000b04 <_close>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_close_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_close_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	200002a0 	.word	0x200002a0

08004bc8 <_lseek_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d07      	ldr	r5, [pc, #28]	; (8004be8 <_lseek_r+0x20>)
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fb ffab 	bl	8000b32 <_lseek>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_lseek_r+0x1e>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_lseek_r+0x1e>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200002a0 	.word	0x200002a0

08004bec <_read_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d07      	ldr	r5, [pc, #28]	; (8004c0c <_read_r+0x20>)
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7fb ffaa 	bl	8000b54 <_read>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_read_r+0x1e>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_read_r+0x1e>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	200002a0 	.word	0x200002a0

08004c10 <_sbrk_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d06      	ldr	r5, [pc, #24]	; (8004c2c <_sbrk_r+0x1c>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	f7fc f8bc 	bl	8000d98 <_sbrk>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_sbrk_r+0x1a>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_sbrk_r+0x1a>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200002a0 	.word	0x200002a0

08004c30 <_write_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_write_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fb ff34 	bl	8000aac <_write>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_write_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_write_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200002a0 	.word	0x200002a0

08004c54 <lflush>:
 8004c54:	898b      	ldrh	r3, [r1, #12]
 8004c56:	f003 0309 	and.w	r3, r3, #9
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d103      	bne.n	8004c66 <lflush+0x12>
 8004c5e:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <lflush+0x18>)
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f7ff be1d 	b.w	80048a0 <_fflush_r>
 8004c66:	2000      	movs	r0, #0
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000064 	.word	0x20000064

08004c70 <__srefill_r>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	4605      	mov	r5, r0
 8004c76:	b118      	cbz	r0, 8004c80 <__srefill_r+0x10>
 8004c78:	6a03      	ldr	r3, [r0, #32]
 8004c7a:	b90b      	cbnz	r3, 8004c80 <__srefill_r+0x10>
 8004c7c:	f7ff f89a 	bl	8003db4 <__sinit>
 8004c80:	2300      	movs	r3, #0
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c8a:	069e      	lsls	r6, r3, #26
 8004c8c:	d502      	bpl.n	8004c94 <__srefill_r+0x24>
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c92:	e05c      	b.n	8004d4e <__srefill_r+0xde>
 8004c94:	0758      	lsls	r0, r3, #29
 8004c96:	d448      	bmi.n	8004d2a <__srefill_r+0xba>
 8004c98:	06d9      	lsls	r1, r3, #27
 8004c9a:	d405      	bmi.n	8004ca8 <__srefill_r+0x38>
 8004c9c:	2309      	movs	r3, #9
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	e7f2      	b.n	8004c8e <__srefill_r+0x1e>
 8004ca8:	071a      	lsls	r2, r3, #28
 8004caa:	d50b      	bpl.n	8004cc4 <__srefill_r+0x54>
 8004cac:	4621      	mov	r1, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f7ff fdf6 	bl	80048a0 <_fflush_r>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1ea      	bne.n	8004c8e <__srefill_r+0x1e>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	60a0      	str	r0, [r4, #8]
 8004cbc:	f023 0308 	bic.w	r3, r3, #8
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	61a0      	str	r0, [r4, #24]
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	b91b      	cbnz	r3, 8004cd8 <__srefill_r+0x68>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7ff f8d2 	bl	8003e7c <__smakebuf_r>
 8004cd8:	89a6      	ldrh	r6, [r4, #12]
 8004cda:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004cde:	07b3      	lsls	r3, r6, #30
 8004ce0:	d00f      	beq.n	8004d02 <__srefill_r+0x92>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <__srefill_r+0xe4>)
 8004ce6:	491c      	ldr	r1, [pc, #112]	; (8004d58 <__srefill_r+0xe8>)
 8004ce8:	481c      	ldr	r0, [pc, #112]	; (8004d5c <__srefill_r+0xec>)
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	f006 0609 	and.w	r6, r6, #9
 8004cf0:	f7ff f878 	bl	8003de4 <_fwalk_sglue>
 8004cf4:	2e09      	cmp	r6, #9
 8004cf6:	81a7      	strh	r7, [r4, #12]
 8004cf8:	d103      	bne.n	8004d02 <__srefill_r+0x92>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7ff fd49 	bl	8004794 <__sflush_r>
 8004d02:	6922      	ldr	r2, [r4, #16]
 8004d04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d06:	6963      	ldr	r3, [r4, #20]
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b0      	blx	r6
 8004d10:	2800      	cmp	r0, #0
 8004d12:	6060      	str	r0, [r4, #4]
 8004d14:	dc1c      	bgt.n	8004d50 <__srefill_r+0xe0>
 8004d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1a:	bf17      	itett	ne
 8004d1c:	2200      	movne	r2, #0
 8004d1e:	f043 0320 	orreq.w	r3, r3, #32
 8004d22:	6062      	strne	r2, [r4, #4]
 8004d24:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004d28:	e7bc      	b.n	8004ca4 <__srefill_r+0x34>
 8004d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d0cd      	beq.n	8004ccc <__srefill_r+0x5c>
 8004d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d34:	4299      	cmp	r1, r3
 8004d36:	d002      	beq.n	8004d3e <__srefill_r+0xce>
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff f963 	bl	8004004 <_free_r>
 8004d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d40:	6063      	str	r3, [r4, #4]
 8004d42:	2000      	movs	r0, #0
 8004d44:	6360      	str	r0, [r4, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0c0      	beq.n	8004ccc <__srefill_r+0x5c>
 8004d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7fc      	b.n	8004d4e <__srefill_r+0xde>
 8004d54:	2000000c 	.word	0x2000000c
 8004d58:	08004c55 	.word	0x08004c55
 8004d5c:	20000018 	.word	0x20000018

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
