
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009668  08009668  00019668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009abc  08009abc  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac4  08009ac4  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08009acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200000e0  08009bac  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08009bac  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c0cb  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040be  00000000  00000000  0003c21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  000402e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001339  00000000  00000000  00041bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026628  00000000  00000000  00042f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e22f  00000000  00000000  00069529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4ba5  00000000  00000000  00087758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000752c  00000000  00000000  0016c300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0017382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009650 	.word	0x08009650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08009650 	.word	0x08009650

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f005 f9a1 	bl	80058e4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f005 f8b7 	bl	800571e <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f007 fee4 	bl	8008388 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f007 fedc 	bl	8008388 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f007 fed9 	bl	8008388 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	2000016c 	.word	0x2000016c
 80005e8:	08009668 	.word	0x08009668
 80005ec:	08009678 	.word	0x08009678
 80005f0:	08009688 	.word	0x08009688

080005f4 <help_command>:
	{"sample",sample_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <help_command+0x54>)
 80005fe:	f007 fec3 	bl	8008388 <iprintf>
	printf("help\n\r");
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <help_command+0x58>)
 8000604:	f007 fec0 	bl	8008388 <iprintf>
	printf("lof\n\r");
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <help_command+0x5c>)
 800060a:	f007 febd 	bl	8008388 <iprintf>
	printf("lon\n\r");
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <help_command+0x60>)
 8000610:	f007 feba 	bl	8008388 <iprintf>
	printf("test\n\r");
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <help_command+0x64>)
 8000616:	f007 feb7 	bl	8008388 <iprintf>
	printf("ts\n\r");
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <help_command+0x68>)
 800061c:	f007 feb4 	bl	8008388 <iprintf>
	printf("ds\n\r");
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <help_command+0x6c>)
 8000622:	f007 feb1 	bl	8008388 <iprintf>
	printf("tsl237\n\r");
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <help_command+0x70>)
 8000628:	f007 feae 	bl	8008388 <iprintf>
	printf("temp\n\r");
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <help_command+0x74>)
 800062e:	f007 feab 	bl	8008388 <iprintf>
	printf("battery\n\r");
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <help_command+0x78>)
 8000634:	f007 fea8 	bl	8008388 <iprintf>
	printf("sample\n\r");
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <help_command+0x7c>)
 800063a:	f007 fea5 	bl	8008388 <iprintf>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	080096d0 	.word	0x080096d0
 800064c:	080096e8 	.word	0x080096e8
 8000650:	080096f0 	.word	0x080096f0
 8000654:	080096f8 	.word	0x080096f8
 8000658:	08009700 	.word	0x08009700
 800065c:	08009708 	.word	0x08009708
 8000660:	08009710 	.word	0x08009710
 8000664:	08009718 	.word	0x08009718
 8000668:	08009724 	.word	0x08009724
 800066c:	0800972c 	.word	0x0800972c
 8000670:	08009738 	.word	0x08009738

08000674 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2108      	movs	r1, #8
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <lof_command+0x1c>)
 8000682:	f003 fd6b 	bl	800415c <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	48000400 	.word	0x48000400

08000694 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2108      	movs	r1, #8
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <lon_command+0x1c>)
 80006a2:	f003 fd5b 	bl	800415c <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400

080006b4 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <test_command+0x40>)
 80006be:	f007 fe63 	bl	8008388 <iprintf>
	if (arguments) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d011      	beq.n	80006ec <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 80006c8:	490b      	ldr	r1, [pc, #44]	; (80006f8 <test_command+0x44>)
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f008 f860 	bl	8008790 <strtok>
 80006d0:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006d2:	e008      	b.n	80006e6 <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <test_command+0x48>)
 80006d8:	f007 fe56 	bl	8008388 <iprintf>
			pt = strtok (NULL, ",");
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <test_command+0x44>)
 80006de:	2000      	movs	r0, #0
 80006e0:	f008 f856 	bl	8008790 <strtok>
 80006e4:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f3      	bne.n	80006d4 <test_command+0x20>
		}
	}
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08009744 	.word	0x08009744
 80006f8:	08009754 	.word	0x08009754
 80006fc:	08009758 	.word	0x08009758

08000700 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800070e:	492a      	ldr	r1, [pc, #168]	; (80007b8 <ts_command+0xb8>)
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f008 f83d 	bl	8008790 <strtok>
 8000716:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	e014      	b.n	8000748 <ts_command+0x48>
			if (pt != NULL) {
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00e      	beq.n	8000742 <ts_command+0x42>
				t[i] = atoi(pt);
 8000724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000726:	f007 fcd4 	bl	80080d2 <atoi>
 800072a:	4602      	mov	r2, r0
 800072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	443b      	add	r3, r7
 8000734:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000738:	491f      	ldr	r1, [pc, #124]	; (80007b8 <ts_command+0xb8>)
 800073a:	2000      	movs	r0, #0
 800073c:	f008 f828 	bl	8008790 <strtok>
 8000740:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	3301      	adds	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	2b02      	cmp	r3, #2
 800074c:	dde7      	ble.n	800071e <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d029      	beq.n	80007a8 <ts_command+0xa8>
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db26      	blt.n	80007a8 <ts_command+0xa8>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b17      	cmp	r3, #23
 800075e:	dc23      	bgt.n	80007a8 <ts_command+0xa8>
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d020      	beq.n	80007a8 <ts_command+0xa8>
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db1d      	blt.n	80007a8 <ts_command+0xa8>
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	2b3b      	cmp	r3, #59	; 0x3b
 8000770:	dc1a      	bgt.n	80007a8 <ts_command+0xa8>
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	2b00      	cmp	r3, #0
 8000776:	d017      	beq.n	80007a8 <ts_command+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	2b00      	cmp	r3, #0
 800077c:	db14      	blt.n	80007a8 <ts_command+0xa8>
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	2b3b      	cmp	r3, #59	; 0x3b
 8000782:	dc11      	bgt.n	80007a8 <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <ts_command+0xbc>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <ts_command+0xc0>)
 80007a2:	f004 ff1f 	bl	80055e4 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 80007a6:	e003      	b.n	80007b0 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ts_command+0xc4>)
 80007aa:	f007 fded 	bl	8008388 <iprintf>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08009754 	.word	0x08009754
 80007bc:	200000fc 	.word	0x200000fc
 80007c0:	2000016c 	.word	0x2000016c
 80007c4:	08009760 	.word	0x08009760

080007c8 <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01f      	beq.n	8000816 <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80007d6:	4924      	ldr	r1, [pc, #144]	; (8000868 <ds_command+0xa0>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f007 ffd9 	bl	8008790 <strtok>
 80007de:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	e014      	b.n	8000810 <ds_command+0x48>
			if (pt != NULL) {
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <ds_command+0x42>
				d[i] = atoi(pt);
 80007ec:	69f8      	ldr	r0, [r7, #28]
 80007ee:	f007 fc70 	bl	80080d2 <atoi>
 80007f2:	4602      	mov	r2, r0
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	3320      	adds	r3, #32
 80007fa:	443b      	add	r3, r7
 80007fc:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000800:	4919      	ldr	r1, [pc, #100]	; (8000868 <ds_command+0xa0>)
 8000802:	2000      	movs	r0, #0
 8000804:	f007 ffc4 	bl	8008790 <strtok>
 8000808:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	3301      	adds	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2b02      	cmp	r3, #2
 8000814:	dde7      	ble.n	80007e6 <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d01d      	beq.n	8000858 <ds_command+0x90>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd1a      	ble.n	8000858 <ds_command+0x90>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b0c      	cmp	r3, #12
 8000826:	dc17      	bgt.n	8000858 <ds_command+0x90>
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d014      	beq.n	8000858 <ds_command+0x90>
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d011      	beq.n	8000858 <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <ds_command+0xa4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <ds_command+0xa8>)
 8000852:	f004 ffc0 	bl	80057d6 <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000856:	e003      	b.n	8000860 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <ds_command+0xac>)
 800085a:	f007 fd95 	bl	8008388 <iprintf>
	}
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08009754 	.word	0x08009754
 800086c:	200000fc 	.word	0x200000fc
 8000870:	2000016c 	.word	0x2000016c
 8000874:	08009760 	.word	0x08009760

08000878 <tsl237_command>:

extern float tsl237_clock_frequency;

void __attribute__((weak)) tsl237_command(char *arguments) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  int freqInt = tsl237_clock_frequency * 1000;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <tsl237_command+0x5c>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008d8 <tsl237_command+0x60>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000892:	ee17 3a90 	vmov	r3, s15
 8000896:	617b      	str	r3, [r7, #20]
  int freqFirst = freqInt / 1000;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <tsl237_command+0x64>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1192      	asrs	r2, r2, #6
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	613b      	str	r3, [r7, #16]
  int freqSecond = freqInt % 1000;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <tsl237_command+0x64>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1191      	asrs	r1, r2, #6
 80008b2:	17da      	asrs	r2, r3, #31
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ba:	fb01 f202 	mul.w	r2, r1, r2
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  printf("%d.%d hz\n\r", freqFirst, freqSecond);
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	6939      	ldr	r1, [r7, #16]
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <tsl237_command+0x68>)
 80008c8:	f007 fd5e 	bl	8008388 <iprintf>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200002ac 	.word	0x200002ac
 80008d8:	447a0000 	.word	0x447a0000
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	08009768 	.word	0x08009768

080008e4 <temp_command>:

extern sensorval_t mySensors;

void __attribute__((weak)) temp_command(char *arguments) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	printf("%ld C\n\r", mySensors.temperature);
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <temp_command+0x1c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <temp_command+0x20>)
 80008f4:	f007 fd48 	bl	8008388 <iprintf>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002b0 	.word	0x200002b0
 8000904:	08009774 	.word	0x08009774

08000908 <battery_command>:

void __attribute__((weak)) battery_command(char *arguments) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	int battInt = mySensors.vdda_value;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <battery_command+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	617b      	str	r3, [r7, #20]
	int battFirst = battInt / 1000;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <battery_command+0x50>)
 800091a:	fb82 1203 	smull	r1, r2, r2, r3
 800091e:	1192      	asrs	r2, r2, #6
 8000920:	17db      	asrs	r3, r3, #31
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	613b      	str	r3, [r7, #16]
	int battSecond = battInt % 1000;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <battery_command+0x50>)
 800092a:	fb82 1203 	smull	r1, r2, r2, r3
 800092e:	1191      	asrs	r1, r2, #6
 8000930:	17da      	asrs	r2, r3, #31
 8000932:	1a8a      	subs	r2, r1, r2
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	fb01 f202 	mul.w	r2, r1, r2
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  printf("%d.%d V\n\r", battFirst, battSecond);
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <battery_command+0x54>)
 8000946:	f007 fd1f 	bl	8008388 <iprintf>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002b0 	.word	0x200002b0
 8000958:	10624dd3 	.word	0x10624dd3
 800095c:	0800977c 	.word	0x0800977c

08000960 <sample_command>:

void __attribute__((weak)) sample_command(char *arguments) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <get_commands+0xc8>)
 8000982:	f000 fd49 	bl	8001418 <dequeue>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 800098a:	e03a      	b.n	8000a02 <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d027      	beq.n	80009e2 <get_commands+0x6e>
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b0d      	cmp	r3, #13
 8000996:	d024      	beq.n	80009e2 <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b7f      	cmp	r3, #127	; 0x7f
 800099c:	d10c      	bne.n	80009b8 <get_commands+0x44>
        if (counter > 0) {
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <get_commands+0xcc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d021      	beq.n	80009ea <get_commands+0x76>
            printf("\b \b");
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <get_commands+0xd0>)
 80009a8:	f007 fcee 	bl	8008388 <iprintf>
            counter--;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <get_commands+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <get_commands+0xcc>)
 80009b4:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80009b6:	e018      	b.n	80009ea <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 fcf6 	bl	80083ac <putchar>
        command_buf[counter++]=ch;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <get_commands+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	491e      	ldr	r1, [pc, #120]	; (8000a40 <get_commands+0xcc>)
 80009c8:	600a      	str	r2, [r1, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <get_commands+0xcc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b1d      	cmp	r3, #29
 80009d8:	d907      	bls.n	80009ea <get_commands+0x76>
          mode=COMPLETE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <get_commands+0xd4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
          break;
 80009e0:	e012      	b.n	8000a08 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <get_commands+0xd4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
      break;
 80009e8:	e00e      	b.n	8000a08 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80009ea:	bf00      	nop
    }
    mask = disable();
 80009ec:	f000 f906 	bl	8000bfc <disable>
 80009f0:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <get_commands+0xc8>)
 80009f4:	f000 fd10 	bl	8001418 <dequeue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f000 f910 	bl	8000c22 <restore>
  while (ch!=0) {
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1c1      	bne.n	800098c <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <get_commands+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d110      	bne.n	8000a32 <get_commands+0xbe>
    command_buf[counter] = 0;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <get_commands+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <get_commands+0xd8>)
 8000a1e:	f007 fcb3 	bl	8008388 <iprintf>
    counter = 0;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <get_commands+0xcc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <get_commands+0xd4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
    return(1);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <get_commands+0xc0>
  }
  else {
    return(0);
 8000a32:	2300      	movs	r3, #0
  }
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000264 	.word	0x20000264
 8000a40:	20000100 	.word	0x20000100
 8000a44:	08009788 	.word	0x08009788
 8000a48:	20000104 	.word	0x20000104
 8000a4c:	0800978c 	.word	0x0800978c

08000a50 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <parse_command+0x1e>
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <parse_command+0x1e>
     (!command) ||
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <parse_command+0x24>
     (!args)) {
    return (-1);
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e01e      	b.n	8000ab2 <parse_command+0x62>
  }
  *command = line;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	601a      	str	r2, [r3, #0]
  p = line;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a7e:	e00b      	b.n	8000a98 <parse_command+0x48>
    if (!*p) {
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <parse_command+0x42>
      *args = '\0';
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
      return(0);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e00f      	b.n	8000ab2 <parse_command+0x62>
    }
    p++;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a9e:	d1ef      	bne.n	8000a80 <parse_command+0x30>
  }
  *p++ = '\0';
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	617a      	str	r2, [r7, #20]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	601a      	str	r2, [r3, #0]
  return (0);
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <execute_command+0x98>)
 8000aca:	617b      	str	r3, [r7, #20]
  int success = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <execute_command+0x1c>
    return (-1);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e038      	b.n	8000b4e <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000adc:	f107 0208 	add.w	r2, r7, #8
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb2 	bl	8000a50 <parse_command>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af2:	d121      	bne.n	8000b38 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <execute_command+0x9c>)
 8000af6:	f007 fc47 	bl	8008388 <iprintf>
    return (-1);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e026      	b.n	8000b4e <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb61 	bl	80001d0 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10e      	bne.n	8000b32 <execute_command+0x72>
      if (!p->cmd_function) {
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <execute_command+0x62>
        return (-1);
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	e015      	b.n	8000b4e <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4798      	blx	r3
      success = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
      break;
 8000b30:	e006      	b.n	8000b40 <execute_command+0x80>
    }
    p++;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3308      	adds	r3, #8
 8000b36:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1df      	bne.n	8000b00 <execute_command+0x40>
  }
  if (success) {
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <execute_command+0x8a>
    return (0);
 8000b46:	2300      	movs	r3, #0
 8000b48:	e001      	b.n	8000b4e <execute_command+0x8e>
  }
  else {
    return (-1);
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	08009790 	.word	0x08009790

08000b60 <erase_flash>:
extern flash_status_t fs;

extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim2;

void erase_flash() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase_init;
	uint32_t error;

	HAL_FLASH_Unlock();
 8000b66:	f002 ff83 	bl	8003a70 <HAL_FLASH_Unlock>

	erase_init.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
	erase_init.Banks = FLASH_BANK_1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]

	if (HAL_FLASHEx_Erase(&erase_init, &error) != HAL_OK) {
 8000b72:	1d3a      	adds	r2, r7, #4
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f85e 	bl	8003c3c <HAL_FLASHEx_Erase>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <erase_flash+0x2e>
		printf("Error erasing flash memory!\n");
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <erase_flash+0x40>)
 8000b88:	f007 fc6c 	bl	8008464 <puts>
 8000b8c:	e002      	b.n	8000b94 <erase_flash+0x34>
	} else {
		printf("Flash memory erased successfully.\n");
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <erase_flash+0x44>)
 8000b90:	f007 fc68 	bl	8008464 <puts>
	}

	HAL_FLASH_Lock();
 8000b94:	f002 ff8e 	bl	8003ab4 <HAL_FLASH_Lock>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	080097ac 	.word	0x080097ac
 8000ba4:	080097c8 	.word	0x080097c8

08000ba8 <test>:

void test() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
	uint32_t flash_data_address = 0x08020400;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <test+0x48>)
 8000bb0:	60fb      	str	r3, [r7, #12]
	uint64_t data_to_write = 2; // The number 2 to write
 8000bb2:	f04f 0202 	mov.w	r2, #2
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_FLASH_Unlock(); // Unlock flash memory access
 8000bbe:	f002 ff57 	bl	8003a70 <HAL_FLASH_Unlock>

	// Write data to flash memory
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, flash_data_address,
 8000bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bc6:	68f9      	ldr	r1, [r7, #12]
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f002 fee5 	bl	8003998 <HAL_FLASH_Program>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <test+0x34>
			data_to_write) != HAL_OK) {
		// Error handling if writing fails
		printf("Error writing data to flash memory!\n\r");
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <test+0x4c>)
 8000bd6:	f007 fbd7 	bl	8008388 <iprintf>
 8000bda:	e002      	b.n	8000be2 <test+0x3a>
	} else {
		printf("Data successfully written to flash memory.\n\r");
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <test+0x50>)
 8000bde:	f007 fbd3 	bl	8008388 <iprintf>
	}

	HAL_FLASH_Lock(); // Lock flash memory access
 8000be2:	f002 ff67 	bl	8003ab4 <HAL_FLASH_Lock>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08020400 	.word	0x08020400
 8000bf4:	080097ec 	.word	0x080097ec
 8000bf8:	08009814 	.word	0x08009814

08000bfc <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c06:	f3ef 8310 	mrs	r3, PRIMASK
 8000c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8000c0c:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000c0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <restore>:

void restore(uint32_t priority_mask) {
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f383 8810 	msr	PRIMASK, r3
}
 8000c34:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b089      	sub	sp, #36	; 0x24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	e853 3f00 	ldrex	r3, [r3]
 8000c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	61ba      	str	r2, [r7, #24]
 8000c64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c66:	6979      	ldr	r1, [r7, #20]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	e841 2300 	strex	r3, r2, [r1]
 8000c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1e9      	bne.n	8000c4a <LL_USART_EnableIT_RXNE+0x8>
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3724      	adds	r7, #36	; 0x24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <readsensor>:
//typedef struct sensorval {
//  uint32_t vdda_value;
//  uint32_t temperature;
//} sensorval_t;

uint32_t readsensor(sensorval_t *sensors) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint32_t temp_raw;
	uint32_t vrefint_raw;

  if (!sensors) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <readsensor+0x14>
    return (-1);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e04d      	b.n	8000d34 <readsensor+0xb0>
  }
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000c98:	217f      	movs	r1, #127	; 0x7f
 8000c9a:	4828      	ldr	r0, [pc, #160]	; (8000d3c <readsensor+0xb8>)
 8000c9c:	f002 fbca 	bl	8003434 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <readsensor+0xb8>)
 8000ca2:	f001 fb13 	bl	80022cc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <readsensor+0xb8>)
 8000cac:	f001 fba4 	bl	80023f8 <HAL_ADC_PollForConversion>
  temp_raw = HAL_ADC_GetValue(&hadc1);
 8000cb0:	4822      	ldr	r0, [pc, #136]	; (8000d3c <readsensor+0xb8>)
 8000cb2:	f001 fc30 	bl	8002516 <HAL_ADC_GetValue>
 8000cb6:	60f8      	str	r0, [r7, #12]
  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <readsensor+0xb8>)
 8000cbe:	f001 fb9b 	bl	80023f8 <HAL_ADC_PollForConversion>
	vrefint_raw = HAL_ADC_GetValue(&hadc1);
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <readsensor+0xb8>)
 8000cc4:	f001 fc27 	bl	8002516 <HAL_ADC_GetValue>
 8000cc8:	60b8      	str	r0, [r7, #8]
  HAL_ADC_Stop(&hadc1);
 8000cca:	481c      	ldr	r0, [pc, #112]	; (8000d3c <readsensor+0xb8>)
 8000ccc:	f001 fb61 	bl	8002392 <HAL_ADC_Stop>
  sensors->vdda_value = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw, ADC_RESOLUTION_12B);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <readsensor+0xbc>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cda:	fb03 f202 	mul.w	r2, r3, r2
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
  sensors->temperature = __HAL_ADC_CALC_TEMPERATURE(sensors->vdda_value,temp_raw,ADC_RESOLUTION_12B);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <readsensor+0xc0>)
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <readsensor+0xc4>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d01a      	beq.n	8000d2a <readsensor+0xa6>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <readsensor+0xc8>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <readsensor+0xc4>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2264      	movs	r2, #100	; 0x64
 8000d10:	fb03 f202 	mul.w	r2, r3, r2
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <readsensor+0xc0>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <readsensor+0xc4>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	1acb      	subs	r3, r1, r3
 8000d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d24:	331e      	adds	r3, #30
 8000d26:	461a      	mov	r2, r3
 8000d28:	e001      	b.n	8000d2e <readsensor+0xaa>
 8000d2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	605a      	str	r2, [r3, #4]

  return(0);
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000108 	.word	0x20000108
 8000d40:	1fff75aa 	.word	0x1fff75aa
 8000d44:	1fff75ca 	.word	0x1fff75ca
 8000d48:	1fff75a8 	.word	0x1fff75a8
 8000d4c:	057619f1 	.word	0x057619f1

08000d50 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  static uint32_t last = 0;
  uint32_t current;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7f1b      	ldrb	r3, [r3, #28]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d11c      	bne.n	8000d9a <HAL_TIM_IC_CaptureCallback+0x4a>
    current = htim->Instance->CCR1;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	60fb      	str	r3, [r7, #12]
    if (last <= current) {
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d306      	bcc.n	8000d80 <HAL_TIM_IC_CaptureCallback+0x30>
      period = current - last;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e009      	b.n	8000d94 <HAL_TIM_IC_CaptureCallback+0x44>
    } else {
      period = TIM2->ARR - last + current;
 8000d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000d92:	6013      	str	r3, [r2, #0]
    }
    last = current;
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6013      	str	r3, [r2, #0]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200002b8 	.word	0x200002b8
 8000dac:	200002a4 	.word	0x200002a4

08000db0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000db6:	4841      	ldr	r0, [pc, #260]	; (8000ebc <main+0x10c>)
 8000db8:	f000 fae1 	bl	800137e <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fe83 	bl	8001ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f89c 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f000 fa8c 	bl	80012e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc8:	f000 fa5a 	bl	8001280 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000dcc:	f000 f96e 	bl	80010ac <MX_RTC_Init>
  MX_TIM2_Init();
 8000dd0:	f000 f9fe 	bl	80011d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000dd4:	f000 f8f6 	bl	8000fc4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000dd8:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <main+0x110>)
 8000dda:	f000 fb47 	bl	800146c <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000dde:	4839      	ldr	r0, [pc, #228]	; (8000ec4 <main+0x114>)
 8000de0:	f7ff ff2f 	bl	8000c42 <LL_USART_EnableIT_RXNE>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000de4:	463a      	mov	r2, r7
 8000de6:	2302      	movs	r3, #2
 8000de8:	2100      	movs	r1, #0
 8000dea:	4837      	ldr	r0, [pc, #220]	; (8000ec8 <main+0x118>)
 8000dec:	f005 f9b4 	bl	8006158 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000df0:	4836      	ldr	r0, [pc, #216]	; (8000ecc <main+0x11c>)
 8000df2:	f007 fac9 	bl	8008388 <iprintf>
  erase_flash();
 8000df6:	f7ff feb3 	bl	8000b60 <erase_flash>

  test();
 8000dfa:	f7ff fed5 	bl	8000ba8 <test>

  prompt();
 8000dfe:	f7ff fbc5 	bl	800058c <prompt>
  while (1) {
    HAL_Delay(100);
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f000 fed4 	bl	8001bb0 <HAL_Delay>
    readsensor(&mySensors);
 8000e08:	4831      	ldr	r0, [pc, #196]	; (8000ed0 <main+0x120>)
 8000e0a:	f7ff ff3b 	bl	8000c84 <readsensor>
    tsl237_clock_period = (1 / (float) SystemCoreClock) * (float) period;
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <main+0x124>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <main+0x128>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <main+0x12c>)
 8000e34:	edc3 7a00 	vstr	s15, [r3]
    tsl237_clock_frequency = 1 / tsl237_clock_period;
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <main+0x12c>)
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <main+0x130>)
 8000e48:	edc3 7a00 	vstr	s15, [r3]

    if (get_commands(command)) {
 8000e4c:	4825      	ldr	r0, [pc, #148]	; (8000ee4 <main+0x134>)
 8000e4e:	f7ff fd91 	bl	8000974 <get_commands>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d01e      	beq.n	8000e96 <main+0xe6>
      command_length = 16;
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <main+0x138>)
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	601a      	str	r2, [r3, #0]
      if (command_length != -1) {
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <main+0x138>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e66:	d011      	beq.n	8000e8c <main+0xdc>
        if (execute_command(command)) {
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <main+0x134>)
 8000e6a:	f7ff fe29 	bl	8000ac0 <execute_command>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <main+0xd0>
          printf("NOK\n\r");
 8000e74:	481d      	ldr	r0, [pc, #116]	; (8000eec <main+0x13c>)
 8000e76:	f007 fa87 	bl	8008388 <iprintf>
          prompt();
 8000e7a:	f7ff fb87 	bl	800058c <prompt>
 8000e7e:	e00a      	b.n	8000e96 <main+0xe6>
        } else {
          printf("OK\n\r");
 8000e80:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <main+0x140>)
 8000e82:	f007 fa81 	bl	8008388 <iprintf>
          prompt();
 8000e86:	f7ff fb81 	bl	800058c <prompt>
 8000e8a:	e004      	b.n	8000e96 <main+0xe6>
        }
      } else {
        printf("NOK\n\r");
 8000e8c:	4817      	ldr	r0, [pc, #92]	; (8000eec <main+0x13c>)
 8000e8e:	f007 fa7b 	bl	8008388 <iprintf>
        prompt();
 8000e92:	f7ff fb7b 	bl	800058c <prompt>
      }

    }

    if (alarm) {
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <main+0x144>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0b1      	beq.n	8000e02 <main+0x52>
      printf("alarm_triggered\n\r");
 8000e9e:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <main+0x148>)
 8000ea0:	f007 fa72 	bl	8008388 <iprintf>
      lon_command();
 8000ea4:	f7ff fbf6 	bl	8000694 <lon_command>
      HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	; 0x64
 8000eaa:	f000 fe81 	bl	8001bb0 <HAL_Delay>
      lof_command();
 8000eae:	f7ff fbe1 	bl	8000674 <lof_command>
      alarm = 0;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <main+0x144>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    HAL_Delay(100);
 8000eb8:	e7a3      	b.n	8000e02 <main+0x52>
 8000eba:	bf00      	nop
 8000ebc:	20000264 	.word	0x20000264
 8000ec0:	200001dc 	.word	0x200001dc
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	20000190 	.word	0x20000190
 8000ecc:	08009854 	.word	0x08009854
 8000ed0:	200002b0 	.word	0x200002b0
 8000ed4:	20000058 	.word	0x20000058
 8000ed8:	200002a4 	.word	0x200002a4
 8000edc:	200002a8 	.word	0x200002a8
 8000ee0:	200002ac 	.word	0x200002ac
 8000ee4:	2000028c 	.word	0x2000028c
 8000ee8:	2000029c 	.word	0x2000029c
 8000eec:	0800986c 	.word	0x0800986c
 8000ef0:	08009874 	.word	0x08009874
 8000ef4:	200002a0 	.word	0x200002a0
 8000ef8:	0800987c 	.word	0x0800987c

08000efc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2244      	movs	r2, #68	; 0x44
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 fc38 	bl	8008780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000f1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f22:	f003 f951 	bl	80041c8 <HAL_PWREx_ControlVoltageScaling>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x34>
    Error_Handler();
 8000f2c:	f000 fa22 	bl	8001374 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8000f30:	f003 f92c 	bl	800418c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <SystemClock_Config+0xc4>)
 8000f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <SystemClock_Config+0xc4>)
 8000f3c:	f023 0318 	bic.w	r3, r3, #24
 8000f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000f44:	231c      	movs	r3, #28
 8000f46:	617b      	str	r3, [r7, #20]
      | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f60:	2301      	movs	r3, #1
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 f979 	bl	8004274 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x90>
    Error_Handler();
 8000f88:	f000 f9f4 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	603b      	str	r3, [r7, #0]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fd79 	bl	8004a9c <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xb8>
    Error_Handler();
 8000fb0:	f000 f9e0 	bl	8001374 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fb4:	f004 f98c 	bl	80052d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fb8:	bf00      	nop
 8000fba:	3758      	adds	r7, #88	; 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <MX_ADC1_Init+0xd8>)
 8000fdc:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <MX_ADC1_Init+0xdc>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_ADC1_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <MX_ADC1_Init+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_ADC1_Init+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MX_ADC1_Init+0xd8>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_ADC1_Init+0xd8>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <MX_ADC1_Init+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_ADC1_Init+0xd8>)
 8001006:	2200      	movs	r2, #0
 8001008:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_ADC1_Init+0xd8>)
 800100c:	2202      	movs	r2, #2
 800100e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC1_Init+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_ADC1_Init+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_ADC1_Init+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_ADC1_Init+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC1_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_ADC1_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800103a:	4818      	ldr	r0, [pc, #96]	; (800109c <MX_ADC1_Init+0xd8>)
 800103c:	f001 f804 	bl	8002048 <HAL_ADC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0x86>
    Error_Handler();
 8001046:	f000 f995 	bl	8001374 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xe0>)
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104e:	2306      	movs	r3, #6
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001052:	2307      	movs	r3, #7
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001056:	237f      	movs	r3, #127	; 0x7f
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105a:	2304      	movs	r3, #4
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_ADC1_Init+0xd8>)
 8001068:	f001 fc34 	bl	80028d4 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0xb2>
    Error_Handler();
 8001072:	f000 f97f 	bl	8001374 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_ADC1_Init+0xe4>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107a:	230c      	movs	r3, #12
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_ADC1_Init+0xd8>)
 8001084:	f001 fc26 	bl	80028d4 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0xce>
    Error_Handler();
 800108e:	f000 f971 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000108 	.word	0x20000108
 80010a0:	50040000 	.word	0x50040000
 80010a4:	c7520000 	.word	0xc7520000
 80010a8:	80000001 	.word	0x80000001

080010ac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b092      	sub	sp, #72	; 0x48
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = { 0 };
 80010b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = { 0 };
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = { 0 };
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	222c      	movs	r2, #44	; 0x2c
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fb57 	bl	8008780 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <MX_RTC_Init+0x118>)
 80010d4:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <MX_RTC_Init+0x11c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_RTC_Init+0x118>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <MX_RTC_Init+0x118>)
 80010e0:	227f      	movs	r2, #127	; 0x7f
 80010e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <MX_RTC_Init+0x118>)
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <MX_RTC_Init+0x118>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_RTC_Init+0x118>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <MX_RTC_Init+0x118>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_RTC_Init+0x118>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001102:	4830      	ldr	r0, [pc, #192]	; (80011c4 <MX_RTC_Init+0x118>)
 8001104:	f004 f9e6 	bl	80054d4 <HAL_RTC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_RTC_Init+0x66>
    Error_Handler();
 800110e:	f000 f931 	bl	8001374 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800111e:	2300      	movs	r3, #0
 8001120:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800112c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	4823      	ldr	r0, [pc, #140]	; (80011c4 <MX_RTC_Init+0x118>)
 8001136:	f004 fa55 	bl	80055e4 <HAL_RTC_SetTime>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_RTC_Init+0x98>
    Error_Handler();
 8001140:	f000 f918 	bl	8001374 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800115c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <MX_RTC_Init+0x118>)
 8001166:	f004 fb36 	bl	80057d6 <HAL_RTC_SetDate>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_RTC_Init+0xc8>
    Error_Handler();
 8001170:	f000 f900 	bl	8001374 <Error_Handler>
  }

  /** Enable the Alarm A
   */
  sAlarm.AlarmTime.Hours = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001178:	2300      	movs	r3, #0
 800117a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 800117c:	2330      	movs	r3, #48	; 0x30
 800117e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_RTC_Init+0x120>)
 800118e:	61bb      	str	r3, [r7, #24]
      | RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001198:	2301      	movs	r3, #1
 800119a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2201      	movs	r2, #1
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_RTC_Init+0x118>)
 80011ac:	f004 fbe8 	bl	8005980 <HAL_RTC_SetAlarm_IT>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_RTC_Init+0x10e>
    Error_Handler();
 80011b6:	f000 f8dd 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3748      	adds	r7, #72	; 0x48
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000016c 	.word	0x2000016c
 80011c8:	40002800 	.word	0x40002800
 80011cc:	80808000 	.word	0x80808000

080011d0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = { 0 };
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_TIM2_Init+0xac>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_TIM2_Init+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_TIM2_Init+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_TIM2_Init+0xac>)
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_TIM2_Init+0xac>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM2_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <MX_TIM2_Init+0xac>)
 8001218:	f004 fe18 	bl	8005e4c <HAL_TIM_IC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x56>
    Error_Handler();
 8001222:	f000 f8a7 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM2_Init+0xac>)
 8001236:	f005 fd91 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x74>
    Error_Handler();
 8001240:	f000 f898 	bl	8001374 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001248:	2301      	movs	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_TIM2_Init+0xac>)
 800125c:	f005 fa2e 	bl	80066bc <HAL_TIM_IC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001266:	f000 f885 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800126a:	2100      	movs	r1, #0
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM2_Init+0xac>)
 800126e:	f004 fe45 	bl	8005efc <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000190 	.word	0x20000190

08001280 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_USART2_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012c4:	f005 fdce 	bl	8006e64 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART2_UART_Init+0x52>
    Error_Handler();
 80012ce:	f000 f851 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001dc 	.word	0x200001dc
 80012dc:	40004400 	.word	0x40004400

080012e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_GPIO_Init+0x8c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_GPIO_Init+0x8c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_GPIO_Init+0x8c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_GPIO_Init+0x8c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <MX_GPIO_Init+0x8c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_GPIO_Init+0x8c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_GPIO_Init+0x8c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <MX_GPIO_Init+0x8c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_GPIO_Init+0x8c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2108      	movs	r1, #8
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <MX_GPIO_Init+0x90>)
 8001344:	f002 ff0a 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001348:	2308      	movs	r3, #8
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_GPIO_Init+0x90>)
 8001360:	f002 fd92 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400

08001374 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800137c:	e7fe      	b.n	800137c <Error_Handler+0x8>

0800137e <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8001386:	f7ff fc39 	bl	8000bfc <disable>
 800138a:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  restore(mask);
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fc42 	bl	8000c22 <restore>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80013b6:	f7ff fc21 	bl	8000bfc <disable>
 80013ba:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	425a      	negs	r2, r3
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	f002 021f 	and.w	r2, r2, #31
 80013cc:	bf58      	it	pl
 80013ce:	4253      	negpl	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6852      	ldr	r2, [r2, #4]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d014      	beq.n	8001402 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	425a      	negs	r2, r3
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	f002 021f 	and.w	r2, r2, #31
 80013f4:	bf58      	it	pl
 80013f6:	4253      	negpl	r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
    return_val=0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e002      	b.n	8001408 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f7ff fc0a 	bl	8000c22 <restore>
  return (return_val);
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001424:	f7ff fbea 	bl	8000bfc <disable>
 8001428:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d011      	beq.n	800145a <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	7a1b      	ldrb	r3, [r3, #8]
 8001440:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	425a      	negs	r2, r3
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	bf58      	it	pl
 8001454:	4253      	negpl	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f7ff fbe1 	bl	8000c22 <restore>
  return(return_val);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <RetargetInit+0x28>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <RetargetInit+0x2c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	2300      	movs	r3, #0
 8001482:	2202      	movs	r2, #2
 8001484:	2100      	movs	r1, #0
 8001486:	f006 fff5 	bl	8008474 <setvbuf>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002bc 	.word	0x200002bc
 8001498:	200000dc 	.word	0x200000dc

0800149c <_isatty>:

int _isatty(int fd) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db04      	blt.n	80014b4 <_isatty+0x18>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	dc01      	bgt.n	80014b4 <_isatty+0x18>
    return 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e005      	b.n	80014c0 <_isatty+0x24>

  errno = EBADF;
 80014b4:	f007 fa0e 	bl	80088d4 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2209      	movs	r2, #9
 80014bc:	601a      	str	r2, [r3, #0]
  return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d002      	beq.n	80014e0 <_write+0x18>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d111      	bne.n	8001504 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <_write+0x54>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	f005 fd07 	bl	8006f00 <HAL_UART_Transmit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <_write+0x38>
      return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	e008      	b.n	8001512 <_write+0x4a>
    else
      return EIO;
 8001500:	2305      	movs	r3, #5
 8001502:	e006      	b.n	8001512 <_write+0x4a>
  }
  errno = EBADF;
 8001504:	f007 f9e6 	bl	80088d4 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	2209      	movs	r2, #9
 800150c:	601a      	str	r2, [r3, #0]
  return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002bc 	.word	0x200002bc

08001520 <_close>:

int _close(int fd) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db04      	blt.n	8001538 <_close+0x18>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	dc01      	bgt.n	8001538 <_close+0x18>
    return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e006      	b.n	8001546 <_close+0x26>

  errno = EBADF;
 8001538:	f007 f9cc 	bl	80088d4 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	2209      	movs	r2, #9
 8001540:	601a      	str	r2, [r3, #0]
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800155a:	f007 f9bb 	bl	80088d4 <__errno>
 800155e:	4603      	mov	r3, r0
 8001560:	2209      	movs	r2, #9
 8001562:	601a      	str	r2, [r3, #0]
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_read>:

int _read(int fd, char* ptr, int len) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d110      	bne.n	80015a4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <_read+0x4c>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	2201      	movs	r2, #1
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	f005 fd41 	bl	8007014 <HAL_UART_Receive>
 8001592:	4603      	mov	r3, r0
 8001594:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <_read+0x30>
      return 1;
 800159c:	2301      	movs	r3, #1
 800159e:	e008      	b.n	80015b2 <_read+0x42>
    else
      return EIO;
 80015a0:	2305      	movs	r3, #5
 80015a2:	e006      	b.n	80015b2 <_read+0x42>
  }
  errno = EBADF;
 80015a4:	f007 f996 	bl	80088d4 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2209      	movs	r2, #9
 80015ac:	601a      	str	r2, [r3, #0]
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002bc 	.word	0x200002bc

080015c0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db08      	blt.n	80015e2 <_fstat+0x22>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	dc05      	bgt.n	80015e2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015dc:	605a      	str	r2, [r3, #4]
    return 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	e005      	b.n	80015ee <_fstat+0x2e>
  }

  errno = EBADF;
 80015e2:	f007 f977 	bl	80088d4 <__errno>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2209      	movs	r2, #9
 80015ea:	601a      	str	r2, [r3, #0]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	; 0x60
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	; 0x58
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b098      	sub	sp, #96	; 0x60
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2254      	movs	r2, #84	; 0x54
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f007 f895 	bl	8008780 <memset>
  if(hadc->Instance==ADC1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_ADC_MspInit+0x90>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d132      	bne.n	80016c6 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001664:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800166a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001670:	2301      	movs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001674:	2310      	movs	r3, #16
 8001676:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001678:	2307      	movs	r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001680:	2302      	movs	r3, #2
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fc28 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800169a:	f7ff fe6b 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_ADC_MspInit+0x94>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0x94>)
 80016a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_ADC_MspInit+0x94>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2012      	movs	r0, #18
 80016bc:	f002 f827 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80016c0:	2012      	movs	r0, #18
 80016c2:	f002 f840 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3760      	adds	r7, #96	; 0x60
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	50040000 	.word	0x50040000
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b098      	sub	sp, #96	; 0x60
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2254      	movs	r2, #84	; 0x54
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 f849 	bl	8008780 <memset>
  if(hrtc->Instance==RTC)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_RTC_MspInit+0x68>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d11f      	bne.n	8001738 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fbeb 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001714:	f7ff fe2e 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RTC_MspInit+0x6c>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RTC_MspInit+0x6c>)
 8001720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2029      	movs	r0, #41	; 0x29
 800172e:	f001 ffee 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001732:	2029      	movs	r0, #41	; 0x29
 8001734:	f002 f807 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3760      	adds	r7, #96	; 0x60
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40002800 	.word	0x40002800
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d130      	bne.n	80017cc <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_TIM_IC_MspInit+0x8c>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800179a:	2320      	movs	r3, #32
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f002 fb66 	bl	8003e88 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	201c      	movs	r0, #28
 80017c2:	f001 ffa4 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c6:	201c      	movs	r0, #28
 80017c8:	f001 ffbd 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09e      	sub	sp, #120	; 0x78
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2254      	movs	r2, #84	; 0x54
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 ffc1 	bl	8008780 <memset>
  if(huart->Instance==USART2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <HAL_UART_MspInit+0xdc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d150      	bne.n	80018aa <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb65 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001820:	f7ff fda8 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 800182a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_UART_MspInit+0xe0>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001854:	2304      	movs	r3, #4
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001864:	2307      	movs	r3, #7
 8001866:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f002 fb09 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001888:	2303      	movs	r3, #3
 800188a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f002 faf7 	bl	8003e88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2026      	movs	r0, #38	; 0x26
 80018a0:	f001 ff35 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018a4:	2026      	movs	r0, #38	; 0x26
 80018a6:	f001 ff4e 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3778      	adds	r7, #120	; 0x78
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40021000 	.word	0x40021000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 f932 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <ADC1_IRQHandler+0x10>)
 8001916:	f000 fe0b 	bl	8002530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000108 	.word	0x20000108

08001924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM2_IRQHandler+0x10>)
 800192a:	f004 fdc5 	bl	80064b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000190 	.word	0x20000190

08001938 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800193c:	480e      	ldr	r0, [pc, #56]	; (8001978 <USART2_IRQHandler+0x40>)
 800193e:	f005 fc33 	bl	80071a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001942:	f006 fd19 	bl	8008378 <getchar>
 8001946:	4603      	mov	r3, r0
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <USART2_IRQHandler+0x44>)
 800194c:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <USART2_IRQHandler+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <USART2_IRQHandler+0x48>)
 8001956:	f7ff fd26 	bl	80013a6 <enqueue>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <USART2_IRQHandler+0x48>)
 8001962:	f7ff fd59 	bl	8001418 <dequeue>
      enqueue(&buf,ch);
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <USART2_IRQHandler+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <USART2_IRQHandler+0x48>)
 800196e:	f7ff fd1a 	bl	80013a6 <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200001dc 	.word	0x200001dc
 800197c:	200002c0 	.word	0x200002c0
 8001980:	20000264 	.word	0x20000264

08001984 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <RTC_Alarm_IRQHandler+0x14>)
 800198a:	f004 f935 	bl	8005bf8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 800198e:	4b03      	ldr	r3, [pc, #12]	; (800199c <RTC_Alarm_IRQHandler+0x18>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000016c 	.word	0x2000016c
 800199c:	200002a0 	.word	0x200002a0

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ba:	f006 ff8b 	bl	80088d4 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e2:	e7fe      	b.n	80019e2 <_exit+0x12>

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f006 ff5e 	bl	80088d4 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20010000 	.word	0x20010000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	200002c4 	.word	0x200002c4
 8001a4c:	20000418 	.word	0x20000418

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff ffea 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	; (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f006 ff1d 	bl	80088e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff f983 	bl	8000db0 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001ab8:	08009acc 	.word	0x08009acc
  ldr r2, =_sbss
 8001abc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001ac0:	20000418 	.word	0x20000418

08001ac4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <CAN1_RX0_IRQHandler>

08001ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f001 fe11 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f80e 	bl	8001af8 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e001      	b.n	8001aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae8:	f7ff fd86 	bl	80015f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_InitTick+0x70>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fe1d 	bl	8003762 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d809      	bhi.n	8001b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f001 fde7 	bl	800370e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_InitTick+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e004      	b.n	8001b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000060 	.word	0x20000060
 8001b68:	20000058 	.word	0x20000058
 8001b6c:	2000005c 	.word	0x2000005c

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000060 	.word	0x20000060
 8001b94:	200002c8 	.word	0x200002c8

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200002c8 	.word	0x200002c8

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000060 	.word	0x20000060

08001bf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3360      	adds	r3, #96	; 0x60
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <LL_ADC_SetOffset+0x44>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	03fff000 	.word	0x03fff000

08001ca8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3360      	adds	r3, #96	; 0x60
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3360      	adds	r3, #96	; 0x60
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3330      	adds	r3, #48	; 0x30
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	211f      	movs	r1, #31
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 011f 	and.w	r1, r3, #31
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	431a      	orrs	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b087      	sub	sp, #28
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3314      	adds	r3, #20
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	0e5b      	lsrs	r3, r3, #25
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0d1b      	lsrs	r3, r3, #20
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2107      	movs	r1, #7
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	0d1b      	lsrs	r3, r3, #20
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	431a      	orrs	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	401a      	ands	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0318 	and.w	r3, r3, #24
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e28:	40d9      	lsrs	r1, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	431a      	orrs	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	0007ffff 	.word	0x0007ffff

08001e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6093      	str	r3, [r2, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e84:	d101      	bne.n	8001e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <LL_ADC_IsEnabled+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_ADC_IsEnabled+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d101      	bne.n	8001f76 <LL_ADC_IsDisableOngoing+0x18>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_ADC_IsDisableOngoing+0x1a>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f98:	f043 0204 	orr.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800200a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b08      	cmp	r3, #8
 8002034:	d101      	bne.n	800203a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e126      	b.n	80022b0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fae5 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fef1 	bl	8001e70 <LL_ADC_IsDeepPowerDownEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fed7 	bl	8001e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff0c 	bl	8001ec0 <LL_ADC_IsInternalRegulatorEnabled>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d115      	bne.n	80020da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fef0 	bl	8001e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <HAL_ADC_Init+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_ADC_Init+0x274>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff feee 	bl	8001ec0 <LL_ADC_IsInternalRegulatorEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff62 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8002110:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80bf 	bne.w	800229e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80bb 	bne.w	800229e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002130:	f043 0202 	orr.w	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fefb 	bl	8001f38 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002148:	485d      	ldr	r0, [pc, #372]	; (80022c0 <HAL_ADC_Init+0x278>)
 800214a:	f7ff fef5 	bl	8001f38 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4619      	mov	r1, r3
 800215a:	485a      	ldr	r0, [pc, #360]	; (80022c4 <HAL_ADC_Init+0x27c>)
 800215c:	f7ff fd4c 	bl	8001bf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e5b      	ldrb	r3, [r3, #25]
 8002164:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002170:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002176:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	3b01      	subs	r3, #1
 8002194:	045b      	lsls	r3, r3, #17
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_ADC_Init+0x280>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff26 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 80021d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13d      	bne.n	800225a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d13a      	bne.n	800225a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	430b      	orrs	r3, r1
 800220c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002214:	2b01      	cmp	r3, #1
 8002216:	d118      	bne.n	800224a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800223a:	430a      	orrs	r2, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	611a      	str	r2, [r3, #16]
 8002248:	e007      	b.n	800225a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10c      	bne.n	800227c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	f023 010f 	bic.w	r1, r3, #15
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
 800227a:	e007      	b.n	800228c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020f 	bic.w	r2, r2, #15
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f023 0303 	bic.w	r3, r3, #3
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
 800229c:	e007      	b.n	80022ae <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000058 	.word	0x20000058
 80022bc:	053e2d63 	.word	0x053e2d63
 80022c0:	50040000 	.word	0x50040000
 80022c4:	50040300 	.word	0x50040300
 80022c8:	fff0c007 	.word	0xfff0c007

080022cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fe7b 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d14f      	bne.n	8002384 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Start+0x26>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e04b      	b.n	800238a <HAL_ADC_Start+0xbe>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 ff88 	bl	8003210 <ADC_Enable>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d137      	bne.n	800237a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d106      	bne.n	800233a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f023 0206 	bic.w	r2, r3, #6
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
 8002338:	e002      	b.n	8002340 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	221c      	movs	r2, #28
 8002346:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002366:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe06 	bl	8001f84 <LL_ADC_REG_StartConversion>
 8002378:	e006      	b.n	8002388 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_Stop+0x16>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e023      	b.n	80023f0 <HAL_ADC_Stop+0x5e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023b0:	2103      	movs	r1, #3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fe70 	bl	8003098 <ADC_ConversionStop>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 ffaa 	bl	800331c <ADC_Disable>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d102      	bne.n	8002410 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800240a:	2308      	movs	r3, #8
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e010      	b.n	8002432 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f043 0220 	orr.w	r2, r3, #32
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800242e:	2304      	movs	r3, #4
 8002430:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002432:	f7ff fbb1 	bl	8001b98 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002438:	e021      	b.n	800247e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d01d      	beq.n	800247e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002442:	f7ff fba9 	bl	8001b98 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <HAL_ADC_PollForConversion+0x60>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d112      	bne.n	800247e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10b      	bne.n	800247e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e047      	b.n	800250e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0d6      	beq.n	800243a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc34 	bl	8001d0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01c      	beq.n	80024e2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e5b      	ldrb	r3, [r3, #25]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d118      	bne.n	80024e2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d111      	bne.n	80024e2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d104      	bne.n	80024fa <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e008      	b.n	800250c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	220c      	movs	r2, #12
 800250a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d017      	beq.n	8002586 <HAL_ADC_IRQHandler+0x56>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 ffe3 	bl	8003544 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_ADC_IRQHandler+0x6a>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05e      	beq.n	8002662 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d059      	beq.n	8002662 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fb9d 	bl	8001d0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03e      	beq.n	8002654 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d135      	bne.n	8002654 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d12e      	bne.n	8002654 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fcea 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11a      	bne.n	800263c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 020c 	bic.w	r2, r2, #12
 8002614:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d112      	bne.n	8002654 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
 800263a:	e00b      	b.n	8002654 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f91f 	bl	8002898 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_ADC_IRQHandler+0x146>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800267c:	2b00      	cmp	r3, #0
 800267e:	d072      	beq.n	8002766 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06d      	beq.n	8002766 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fb6e 	bl	8001d88 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026ac:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fb29 	bl	8001d0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80026b8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d047      	beq.n	8002758 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x1b2>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03f      	beq.n	8002758 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d13a      	bne.n	8002758 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	d133      	bne.n	8002758 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d12e      	bne.n	8002758 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc8f 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11a      	bne.n	8002740 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002718:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d112      	bne.n	8002758 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
 800273e:	e00b      	b.n	8002758 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f043 0210 	orr.w	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fecb 	bl	80034f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2260      	movs	r2, #96	; 0x60
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d011      	beq.n	8002794 <HAL_ADC_IRQHandler+0x264>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00c      	beq.n	8002794 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f890 	bl	80028ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x294>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 feb1 	bl	800351c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_ADC_IRQHandler+0x2c4>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fea3 	bl	8003530 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02a      	beq.n	8002854 <HAL_ADC_IRQHandler+0x324>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d025      	beq.n	8002854 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002810:	2301      	movs	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	e008      	b.n	8002828 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002824:	2301      	movs	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10e      	bne.n	800284c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f83a 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	2b00      	cmp	r3, #0
 800285c:	d018      	beq.n	8002890 <HAL_ADC_IRQHandler+0x360>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f043 0208 	orr.w	r2, r3, #8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002888:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fe3c 	bl	8003508 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0b6      	sub	sp, #216	; 0xd8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x22>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e3bb      	b.n	800306e <HAL_ADC_ConfigChannel+0x79a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fb66 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 83a0 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d824      	bhi.n	800296a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	3b02      	subs	r3, #2
 8002926:	2b03      	cmp	r3, #3
 8002928:	d81b      	bhi.n	8002962 <HAL_ADC_ConfigChannel+0x8e>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <HAL_ADC_ConfigChannel+0x5c>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002949 	.word	0x08002949
 8002938:	08002951 	.word	0x08002951
 800293c:	08002959 	.word	0x08002959
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002940:	230c      	movs	r3, #12
 8002942:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002946:	e010      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002948:	2312      	movs	r3, #18
 800294a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800294e:	e00c      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002950:	2318      	movs	r3, #24
 8002952:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002956:	e008      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002962:	2306      	movs	r3, #6
 8002964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002968:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002978:	f7ff f9da 	bl	8001d30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fb27 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8002986:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fb47 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 8002994:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 81a4 	bne.w	8002cea <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 819f 	bne.w	8002cea <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f7ff f9f8 	bl	8001dae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00a      	beq.n	80029f6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f0:	f7ff f936 	bl	8001c60 <LL_ADC_SetOffset>
 80029f4:	e179      	b.n	8002cea <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f953 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x14e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f948 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	e01e      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x18c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f93d 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e004      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1a4>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	e018      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x1d6>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e004      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f90c 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f8f0 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x214>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f8e5 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	e01e      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x252>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8da 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e004      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x26a>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	e018      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x29c>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e004      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f8a9 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f88d 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x2da>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f882 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	0e9b      	lsrs	r3, r3, #26
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	e01e      	b.n	8002bec <HAL_ADC_ConfigChannel+0x318>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f877 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e004      	b.n	8002bea <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x330>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	e014      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x35a>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e004      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f84a 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2103      	movs	r1, #3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f82e 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x398>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f823 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 021f 	and.w	r2, r3, #31
 8002c6a:	e017      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x3c8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2103      	movs	r1, #3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff f818 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e003      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x3e0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	e011      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x404>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fff5 	bl	8001cd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f922 	bl	8001f38 <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 8140 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f7ff f87b 	bl	8001e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4a8f      	ldr	r2, [pc, #572]	; (8002f50 <HAL_ADC_ConfigChannel+0x67c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	f040 8131 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x46e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	bf94      	ite	ls
 8002d3a:	2301      	movls	r3, #1
 8002d3c:	2300      	movhi	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e019      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x4a2>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d52:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	bf94      	ite	ls
 8002d70:	2301      	movls	r3, #1
 8002d72:	2300      	movhi	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d079      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x4c2>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d94:	e015      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x4ee>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	069b      	lsls	r3, r3, #26
 8002dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x50e>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	e017      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x53e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	ea42 0103 	orr.w	r1, r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x564>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	051b      	lsls	r3, r3, #20
 8002e36:	e018      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x596>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 021f 	and.w	r2, r3, #31
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	e081      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x5b6>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e88:	e015      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x5e2>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	069b      	lsls	r3, r3, #26
 8002eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x602>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	e017      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x632>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	ea42 0103 	orr.w	r1, r2, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x65e>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x69c>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
  return result;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e006      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x688>
 8002f4e:	bf00      	nop
 8002f50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1e      	subs	r3, #30
 8002f6a:	051b      	lsls	r3, r3, #20
 8002f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fe ff19 	bl	8001dae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d06c      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f88:	483c      	ldr	r0, [pc, #240]	; (800307c <HAL_ADC_ConfigChannel+0x7a8>)
 8002f8a:	f7fe fe5b 	bl	8001c44 <LL_ADC_GetCommonPathInternalCh>
 8002f8e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d127      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d121      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a35      	ldr	r2, [pc, #212]	; (8003084 <HAL_ADC_ConfigChannel+0x7b0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d157      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fba:	4619      	mov	r1, r3
 8002fbc:	482f      	ldr	r0, [pc, #188]	; (800307c <HAL_ADC_ConfigChannel+0x7a8>)
 8002fbe:	f7fe fe2e 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_ADC_ConfigChannel+0x7b4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	4a30      	ldr	r2, [pc, #192]	; (800308c <HAL_ADC_ConfigChannel+0x7b8>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fea:	e03a      	b.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a27      	ldr	r2, [pc, #156]	; (8003090 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d113      	bne.n	800301e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_ADC_ConfigChannel+0x7b0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d12a      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003014:	4619      	mov	r1, r3
 8003016:	4819      	ldr	r0, [pc, #100]	; (800307c <HAL_ADC_ConfigChannel+0x7a8>)
 8003018:	f7fe fe01 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	e021      	b.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_ADC_ConfigChannel+0x7c0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d11c      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800302c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d116      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a12      	ldr	r2, [pc, #72]	; (8003084 <HAL_ADC_ConfigChannel+0x7b0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d111      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003046:	4619      	mov	r1, r3
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <HAL_ADC_ConfigChannel+0x7a8>)
 800304a:	f7fe fde8 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
 800304e:	e008      	b.n	8003062 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800306a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800306e:	4618      	mov	r0, r3
 8003070:	37d8      	adds	r7, #216	; 0xd8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	80080000 	.word	0x80080000
 800307c:	50040300 	.word	0x50040300
 8003080:	c7520000 	.word	0xc7520000
 8003084:	50040000 	.word	0x50040000
 8003088:	20000058 	.word	0x20000058
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	cb840000 	.word	0xcb840000
 8003094:	80000001 	.word	0x80000001

08003098 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe ff90 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe ffb1 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 80030c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8098 	beq.w	8003200 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d02a      	beq.n	8003134 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7e5b      	ldrb	r3, [r3, #25]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d126      	bne.n	8003134 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7e1b      	ldrb	r3, [r3, #24]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d122      	bne.n	8003134 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030f2:	e014      	b.n	800311e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4a45      	ldr	r2, [pc, #276]	; (800320c <ADC_ConversionStop+0x174>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d90d      	bls.n	8003118 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e074      	b.n	8003202 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d1e3      	bne.n	80030f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d014      	beq.n	8003164 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe ff48 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ff05 	bl	8001f5e <LL_ADC_IsDisableOngoing>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe ff24 	bl	8001fac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d014      	beq.n	8003194 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ff57 	bl	8002022 <LL_ADC_INJ_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe feed 	bl	8001f5e <LL_ADC_IsDisableOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe ff33 	bl	8001ffa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d005      	beq.n	80031a6 <ADC_ConversionStop+0x10e>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d105      	bne.n	80031ac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031a0:	230c      	movs	r3, #12
 80031a2:	617b      	str	r3, [r7, #20]
        break;
 80031a4:	e005      	b.n	80031b2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031a6:	2308      	movs	r3, #8
 80031a8:	617b      	str	r3, [r7, #20]
        break;
 80031aa:	e002      	b.n	80031b2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031ac:	2304      	movs	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
        break;
 80031b0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031b2:	f7fe fcf1 	bl	8001b98 <HAL_GetTick>
 80031b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031b8:	e01b      	b.n	80031f2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ba:	f7fe fced 	bl	8001b98 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d914      	bls.n	80031f2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e007      	b.n	8003202 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1dc      	bne.n	80031ba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	a33fffff 	.word	0xa33fffff

08003210 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fe89 	bl	8001f38 <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d169      	bne.n	8003300 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <ADC_Enable+0xfc>)
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e055      	b.n	8003302 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fe44 	bl	8001ee8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003260:	482b      	ldr	r0, [pc, #172]	; (8003310 <ADC_Enable+0x100>)
 8003262:	f7fe fcef 	bl	8001c44 <LL_ADC_GetCommonPathInternalCh>
 8003266:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <ADC_Enable+0x104>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	4a28      	ldr	r2, [pc, #160]	; (8003318 <ADC_Enable+0x108>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800328a:	e002      	b.n	8003292 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3b01      	subs	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f9      	bne.n	800328c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003298:	f7fe fc7e 	bl	8001b98 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800329e:	e028      	b.n	80032f2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fe47 	bl	8001f38 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fe17 	bl	8001ee8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ba:	f7fe fc6d 	bl	8001b98 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d914      	bls.n	80032f2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00d      	beq.n	80032f2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0210 	orr.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e007      	b.n	8003302 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d1cf      	bne.n	80032a0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	8000003f 	.word	0x8000003f
 8003310:	50040300 	.word	0x50040300
 8003314:	20000058 	.word	0x20000058
 8003318:	053e2d63 	.word	0x053e2d63

0800331c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fe18 	bl	8001f5e <LL_ADC_IsDisableOngoing>
 800332e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fdff 	bl	8001f38 <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d047      	beq.n	80033d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d144      	bne.n	80033d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030d 	and.w	r3, r3, #13
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10c      	bne.n	800336e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fdd9 	bl	8001f10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2203      	movs	r2, #3
 8003364:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003366:	f7fe fc17 	bl	8001b98 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800336c:	e029      	b.n	80033c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0210 	orr.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e023      	b.n	80033d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800338a:	f7fe fc05 	bl	8001b98 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d914      	bls.n	80033c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e007      	b.n	80033d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1dc      	bne.n	800338a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <LL_ADC_StartCalibration>:
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_IsCalibrationOnGoing>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_ADCEx_Calibration_Start+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e04d      	b.n	80034ec <HAL_ADCEx_Calibration_Start+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff5f 	bl	800331c <ADC_Disable>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d136      	bne.n	80034d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ffa9 	bl	80033da <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003488:	e014      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003496:	d30d      	bcc.n	80034b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f023 0312 	bic.w	r3, r3, #18
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e01b      	b.n	80034ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ffa7 	bl	800340c <LL_ADC_IsCalibrationOnGoing>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e2      	bne.n	800348a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f023 0303 	bic.w	r3, r3, #3
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
 80034d4:	e005      	b.n	80034e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0210 	orr.w	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff3e 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff8e 	bl	800364c <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5d 	bl	80035f8 <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff31 	bl	80035bc <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa2 	bl	80036b4 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_DMA_Start_IT+0x20>
 8003796:	2302      	movs	r3, #2
 8003798:	e04b      	b.n	8003832 <HAL_DMA_Start_IT+0xb8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d13a      	bne.n	8003824 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8b0 	bl	8003938 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 020e 	orr.w	r2, r2, #14
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e00f      	b.n	8003812 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0204 	bic.w	r2, r2, #4
 8003800:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 020a 	orr.w	r2, r2, #10
 8003810:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e005      	b.n	8003830 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d008      	beq.n	8003864 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e022      	b.n	80038aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 020e 	bic.w	r2, r2, #14
 8003872:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f003 021c 	and.w	r2, r3, #28
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d005      	beq.n	80038da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e029      	b.n	800392e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 020e 	bic.w	r2, r2, #14
 80038e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 021c 	and.w	r2, r3, #28
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
    }
  }
  return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b10      	cmp	r3, #16
 8003968:	d108      	bne.n	800397c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800397a:	e007      	b.n	800398c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_FLASH_Program+0x1e>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e053      	b.n	8003a5e <HAL_FLASH_Program+0xc6>
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039c0:	f000 f888 	bl	8003ad4 <FLASH_WaitForLastOperation>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d143      	bne.n	8003a56 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_FLASH_Program+0xd4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_FLASH_Program+0xd4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_FLASH_Program+0xd4>)
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	771a      	strb	r2, [r3, #28]
 80039f2:	e002      	b.n	80039fa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a04:	68b8      	ldr	r0, [r7, #8]
 8003a06:	f000 f8bd 	bl	8003b84 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e010      	b.n	8003a32 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d002      	beq.n	8003a1c <HAL_FLASH_Program+0x84>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d10a      	bne.n	8003a32 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f000 f8d5 	bl	8003bd0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d102      	bne.n	8003a32 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003a2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a30:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a36:	f000 f84d 	bl	8003ad4 <FLASH_WaitForLastOperation>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d006      	beq.n	8003a52 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_FLASH_Program+0xd4>)
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <HAL_FLASH_Program+0xd4>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a52:	f000 f9cf 	bl	8003df4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_FLASH_Program+0xd0>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]

  return status;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000064 	.word	0x20000064
 8003a6c:	40022000 	.word	0x40022000

08003a70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_FLASH_Unlock+0x38>)
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da0b      	bge.n	8003a9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_FLASH_Unlock+0x38>)
 8003a84:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_FLASH_Unlock+0x3c>)
 8003a86:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_FLASH_Unlock+0x38>)
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_FLASH_Unlock+0x40>)
 8003a8c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_FLASH_Unlock+0x38>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	da01      	bge.n	8003a9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	45670123 	.word	0x45670123
 8003ab0:	cdef89ab 	.word	0xcdef89ab

08003ab4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_FLASH_Lock+0x1c>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_FLASH_Lock+0x1c>)
 8003abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40022000 	.word	0x40022000

08003ad4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7fe f85c 	bl	8001b98 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003ae2:	e00d      	b.n	8003b00 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d009      	beq.n	8003b00 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003aec:	f7fe f854 	bl	8001b98 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d801      	bhi.n	8003b00 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e036      	b.n	8003b6e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1eb      	bne.n	8003ae4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <FLASH_WaitForLastOperation+0xa8>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01e      	beq.n	8003b5a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <FLASH_WaitForLastOperation+0xac>)
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <FLASH_WaitForLastOperation+0xac>)
 8003b26:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <FLASH_WaitForLastOperation+0x6e>
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	618b      	str	r3, [r1, #24]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <FLASH_WaitForLastOperation+0x82>
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b54:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e009      	b.n	8003b6e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <FLASH_WaitForLastOperation+0xa4>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	0002c3fa 	.word	0x0002c3fa
 8003b80:	20000064 	.word	0x20000064

08003b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <FLASH_Program_DoubleWord+0x48>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <FLASH_Program_DoubleWord+0x48>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003ba2:	f3bf 8f6f 	isb	sy
}
 8003ba6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	000a      	movs	r2, r1
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	3104      	adds	r1, #4
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <FLASH_Program_Fast+0x68>)
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <FLASH_Program_Fast+0x68>)
 8003bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bf8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bfc:	b672      	cpsid	i
}
 8003bfe:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3304      	adds	r3, #4
 8003c12:	617b      	str	r3, [r7, #20]
    row_index--;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ef      	bne.n	8003c00 <FLASH_Program_Fast+0x30>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003c2c:	bf00      	nop
 8003c2e:	3724      	adds	r7, #36	; 0x24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40022000 	.word	0x40022000

08003c3c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c46:	4b48      	ldr	r3, [pc, #288]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_FLASHEx_Erase+0x16>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e085      	b.n	8003d5e <HAL_FLASHEx_Erase+0x122>
 8003c52:	4b45      	ldr	r3, [pc, #276]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c5c:	f7ff ff3a 	bl	8003ad4 <FLASH_WaitForLastOperation>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d175      	bne.n	8003d56 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c92:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003c96:	2203      	movs	r2, #3
 8003c98:	771a      	strb	r2, [r3, #28]
 8003c9a:	e016      	b.n	8003cca <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003c9c:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	771a      	strb	r2, [r3, #28]
 8003ca2:	e012      	b.n	8003cca <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	771a      	strb	r2, [r3, #28]
 8003cc2:	e002      	b.n	8003cca <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d111      	bne.n	8003cf6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f84a 	bl	8003d70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ce0:	f7ff fef8 	bl	8003ad4 <FLASH_WaitForLastOperation>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003cee:	f023 0304 	bic.w	r3, r3, #4
 8003cf2:	6153      	str	r3, [r2, #20]
 8003cf4:	e02d      	b.n	8003d52 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	e01d      	b.n	8003d42 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68b8      	ldr	r0, [r7, #8]
 8003d0e:	f000 f84d 	bl	8003dac <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d16:	f7ff fedd 	bl	8003ad4 <FLASH_WaitForLastOperation>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <HAL_FLASHEx_Erase+0x130>)
 8003d24:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003d28:	f023 0302 	bic.w	r3, r3, #2
 8003d2c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	601a      	str	r2, [r3, #0]
          break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3d9      	bcc.n	8003d06 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003d52:	f000 f84f 	bl	8003df4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_FLASHEx_Erase+0x12c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000064 	.word	0x20000064
 8003d6c:	40022000 	.word	0x40022000

08003d70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <FLASH_MassErase+0x38>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <FLASH_MassErase+0x38>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <FLASH_MassErase+0x38>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <FLASH_MassErase+0x38>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6153      	str	r3, [r2, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40022000 	.word	0x40022000

08003dac <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <FLASH_PageErase+0x44>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003dc6:	490a      	ldr	r1, [pc, #40]	; (8003df0 <FLASH_PageErase+0x44>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <FLASH_PageErase+0x44>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <FLASH_PageErase+0x44>)
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <FLASH_PageErase+0x44>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <FLASH_PageErase+0x44>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6153      	str	r3, [r2, #20]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40022000 	.word	0x40022000

08003df4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003dfa:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <FLASH_FlushCaches+0x8c>)
 8003dfc:	7f1b      	ldrb	r3, [r3, #28]
 8003dfe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d002      	beq.n	8003e0c <FLASH_FlushCaches+0x18>
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d117      	bne.n	8003e3c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e16:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e2e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e3a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d002      	beq.n	8003e48 <FLASH_FlushCaches+0x54>
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d111      	bne.n	8003e6c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <FLASH_FlushCaches+0x90>)
 8003e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <FLASH_FlushCaches+0x8c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	771a      	strb	r2, [r3, #28]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000064 	.word	0x20000064
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e96:	e148      	b.n	800412a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 813a 	beq.w	8004124 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d005      	beq.n	8003ec8 <HAL_GPIO_Init+0x40>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d130      	bne.n	8003f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efe:	2201      	movs	r2, #1
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 0201 	and.w	r2, r3, #1
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d017      	beq.n	8003f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d123      	bne.n	8003fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	08da      	lsrs	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3208      	adds	r2, #8
 8003f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	220f      	movs	r2, #15
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	08da      	lsrs	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3208      	adds	r2, #8
 8003fb4:	6939      	ldr	r1, [r7, #16]
 8003fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0203 	and.w	r2, r3, #3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8094 	beq.w	8004124 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffc:	4b52      	ldr	r3, [pc, #328]	; (8004148 <HAL_GPIO_Init+0x2c0>)
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004000:	4a51      	ldr	r2, [pc, #324]	; (8004148 <HAL_GPIO_Init+0x2c0>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6613      	str	r3, [r2, #96]	; 0x60
 8004008:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <HAL_GPIO_Init+0x2c0>)
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004014:	4a4d      	ldr	r2, [pc, #308]	; (800414c <HAL_GPIO_Init+0x2c4>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800403e:	d00d      	beq.n	800405c <HAL_GPIO_Init+0x1d4>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a43      	ldr	r2, [pc, #268]	; (8004150 <HAL_GPIO_Init+0x2c8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <HAL_GPIO_Init+0x1d0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a42      	ldr	r2, [pc, #264]	; (8004154 <HAL_GPIO_Init+0x2cc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_GPIO_Init+0x1cc>
 8004050:	2302      	movs	r3, #2
 8004052:	e004      	b.n	800405e <HAL_GPIO_Init+0x1d6>
 8004054:	2307      	movs	r3, #7
 8004056:	e002      	b.n	800405e <HAL_GPIO_Init+0x1d6>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_GPIO_Init+0x1d6>
 800405c:	2300      	movs	r3, #0
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	f002 0203 	and.w	r2, r2, #3
 8004064:	0092      	lsls	r2, r2, #2
 8004066:	4093      	lsls	r3, r2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800406e:	4937      	ldr	r1, [pc, #220]	; (800414c <HAL_GPIO_Init+0x2c4>)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040a0:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ca:	4a23      	ldr	r2, [pc, #140]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_GPIO_Init+0x2d0>)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3301      	adds	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f aeaf 	bne.w	8003e98 <HAL_GPIO_Init+0x10>
  }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40021000 	.word	0x40021000
 800414c:	40010000 	.word	0x40010000
 8004150:	48000400 	.word	0x48000400
 8004154:	48000800 	.word	0x48000800
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000

080041c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d6:	d130      	bne.n	800423a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e4:	d038      	beq.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2232      	movs	r2, #50	; 0x32
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0c9b      	lsrs	r3, r3, #18
 8004208:	3301      	adds	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420c:	e002      	b.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b01      	subs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d102      	bne.n	8004228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f2      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d110      	bne.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e00f      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d007      	beq.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004250:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40007000 	.word	0x40007000
 800426c:	20000058 	.word	0x20000058
 8004270:	431bde83 	.word	0x431bde83

08004274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f000 bc02 	b.w	8004a8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	4b96      	ldr	r3, [pc, #600]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004292:	4b94      	ldr	r3, [pc, #592]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80e4 	beq.w	8004472 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4c>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	f040 808b 	bne.w	80043ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	f040 8087 	bne.w	80043ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c0:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_OscConfig+0x64>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e3d9      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_RCC_OscConfig+0x7e>
 80042e8:	4b7e      	ldr	r3, [pc, #504]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f0:	e005      	b.n	80042fe <HAL_RCC_OscConfig+0x8a>
 80042f2:	4b7c      	ldr	r3, [pc, #496]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	4293      	cmp	r3, r2
 8004300:	d223      	bcs.n	800434a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd8c 	bl	8004e24 <RCC_SetFlashLatencyFromMSIRange>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e3ba      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004316:	4b73      	ldr	r3, [pc, #460]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a72      	ldr	r2, [pc, #456]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800431c:	f043 0308 	orr.w	r3, r3, #8
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b70      	ldr	r3, [pc, #448]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	496d      	ldr	r1, [pc, #436]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004334:	4b6b      	ldr	r3, [pc, #428]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	4968      	ldr	r1, [pc, #416]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	e025      	b.n	8004396 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434a:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a65      	ldr	r2, [pc, #404]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004350:	f043 0308 	orr.w	r3, r3, #8
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4960      	ldr	r1, [pc, #384]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004368:	4b5e      	ldr	r3, [pc, #376]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	495b      	ldr	r1, [pc, #364]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fd4c 	bl	8004e24 <RCC_SetFlashLatencyFromMSIRange>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e37a      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004396:	f000 fc81 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 800439a:	4602      	mov	r2, r0
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	4950      	ldr	r1, [pc, #320]	; (80044e8 <HAL_RCC_OscConfig+0x274>)
 80043a8:	5ccb      	ldrb	r3, [r1, r3]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_RCC_OscConfig+0x278>)
 80043b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043b6:	4b4e      	ldr	r3, [pc, #312]	; (80044f0 <HAL_RCC_OscConfig+0x27c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd fb9c 	bl	8001af8 <HAL_InitTick>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d052      	beq.n	8004470 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	e35e      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d032      	beq.n	800443c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a42      	ldr	r2, [pc, #264]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e2:	f7fd fbd9 	bl	8001b98 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ea:	f7fd fbd5 	bl	8001b98 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e347      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043fc:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a35      	ldr	r2, [pc, #212]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800440e:	f043 0308 	orr.w	r3, r3, #8
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b33      	ldr	r3, [pc, #204]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4930      	ldr	r1, [pc, #192]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	492b      	ldr	r1, [pc, #172]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e01a      	b.n	8004472 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a28      	ldr	r2, [pc, #160]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004448:	f7fd fba6 	bl	8001b98 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004450:	f7fd fba2 	bl	8001b98 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e314      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1dc>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d073      	beq.n	8004566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d005      	beq.n	8004490 <HAL_RCC_OscConfig+0x21c>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b0c      	cmp	r3, #12
 8004488:	d10e      	bne.n	80044a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d10b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d063      	beq.n	8004564 <HAL_RCC_OscConfig+0x2f0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d15f      	bne.n	8004564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e2f1      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x24c>
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e025      	b.n	800450c <HAL_RCC_OscConfig+0x298>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d114      	bne.n	80044f4 <HAL_RCC_OscConfig+0x280>
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a02      	ldr	r2, [pc, #8]	; (80044e4 <HAL_RCC_OscConfig+0x270>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e013      	b.n	800450c <HAL_RCC_OscConfig+0x298>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08009890 	.word	0x08009890
 80044ec:	20000058 	.word	0x20000058
 80044f0:	2000005c 	.word	0x2000005c
 80044f4:	4ba0      	ldr	r3, [pc, #640]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a9f      	ldr	r2, [pc, #636]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b9d      	ldr	r3, [pc, #628]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9c      	ldr	r2, [pc, #624]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fb40 	bl	8001b98 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd fb3c 	bl	8001b98 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e2ae      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452e:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x2a8>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fd fb2c 	bl	8001b98 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fd fb28 	bl	8001b98 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e29a      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x2d0>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d060      	beq.n	8004634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d005      	beq.n	8004584 <HAL_RCC_OscConfig+0x310>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d119      	bne.n	80045b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d116      	bne.n	80045b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	4b7c      	ldr	r3, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x328>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e277      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	4973      	ldr	r1, [pc, #460]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b0:	e040      	b.n	8004634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d023      	beq.n	8004602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ba:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6e      	ldr	r2, [pc, #440]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd fae7 	bl	8001b98 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fd fae3 	bl	8001b98 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e255      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b62      	ldr	r3, [pc, #392]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	495f      	ldr	r1, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
 8004600:	e018      	b.n	8004634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fd fac3 	bl	8001b98 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fd fabf 	bl	8001b98 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e231      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03c      	beq.n	80046ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01c      	beq.n	8004682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464e:	4a4a      	ldr	r2, [pc, #296]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd fa9e 	bl	8001b98 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7fd fa9a 	bl	8001b98 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e20c      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ef      	beq.n	8004660 <HAL_RCC_OscConfig+0x3ec>
 8004680:	e01b      	b.n	80046ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004682:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004688:	4a3b      	ldr	r2, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fd fa81 	bl	8001b98 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469a:	f7fd fa7d 	bl	8001b98 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e1ef      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ac:	4b32      	ldr	r3, [pc, #200]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80046ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ef      	bne.n	800469a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a6 	beq.w	8004814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046cc:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10d      	bne.n	80046f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d8:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e2:	6593      	str	r3, [r2, #88]	; 0x58
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCC_OscConfig+0x508>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d118      	bne.n	8004732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCC_OscConfig+0x508>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_RCC_OscConfig+0x508>)
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470c:	f7fd fa44 	bl	8001b98 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004714:	f7fd fa40 	bl	8001b98 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1b2      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <HAL_RCC_OscConfig+0x508>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d108      	bne.n	800474c <HAL_RCC_OscConfig+0x4d8>
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474a:	e029      	b.n	80047a0 <HAL_RCC_OscConfig+0x52c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d115      	bne.n	8004780 <HAL_RCC_OscConfig+0x50c>
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a03      	ldr	r2, [pc, #12]	; (8004778 <HAL_RCC_OscConfig+0x504>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004774:	e014      	b.n	80047a0 <HAL_RCC_OscConfig+0x52c>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	4b9a      	ldr	r3, [pc, #616]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a99      	ldr	r2, [pc, #612]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004790:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a95      	ldr	r2, [pc, #596]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d016      	beq.n	80047d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd f9f6 	bl	8001b98 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd f9f2 	bl	8001b98 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e162      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c6:	4b89      	ldr	r3, [pc, #548]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0ed      	beq.n	80047b0 <HAL_RCC_OscConfig+0x53c>
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fd f9df 	bl	8001b98 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd f9db 	bl	8001b98 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e14b      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f4:	4b7d      	ldr	r3, [pc, #500]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ed      	bne.n	80047de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004802:	7ffb      	ldrb	r3, [r7, #31]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b78      	ldr	r3, [pc, #480]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	4a77      	ldr	r2, [pc, #476]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03c      	beq.n	800489a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01c      	beq.n	8004862 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004828:	4b70      	ldr	r3, [pc, #448]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800482a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482e:	4a6f      	ldr	r2, [pc, #444]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd f9ae 	bl	8001b98 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004840:	f7fd f9aa 	bl	8001b98 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e11c      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004852:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <HAL_RCC_OscConfig+0x5cc>
 8004860:	e01b      	b.n	800489a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004862:	4b62      	ldr	r3, [pc, #392]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004868:	4a60      	ldr	r2, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fd f991 	bl	8001b98 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487a:	f7fd f98d 	bl	8001b98 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0ff      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800488c:	4b57      	ldr	r3, [pc, #348]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800488e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ef      	bne.n	800487a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80f3 	beq.w	8004a8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	f040 80c9 	bne.w	8004a40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048ae:	4b4f      	ldr	r3, [pc, #316]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0203 	and.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	429a      	cmp	r2, r3
 80048c0:	d12c      	bne.n	800491c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	3b01      	subs	r3, #1
 80048ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d123      	bne.n	800491c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d11b      	bne.n	800491c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d113      	bne.n	800491c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	3b01      	subs	r3, #1
 8004902:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d109      	bne.n	800491c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	3b01      	subs	r3, #1
 8004916:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d06b      	beq.n	80049f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d062      	beq.n	80049e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0ac      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800493e:	f7fd f92b 	bl	8001b98 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004946:	f7fd f927 	bl	8001b98 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e099      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_RCC_OscConfig+0x77c>)
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004974:	3a01      	subs	r2, #1
 8004976:	0112      	lsls	r2, r2, #4
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800497e:	0212      	lsls	r2, r2, #8
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	3a01      	subs	r2, #1
 800498a:	0552      	lsls	r2, r2, #21
 800498c:	4311      	orrs	r1, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004992:	0852      	lsrs	r2, r2, #1
 8004994:	3a01      	subs	r2, #1
 8004996:	0652      	lsls	r2, r2, #25
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499e:	06d2      	lsls	r2, r2, #27
 80049a0:	430a      	orrs	r2, r1
 80049a2:	4912      	ldr	r1, [pc, #72]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c0:	f7fd f8ea 	bl	8001b98 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd f8e6 	bl	8001b98 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e058      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049da:	4b04      	ldr	r3, [pc, #16]	; (80049ec <HAL_RCC_OscConfig+0x778>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e6:	e050      	b.n	8004a8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e04f      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f4:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d144      	bne.n	8004a8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a18:	f7fd f8be 	bl	8001b98 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd f8ba 	bl	8001b98 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e02c      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x7ac>
 8004a3e:	e024      	b.n	8004a8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d01f      	beq.n	8004a86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd f8a1 	bl	8001b98 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fd f89d 	bl	8001b98 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e00f      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4905      	ldr	r1, [pc, #20]	; (8004a94 <HAL_RCC_OscConfig+0x820>)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_OscConfig+0x824>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	60cb      	str	r3, [r1, #12]
 8004a84:	e001      	b.n	8004a8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	feeefffc 	.word	0xfeeefffc

08004a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0e7      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b75      	ldr	r3, [pc, #468]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d910      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b72      	ldr	r3, [pc, #456]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 0207 	bic.w	r2, r3, #7
 8004ac6:	4970      	ldr	r1, [pc, #448]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b6e      	ldr	r3, [pc, #440]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0cf      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4b66      	ldr	r3, [pc, #408]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d908      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004afc:	4b63      	ldr	r3, [pc, #396]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4960      	ldr	r1, [pc, #384]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d04c      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b22:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0a6      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d115      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e09a      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b52:	4b4e      	ldr	r3, [pc, #312]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08e      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e086      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f023 0203 	bic.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4943      	ldr	r1, [pc, #268]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fd f808 	bl	8001b98 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7fd f804 	bl	8001b98 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e06e      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 020c 	and.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1eb      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d208      	bcs.n	8004be2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	492b      	ldr	r1, [pc, #172]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d210      	bcs.n	8004c12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 0207 	bic.w	r2, r3, #7
 8004bf8:	4923      	ldr	r1, [pc, #140]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c00:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <HAL_RCC_ClockConfig+0x1ec>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e036      	b.n	8004c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4918      	ldr	r1, [pc, #96]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c3c:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4910      	ldr	r1, [pc, #64]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c50:	f000 f824 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	490b      	ldr	r1, [pc, #44]	; (8004c90 <HAL_RCC_ClockConfig+0x1f4>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1fc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fc ff3f 	bl	8001af8 <HAL_InitTick>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40022000 	.word	0x40022000
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	08009890 	.word	0x08009890
 8004c94:	20000058 	.word	0x20000058
 8004c98:	2000005c 	.word	0x2000005c

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004caa:	4b3e      	ldr	r3, [pc, #248]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb4:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d121      	bne.n	8004d0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d11e      	bne.n	8004d0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cd0:	4b34      	ldr	r3, [pc, #208]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cdc:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e005      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cec:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10d      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d102      	bne.n	8004d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <HAL_RCC_GetSysClockFreq+0x110>)
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e004      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d20:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d134      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0xac>
 8004d40:	e005      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_RCC_GetSysClockFreq+0x110>)
 8004d44:	617b      	str	r3, [r7, #20]
      break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d4a:	617b      	str	r3, [r7, #20]
      break;
 8004d4c:	e002      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	617b      	str	r3, [r7, #20]
      break;
 8004d52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	3301      	adds	r3, #1
 8004d60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	fb03 f202 	mul.w	r2, r3, r2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	0e5b      	lsrs	r3, r3, #25
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	3301      	adds	r3, #1
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d94:	69bb      	ldr	r3, [r7, #24]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3724      	adds	r7, #36	; 0x24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40021000 	.word	0x40021000
 8004da8:	080098a8 	.word	0x080098a8
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	007a1200 	.word	0x007a1200

08004db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000058 	.word	0x20000058

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dd0:	f7ff fff0 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4904      	ldr	r1, [pc, #16]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	080098a0 	.word	0x080098a0

08004df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dfc:	f7ff ffda 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0adb      	lsrs	r3, r3, #11
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	080098a0 	.word	0x080098a0

08004e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e3c:	f7ff f9b6 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 8004e40:	6178      	str	r0, [r7, #20]
 8004e42:	e014      	b.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	4a24      	ldr	r2, [pc, #144]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e50:	4b22      	ldr	r3, [pc, #136]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e5c:	f7ff f9a6 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 8004e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e74:	d10b      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d919      	bls.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e80:	d902      	bls.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e82:	2302      	movs	r3, #2
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e013      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e88:	2301      	movs	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e010      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d902      	bls.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e94:	2303      	movs	r3, #3
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	e00a      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d102      	bne.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e004      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b70      	cmp	r3, #112	; 0x70
 8004eaa:	d101      	bne.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 0207 	bic.w	r2, r3, #7
 8004eb8:	4909      	ldr	r1, [pc, #36]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d001      	beq.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40022000 	.word	0x40022000

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d031      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f08:	d01a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f0e:	d814      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f18:	d10f      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f26:	e00c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f9de 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f48:	4b51      	ldr	r3, [pc, #324]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	494e      	ldr	r1, [pc, #312]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 809e 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f76:	4b46      	ldr	r3, [pc, #280]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
 8004f98:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fdf0 	bl	8001b98 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fdec 	bl	8001b98 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d15a      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d019      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800502a:	4a19      	ldr	r2, [pc, #100]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d016      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fc fdac 	bl	8001b98 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005042:	e00b      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fc fda8 	bl	8001b98 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d902      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	74fb      	strb	r3, [r7, #19]
            break;
 800505a:	e006      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ec      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	4904      	ldr	r1, [pc, #16]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005086:	e009      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509c:	7c7b      	ldrb	r3, [r7, #17]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a2:	4b8a      	ldr	r3, [pc, #552]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	4a89      	ldr	r2, [pc, #548]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ba:	4b84      	ldr	r3, [pc, #528]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f023 0203 	bic.w	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4980      	ldr	r1, [pc, #512]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f023 020c 	bic.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	4978      	ldr	r1, [pc, #480]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050fe:	4b73      	ldr	r3, [pc, #460]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	496f      	ldr	r1, [pc, #444]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	4967      	ldr	r1, [pc, #412]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	495e      	ldr	r1, [pc, #376]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4956      	ldr	r1, [pc, #344]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005186:	4b51      	ldr	r3, [pc, #324]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	494d      	ldr	r1, [pc, #308]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d028      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051a8:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4945      	ldr	r1, [pc, #276]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c6:	d106      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b40      	ldr	r3, [pc, #256]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a3f      	ldr	r2, [pc, #252]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
 80051d4:	e011      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f882 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d028      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	492d      	ldr	r1, [pc, #180]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005224:	d106      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800522c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005230:	60d3      	str	r3, [r2, #12]
 8005232:	e011      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800523c:	d10c      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f853 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	4916      	ldr	r1, [pc, #88]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005282:	d10c      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2102      	movs	r1, #2
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f830 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b8:	4904      	ldr	r1, [pc, #16]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000

080052f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800530a:	4b71      	ldr	r3, [pc, #452]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
       ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005322:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
       ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d047      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e044      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x86>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x62>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x74>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053aa:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	430b      	orrs	r3, r1
 80053c0:	4943      	ldr	r1, [pc, #268]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d17c      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d8:	f7fc fbde 	bl	8001b98 <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053de:	e009      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e0:	f7fc fbda 	bl	8001b98 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
        break;
 80053f2:	e005      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ef      	bne.n	80053e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15f      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540c:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	430a      	orrs	r2, r1
 8005426:	492a      	ldr	r1, [pc, #168]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
 800542c:	e027      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d112      	bne.n	800545a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0552      	lsls	r2, r2, #21
 8005450:	430a      	orrs	r2, r1
 8005452:	491f      	ldr	r1, [pc, #124]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
 8005458:	e011      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6952      	ldr	r2, [r2, #20]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0652      	lsls	r2, r2, #25
 8005476:	430a      	orrs	r2, r1
 8005478:	4915      	ldr	r1, [pc, #84]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fc fb85 	bl	8001b98 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	e009      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005492:	f7fc fb81 	bl	8001b98 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
          break;
 80054a4:	e005      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4903      	ldr	r1, [pc, #12]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d079      	beq.n	80055da <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc f8ec 	bl	80016d8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b10      	cmp	r3, #16
 8005514:	d058      	beq.n	80055c8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	22ca      	movs	r2, #202	; 0xca
 800551c:	625a      	str	r2, [r3, #36]	; 0x24
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2253      	movs	r2, #83	; 0x53
 8005524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fbda 	bl	8005ce0 <RTC_EnterInitMode>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d127      	bne.n	8005586 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005548:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68d2      	ldr	r2, [r2, #12]
 8005570:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6919      	ldr	r1, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	041a      	lsls	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fbde 	bl	8005d48 <RTC_ExitInitMode>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0203 	bic.w	r2, r2, #3
 80055a4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24
 80055c6:	e001      	b.n	80055cc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_RTC_SetTime+0x1a>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e08b      	b.n	8005716 <HAL_RTC_SetTime+0x132>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	22ca      	movs	r2, #202	; 0xca
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2253      	movs	r2, #83	; 0x53
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fb5e 	bl	8005ce0 <RTC_EnterInitMode>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d163      	bne.n	80056f6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d126      	bne.n	8005682 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fbb9 	bl	8005dc4 <RTC_ByteToBcd2>
 8005652:	4603      	mov	r3, r0
 8005654:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fbb2 	bl	8005dc4 <RTC_ByteToBcd2>
 8005660:	4603      	mov	r3, r0
 8005662:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005664:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fbaa 	bl	8005dc4 <RTC_ByteToBcd2>
 8005670:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005672:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e018      	b.n	80056b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6899      	ldr	r1, [r3, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fb2b 	bl	8005d48 <RTC_ExitInitMode>
 80056f2:	4603      	mov	r3, r0
 80056f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005714:	7cfb      	ldrb	r3, [r7, #19]
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}

0800571e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800574c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005750:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575c:	b2da      	uxtb	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576c:	b2da      	uxtb	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	0d9b      	lsrs	r3, r3, #22
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11a      	bne.n	80057cc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fb32 	bl	8005e04 <RTC_Bcd2ToByte>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fb29 	bl	8005e04 <RTC_Bcd2ToByte>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	789b      	ldrb	r3, [r3, #2]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fb20 	bl	8005e04 <RTC_Bcd2ToByte>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057d6:	b590      	push	{r4, r7, lr}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_RTC_SetDate+0x1a>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e075      	b.n	80058dc <HAL_RTC_SetDate+0x106>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10e      	bne.n	8005824 <HAL_RTC_SetDate+0x4e>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	b2db      	uxtb	r3, r3
 800581c:	330a      	adds	r3, #10
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d11c      	bne.n	8005864 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	78db      	ldrb	r3, [r3, #3]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fac8 	bl	8005dc4 <RTC_ByteToBcd2>
 8005834:	4603      	mov	r3, r0
 8005836:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fac1 	bl	8005dc4 <RTC_ByteToBcd2>
 8005842:	4603      	mov	r3, r0
 8005844:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005846:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	789b      	ldrb	r3, [r3, #2]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fab9 	bl	8005dc4 <RTC_ByteToBcd2>
 8005852:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005854:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e00e      	b.n	8005882 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	78db      	ldrb	r3, [r3, #3]
 8005868:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005870:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005876:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	22ca      	movs	r2, #202	; 0xca
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2253      	movs	r2, #83	; 0x53
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fa24 	bl	8005ce0 <RTC_EnterInitMode>
 8005898:	4603      	mov	r3, r0
 800589a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fa48 	bl	8005d48 <RTC_ExitInitMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80058da:	7cfb      	ldrb	r3, [r7, #19]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}

080058e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0b5b      	lsrs	r3, r3, #13
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11a      	bne.n	8005974 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fa5e 	bl	8005e04 <RTC_Bcd2ToByte>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa55 	bl	8005e04 <RTC_Bcd2ToByte>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	789b      	ldrb	r3, [r3, #2]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa4c 	bl	8005e04 <RTC_Bcd2ToByte>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_RTC_SetAlarm_IT+0x1a>
 8005996:	2302      	movs	r3, #2
 8005998:	e127      	b.n	8005bea <HAL_RTC_SetAlarm_IT+0x26a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d137      	bne.n	8005a20 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f9fb 	bl	8005dc4 <RTC_ByteToBcd2>
 80059ce:	4603      	mov	r3, r0
 80059d0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f9f4 	bl	8005dc4 <RTC_ByteToBcd2>
 80059dc:	4603      	mov	r3, r0
 80059de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059e0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	789b      	ldrb	r3, [r3, #2]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f9ec 	bl	8005dc4 <RTC_ByteToBcd2>
 80059ec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059f8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f9de 	bl	8005dc4 <RTC_ByteToBcd2>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a0c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e023      	b.n	8005a68 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2200      	movs	r2, #0
 8005a32:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a40:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a46:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	22ca      	movs	r2, #202	; 0xca
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2253      	movs	r2, #83	; 0x53
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8c:	d14a      	bne.n	8005b24 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005aae:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005ab0:	f7fc f872 	bl	8001b98 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ab6:	e015      	b.n	8005ae4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ab8:	f7fc f86e 	bl	8001b98 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac6:	d90d      	bls.n	8005ae4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	22ff      	movs	r2, #255	; 0xff
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e082      	b.n	8005bea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0e2      	beq.n	8005ab8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b20:	609a      	str	r2, [r3, #8]
 8005b22:	e049      	b.n	8005bb8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b32:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005b44:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005b46:	f7fc f827 	bl	8001b98 <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b4c:	e015      	b.n	8005b7a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b4e:	f7fc f823 	bl	8001b98 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b5c:	d90d      	bls.n	8005b7a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	22ff      	movs	r2, #255	; 0xff
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e037      	b.n	8005bea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0e2      	beq.n	8005b4e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bce:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	22ff      	movs	r2, #255	; 0xff
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3724      	adds	r7, #36	; 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005c02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c06:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d012      	beq.n	8005c3c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c34:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f824 	bl	8005c84 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d012      	beq.n	8005c70 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c68:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f8e4 	bl	8005e38 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40010400 	.word	0x40010400

08005c84 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <HAL_RTC_WaitForSynchro+0x44>)
 8005ca6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005ca8:	f7fb ff76 	bl	8001b98 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cae:	e009      	b.n	8005cc4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cb0:	f7fb ff72 	bl	8001b98 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e007      	b.n	8005cd4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0ee      	beq.n	8005cb0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	0003ff5f 	.word	0x0003ff5f

08005ce0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d120      	bne.n	8005d3c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d04:	f7fb ff48 	bl	8001b98 <HAL_GetTick>
 8005d08:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d0a:	e00d      	b.n	8005d28 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d0c:	f7fb ff44 	bl	8001b98 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1a:	d905      	bls.n	8005d28 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2203      	movs	r2, #3
 8005d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <RTC_EnterInitMode+0x5c>
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d1e7      	bne.n	8005d0c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d54:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d60:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10c      	bne.n	8005d86 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff93 	bl	8005c98 <HAL_RTC_WaitForSynchro>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01e      	beq.n	8005db6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e017      	b.n	8005db6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005d8c:	f023 0320 	bic.w	r3, r3, #32
 8005d90:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff80 	bl	8005c98 <HAL_RTC_WaitForSynchro>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2203      	movs	r2, #3
 8005da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <RTC_ExitInitMode+0x78>)
 8005db0:	f043 0320 	orr.w	r3, r3, #32
 8005db4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40002800 	.word	0x40002800

08005dc4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005dd6:	e005      	b.n	8005de4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	3b0a      	subs	r3, #10
 8005de2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	d8f6      	bhi.n	8005dd8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b2db      	uxtb	r3, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b2db      	uxtb	r3, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e049      	b.n	8005ef2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fc68 	bl	8001748 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f000 fdd0 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_IC_Start_IT+0x1e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e023      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x66>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_IC_Start_IT+0x2e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e01b      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x66>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_IC_Start_IT+0x3e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e013      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x66>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_IC_Start_IT+0x4e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	e00b      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x66>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_IC_Start_IT+0x5e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e003      	b.n	8005f62 <HAL_TIM_IC_Start_IT+0x66>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_TIM_IC_Start_IT+0x78>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e013      	b.n	8005f9c <HAL_TIM_IC_Start_IT+0xa0>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d104      	bne.n	8005f84 <HAL_TIM_IC_Start_IT+0x88>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	e00b      	b.n	8005f9c <HAL_TIM_IC_Start_IT+0xa0>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d104      	bne.n	8005f94 <HAL_TIM_IC_Start_IT+0x98>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e003      	b.n	8005f9c <HAL_TIM_IC_Start_IT+0xa0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f9e:	7bbb      	ldrb	r3, [r7, #14]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d102      	bne.n	8005faa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa4:	7b7b      	ldrb	r3, [r7, #13]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0c9      	b.n	8006142 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_IC_Start_IT+0xc2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	e023      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x10a>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_IC_Start_IT+0xd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fcc:	e01b      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x10a>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_IC_Start_IT+0xe2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	e013      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x10a>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_IC_Start_IT+0xf2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fec:	e00b      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x10a>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_IC_Start_IT+0x102>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ffc:	e003      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x10a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_TIM_IC_Start_IT+0x11a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	e013      	b.n	800603e <HAL_TIM_IC_Start_IT+0x142>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d104      	bne.n	8006026 <HAL_TIM_IC_Start_IT+0x12a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006024:	e00b      	b.n	800603e <HAL_TIM_IC_Start_IT+0x142>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d104      	bne.n	8006036 <HAL_TIM_IC_Start_IT+0x13a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006034:	e003      	b.n	800603e <HAL_TIM_IC_Start_IT+0x142>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d841      	bhi.n	80060c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <HAL_TIM_IC_Start_IT+0x150>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006081 	.word	0x08006081
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060c9 	.word	0x080060c9
 8006058:	080060c9 	.word	0x080060c9
 800605c:	08006093 	.word	0x08006093
 8006060:	080060c9 	.word	0x080060c9
 8006064:	080060c9 	.word	0x080060c9
 8006068:	080060c9 	.word	0x080060c9
 800606c:	080060a5 	.word	0x080060a5
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060b7 	.word	0x080060b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0202 	orr.w	r2, r2, #2
 800608e:	60da      	str	r2, [r3, #12]
      break;
 8006090:	e01d      	b.n	80060ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0204 	orr.w	r2, r2, #4
 80060a0:	60da      	str	r2, [r3, #12]
      break;
 80060a2:	e014      	b.n	80060ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0208 	orr.w	r2, r2, #8
 80060b2:	60da      	str	r2, [r3, #12]
      break;
 80060b4:	e00b      	b.n	80060ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0210 	orr.w	r2, r2, #16
 80060c4:	60da      	str	r2, [r3, #12]
      break;
 80060c6:	e002      	b.n	80060ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d135      	bne.n	8006140 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2201      	movs	r2, #1
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fe17 	bl	8006d10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a19      	ldr	r2, [pc, #100]	; (800614c <HAL_TIM_IC_Start_IT+0x250>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_TIM_IC_Start_IT+0x204>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f4:	d004      	beq.n	8006100 <HAL_TIM_IC_Start_IT+0x204>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a15      	ldr	r2, [pc, #84]	; (8006150 <HAL_TIM_IC_Start_IT+0x254>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d115      	bne.n	800612c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_TIM_IC_Start_IT+0x258>)
 8006108:	4013      	ands	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b06      	cmp	r3, #6
 8006110:	d015      	beq.n	800613e <HAL_TIM_IC_Start_IT+0x242>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d011      	beq.n	800613e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612a:	e008      	b.n	800613e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e000      	b.n	8006140 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40014000 	.word	0x40014000
 8006154:	00010007 	.word	0x00010007

08006158 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_TIM_IC_Start_DMA+0x22>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e023      	b.n	80061c2 <HAL_TIM_IC_Start_DMA+0x6a>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d104      	bne.n	800618a <HAL_TIM_IC_Start_DMA+0x32>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e01b      	b.n	80061c2 <HAL_TIM_IC_Start_DMA+0x6a>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d104      	bne.n	800619a <HAL_TIM_IC_Start_DMA+0x42>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e013      	b.n	80061c2 <HAL_TIM_IC_Start_DMA+0x6a>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d104      	bne.n	80061aa <HAL_TIM_IC_Start_DMA+0x52>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e00b      	b.n	80061c2 <HAL_TIM_IC_Start_DMA+0x6a>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_IC_Start_DMA+0x62>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e003      	b.n	80061c2 <HAL_TIM_IC_Start_DMA+0x6a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_TIM_IC_Start_DMA+0x7c>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e013      	b.n	80061fc <HAL_TIM_IC_Start_DMA+0xa4>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d104      	bne.n	80061e4 <HAL_TIM_IC_Start_DMA+0x8c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e00b      	b.n	80061fc <HAL_TIM_IC_Start_DMA+0xa4>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d104      	bne.n	80061f4 <HAL_TIM_IC_Start_DMA+0x9c>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e003      	b.n	80061fc <HAL_TIM_IC_Start_DMA+0xa4>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80061fe:	7dbb      	ldrb	r3, [r7, #22]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d002      	beq.n	800620a <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006204:	7d7b      	ldrb	r3, [r7, #21]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d101      	bne.n	800620e <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800620a:	2302      	movs	r3, #2
 800620c:	e143      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800620e:	7dbb      	ldrb	r3, [r7, #22]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d153      	bne.n	80062bc <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006214:	7d7b      	ldrb	r3, [r7, #21]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d150      	bne.n	80062bc <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_TIM_IC_Start_DMA+0xce>
 8006220:	887b      	ldrh	r3, [r7, #2]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e135      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_TIM_IC_Start_DMA+0xe2>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006238:	e023      	b.n	8006282 <HAL_TIM_IC_Start_DMA+0x12a>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d104      	bne.n	800624a <HAL_TIM_IC_Start_DMA+0xf2>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	e01b      	b.n	8006282 <HAL_TIM_IC_Start_DMA+0x12a>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d104      	bne.n	800625a <HAL_TIM_IC_Start_DMA+0x102>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006258:	e013      	b.n	8006282 <HAL_TIM_IC_Start_DMA+0x12a>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d104      	bne.n	800626a <HAL_TIM_IC_Start_DMA+0x112>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006268:	e00b      	b.n	8006282 <HAL_TIM_IC_Start_DMA+0x12a>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b10      	cmp	r3, #16
 800626e:	d104      	bne.n	800627a <HAL_TIM_IC_Start_DMA+0x122>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006278:	e003      	b.n	8006282 <HAL_TIM_IC_Start_DMA+0x12a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_TIM_IC_Start_DMA+0x13a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8006290:	e016      	b.n	80062c0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_IC_Start_DMA+0x14a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 80062a0:	e00e      	b.n	80062c0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_IC_Start_DMA+0x15a>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 80062b0:	e006      	b.n	80062c0 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 80062ba:	e001      	b.n	80062c0 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0ea      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fd21 	bl	8006d10 <TIM_CCxChannelCmd>

  switch (Channel)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	f200 80ad 	bhi.w	8006430 <HAL_TIM_IC_Start_DMA+0x2d8>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <HAL_TIM_IC_Start_DMA+0x184>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006311 	.word	0x08006311
 80062e0:	08006431 	.word	0x08006431
 80062e4:	08006431 	.word	0x08006431
 80062e8:	08006431 	.word	0x08006431
 80062ec:	08006359 	.word	0x08006359
 80062f0:	08006431 	.word	0x08006431
 80062f4:	08006431 	.word	0x08006431
 80062f8:	08006431 	.word	0x08006431
 80062fc:	080063a1 	.word	0x080063a1
 8006300:	08006431 	.word	0x08006431
 8006304:	08006431 	.word	0x08006431
 8006308:	08006431 	.word	0x08006431
 800630c:	080063e9 	.word	0x080063e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	4a62      	ldr	r2, [pc, #392]	; (80064a0 <HAL_TIM_IC_Start_DMA+0x348>)
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	4a61      	ldr	r2, [pc, #388]	; (80064a4 <HAL_TIM_IC_Start_DMA+0x34c>)
 800631e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	4a60      	ldr	r2, [pc, #384]	; (80064a8 <HAL_TIM_IC_Start_DMA+0x350>)
 8006326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3334      	adds	r3, #52	; 0x34
 8006332:	4619      	mov	r1, r3
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	f7fd fa1f 	bl	800377a <HAL_DMA_Start_IT>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e0a7      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006354:	60da      	str	r2, [r3, #12]
      break;
 8006356:	e06e      	b.n	8006436 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	4a50      	ldr	r2, [pc, #320]	; (80064a0 <HAL_TIM_IC_Start_DMA+0x348>)
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	4a4f      	ldr	r2, [pc, #316]	; (80064a4 <HAL_TIM_IC_Start_DMA+0x34c>)
 8006366:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	4a4e      	ldr	r2, [pc, #312]	; (80064a8 <HAL_TIM_IC_Start_DMA+0x350>)
 800636e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3338      	adds	r3, #56	; 0x38
 800637a:	4619      	mov	r1, r3
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	887b      	ldrh	r3, [r7, #2]
 8006380:	f7fd f9fb 	bl	800377a <HAL_DMA_Start_IT>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e083      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800639c:	60da      	str	r2, [r3, #12]
      break;
 800639e:	e04a      	b.n	8006436 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a3e      	ldr	r2, [pc, #248]	; (80064a0 <HAL_TIM_IC_Start_DMA+0x348>)
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a3d      	ldr	r2, [pc, #244]	; (80064a4 <HAL_TIM_IC_Start_DMA+0x34c>)
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a3c      	ldr	r2, [pc, #240]	; (80064a8 <HAL_TIM_IC_Start_DMA+0x350>)
 80063b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	333c      	adds	r3, #60	; 0x3c
 80063c2:	4619      	mov	r1, r3
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	f7fd f9d7 	bl	800377a <HAL_DMA_Start_IT>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e05f      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e4:	60da      	str	r2, [r3, #12]
      break;
 80063e6:	e026      	b.n	8006436 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <HAL_TIM_IC_Start_DMA+0x348>)
 80063ee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <HAL_TIM_IC_Start_DMA+0x34c>)
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <HAL_TIM_IC_Start_DMA+0x350>)
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3340      	adds	r3, #64	; 0x40
 800640a:	4619      	mov	r1, r3
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	887b      	ldrh	r3, [r7, #2]
 8006410:	f7fd f9b3 	bl	800377a <HAL_DMA_Start_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e03b      	b.n	8006496 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800642c:	60da      	str	r2, [r3, #12]
      break;
 800642e:	e002      	b.n	8006436 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_IC_Start_DMA+0x354>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d009      	beq.n	8006454 <HAL_TIM_IC_Start_DMA+0x2fc>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006448:	d004      	beq.n	8006454 <HAL_TIM_IC_Start_DMA+0x2fc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <HAL_TIM_IC_Start_DMA+0x358>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d115      	bne.n	8006480 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_TIM_IC_Start_DMA+0x35c>)
 800645c:	4013      	ands	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b06      	cmp	r3, #6
 8006464:	d015      	beq.n	8006492 <HAL_TIM_IC_Start_DMA+0x33a>
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646c:	d011      	beq.n	8006492 <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	e008      	b.n	8006492 <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e000      	b.n	8006494 <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006492:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	080068ff 	.word	0x080068ff
 80064a4:	080069c7 	.word	0x080069c7
 80064a8:	0800686d 	.word	0x0800686d
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40014000 	.word	0x40014000
 80064b4:	00010007 	.word	0x00010007

080064b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d020      	beq.n	800651c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01b      	beq.n	800651c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0202 	mvn.w	r2, #2
 80064ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fa fc24 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f97c 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f98d 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d020      	beq.n	8006568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0204 	mvn.w	r2, #4
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fa fbfe 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f956 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f967 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d020      	beq.n	80065b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0208 	mvn.w	r2, #8
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fa fbd8 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f930 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f941 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d020      	beq.n	8006600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01b      	beq.n	8006600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2208      	movs	r2, #8
 80065d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fbb2 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f90a 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f91b 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0201 	mvn.w	r2, #1
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8e8 	bl	80067f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbfa 	bl	8006e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fbf2 	bl	8006e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f8da 	bl	8006844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0220 	mvn.w	r2, #32
 80066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fbba 	bl	8006e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_IC_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e088      	b.n	80067ec <HAL_TIM_IC_ConfigChannel+0x130>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80066f8:	f000 f9fe 	bl	8006af8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020c 	bic.w	r2, r2, #12
 800670a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6999      	ldr	r1, [r3, #24]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	619a      	str	r2, [r3, #24]
 800671e:	e060      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d11c      	bne.n	8006760 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006736:	f000 fa35 	bl	8006ba4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6999      	ldr	r1, [r3, #24]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	021a      	lsls	r2, r3, #8
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	619a      	str	r2, [r3, #24]
 800675e:	e040      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d11b      	bne.n	800679e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006776:	f000 fa52 	bl	8006c1e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 020c 	bic.w	r2, r2, #12
 8006788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69d9      	ldr	r1, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	61da      	str	r2, [r3, #28]
 800679c:	e021      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d11c      	bne.n	80067de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80067b4:	f000 fa6f 	bl	8006c96 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69d9      	ldr	r1, [r3, #28]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
 80067dc:	e001      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d107      	bne.n	8006894 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006892:	e02a      	b.n	80068ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d107      	bne.n	80068ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2202      	movs	r2, #2
 80068a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ac:	e01d      	b.n	80068ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d107      	bne.n	80068c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2204      	movs	r2, #4
 80068bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c6:	e010      	b.n	80068ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d107      	bne.n	80068e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2208      	movs	r2, #8
 80068d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e0:	e003      	b.n	80068ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ffb4 	bl	8006858 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	771a      	strb	r2, [r3, #28]
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d10f      	bne.n	8006936 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d146      	bne.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006934:	e03d      	b.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d10f      	bne.n	8006960 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2202      	movs	r2, #2
 8006944:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d131      	bne.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800695e:	e028      	b.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d10f      	bne.n	800698a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2204      	movs	r2, #4
 800696e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d11c      	bne.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006988:	e013      	b.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d10e      	bne.n	80069b2 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2208      	movs	r2, #8
 8006998:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d107      	bne.n	80069b2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fa f9cc 	bl	8000d50 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	771a      	strb	r2, [r3, #28]
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d103      	bne.n	80069e6 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	771a      	strb	r2, [r3, #28]
 80069e4:	e019      	b.n	8006a1a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d103      	bne.n	80069f8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	771a      	strb	r2, [r3, #28]
 80069f6:	e010      	b.n	8006a1a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d103      	bne.n	8006a0a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2204      	movs	r2, #4
 8006a06:	771a      	strb	r2, [r3, #28]
 8006a08:	e007      	b.n	8006a1a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d102      	bne.n	8006a1a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2208      	movs	r2, #8
 8006a18:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fefe 	bl	800681c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	771a      	strb	r2, [r3, #28]
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a2a      	ldr	r2, [pc, #168]	; (8006aec <TIM_Base_SetConfig+0xbc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_Base_SetConfig+0x20>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d108      	bne.n	8006a62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a21      	ldr	r2, [pc, #132]	; (8006aec <TIM_Base_SetConfig+0xbc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <TIM_Base_SetConfig+0x52>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d007      	beq.n	8006a82 <TIM_Base_SetConfig+0x52>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <TIM_Base_SetConfig+0xc0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_Base_SetConfig+0x52>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <TIM_Base_SetConfig+0xc4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d108      	bne.n	8006a94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a0c      	ldr	r2, [pc, #48]	; (8006aec <TIM_Base_SetConfig+0xbc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0xa0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a0b      	ldr	r2, [pc, #44]	; (8006af0 <TIM_Base_SetConfig+0xc0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0xa0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <TIM_Base_SetConfig+0xc4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	615a      	str	r2, [r3, #20]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400

08006af8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0201 	bic.w	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <TIM_TI1_SetConfig+0xa4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d007      	beq.n	8006b36 <TIM_TI1_SetConfig+0x3e>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d003      	beq.n	8006b36 <TIM_TI1_SetConfig+0x3e>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <TIM_TI1_SetConfig+0xa8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d101      	bne.n	8006b3a <TIM_TI1_SetConfig+0x42>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <TIM_TI1_SetConfig+0x44>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e003      	b.n	8006b5a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f023 030a 	bic.w	r3, r3, #10
 8006b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f003 030a 	and.w	r3, r3, #10
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40014000 	.word	0x40014000

08006ba4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f023 0210 	bic.w	r2, r3, #16
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	031b      	lsls	r3, r3, #12
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	621a      	str	r2, [r3, #32]
}
 8006c12:	bf00      	nop
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b087      	sub	sp, #28
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b087      	sub	sp, #28
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	031b      	lsls	r3, r3, #12
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	031b      	lsls	r3, r3, #12
 8006cee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e04f      	b.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ddc:	d004      	beq.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a10      	ldr	r2, [pc, #64]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10c      	bne.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40014000 	.word	0x40014000

08006e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e040      	b.n	8006ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fa fca6 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2224      	movs	r2, #36	; 0x24
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 feb2 	bl	8007c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc83 	bl	80077bc <UART_SetConfig>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e01b      	b.n	8006ef8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 ff31 	bl	8007d58 <UART_CheckIdleState>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d178      	bne.n	800700a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_UART_Transmit+0x24>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e071      	b.n	800700c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2221      	movs	r2, #33	; 0x21
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f36:	f7fa fe2f 	bl	8001b98 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f54:	d108      	bne.n	8006f68 <HAL_UART_Transmit+0x68>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e003      	b.n	8006f70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f70:	e030      	b.n	8006fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 ff93 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e03c      	b.n	800700c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	881a      	ldrh	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	3302      	adds	r3, #2
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e008      	b.n	8006fc2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1c8      	bne.n	8006f72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2140      	movs	r1, #64	; 0x40
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 ff5c 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e005      	b.n	800700c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702a:	2b20      	cmp	r3, #32
 800702c:	f040 80b6 	bne.w	800719c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_UART_Receive+0x28>
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0ae      	b.n	800719e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2222      	movs	r2, #34	; 0x22
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007056:	f7fa fd9f 	bl	8001b98 <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	88fa      	ldrh	r2, [r7, #6]
 8007060:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d10e      	bne.n	8007094 <HAL_UART_Receive+0x80>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <HAL_UART_Receive+0x76>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007088:	e02d      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007092:	e028      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10d      	bne.n	80070b8 <HAL_UART_Receive+0xa4>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_UART_Receive+0x9a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ac:	e01b      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	227f      	movs	r2, #127	; 0x7f
 80070b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070b6:	e016      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070c0:	d10d      	bne.n	80070de <HAL_UART_Receive+0xca>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <HAL_UART_Receive+0xc0>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	227f      	movs	r2, #127	; 0x7f
 80070ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070d2:	e008      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	223f      	movs	r2, #63	; 0x3f
 80070d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070dc:	e003      	b.n	80070e6 <HAL_UART_Receive+0xd2>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d108      	bne.n	800710a <HAL_UART_Receive+0xf6>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	e003      	b.n	8007112 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007112:	e037      	b.n	8007184 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	2120      	movs	r1, #32
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fec2 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e033      	b.n	800719e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10c      	bne.n	8007156 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007142:	b29a      	uxth	r2, r3
 8007144:	8a7b      	ldrh	r3, [r7, #18]
 8007146:	4013      	ands	r3, r2
 8007148:	b29a      	uxth	r2, r3
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3302      	adds	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e00d      	b.n	8007172 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800715c:	b29b      	uxth	r3, r3
 800715e:	b2da      	uxtb	r2, r3
 8007160:	8a7b      	ldrh	r3, [r7, #18]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	4013      	ands	r3, r2
 8007166:	b2da      	uxtb	r2, r3
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1c1      	bne.n	8007114 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b0ba      	sub	sp, #232	; 0xe8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80071d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80071d6:	4013      	ands	r3, r2
 80071d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d115      	bne.n	8007210 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00f      	beq.n	8007210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 82ae 	beq.w	8007762 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
      }
      return;
 800720e:	e2a8      	b.n	8007762 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8117 	beq.w	8007448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800721a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800722a:	4b85      	ldr	r3, [pc, #532]	; (8007440 <HAL_UART_IRQHandler+0x298>)
 800722c:	4013      	ands	r3, r2
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 810a 	beq.w	8007448 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d011      	beq.n	8007264 <HAL_UART_IRQHandler+0xbc>
 8007240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2201      	movs	r2, #1
 8007252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725a:	f043 0201 	orr.w	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d011      	beq.n	8007294 <HAL_UART_IRQHandler+0xec>
 8007270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2202      	movs	r2, #2
 8007282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728a:	f043 0204 	orr.w	r2, r3, #4
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d011      	beq.n	80072c4 <HAL_UART_IRQHandler+0x11c>
 80072a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2204      	movs	r2, #4
 80072b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2208      	movs	r2, #8
 80072ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f6:	f043 0208 	orr.w	r2, r3, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007308:	2b00      	cmp	r3, #0
 800730a:	d012      	beq.n	8007332 <HAL_UART_IRQHandler+0x18a>
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8214 	beq.w	8007766 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800734a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d005      	beq.n	800738a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800737e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007386:	2b00      	cmp	r3, #0
 8007388:	d04f      	beq.n	800742a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fdf3 	bl	8007f76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d141      	bne.n	8007422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1d9      	bne.n	800739e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f6:	4a13      	ldr	r2, [pc, #76]	; (8007444 <HAL_UART_IRQHandler+0x29c>)
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fc fa59 	bl	80038b6 <HAL_DMA_Abort_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e00f      	b.n	800743a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9b8 	bl	8007790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e00b      	b.n	800743a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9b4 	bl	8007790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	e007      	b.n	800743a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9b0 	bl	8007790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007438:	e195      	b.n	8007766 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743a:	bf00      	nop
    return;
 800743c:	e193      	b.n	8007766 <HAL_UART_IRQHandler+0x5be>
 800743e:	bf00      	nop
 8007440:	04000120 	.word	0x04000120
 8007444:	0800803f 	.word	0x0800803f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744c:	2b01      	cmp	r3, #1
 800744e:	f040 814e 	bne.w	80076ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8147 	beq.w	80076ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8140 	beq.w	80076ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2210      	movs	r2, #16
 8007474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	f040 80b8 	bne.w	80075f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8167 	beq.w	800776a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a6:	429a      	cmp	r2, r3
 80074a8:	f080 815f 	bcs.w	800776a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 8086 	bne.w	80075d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800750a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1da      	bne.n	80074c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3308      	adds	r3, #8
 8007532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800753a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800753e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e1      	bne.n	8007512 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800755e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e3      	bne.n	800754e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a4:	f023 0310 	bic.w	r3, r3, #16
 80075a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e4      	bne.n	8007594 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc f933 	bl	800383a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f8d8 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075f4:	e0b9      	b.n	800776a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007602:	b29b      	uxth	r3, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80ab 	beq.w	800776e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80a6 	beq.w	800776e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007644:	647b      	str	r3, [r7, #68]	; 0x44
 8007646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800764a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e4      	bne.n	8007622 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	623b      	str	r3, [r7, #32]
   return(result);
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800767c:	633a      	str	r2, [r7, #48]	; 0x30
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e3      	bne.n	8007658 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	617b      	str	r3, [r7, #20]
   return(result);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e4      	bne.n	80076a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f85c 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076ec:	e03f      	b.n	800776e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <HAL_UART_IRQHandler+0x570>
 80076fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800770e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcd4 	bl	80080be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007716:	e02d      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d01c      	beq.n	8007772 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
    }
    return;
 8007740:	e017      	b.n	8007772 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d012      	beq.n	8007774 <HAL_UART_IRQHandler+0x5cc>
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc85 	bl	800806a <UART_EndTransmit_IT>
    return;
 8007760:	e008      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007762:	bf00      	nop
 8007764:	e006      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007766:	bf00      	nop
 8007768:	e004      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
      return;
 800776a:	bf00      	nop
 800776c:	e002      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
      return;
 800776e:	bf00      	nop
 8007770:	e000      	b.n	8007774 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007772:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007774:	37e8      	adds	r7, #232	; 0xe8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077c0:	b08a      	sub	sp, #40	; 0x28
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	431a      	orrs	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4bb4      	ldr	r3, [pc, #720]	; (8007abc <UART_SetConfig+0x300>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4aa9      	ldr	r2, [pc, #676]	; (8007ac0 <UART_SetConfig+0x304>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007824:	4313      	orrs	r3, r2
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	430a      	orrs	r2, r1
 800783a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4aa0      	ldr	r2, [pc, #640]	; (8007ac4 <UART_SetConfig+0x308>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d126      	bne.n	8007894 <UART_SetConfig+0xd8>
 8007846:	4ba0      	ldr	r3, [pc, #640]	; (8007ac8 <UART_SetConfig+0x30c>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d81b      	bhi.n	800788c <UART_SetConfig+0xd0>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <UART_SetConfig+0xa0>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	0800786d 	.word	0x0800786d
 8007860:	0800787d 	.word	0x0800787d
 8007864:	08007875 	.word	0x08007875
 8007868:	08007885 	.word	0x08007885
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007872:	e080      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007874:	2302      	movs	r3, #2
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787a:	e07c      	b.n	8007976 <UART_SetConfig+0x1ba>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007882:	e078      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788a:	e074      	b.n	8007976 <UART_SetConfig+0x1ba>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007892:	e070      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a8c      	ldr	r2, [pc, #560]	; (8007acc <UART_SetConfig+0x310>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d138      	bne.n	8007910 <UART_SetConfig+0x154>
 800789e:	4b8a      	ldr	r3, [pc, #552]	; (8007ac8 <UART_SetConfig+0x30c>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	f003 030c 	and.w	r3, r3, #12
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	d82d      	bhi.n	8007908 <UART_SetConfig+0x14c>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <UART_SetConfig+0xf8>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	08007909 	.word	0x08007909
 80078bc:	08007909 	.word	0x08007909
 80078c0:	08007909 	.word	0x08007909
 80078c4:	080078f9 	.word	0x080078f9
 80078c8:	08007909 	.word	0x08007909
 80078cc:	08007909 	.word	0x08007909
 80078d0:	08007909 	.word	0x08007909
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	08007909 	.word	0x08007909
 80078dc:	08007909 	.word	0x08007909
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007901 	.word	0x08007901
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ee:	e042      	b.n	8007976 <UART_SetConfig+0x1ba>
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f6:	e03e      	b.n	8007976 <UART_SetConfig+0x1ba>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078fe:	e03a      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007906:	e036      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800790e:	e032      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a6a      	ldr	r2, [pc, #424]	; (8007ac0 <UART_SetConfig+0x304>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d12a      	bne.n	8007970 <UART_SetConfig+0x1b4>
 800791a:	4b6b      	ldr	r3, [pc, #428]	; (8007ac8 <UART_SetConfig+0x30c>)
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007928:	d01a      	beq.n	8007960 <UART_SetConfig+0x1a4>
 800792a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800792e:	d81b      	bhi.n	8007968 <UART_SetConfig+0x1ac>
 8007930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007934:	d00c      	beq.n	8007950 <UART_SetConfig+0x194>
 8007936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793a:	d815      	bhi.n	8007968 <UART_SetConfig+0x1ac>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <UART_SetConfig+0x18c>
 8007940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007944:	d008      	beq.n	8007958 <UART_SetConfig+0x19c>
 8007946:	e00f      	b.n	8007968 <UART_SetConfig+0x1ac>
 8007948:	2300      	movs	r3, #0
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800794e:	e012      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007950:	2302      	movs	r3, #2
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007956:	e00e      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800795e:	e00a      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007966:	e006      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800796e:	e002      	b.n	8007976 <UART_SetConfig+0x1ba>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a51      	ldr	r2, [pc, #324]	; (8007ac0 <UART_SetConfig+0x304>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d17a      	bne.n	8007a76 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007984:	2b08      	cmp	r3, #8
 8007986:	d824      	bhi.n	80079d2 <UART_SetConfig+0x216>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x1d4>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079c3 	.word	0x080079c3
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079d3 	.word	0x080079d3
 80079ac:	080079d3 	.word	0x080079d3
 80079b0:	080079cb 	.word	0x080079cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fd fa0a 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 80079b8:	61f8      	str	r0, [r7, #28]
        break;
 80079ba:	e010      	b.n	80079de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b44      	ldr	r3, [pc, #272]	; (8007ad0 <UART_SetConfig+0x314>)
 80079be:	61fb      	str	r3, [r7, #28]
        break;
 80079c0:	e00d      	b.n	80079de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fd f96b 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 80079c6:	61f8      	str	r0, [r7, #28]
        break;
 80079c8:	e009      	b.n	80079de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ce:	61fb      	str	r3, [r7, #28]
        break;
 80079d0:	e005      	b.n	80079de <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8107 	beq.w	8007bf4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	4413      	add	r3, r2
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d305      	bcc.n	8007a02 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a08:	e0f4      	b.n	8007bf4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	461c      	mov	r4, r3
 8007a10:	4615      	mov	r5, r2
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	022b      	lsls	r3, r5, #8
 8007a1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a20:	0222      	lsls	r2, r4, #8
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6849      	ldr	r1, [r1, #4]
 8007a26:	0849      	lsrs	r1, r1, #1
 8007a28:	2000      	movs	r0, #0
 8007a2a:	4688      	mov	r8, r1
 8007a2c:	4681      	mov	r9, r0
 8007a2e:	eb12 0a08 	adds.w	sl, r2, r8
 8007a32:	eb43 0b09 	adc.w	fp, r3, r9
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	603b      	str	r3, [r7, #0]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a44:	4650      	mov	r0, sl
 8007a46:	4659      	mov	r1, fp
 8007a48:	f7f8 fc22 	bl	8000290 <__aeabi_uldivmod>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4613      	mov	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5a:	d308      	bcc.n	8007a6e <UART_SetConfig+0x2b2>
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a62:	d204      	bcs.n	8007a6e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	60da      	str	r2, [r3, #12]
 8007a6c:	e0c2      	b.n	8007bf4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a74:	e0be      	b.n	8007bf4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7e:	d16a      	bne.n	8007b56 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d834      	bhi.n	8007af2 <UART_SetConfig+0x336>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x2d4>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ad5 	.word	0x08007ad5
 8007a98:	08007add 	.word	0x08007add
 8007a9c:	08007af3 	.word	0x08007af3
 8007aa0:	08007ae3 	.word	0x08007ae3
 8007aa4:	08007af3 	.word	0x08007af3
 8007aa8:	08007af3 	.word	0x08007af3
 8007aac:	08007af3 	.word	0x08007af3
 8007ab0:	08007aeb 	.word	0x08007aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fd f98a 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8007ab8:	61f8      	str	r0, [r7, #28]
        break;
 8007aba:	e020      	b.n	8007afe <UART_SetConfig+0x342>
 8007abc:	efff69f3 	.word	0xefff69f3
 8007ac0:	40008000 	.word	0x40008000
 8007ac4:	40013800 	.word	0x40013800
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad4:	f7fd f990 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 8007ad8:	61f8      	str	r0, [r7, #28]
        break;
 8007ada:	e010      	b.n	8007afe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007adc:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <UART_SetConfig+0x454>)
 8007ade:	61fb      	str	r3, [r7, #28]
        break;
 8007ae0:	e00d      	b.n	8007afe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ae2:	f7fd f8db 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8007ae6:	61f8      	str	r0, [r7, #28]
        break;
 8007ae8:	e009      	b.n	8007afe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aee:	61fb      	str	r3, [r7, #28]
        break;
 8007af0:	e005      	b.n	8007afe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d077      	beq.n	8007bf4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	005a      	lsls	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	441a      	add	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d916      	bls.n	8007b4e <UART_SetConfig+0x392>
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d212      	bcs.n	8007b4e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f023 030f 	bic.w	r3, r3, #15
 8007b30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	8afb      	ldrh	r3, [r7, #22]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	8afa      	ldrh	r2, [r7, #22]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e052      	b.n	8007bf4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b54:	e04e      	b.n	8007bf4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d827      	bhi.n	8007bae <UART_SetConfig+0x3f2>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <UART_SetConfig+0x3a8>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	08007baf 	.word	0x08007baf
 8007b74:	08007b9f 	.word	0x08007b9f
 8007b78:	08007baf 	.word	0x08007baf
 8007b7c:	08007baf 	.word	0x08007baf
 8007b80:	08007baf 	.word	0x08007baf
 8007b84:	08007ba7 	.word	0x08007ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b88:	f7fd f920 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8007b8c:	61f8      	str	r0, [r7, #28]
        break;
 8007b8e:	e014      	b.n	8007bba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b90:	f7fd f932 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 8007b94:	61f8      	str	r0, [r7, #28]
        break;
 8007b96:	e010      	b.n	8007bba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <UART_SetConfig+0x454>)
 8007b9a:	61fb      	str	r3, [r7, #28]
        break;
 8007b9c:	e00d      	b.n	8007bba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9e:	f7fd f87d 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8007ba2:	61f8      	str	r0, [r7, #28]
        break;
 8007ba4:	e009      	b.n	8007bba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007baa:	61fb      	str	r3, [r7, #28]
        break;
 8007bac:	e005      	b.n	8007bba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bb8:	bf00      	nop
    }

    if (pclk != 0U)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d019      	beq.n	8007bf4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	085a      	lsrs	r2, r3, #1
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	441a      	add	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d909      	bls.n	8007bee <UART_SetConfig+0x432>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be0:	d205      	bcs.n	8007bee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e002      	b.n	8007bf4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c0e:	bf00      	nop
 8007c10:	00f42400 	.word	0x00f42400

08007c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01a      	beq.n	8007d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d12:	d10a      	bne.n	8007d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b098      	sub	sp, #96	; 0x60
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d68:	f7f9 ff16 	bl	8001b98 <HAL_GetTick>
 8007d6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d12e      	bne.n	8007dda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d84:	2200      	movs	r2, #0
 8007d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f88c 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d021      	beq.n	8007dda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	653b      	str	r3, [r7, #80]	; 0x50
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	647b      	str	r3, [r7, #68]	; 0x44
 8007db6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e062      	b.n	8007ea0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d149      	bne.n	8007e7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df0:	2200      	movs	r2, #0
 8007df2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f856 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d03c      	beq.n	8007e7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
 8007e22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e6      	bne.n	8007e02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e011      	b.n	8007ea0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3758      	adds	r7, #88	; 0x58
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	e049      	b.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec0:	d045      	beq.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec2:	f7f9 fe69 	bl	8001b98 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d302      	bcc.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e048      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d031      	beq.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d110      	bne.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2208      	movs	r2, #8
 8007efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f838 	bl	8007f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e029      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f28:	d111      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f81e 	bl	8007f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e00f      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4013      	ands	r3, r2
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	bf0c      	ite	eq
 8007f5e:	2301      	moveq	r3, #1
 8007f60:	2300      	movne	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d0a6      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b095      	sub	sp, #84	; 0x54
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e6      	bne.n	8007f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d118      	bne.n	800801e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f023 0310 	bic.w	r3, r3, #16
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6979      	ldr	r1, [r7, #20]
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	613b      	str	r3, [r7, #16]
   return(result);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e6      	bne.n	8007fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008032:	bf00      	nop
 8008034:	3754      	adds	r7, #84	; 0x54
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff fb97 	bl	8007790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b088      	sub	sp, #32
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	613b      	str	r3, [r7, #16]
   return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e6      	bne.n	8008072 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fb63 	bl	800777c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b6:	bf00      	nop
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <atoi>:
 80080d2:	220a      	movs	r2, #10
 80080d4:	2100      	movs	r1, #0
 80080d6:	f000 b883 	b.w	80081e0 <strtol>
	...

080080dc <_strtol_l.constprop.0>:
 80080dc:	2b01      	cmp	r3, #1
 80080de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e2:	d001      	beq.n	80080e8 <_strtol_l.constprop.0+0xc>
 80080e4:	2b24      	cmp	r3, #36	; 0x24
 80080e6:	d906      	bls.n	80080f6 <_strtol_l.constprop.0+0x1a>
 80080e8:	f000 fbf4 	bl	80088d4 <__errno>
 80080ec:	2316      	movs	r3, #22
 80080ee:	6003      	str	r3, [r0, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081dc <_strtol_l.constprop.0+0x100>
 80080fa:	460d      	mov	r5, r1
 80080fc:	462e      	mov	r6, r5
 80080fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008102:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008106:	f017 0708 	ands.w	r7, r7, #8
 800810a:	d1f7      	bne.n	80080fc <_strtol_l.constprop.0+0x20>
 800810c:	2c2d      	cmp	r4, #45	; 0x2d
 800810e:	d132      	bne.n	8008176 <_strtol_l.constprop.0+0x9a>
 8008110:	782c      	ldrb	r4, [r5, #0]
 8008112:	2701      	movs	r7, #1
 8008114:	1cb5      	adds	r5, r6, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d05b      	beq.n	80081d2 <_strtol_l.constprop.0+0xf6>
 800811a:	2b10      	cmp	r3, #16
 800811c:	d109      	bne.n	8008132 <_strtol_l.constprop.0+0x56>
 800811e:	2c30      	cmp	r4, #48	; 0x30
 8008120:	d107      	bne.n	8008132 <_strtol_l.constprop.0+0x56>
 8008122:	782c      	ldrb	r4, [r5, #0]
 8008124:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008128:	2c58      	cmp	r4, #88	; 0x58
 800812a:	d14d      	bne.n	80081c8 <_strtol_l.constprop.0+0xec>
 800812c:	786c      	ldrb	r4, [r5, #1]
 800812e:	2310      	movs	r3, #16
 8008130:	3502      	adds	r5, #2
 8008132:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008136:	f108 38ff 	add.w	r8, r8, #4294967295
 800813a:	f04f 0e00 	mov.w	lr, #0
 800813e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008142:	4676      	mov	r6, lr
 8008144:	fb03 8a19 	mls	sl, r3, r9, r8
 8008148:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800814c:	f1bc 0f09 	cmp.w	ip, #9
 8008150:	d816      	bhi.n	8008180 <_strtol_l.constprop.0+0xa4>
 8008152:	4664      	mov	r4, ip
 8008154:	42a3      	cmp	r3, r4
 8008156:	dd24      	ble.n	80081a2 <_strtol_l.constprop.0+0xc6>
 8008158:	f1be 3fff 	cmp.w	lr, #4294967295
 800815c:	d008      	beq.n	8008170 <_strtol_l.constprop.0+0x94>
 800815e:	45b1      	cmp	r9, r6
 8008160:	d31c      	bcc.n	800819c <_strtol_l.constprop.0+0xc0>
 8008162:	d101      	bne.n	8008168 <_strtol_l.constprop.0+0x8c>
 8008164:	45a2      	cmp	sl, r4
 8008166:	db19      	blt.n	800819c <_strtol_l.constprop.0+0xc0>
 8008168:	fb06 4603 	mla	r6, r6, r3, r4
 800816c:	f04f 0e01 	mov.w	lr, #1
 8008170:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008174:	e7e8      	b.n	8008148 <_strtol_l.constprop.0+0x6c>
 8008176:	2c2b      	cmp	r4, #43	; 0x2b
 8008178:	bf04      	itt	eq
 800817a:	782c      	ldrbeq	r4, [r5, #0]
 800817c:	1cb5      	addeq	r5, r6, #2
 800817e:	e7ca      	b.n	8008116 <_strtol_l.constprop.0+0x3a>
 8008180:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008184:	f1bc 0f19 	cmp.w	ip, #25
 8008188:	d801      	bhi.n	800818e <_strtol_l.constprop.0+0xb2>
 800818a:	3c37      	subs	r4, #55	; 0x37
 800818c:	e7e2      	b.n	8008154 <_strtol_l.constprop.0+0x78>
 800818e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008192:	f1bc 0f19 	cmp.w	ip, #25
 8008196:	d804      	bhi.n	80081a2 <_strtol_l.constprop.0+0xc6>
 8008198:	3c57      	subs	r4, #87	; 0x57
 800819a:	e7db      	b.n	8008154 <_strtol_l.constprop.0+0x78>
 800819c:	f04f 3eff 	mov.w	lr, #4294967295
 80081a0:	e7e6      	b.n	8008170 <_strtol_l.constprop.0+0x94>
 80081a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80081a6:	d105      	bne.n	80081b4 <_strtol_l.constprop.0+0xd8>
 80081a8:	2322      	movs	r3, #34	; 0x22
 80081aa:	6003      	str	r3, [r0, #0]
 80081ac:	4646      	mov	r6, r8
 80081ae:	b942      	cbnz	r2, 80081c2 <_strtol_l.constprop.0+0xe6>
 80081b0:	4630      	mov	r0, r6
 80081b2:	e79e      	b.n	80080f2 <_strtol_l.constprop.0+0x16>
 80081b4:	b107      	cbz	r7, 80081b8 <_strtol_l.constprop.0+0xdc>
 80081b6:	4276      	negs	r6, r6
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	d0f9      	beq.n	80081b0 <_strtol_l.constprop.0+0xd4>
 80081bc:	f1be 0f00 	cmp.w	lr, #0
 80081c0:	d000      	beq.n	80081c4 <_strtol_l.constprop.0+0xe8>
 80081c2:	1e69      	subs	r1, r5, #1
 80081c4:	6011      	str	r1, [r2, #0]
 80081c6:	e7f3      	b.n	80081b0 <_strtol_l.constprop.0+0xd4>
 80081c8:	2430      	movs	r4, #48	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1b1      	bne.n	8008132 <_strtol_l.constprop.0+0x56>
 80081ce:	2308      	movs	r3, #8
 80081d0:	e7af      	b.n	8008132 <_strtol_l.constprop.0+0x56>
 80081d2:	2c30      	cmp	r4, #48	; 0x30
 80081d4:	d0a5      	beq.n	8008122 <_strtol_l.constprop.0+0x46>
 80081d6:	230a      	movs	r3, #10
 80081d8:	e7ab      	b.n	8008132 <_strtol_l.constprop.0+0x56>
 80081da:	bf00      	nop
 80081dc:	080098d9 	.word	0x080098d9

080081e0 <strtol>:
 80081e0:	4613      	mov	r3, r2
 80081e2:	460a      	mov	r2, r1
 80081e4:	4601      	mov	r1, r0
 80081e6:	4802      	ldr	r0, [pc, #8]	; (80081f0 <strtol+0x10>)
 80081e8:	6800      	ldr	r0, [r0, #0]
 80081ea:	f7ff bf77 	b.w	80080dc <_strtol_l.constprop.0>
 80081ee:	bf00      	nop
 80081f0:	200000dc 	.word	0x200000dc

080081f4 <std>:
 80081f4:	2300      	movs	r3, #0
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	e9c0 3300 	strd	r3, r3, [r0]
 80081fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008202:	6083      	str	r3, [r0, #8]
 8008204:	8181      	strh	r1, [r0, #12]
 8008206:	6643      	str	r3, [r0, #100]	; 0x64
 8008208:	81c2      	strh	r2, [r0, #14]
 800820a:	6183      	str	r3, [r0, #24]
 800820c:	4619      	mov	r1, r3
 800820e:	2208      	movs	r2, #8
 8008210:	305c      	adds	r0, #92	; 0x5c
 8008212:	f000 fab5 	bl	8008780 <memset>
 8008216:	4b0d      	ldr	r3, [pc, #52]	; (800824c <std+0x58>)
 8008218:	6263      	str	r3, [r4, #36]	; 0x24
 800821a:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <std+0x5c>)
 800821c:	62a3      	str	r3, [r4, #40]	; 0x28
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <std+0x60>)
 8008220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <std+0x64>)
 8008224:	6323      	str	r3, [r4, #48]	; 0x30
 8008226:	4b0d      	ldr	r3, [pc, #52]	; (800825c <std+0x68>)
 8008228:	6224      	str	r4, [r4, #32]
 800822a:	429c      	cmp	r4, r3
 800822c:	d006      	beq.n	800823c <std+0x48>
 800822e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008232:	4294      	cmp	r4, r2
 8008234:	d002      	beq.n	800823c <std+0x48>
 8008236:	33d0      	adds	r3, #208	; 0xd0
 8008238:	429c      	cmp	r4, r3
 800823a:	d105      	bne.n	8008248 <std+0x54>
 800823c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008244:	f000 bb70 	b.w	8008928 <__retarget_lock_init_recursive>
 8008248:	bd10      	pop	{r4, pc}
 800824a:	bf00      	nop
 800824c:	080085d1 	.word	0x080085d1
 8008250:	080085f3 	.word	0x080085f3
 8008254:	0800862b 	.word	0x0800862b
 8008258:	0800864f 	.word	0x0800864f
 800825c:	200002cc 	.word	0x200002cc

08008260 <stdio_exit_handler>:
 8008260:	4a02      	ldr	r2, [pc, #8]	; (800826c <stdio_exit_handler+0xc>)
 8008262:	4903      	ldr	r1, [pc, #12]	; (8008270 <stdio_exit_handler+0x10>)
 8008264:	4803      	ldr	r0, [pc, #12]	; (8008274 <stdio_exit_handler+0x14>)
 8008266:	f000 b869 	b.w	800833c <_fwalk_sglue>
 800826a:	bf00      	nop
 800826c:	20000084 	.word	0x20000084
 8008270:	08009221 	.word	0x08009221
 8008274:	20000090 	.word	0x20000090

08008278 <cleanup_stdio>:
 8008278:	6841      	ldr	r1, [r0, #4]
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <cleanup_stdio+0x34>)
 800827c:	4299      	cmp	r1, r3
 800827e:	b510      	push	{r4, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	d001      	beq.n	8008288 <cleanup_stdio+0x10>
 8008284:	f000 ffcc 	bl	8009220 <_fflush_r>
 8008288:	68a1      	ldr	r1, [r4, #8]
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <cleanup_stdio+0x38>)
 800828c:	4299      	cmp	r1, r3
 800828e:	d002      	beq.n	8008296 <cleanup_stdio+0x1e>
 8008290:	4620      	mov	r0, r4
 8008292:	f000 ffc5 	bl	8009220 <_fflush_r>
 8008296:	68e1      	ldr	r1, [r4, #12]
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <cleanup_stdio+0x3c>)
 800829a:	4299      	cmp	r1, r3
 800829c:	d004      	beq.n	80082a8 <cleanup_stdio+0x30>
 800829e:	4620      	mov	r0, r4
 80082a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a4:	f000 bfbc 	b.w	8009220 <_fflush_r>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	200002cc 	.word	0x200002cc
 80082b0:	20000334 	.word	0x20000334
 80082b4:	2000039c 	.word	0x2000039c

080082b8 <global_stdio_init.part.0>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <global_stdio_init.part.0+0x30>)
 80082bc:	4c0b      	ldr	r4, [pc, #44]	; (80082ec <global_stdio_init.part.0+0x34>)
 80082be:	4a0c      	ldr	r2, [pc, #48]	; (80082f0 <global_stdio_init.part.0+0x38>)
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	4620      	mov	r0, r4
 80082c4:	2200      	movs	r2, #0
 80082c6:	2104      	movs	r1, #4
 80082c8:	f7ff ff94 	bl	80081f4 <std>
 80082cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80082d0:	2201      	movs	r2, #1
 80082d2:	2109      	movs	r1, #9
 80082d4:	f7ff ff8e 	bl	80081f4 <std>
 80082d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80082dc:	2202      	movs	r2, #2
 80082de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e2:	2112      	movs	r1, #18
 80082e4:	f7ff bf86 	b.w	80081f4 <std>
 80082e8:	20000404 	.word	0x20000404
 80082ec:	200002cc 	.word	0x200002cc
 80082f0:	08008261 	.word	0x08008261

080082f4 <__sfp_lock_acquire>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__sfp_lock_acquire+0x8>)
 80082f6:	f000 bb18 	b.w	800892a <__retarget_lock_acquire_recursive>
 80082fa:	bf00      	nop
 80082fc:	2000040d 	.word	0x2000040d

08008300 <__sfp_lock_release>:
 8008300:	4801      	ldr	r0, [pc, #4]	; (8008308 <__sfp_lock_release+0x8>)
 8008302:	f000 bb13 	b.w	800892c <__retarget_lock_release_recursive>
 8008306:	bf00      	nop
 8008308:	2000040d 	.word	0x2000040d

0800830c <__sinit>:
 800830c:	b510      	push	{r4, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	f7ff fff0 	bl	80082f4 <__sfp_lock_acquire>
 8008314:	6a23      	ldr	r3, [r4, #32]
 8008316:	b11b      	cbz	r3, 8008320 <__sinit+0x14>
 8008318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831c:	f7ff bff0 	b.w	8008300 <__sfp_lock_release>
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <__sinit+0x28>)
 8008322:	6223      	str	r3, [r4, #32]
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <__sinit+0x2c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f5      	bne.n	8008318 <__sinit+0xc>
 800832c:	f7ff ffc4 	bl	80082b8 <global_stdio_init.part.0>
 8008330:	e7f2      	b.n	8008318 <__sinit+0xc>
 8008332:	bf00      	nop
 8008334:	08008279 	.word	0x08008279
 8008338:	20000404 	.word	0x20000404

0800833c <_fwalk_sglue>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	4607      	mov	r7, r0
 8008342:	4688      	mov	r8, r1
 8008344:	4614      	mov	r4, r2
 8008346:	2600      	movs	r6, #0
 8008348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800834c:	f1b9 0901 	subs.w	r9, r9, #1
 8008350:	d505      	bpl.n	800835e <_fwalk_sglue+0x22>
 8008352:	6824      	ldr	r4, [r4, #0]
 8008354:	2c00      	cmp	r4, #0
 8008356:	d1f7      	bne.n	8008348 <_fwalk_sglue+0xc>
 8008358:	4630      	mov	r0, r6
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d907      	bls.n	8008374 <_fwalk_sglue+0x38>
 8008364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008368:	3301      	adds	r3, #1
 800836a:	d003      	beq.n	8008374 <_fwalk_sglue+0x38>
 800836c:	4629      	mov	r1, r5
 800836e:	4638      	mov	r0, r7
 8008370:	47c0      	blx	r8
 8008372:	4306      	orrs	r6, r0
 8008374:	3568      	adds	r5, #104	; 0x68
 8008376:	e7e9      	b.n	800834c <_fwalk_sglue+0x10>

08008378 <getchar>:
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <getchar+0xc>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	6841      	ldr	r1, [r0, #4]
 800837e:	f000 bf89 	b.w	8009294 <_getc_r>
 8008382:	bf00      	nop
 8008384:	200000dc 	.word	0x200000dc

08008388 <iprintf>:
 8008388:	b40f      	push	{r0, r1, r2, r3}
 800838a:	b507      	push	{r0, r1, r2, lr}
 800838c:	4906      	ldr	r1, [pc, #24]	; (80083a8 <iprintf+0x20>)
 800838e:	ab04      	add	r3, sp, #16
 8008390:	6808      	ldr	r0, [r1, #0]
 8008392:	f853 2b04 	ldr.w	r2, [r3], #4
 8008396:	6881      	ldr	r1, [r0, #8]
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	f000 fc11 	bl	8008bc0 <_vfiprintf_r>
 800839e:	b003      	add	sp, #12
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b004      	add	sp, #16
 80083a6:	4770      	bx	lr
 80083a8:	200000dc 	.word	0x200000dc

080083ac <putchar>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <putchar+0xc>)
 80083ae:	4601      	mov	r1, r0
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	6882      	ldr	r2, [r0, #8]
 80083b4:	f000 bffb 	b.w	80093ae <_putc_r>
 80083b8:	200000dc 	.word	0x200000dc

080083bc <_puts_r>:
 80083bc:	6a03      	ldr	r3, [r0, #32]
 80083be:	b570      	push	{r4, r5, r6, lr}
 80083c0:	6884      	ldr	r4, [r0, #8]
 80083c2:	4605      	mov	r5, r0
 80083c4:	460e      	mov	r6, r1
 80083c6:	b90b      	cbnz	r3, 80083cc <_puts_r+0x10>
 80083c8:	f7ff ffa0 	bl	800830c <__sinit>
 80083cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d405      	bmi.n	80083de <_puts_r+0x22>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	0598      	lsls	r0, r3, #22
 80083d6:	d402      	bmi.n	80083de <_puts_r+0x22>
 80083d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083da:	f000 faa6 	bl	800892a <__retarget_lock_acquire_recursive>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	0719      	lsls	r1, r3, #28
 80083e2:	d513      	bpl.n	800840c <_puts_r+0x50>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	b18b      	cbz	r3, 800840c <_puts_r+0x50>
 80083e8:	3e01      	subs	r6, #1
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083f0:	3b01      	subs	r3, #1
 80083f2:	60a3      	str	r3, [r4, #8]
 80083f4:	b9e9      	cbnz	r1, 8008432 <_puts_r+0x76>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	da2e      	bge.n	8008458 <_puts_r+0x9c>
 80083fa:	4622      	mov	r2, r4
 80083fc:	210a      	movs	r1, #10
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 f929 	bl	8008656 <__swbuf_r>
 8008404:	3001      	adds	r0, #1
 8008406:	d007      	beq.n	8008418 <_puts_r+0x5c>
 8008408:	250a      	movs	r5, #10
 800840a:	e007      	b.n	800841c <_puts_r+0x60>
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f000 f95e 	bl	80086d0 <__swsetup_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	d0e7      	beq.n	80083e8 <_puts_r+0x2c>
 8008418:	f04f 35ff 	mov.w	r5, #4294967295
 800841c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800841e:	07da      	lsls	r2, r3, #31
 8008420:	d405      	bmi.n	800842e <_puts_r+0x72>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	059b      	lsls	r3, r3, #22
 8008426:	d402      	bmi.n	800842e <_puts_r+0x72>
 8008428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842a:	f000 fa7f 	bl	800892c <__retarget_lock_release_recursive>
 800842e:	4628      	mov	r0, r5
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	2b00      	cmp	r3, #0
 8008434:	da04      	bge.n	8008440 <_puts_r+0x84>
 8008436:	69a2      	ldr	r2, [r4, #24]
 8008438:	429a      	cmp	r2, r3
 800843a:	dc06      	bgt.n	800844a <_puts_r+0x8e>
 800843c:	290a      	cmp	r1, #10
 800843e:	d004      	beq.n	800844a <_puts_r+0x8e>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	6022      	str	r2, [r4, #0]
 8008446:	7019      	strb	r1, [r3, #0]
 8008448:	e7cf      	b.n	80083ea <_puts_r+0x2e>
 800844a:	4622      	mov	r2, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f902 	bl	8008656 <__swbuf_r>
 8008452:	3001      	adds	r0, #1
 8008454:	d1c9      	bne.n	80083ea <_puts_r+0x2e>
 8008456:	e7df      	b.n	8008418 <_puts_r+0x5c>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	250a      	movs	r5, #10
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	701d      	strb	r5, [r3, #0]
 8008462:	e7db      	b.n	800841c <_puts_r+0x60>

08008464 <puts>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <puts+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f7ff bfa7 	b.w	80083bc <_puts_r>
 800846e:	bf00      	nop
 8008470:	200000dc 	.word	0x200000dc

08008474 <setvbuf>:
 8008474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008478:	461d      	mov	r5, r3
 800847a:	4b54      	ldr	r3, [pc, #336]	; (80085cc <setvbuf+0x158>)
 800847c:	681f      	ldr	r7, [r3, #0]
 800847e:	4604      	mov	r4, r0
 8008480:	460e      	mov	r6, r1
 8008482:	4690      	mov	r8, r2
 8008484:	b127      	cbz	r7, 8008490 <setvbuf+0x1c>
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	b913      	cbnz	r3, 8008490 <setvbuf+0x1c>
 800848a:	4638      	mov	r0, r7
 800848c:	f7ff ff3e 	bl	800830c <__sinit>
 8008490:	f1b8 0f02 	cmp.w	r8, #2
 8008494:	d006      	beq.n	80084a4 <setvbuf+0x30>
 8008496:	f1b8 0f01 	cmp.w	r8, #1
 800849a:	f200 8094 	bhi.w	80085c6 <setvbuf+0x152>
 800849e:	2d00      	cmp	r5, #0
 80084a0:	f2c0 8091 	blt.w	80085c6 <setvbuf+0x152>
 80084a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084a6:	07da      	lsls	r2, r3, #31
 80084a8:	d405      	bmi.n	80084b6 <setvbuf+0x42>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	059b      	lsls	r3, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <setvbuf+0x42>
 80084b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084b2:	f000 fa3a 	bl	800892a <__retarget_lock_acquire_recursive>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4638      	mov	r0, r7
 80084ba:	f000 feb1 	bl	8009220 <_fflush_r>
 80084be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c0:	b141      	cbz	r1, 80084d4 <setvbuf+0x60>
 80084c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084c6:	4299      	cmp	r1, r3
 80084c8:	d002      	beq.n	80084d0 <setvbuf+0x5c>
 80084ca:	4638      	mov	r0, r7
 80084cc:	f000 fa4e 	bl	800896c <_free_r>
 80084d0:	2300      	movs	r3, #0
 80084d2:	6363      	str	r3, [r4, #52]	; 0x34
 80084d4:	2300      	movs	r3, #0
 80084d6:	61a3      	str	r3, [r4, #24]
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	0618      	lsls	r0, r3, #24
 80084de:	d503      	bpl.n	80084e8 <setvbuf+0x74>
 80084e0:	6921      	ldr	r1, [r4, #16]
 80084e2:	4638      	mov	r0, r7
 80084e4:	f000 fa42 	bl	800896c <_free_r>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	f1b8 0f02 	cmp.w	r8, #2
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	d05f      	beq.n	80085ba <setvbuf+0x146>
 80084fa:	ab01      	add	r3, sp, #4
 80084fc:	466a      	mov	r2, sp
 80084fe:	4621      	mov	r1, r4
 8008500:	4638      	mov	r0, r7
 8008502:	f000 fef2 	bl	80092ea <__swhatbuf_r>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	4318      	orrs	r0, r3
 800850a:	81a0      	strh	r0, [r4, #12]
 800850c:	bb2d      	cbnz	r5, 800855a <setvbuf+0xe6>
 800850e:	9d00      	ldr	r5, [sp, #0]
 8008510:	4628      	mov	r0, r5
 8008512:	f000 fa77 	bl	8008a04 <malloc>
 8008516:	4606      	mov	r6, r0
 8008518:	2800      	cmp	r0, #0
 800851a:	d150      	bne.n	80085be <setvbuf+0x14a>
 800851c:	f8dd 9000 	ldr.w	r9, [sp]
 8008520:	45a9      	cmp	r9, r5
 8008522:	d13e      	bne.n	80085a2 <setvbuf+0x12e>
 8008524:	f04f 35ff 	mov.w	r5, #4294967295
 8008528:	2200      	movs	r2, #0
 800852a:	60a2      	str	r2, [r4, #8]
 800852c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	2201      	movs	r2, #1
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	6162      	str	r2, [r4, #20]
 800853c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800853e:	f043 0302 	orr.w	r3, r3, #2
 8008542:	07d1      	lsls	r1, r2, #31
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	d404      	bmi.n	8008552 <setvbuf+0xde>
 8008548:	059b      	lsls	r3, r3, #22
 800854a:	d402      	bmi.n	8008552 <setvbuf+0xde>
 800854c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854e:	f000 f9ed 	bl	800892c <__retarget_lock_release_recursive>
 8008552:	4628      	mov	r0, r5
 8008554:	b003      	add	sp, #12
 8008556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800855a:	2e00      	cmp	r6, #0
 800855c:	d0d8      	beq.n	8008510 <setvbuf+0x9c>
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	b913      	cbnz	r3, 8008568 <setvbuf+0xf4>
 8008562:	4638      	mov	r0, r7
 8008564:	f7ff fed2 	bl	800830c <__sinit>
 8008568:	f1b8 0f01 	cmp.w	r8, #1
 800856c:	bf08      	it	eq
 800856e:	89a3      	ldrheq	r3, [r4, #12]
 8008570:	6026      	str	r6, [r4, #0]
 8008572:	bf04      	itt	eq
 8008574:	f043 0301 	orreq.w	r3, r3, #1
 8008578:	81a3      	strheq	r3, [r4, #12]
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f013 0208 	ands.w	r2, r3, #8
 8008580:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008584:	d01d      	beq.n	80085c2 <setvbuf+0x14e>
 8008586:	07da      	lsls	r2, r3, #31
 8008588:	bf41      	itttt	mi
 800858a:	2200      	movmi	r2, #0
 800858c:	426d      	negmi	r5, r5
 800858e:	60a2      	strmi	r2, [r4, #8]
 8008590:	61a5      	strmi	r5, [r4, #24]
 8008592:	bf58      	it	pl
 8008594:	60a5      	strpl	r5, [r4, #8]
 8008596:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008598:	f015 0501 	ands.w	r5, r5, #1
 800859c:	d0d4      	beq.n	8008548 <setvbuf+0xd4>
 800859e:	2500      	movs	r5, #0
 80085a0:	e7d7      	b.n	8008552 <setvbuf+0xde>
 80085a2:	4648      	mov	r0, r9
 80085a4:	f000 fa2e 	bl	8008a04 <malloc>
 80085a8:	4606      	mov	r6, r0
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d0ba      	beq.n	8008524 <setvbuf+0xb0>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b4:	81a3      	strh	r3, [r4, #12]
 80085b6:	464d      	mov	r5, r9
 80085b8:	e7d1      	b.n	800855e <setvbuf+0xea>
 80085ba:	2500      	movs	r5, #0
 80085bc:	e7b4      	b.n	8008528 <setvbuf+0xb4>
 80085be:	46a9      	mov	r9, r5
 80085c0:	e7f5      	b.n	80085ae <setvbuf+0x13a>
 80085c2:	60a2      	str	r2, [r4, #8]
 80085c4:	e7e7      	b.n	8008596 <setvbuf+0x122>
 80085c6:	f04f 35ff 	mov.w	r5, #4294967295
 80085ca:	e7c2      	b.n	8008552 <setvbuf+0xde>
 80085cc:	200000dc 	.word	0x200000dc

080085d0 <__sread>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f958 	bl	800888c <_read_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	bfab      	itete	ge
 80085e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085e2:	89a3      	ldrhlt	r3, [r4, #12]
 80085e4:	181b      	addge	r3, r3, r0
 80085e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085ea:	bfac      	ite	ge
 80085ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ee:	81a3      	strhlt	r3, [r4, #12]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__swrite>:
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	898b      	ldrh	r3, [r1, #12]
 80085fa:	05db      	lsls	r3, r3, #23
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	4616      	mov	r6, r2
 8008602:	d505      	bpl.n	8008610 <__swrite+0x1e>
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2302      	movs	r3, #2
 800860a:	2200      	movs	r2, #0
 800860c:	f000 f92c 	bl	8008868 <_lseek_r>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f000 b943 	b.w	80088b0 <_write_r>

0800862a <__sseek>:
 800862a:	b510      	push	{r4, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 f919 	bl	8008868 <_lseek_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	bf15      	itete	ne
 800863c:	6560      	strne	r0, [r4, #84]	; 0x54
 800863e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008646:	81a3      	strheq	r3, [r4, #12]
 8008648:	bf18      	it	ne
 800864a:	81a3      	strhne	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__sclose>:
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 b8f9 	b.w	8008848 <_close_r>

08008656 <__swbuf_r>:
 8008656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008658:	460e      	mov	r6, r1
 800865a:	4614      	mov	r4, r2
 800865c:	4605      	mov	r5, r0
 800865e:	b118      	cbz	r0, 8008668 <__swbuf_r+0x12>
 8008660:	6a03      	ldr	r3, [r0, #32]
 8008662:	b90b      	cbnz	r3, 8008668 <__swbuf_r+0x12>
 8008664:	f7ff fe52 	bl	800830c <__sinit>
 8008668:	69a3      	ldr	r3, [r4, #24]
 800866a:	60a3      	str	r3, [r4, #8]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	071a      	lsls	r2, r3, #28
 8008670:	d525      	bpl.n	80086be <__swbuf_r+0x68>
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	b31b      	cbz	r3, 80086be <__swbuf_r+0x68>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	1a98      	subs	r0, r3, r2
 800867c:	6963      	ldr	r3, [r4, #20]
 800867e:	b2f6      	uxtb	r6, r6
 8008680:	4283      	cmp	r3, r0
 8008682:	4637      	mov	r7, r6
 8008684:	dc04      	bgt.n	8008690 <__swbuf_r+0x3a>
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fdc9 	bl	8009220 <_fflush_r>
 800868e:	b9e0      	cbnz	r0, 80086ca <__swbuf_r+0x74>
 8008690:	68a3      	ldr	r3, [r4, #8]
 8008692:	3b01      	subs	r3, #1
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	701e      	strb	r6, [r3, #0]
 800869e:	6962      	ldr	r2, [r4, #20]
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d004      	beq.n	80086b0 <__swbuf_r+0x5a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d506      	bpl.n	80086ba <__swbuf_r+0x64>
 80086ac:	2e0a      	cmp	r6, #10
 80086ae:	d104      	bne.n	80086ba <__swbuf_r+0x64>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fdb4 	bl	8009220 <_fflush_r>
 80086b8:	b938      	cbnz	r0, 80086ca <__swbuf_r+0x74>
 80086ba:	4638      	mov	r0, r7
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 f805 	bl	80086d0 <__swsetup_r>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0d5      	beq.n	8008676 <__swbuf_r+0x20>
 80086ca:	f04f 37ff 	mov.w	r7, #4294967295
 80086ce:	e7f4      	b.n	80086ba <__swbuf_r+0x64>

080086d0 <__swsetup_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4b2a      	ldr	r3, [pc, #168]	; (800877c <__swsetup_r+0xac>)
 80086d4:	4605      	mov	r5, r0
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	460c      	mov	r4, r1
 80086da:	b118      	cbz	r0, 80086e4 <__swsetup_r+0x14>
 80086dc:	6a03      	ldr	r3, [r0, #32]
 80086de:	b90b      	cbnz	r3, 80086e4 <__swsetup_r+0x14>
 80086e0:	f7ff fe14 	bl	800830c <__sinit>
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086ea:	0718      	lsls	r0, r3, #28
 80086ec:	d422      	bmi.n	8008734 <__swsetup_r+0x64>
 80086ee:	06d9      	lsls	r1, r3, #27
 80086f0:	d407      	bmi.n	8008702 <__swsetup_r+0x32>
 80086f2:	2309      	movs	r3, #9
 80086f4:	602b      	str	r3, [r5, #0]
 80086f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	e034      	b.n	800876c <__swsetup_r+0x9c>
 8008702:	0758      	lsls	r0, r3, #29
 8008704:	d512      	bpl.n	800872c <__swsetup_r+0x5c>
 8008706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008708:	b141      	cbz	r1, 800871c <__swsetup_r+0x4c>
 800870a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800870e:	4299      	cmp	r1, r3
 8008710:	d002      	beq.n	8008718 <__swsetup_r+0x48>
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f92a 	bl	800896c <_free_r>
 8008718:	2300      	movs	r3, #0
 800871a:	6363      	str	r3, [r4, #52]	; 0x34
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	2300      	movs	r3, #0
 8008726:	6063      	str	r3, [r4, #4]
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f043 0308 	orr.w	r3, r3, #8
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	b94b      	cbnz	r3, 800874c <__swsetup_r+0x7c>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800873e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008742:	d003      	beq.n	800874c <__swsetup_r+0x7c>
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fdf5 	bl	8009336 <__smakebuf_r>
 800874c:	89a0      	ldrh	r0, [r4, #12]
 800874e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008752:	f010 0301 	ands.w	r3, r0, #1
 8008756:	d00a      	beq.n	800876e <__swsetup_r+0x9e>
 8008758:	2300      	movs	r3, #0
 800875a:	60a3      	str	r3, [r4, #8]
 800875c:	6963      	ldr	r3, [r4, #20]
 800875e:	425b      	negs	r3, r3
 8008760:	61a3      	str	r3, [r4, #24]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	b943      	cbnz	r3, 8008778 <__swsetup_r+0xa8>
 8008766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800876a:	d1c4      	bne.n	80086f6 <__swsetup_r+0x26>
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	0781      	lsls	r1, r0, #30
 8008770:	bf58      	it	pl
 8008772:	6963      	ldrpl	r3, [r4, #20]
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	e7f4      	b.n	8008762 <__swsetup_r+0x92>
 8008778:	2000      	movs	r0, #0
 800877a:	e7f7      	b.n	800876c <__swsetup_r+0x9c>
 800877c:	200000dc 	.word	0x200000dc

08008780 <memset>:
 8008780:	4402      	add	r2, r0
 8008782:	4603      	mov	r3, r0
 8008784:	4293      	cmp	r3, r2
 8008786:	d100      	bne.n	800878a <memset+0xa>
 8008788:	4770      	bx	lr
 800878a:	f803 1b01 	strb.w	r1, [r3], #1
 800878e:	e7f9      	b.n	8008784 <memset+0x4>

08008790 <strtok>:
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <strtok+0x5c>)
 8008792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008794:	681e      	ldr	r6, [r3, #0]
 8008796:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008798:	4605      	mov	r5, r0
 800879a:	b9fc      	cbnz	r4, 80087dc <strtok+0x4c>
 800879c:	2050      	movs	r0, #80	; 0x50
 800879e:	9101      	str	r1, [sp, #4]
 80087a0:	f000 f930 	bl	8008a04 <malloc>
 80087a4:	9901      	ldr	r1, [sp, #4]
 80087a6:	6470      	str	r0, [r6, #68]	; 0x44
 80087a8:	4602      	mov	r2, r0
 80087aa:	b920      	cbnz	r0, 80087b6 <strtok+0x26>
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <strtok+0x60>)
 80087ae:	4811      	ldr	r0, [pc, #68]	; (80087f4 <strtok+0x64>)
 80087b0:	215b      	movs	r1, #91	; 0x5b
 80087b2:	f000 f8bd 	bl	8008930 <__assert_func>
 80087b6:	e9c0 4400 	strd	r4, r4, [r0]
 80087ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80087be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80087c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80087c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80087ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80087ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80087d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80087d6:	6184      	str	r4, [r0, #24]
 80087d8:	7704      	strb	r4, [r0, #28]
 80087da:	6244      	str	r4, [r0, #36]	; 0x24
 80087dc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80087de:	2301      	movs	r3, #1
 80087e0:	4628      	mov	r0, r5
 80087e2:	b002      	add	sp, #8
 80087e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087e8:	f000 b806 	b.w	80087f8 <__strtok_r>
 80087ec:	200000dc 	.word	0x200000dc
 80087f0:	080099d9 	.word	0x080099d9
 80087f4:	080099f0 	.word	0x080099f0

080087f8 <__strtok_r>:
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	b908      	cbnz	r0, 8008800 <__strtok_r+0x8>
 80087fc:	6810      	ldr	r0, [r2, #0]
 80087fe:	b188      	cbz	r0, 8008824 <__strtok_r+0x2c>
 8008800:	4604      	mov	r4, r0
 8008802:	4620      	mov	r0, r4
 8008804:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008808:	460f      	mov	r7, r1
 800880a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800880e:	b91e      	cbnz	r6, 8008818 <__strtok_r+0x20>
 8008810:	b965      	cbnz	r5, 800882c <__strtok_r+0x34>
 8008812:	6015      	str	r5, [r2, #0]
 8008814:	4628      	mov	r0, r5
 8008816:	e005      	b.n	8008824 <__strtok_r+0x2c>
 8008818:	42b5      	cmp	r5, r6
 800881a:	d1f6      	bne.n	800880a <__strtok_r+0x12>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f0      	bne.n	8008802 <__strtok_r+0xa>
 8008820:	6014      	str	r4, [r2, #0]
 8008822:	7003      	strb	r3, [r0, #0]
 8008824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008826:	461c      	mov	r4, r3
 8008828:	e00c      	b.n	8008844 <__strtok_r+0x4c>
 800882a:	b915      	cbnz	r5, 8008832 <__strtok_r+0x3a>
 800882c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008830:	460e      	mov	r6, r1
 8008832:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008836:	42ab      	cmp	r3, r5
 8008838:	d1f7      	bne.n	800882a <__strtok_r+0x32>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f3      	beq.n	8008826 <__strtok_r+0x2e>
 800883e:	2300      	movs	r3, #0
 8008840:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008844:	6014      	str	r4, [r2, #0]
 8008846:	e7ed      	b.n	8008824 <__strtok_r+0x2c>

08008848 <_close_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_close_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 fe64 	bl	8001520 <_close>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_close_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_close_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000408 	.word	0x20000408

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_lseek_r+0x20>)
 800886c:	4604      	mov	r4, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7f8 fe69 	bl	800154e <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20000408 	.word	0x20000408

0800888c <_read_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4d07      	ldr	r5, [pc, #28]	; (80088ac <_read_r+0x20>)
 8008890:	4604      	mov	r4, r0
 8008892:	4608      	mov	r0, r1
 8008894:	4611      	mov	r1, r2
 8008896:	2200      	movs	r2, #0
 8008898:	602a      	str	r2, [r5, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	f7f8 fe68 	bl	8001570 <_read>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_read_r+0x1e>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_read_r+0x1e>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000408 	.word	0x20000408

080088b0 <_write_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_write_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f8 fe02 	bl	80014c8 <_write>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_write_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_write_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000408 	.word	0x20000408

080088d4 <__errno>:
 80088d4:	4b01      	ldr	r3, [pc, #4]	; (80088dc <__errno+0x8>)
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	200000dc 	.word	0x200000dc

080088e0 <__libc_init_array>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4d0d      	ldr	r5, [pc, #52]	; (8008918 <__libc_init_array+0x38>)
 80088e4:	4c0d      	ldr	r4, [pc, #52]	; (800891c <__libc_init_array+0x3c>)
 80088e6:	1b64      	subs	r4, r4, r5
 80088e8:	10a4      	asrs	r4, r4, #2
 80088ea:	2600      	movs	r6, #0
 80088ec:	42a6      	cmp	r6, r4
 80088ee:	d109      	bne.n	8008904 <__libc_init_array+0x24>
 80088f0:	4d0b      	ldr	r5, [pc, #44]	; (8008920 <__libc_init_array+0x40>)
 80088f2:	4c0c      	ldr	r4, [pc, #48]	; (8008924 <__libc_init_array+0x44>)
 80088f4:	f000 feac 	bl	8009650 <_init>
 80088f8:	1b64      	subs	r4, r4, r5
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	2600      	movs	r6, #0
 80088fe:	42a6      	cmp	r6, r4
 8008900:	d105      	bne.n	800890e <__libc_init_array+0x2e>
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	f855 3b04 	ldr.w	r3, [r5], #4
 8008908:	4798      	blx	r3
 800890a:	3601      	adds	r6, #1
 800890c:	e7ee      	b.n	80088ec <__libc_init_array+0xc>
 800890e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008912:	4798      	blx	r3
 8008914:	3601      	adds	r6, #1
 8008916:	e7f2      	b.n	80088fe <__libc_init_array+0x1e>
 8008918:	08009ac4 	.word	0x08009ac4
 800891c:	08009ac4 	.word	0x08009ac4
 8008920:	08009ac4 	.word	0x08009ac4
 8008924:	08009ac8 	.word	0x08009ac8

08008928 <__retarget_lock_init_recursive>:
 8008928:	4770      	bx	lr

0800892a <__retarget_lock_acquire_recursive>:
 800892a:	4770      	bx	lr

0800892c <__retarget_lock_release_recursive>:
 800892c:	4770      	bx	lr
	...

08008930 <__assert_func>:
 8008930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008932:	4614      	mov	r4, r2
 8008934:	461a      	mov	r2, r3
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <__assert_func+0x2c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4605      	mov	r5, r0
 800893c:	68d8      	ldr	r0, [r3, #12]
 800893e:	b14c      	cbz	r4, 8008954 <__assert_func+0x24>
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <__assert_func+0x30>)
 8008942:	9100      	str	r1, [sp, #0]
 8008944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008948:	4906      	ldr	r1, [pc, #24]	; (8008964 <__assert_func+0x34>)
 800894a:	462b      	mov	r3, r5
 800894c:	f000 fc90 	bl	8009270 <fiprintf>
 8008950:	f000 fdac 	bl	80094ac <abort>
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <__assert_func+0x38>)
 8008956:	461c      	mov	r4, r3
 8008958:	e7f3      	b.n	8008942 <__assert_func+0x12>
 800895a:	bf00      	nop
 800895c:	200000dc 	.word	0x200000dc
 8008960:	08009a4a 	.word	0x08009a4a
 8008964:	08009a57 	.word	0x08009a57
 8008968:	08009a85 	.word	0x08009a85

0800896c <_free_r>:
 800896c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800896e:	2900      	cmp	r1, #0
 8008970:	d044      	beq.n	80089fc <_free_r+0x90>
 8008972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008976:	9001      	str	r0, [sp, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f1a1 0404 	sub.w	r4, r1, #4
 800897e:	bfb8      	it	lt
 8008980:	18e4      	addlt	r4, r4, r3
 8008982:	f000 f8e7 	bl	8008b54 <__malloc_lock>
 8008986:	4a1e      	ldr	r2, [pc, #120]	; (8008a00 <_free_r+0x94>)
 8008988:	9801      	ldr	r0, [sp, #4]
 800898a:	6813      	ldr	r3, [r2, #0]
 800898c:	b933      	cbnz	r3, 800899c <_free_r+0x30>
 800898e:	6063      	str	r3, [r4, #4]
 8008990:	6014      	str	r4, [r2, #0]
 8008992:	b003      	add	sp, #12
 8008994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008998:	f000 b8e2 	b.w	8008b60 <__malloc_unlock>
 800899c:	42a3      	cmp	r3, r4
 800899e:	d908      	bls.n	80089b2 <_free_r+0x46>
 80089a0:	6825      	ldr	r5, [r4, #0]
 80089a2:	1961      	adds	r1, r4, r5
 80089a4:	428b      	cmp	r3, r1
 80089a6:	bf01      	itttt	eq
 80089a8:	6819      	ldreq	r1, [r3, #0]
 80089aa:	685b      	ldreq	r3, [r3, #4]
 80089ac:	1949      	addeq	r1, r1, r5
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	e7ed      	b.n	800898e <_free_r+0x22>
 80089b2:	461a      	mov	r2, r3
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b10b      	cbz	r3, 80089bc <_free_r+0x50>
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	d9fa      	bls.n	80089b2 <_free_r+0x46>
 80089bc:	6811      	ldr	r1, [r2, #0]
 80089be:	1855      	adds	r5, r2, r1
 80089c0:	42a5      	cmp	r5, r4
 80089c2:	d10b      	bne.n	80089dc <_free_r+0x70>
 80089c4:	6824      	ldr	r4, [r4, #0]
 80089c6:	4421      	add	r1, r4
 80089c8:	1854      	adds	r4, r2, r1
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	6011      	str	r1, [r2, #0]
 80089ce:	d1e0      	bne.n	8008992 <_free_r+0x26>
 80089d0:	681c      	ldr	r4, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	6053      	str	r3, [r2, #4]
 80089d6:	440c      	add	r4, r1
 80089d8:	6014      	str	r4, [r2, #0]
 80089da:	e7da      	b.n	8008992 <_free_r+0x26>
 80089dc:	d902      	bls.n	80089e4 <_free_r+0x78>
 80089de:	230c      	movs	r3, #12
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	e7d6      	b.n	8008992 <_free_r+0x26>
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	1961      	adds	r1, r4, r5
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf04      	itt	eq
 80089ec:	6819      	ldreq	r1, [r3, #0]
 80089ee:	685b      	ldreq	r3, [r3, #4]
 80089f0:	6063      	str	r3, [r4, #4]
 80089f2:	bf04      	itt	eq
 80089f4:	1949      	addeq	r1, r1, r5
 80089f6:	6021      	streq	r1, [r4, #0]
 80089f8:	6054      	str	r4, [r2, #4]
 80089fa:	e7ca      	b.n	8008992 <_free_r+0x26>
 80089fc:	b003      	add	sp, #12
 80089fe:	bd30      	pop	{r4, r5, pc}
 8008a00:	20000410 	.word	0x20000410

08008a04 <malloc>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <malloc+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f000 b823 	b.w	8008a54 <_malloc_r>
 8008a0e:	bf00      	nop
 8008a10:	200000dc 	.word	0x200000dc

08008a14 <sbrk_aligned>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4e0e      	ldr	r6, [pc, #56]	; (8008a50 <sbrk_aligned+0x3c>)
 8008a18:	460c      	mov	r4, r1
 8008a1a:	6831      	ldr	r1, [r6, #0]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	b911      	cbnz	r1, 8008a26 <sbrk_aligned+0x12>
 8008a20:	f000 fd34 	bl	800948c <_sbrk_r>
 8008a24:	6030      	str	r0, [r6, #0]
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 fd2f 	bl	800948c <_sbrk_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d00a      	beq.n	8008a48 <sbrk_aligned+0x34>
 8008a32:	1cc4      	adds	r4, r0, #3
 8008a34:	f024 0403 	bic.w	r4, r4, #3
 8008a38:	42a0      	cmp	r0, r4
 8008a3a:	d007      	beq.n	8008a4c <sbrk_aligned+0x38>
 8008a3c:	1a21      	subs	r1, r4, r0
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 fd24 	bl	800948c <_sbrk_r>
 8008a44:	3001      	adds	r0, #1
 8008a46:	d101      	bne.n	8008a4c <sbrk_aligned+0x38>
 8008a48:	f04f 34ff 	mov.w	r4, #4294967295
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	20000414 	.word	0x20000414

08008a54 <_malloc_r>:
 8008a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	1ccd      	adds	r5, r1, #3
 8008a5a:	f025 0503 	bic.w	r5, r5, #3
 8008a5e:	3508      	adds	r5, #8
 8008a60:	2d0c      	cmp	r5, #12
 8008a62:	bf38      	it	cc
 8008a64:	250c      	movcc	r5, #12
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	4607      	mov	r7, r0
 8008a6a:	db01      	blt.n	8008a70 <_malloc_r+0x1c>
 8008a6c:	42a9      	cmp	r1, r5
 8008a6e:	d905      	bls.n	8008a7c <_malloc_r+0x28>
 8008a70:	230c      	movs	r3, #12
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	2600      	movs	r6, #0
 8008a76:	4630      	mov	r0, r6
 8008a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b50 <_malloc_r+0xfc>
 8008a80:	f000 f868 	bl	8008b54 <__malloc_lock>
 8008a84:	f8d8 3000 	ldr.w	r3, [r8]
 8008a88:	461c      	mov	r4, r3
 8008a8a:	bb5c      	cbnz	r4, 8008ae4 <_malloc_r+0x90>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f7ff ffc0 	bl	8008a14 <sbrk_aligned>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	4604      	mov	r4, r0
 8008a98:	d155      	bne.n	8008b46 <_malloc_r+0xf2>
 8008a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a9e:	4626      	mov	r6, r4
 8008aa0:	2e00      	cmp	r6, #0
 8008aa2:	d145      	bne.n	8008b30 <_malloc_r+0xdc>
 8008aa4:	2c00      	cmp	r4, #0
 8008aa6:	d048      	beq.n	8008b3a <_malloc_r+0xe6>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4638      	mov	r0, r7
 8008aae:	eb04 0903 	add.w	r9, r4, r3
 8008ab2:	f000 fceb 	bl	800948c <_sbrk_r>
 8008ab6:	4581      	cmp	r9, r0
 8008ab8:	d13f      	bne.n	8008b3a <_malloc_r+0xe6>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	1a6d      	subs	r5, r5, r1
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7ff ffa7 	bl	8008a14 <sbrk_aligned>
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d037      	beq.n	8008b3a <_malloc_r+0xe6>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	442b      	add	r3, r5
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d038      	beq.n	8008b4a <_malloc_r+0xf6>
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	42a2      	cmp	r2, r4
 8008adc:	d12b      	bne.n	8008b36 <_malloc_r+0xe2>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	e00f      	b.n	8008b04 <_malloc_r+0xb0>
 8008ae4:	6822      	ldr	r2, [r4, #0]
 8008ae6:	1b52      	subs	r2, r2, r5
 8008ae8:	d41f      	bmi.n	8008b2a <_malloc_r+0xd6>
 8008aea:	2a0b      	cmp	r2, #11
 8008aec:	d917      	bls.n	8008b1e <_malloc_r+0xca>
 8008aee:	1961      	adds	r1, r4, r5
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	6025      	str	r5, [r4, #0]
 8008af4:	bf18      	it	ne
 8008af6:	6059      	strne	r1, [r3, #4]
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	bf08      	it	eq
 8008afc:	f8c8 1000 	streq.w	r1, [r8]
 8008b00:	5162      	str	r2, [r4, r5]
 8008b02:	604b      	str	r3, [r1, #4]
 8008b04:	4638      	mov	r0, r7
 8008b06:	f104 060b 	add.w	r6, r4, #11
 8008b0a:	f000 f829 	bl	8008b60 <__malloc_unlock>
 8008b0e:	f026 0607 	bic.w	r6, r6, #7
 8008b12:	1d23      	adds	r3, r4, #4
 8008b14:	1af2      	subs	r2, r6, r3
 8008b16:	d0ae      	beq.n	8008a76 <_malloc_r+0x22>
 8008b18:	1b9b      	subs	r3, r3, r6
 8008b1a:	50a3      	str	r3, [r4, r2]
 8008b1c:	e7ab      	b.n	8008a76 <_malloc_r+0x22>
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	6862      	ldr	r2, [r4, #4]
 8008b22:	d1dd      	bne.n	8008ae0 <_malloc_r+0x8c>
 8008b24:	f8c8 2000 	str.w	r2, [r8]
 8008b28:	e7ec      	b.n	8008b04 <_malloc_r+0xb0>
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	6864      	ldr	r4, [r4, #4]
 8008b2e:	e7ac      	b.n	8008a8a <_malloc_r+0x36>
 8008b30:	4634      	mov	r4, r6
 8008b32:	6876      	ldr	r6, [r6, #4]
 8008b34:	e7b4      	b.n	8008aa0 <_malloc_r+0x4c>
 8008b36:	4613      	mov	r3, r2
 8008b38:	e7cc      	b.n	8008ad4 <_malloc_r+0x80>
 8008b3a:	230c      	movs	r3, #12
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f000 f80e 	bl	8008b60 <__malloc_unlock>
 8008b44:	e797      	b.n	8008a76 <_malloc_r+0x22>
 8008b46:	6025      	str	r5, [r4, #0]
 8008b48:	e7dc      	b.n	8008b04 <_malloc_r+0xb0>
 8008b4a:	605b      	str	r3, [r3, #4]
 8008b4c:	deff      	udf	#255	; 0xff
 8008b4e:	bf00      	nop
 8008b50:	20000410 	.word	0x20000410

08008b54 <__malloc_lock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__malloc_lock+0x8>)
 8008b56:	f7ff bee8 	b.w	800892a <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	2000040c 	.word	0x2000040c

08008b60 <__malloc_unlock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_unlock+0x8>)
 8008b62:	f7ff bee3 	b.w	800892c <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	2000040c 	.word	0x2000040c

08008b6c <__sfputc_r>:
 8008b6c:	6893      	ldr	r3, [r2, #8]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	b410      	push	{r4}
 8008b74:	6093      	str	r3, [r2, #8]
 8008b76:	da08      	bge.n	8008b8a <__sfputc_r+0x1e>
 8008b78:	6994      	ldr	r4, [r2, #24]
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	db01      	blt.n	8008b82 <__sfputc_r+0x16>
 8008b7e:	290a      	cmp	r1, #10
 8008b80:	d103      	bne.n	8008b8a <__sfputc_r+0x1e>
 8008b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b86:	f7ff bd66 	b.w	8008656 <__swbuf_r>
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	1c58      	adds	r0, r3, #1
 8008b8e:	6010      	str	r0, [r2, #0]
 8008b90:	7019      	strb	r1, [r3, #0]
 8008b92:	4608      	mov	r0, r1
 8008b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <__sfputs_r>:
 8008b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	460f      	mov	r7, r1
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	18d5      	adds	r5, r2, r3
 8008ba4:	42ac      	cmp	r4, r5
 8008ba6:	d101      	bne.n	8008bac <__sfputs_r+0x12>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	e007      	b.n	8008bbc <__sfputs_r+0x22>
 8008bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb0:	463a      	mov	r2, r7
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7ff ffda 	bl	8008b6c <__sfputc_r>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d1f3      	bne.n	8008ba4 <__sfputs_r+0xa>
 8008bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bc0 <_vfiprintf_r>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	b09d      	sub	sp, #116	; 0x74
 8008bc8:	4614      	mov	r4, r2
 8008bca:	4698      	mov	r8, r3
 8008bcc:	4606      	mov	r6, r0
 8008bce:	b118      	cbz	r0, 8008bd8 <_vfiprintf_r+0x18>
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b90b      	cbnz	r3, 8008bd8 <_vfiprintf_r+0x18>
 8008bd4:	f7ff fb9a 	bl	800830c <__sinit>
 8008bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bda:	07d9      	lsls	r1, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_vfiprintf_r+0x2a>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_vfiprintf_r+0x2a>
 8008be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be6:	f7ff fea0 	bl	800892a <__retarget_lock_acquire_recursive>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	071b      	lsls	r3, r3, #28
 8008bee:	d501      	bpl.n	8008bf4 <_vfiprintf_r+0x34>
 8008bf0:	692b      	ldr	r3, [r5, #16]
 8008bf2:	b99b      	cbnz	r3, 8008c1c <_vfiprintf_r+0x5c>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff fd6a 	bl	80086d0 <__swsetup_r>
 8008bfc:	b170      	cbz	r0, 8008c1c <_vfiprintf_r+0x5c>
 8008bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c00:	07dc      	lsls	r4, r3, #31
 8008c02:	d504      	bpl.n	8008c0e <_vfiprintf_r+0x4e>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	b01d      	add	sp, #116	; 0x74
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	0598      	lsls	r0, r3, #22
 8008c12:	d4f7      	bmi.n	8008c04 <_vfiprintf_r+0x44>
 8008c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c16:	f7ff fe89 	bl	800892c <__retarget_lock_release_recursive>
 8008c1a:	e7f3      	b.n	8008c04 <_vfiprintf_r+0x44>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	2320      	movs	r3, #32
 8008c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c2a:	2330      	movs	r3, #48	; 0x30
 8008c2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008de0 <_vfiprintf_r+0x220>
 8008c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c34:	f04f 0901 	mov.w	r9, #1
 8008c38:	4623      	mov	r3, r4
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c40:	b10a      	cbz	r2, 8008c46 <_vfiprintf_r+0x86>
 8008c42:	2a25      	cmp	r2, #37	; 0x25
 8008c44:	d1f9      	bne.n	8008c3a <_vfiprintf_r+0x7a>
 8008c46:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4a:	d00b      	beq.n	8008c64 <_vfiprintf_r+0xa4>
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffa1 	bl	8008b9a <__sfputs_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f000 80a9 	beq.w	8008db0 <_vfiprintf_r+0x1f0>
 8008c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c60:	445a      	add	r2, fp
 8008c62:	9209      	str	r2, [sp, #36]	; 0x24
 8008c64:	f89a 3000 	ldrb.w	r3, [sl]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80a1 	beq.w	8008db0 <_vfiprintf_r+0x1f0>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295
 8008c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c78:	f10a 0a01 	add.w	sl, sl, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c84:	931a      	str	r3, [sp, #104]	; 0x68
 8008c86:	4654      	mov	r4, sl
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8e:	4854      	ldr	r0, [pc, #336]	; (8008de0 <_vfiprintf_r+0x220>)
 8008c90:	f7f7 faae 	bl	80001f0 <memchr>
 8008c94:	9a04      	ldr	r2, [sp, #16]
 8008c96:	b9d8      	cbnz	r0, 8008cd0 <_vfiprintf_r+0x110>
 8008c98:	06d1      	lsls	r1, r2, #27
 8008c9a:	bf44      	itt	mi
 8008c9c:	2320      	movmi	r3, #32
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca2:	0713      	lsls	r3, r2, #28
 8008ca4:	bf44      	itt	mi
 8008ca6:	232b      	movmi	r3, #43	; 0x2b
 8008ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cac:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d015      	beq.n	8008ce0 <_vfiprintf_r+0x120>
 8008cb4:	9a07      	ldr	r2, [sp, #28]
 8008cb6:	4654      	mov	r4, sl
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f04f 0c0a 	mov.w	ip, #10
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc4:	3b30      	subs	r3, #48	; 0x30
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d94d      	bls.n	8008d66 <_vfiprintf_r+0x1a6>
 8008cca:	b1b0      	cbz	r0, 8008cfa <_vfiprintf_r+0x13a>
 8008ccc:	9207      	str	r2, [sp, #28]
 8008cce:	e014      	b.n	8008cfa <_vfiprintf_r+0x13a>
 8008cd0:	eba0 0308 	sub.w	r3, r0, r8
 8008cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	46a2      	mov	sl, r4
 8008cde:	e7d2      	b.n	8008c86 <_vfiprintf_r+0xc6>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	1d19      	adds	r1, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9103      	str	r1, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbb      	ittet	lt
 8008cec:	425b      	neglt	r3, r3
 8008cee:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf2:	9307      	strge	r3, [sp, #28]
 8008cf4:	9307      	strlt	r3, [sp, #28]
 8008cf6:	bfb8      	it	lt
 8008cf8:	9204      	strlt	r2, [sp, #16]
 8008cfa:	7823      	ldrb	r3, [r4, #0]
 8008cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfe:	d10c      	bne.n	8008d1a <_vfiprintf_r+0x15a>
 8008d00:	7863      	ldrb	r3, [r4, #1]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d134      	bne.n	8008d70 <_vfiprintf_r+0x1b0>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	9203      	str	r2, [sp, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bfb8      	it	lt
 8008d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d16:	3402      	adds	r4, #2
 8008d18:	9305      	str	r3, [sp, #20]
 8008d1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008df0 <_vfiprintf_r+0x230>
 8008d1e:	7821      	ldrb	r1, [r4, #0]
 8008d20:	2203      	movs	r2, #3
 8008d22:	4650      	mov	r0, sl
 8008d24:	f7f7 fa64 	bl	80001f0 <memchr>
 8008d28:	b138      	cbz	r0, 8008d3a <_vfiprintf_r+0x17a>
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	eba0 000a 	sub.w	r0, r0, sl
 8008d30:	2240      	movs	r2, #64	; 0x40
 8008d32:	4082      	lsls	r2, r0
 8008d34:	4313      	orrs	r3, r2
 8008d36:	3401      	adds	r4, #1
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3e:	4829      	ldr	r0, [pc, #164]	; (8008de4 <_vfiprintf_r+0x224>)
 8008d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d44:	2206      	movs	r2, #6
 8008d46:	f7f7 fa53 	bl	80001f0 <memchr>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d03f      	beq.n	8008dce <_vfiprintf_r+0x20e>
 8008d4e:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <_vfiprintf_r+0x228>)
 8008d50:	bb1b      	cbnz	r3, 8008d9a <_vfiprintf_r+0x1da>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	3307      	adds	r3, #7
 8008d56:	f023 0307 	bic.w	r3, r3, #7
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d60:	443b      	add	r3, r7
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	e768      	b.n	8008c38 <_vfiprintf_r+0x78>
 8008d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	e7a6      	b.n	8008cbe <_vfiprintf_r+0xfe>
 8008d70:	2300      	movs	r3, #0
 8008d72:	3401      	adds	r4, #1
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	4619      	mov	r1, r3
 8008d78:	f04f 0c0a 	mov.w	ip, #10
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d82:	3a30      	subs	r2, #48	; 0x30
 8008d84:	2a09      	cmp	r2, #9
 8008d86:	d903      	bls.n	8008d90 <_vfiprintf_r+0x1d0>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0c6      	beq.n	8008d1a <_vfiprintf_r+0x15a>
 8008d8c:	9105      	str	r1, [sp, #20]
 8008d8e:	e7c4      	b.n	8008d1a <_vfiprintf_r+0x15a>
 8008d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d94:	4604      	mov	r4, r0
 8008d96:	2301      	movs	r3, #1
 8008d98:	e7f0      	b.n	8008d7c <_vfiprintf_r+0x1bc>
 8008d9a:	ab03      	add	r3, sp, #12
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	462a      	mov	r2, r5
 8008da0:	4b12      	ldr	r3, [pc, #72]	; (8008dec <_vfiprintf_r+0x22c>)
 8008da2:	a904      	add	r1, sp, #16
 8008da4:	4630      	mov	r0, r6
 8008da6:	f3af 8000 	nop.w
 8008daa:	4607      	mov	r7, r0
 8008dac:	1c78      	adds	r0, r7, #1
 8008dae:	d1d6      	bne.n	8008d5e <_vfiprintf_r+0x19e>
 8008db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db2:	07d9      	lsls	r1, r3, #31
 8008db4:	d405      	bmi.n	8008dc2 <_vfiprintf_r+0x202>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	059a      	lsls	r2, r3, #22
 8008dba:	d402      	bmi.n	8008dc2 <_vfiprintf_r+0x202>
 8008dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dbe:	f7ff fdb5 	bl	800892c <__retarget_lock_release_recursive>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	065b      	lsls	r3, r3, #25
 8008dc6:	f53f af1d 	bmi.w	8008c04 <_vfiprintf_r+0x44>
 8008dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dcc:	e71c      	b.n	8008c08 <_vfiprintf_r+0x48>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <_vfiprintf_r+0x22c>)
 8008dd6:	a904      	add	r1, sp, #16
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f879 	bl	8008ed0 <_printf_i>
 8008dde:	e7e4      	b.n	8008daa <_vfiprintf_r+0x1ea>
 8008de0:	08009a86 	.word	0x08009a86
 8008de4:	08009a90 	.word	0x08009a90
 8008de8:	00000000 	.word	0x00000000
 8008dec:	08008b9b 	.word	0x08008b9b
 8008df0:	08009a8c 	.word	0x08009a8c

08008df4 <_printf_common>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4616      	mov	r6, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	688a      	ldr	r2, [r1, #8]
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bfb8      	it	lt
 8008e08:	4613      	movlt	r3, r2
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e10:	4607      	mov	r7, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b10a      	cbz	r2, 8008e1a <_printf_common+0x26>
 8008e16:	3301      	adds	r3, #1
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	6833      	ldrmi	r3, [r6, #0]
 8008e22:	3302      	addmi	r3, #2
 8008e24:	6033      	strmi	r3, [r6, #0]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d106      	bne.n	8008e3c <_printf_common+0x48>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	6832      	ldr	r2, [r6, #0]
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc26      	bgt.n	8008e8a <_printf_common+0x96>
 8008e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e40:	1e13      	subs	r3, r2, #0
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d42b      	bmi.n	8008ea4 <_printf_common+0xb0>
 8008e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e50:	4649      	mov	r1, r9
 8008e52:	4638      	mov	r0, r7
 8008e54:	47c0      	blx	r8
 8008e56:	3001      	adds	r0, #1
 8008e58:	d01e      	beq.n	8008e98 <_printf_common+0xa4>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	f003 0306 	and.w	r3, r3, #6
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	bf02      	ittt	eq
 8008e66:	68e5      	ldreq	r5, [r4, #12]
 8008e68:	6833      	ldreq	r3, [r6, #0]
 8008e6a:	1aed      	subeq	r5, r5, r3
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e74:	2500      	movne	r5, #0
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bfc4      	itt	gt
 8008e7a:	1a9b      	subgt	r3, r3, r2
 8008e7c:	18ed      	addgt	r5, r5, r3
 8008e7e:	2600      	movs	r6, #0
 8008e80:	341a      	adds	r4, #26
 8008e82:	42b5      	cmp	r5, r6
 8008e84:	d11a      	bne.n	8008ebc <_printf_common+0xc8>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e008      	b.n	8008e9c <_printf_common+0xa8>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4638      	mov	r0, r7
 8008e92:	47c0      	blx	r8
 8008e94:	3001      	adds	r0, #1
 8008e96:	d103      	bne.n	8008ea0 <_printf_common+0xac>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	e7c6      	b.n	8008e32 <_printf_common+0x3e>
 8008ea4:	18e1      	adds	r1, r4, r3
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	2030      	movs	r0, #48	; 0x30
 8008eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eae:	4422      	add	r2, r4
 8008eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eb8:	3302      	adds	r3, #2
 8008eba:	e7c7      	b.n	8008e4c <_printf_common+0x58>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d0e6      	beq.n	8008e98 <_printf_common+0xa4>
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7d9      	b.n	8008e82 <_printf_common+0x8e>
	...

08008ed0 <_printf_i>:
 8008ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	7e0f      	ldrb	r7, [r1, #24]
 8008ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ed8:	2f78      	cmp	r7, #120	; 0x78
 8008eda:	4691      	mov	r9, r2
 8008edc:	4680      	mov	r8, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ee6:	d807      	bhi.n	8008ef8 <_printf_i+0x28>
 8008ee8:	2f62      	cmp	r7, #98	; 0x62
 8008eea:	d80a      	bhi.n	8008f02 <_printf_i+0x32>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	f000 80d4 	beq.w	800909a <_printf_i+0x1ca>
 8008ef2:	2f58      	cmp	r7, #88	; 0x58
 8008ef4:	f000 80c0 	beq.w	8009078 <_printf_i+0x1a8>
 8008ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f00:	e03a      	b.n	8008f78 <_printf_i+0xa8>
 8008f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f06:	2b15      	cmp	r3, #21
 8008f08:	d8f6      	bhi.n	8008ef8 <_printf_i+0x28>
 8008f0a:	a101      	add	r1, pc, #4	; (adr r1, 8008f10 <_printf_i+0x40>)
 8008f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008ef9 	.word	0x08008ef9
 8008f1c:	08008ef9 	.word	0x08008ef9
 8008f20:	08008ef9 	.word	0x08008ef9
 8008f24:	08008ef9 	.word	0x08008ef9
 8008f28:	08008f7d 	.word	0x08008f7d
 8008f2c:	08008ef9 	.word	0x08008ef9
 8008f30:	08008ef9 	.word	0x08008ef9
 8008f34:	08008ef9 	.word	0x08008ef9
 8008f38:	08008ef9 	.word	0x08008ef9
 8008f3c:	08009081 	.word	0x08009081
 8008f40:	08008fa9 	.word	0x08008fa9
 8008f44:	0800903b 	.word	0x0800903b
 8008f48:	08008ef9 	.word	0x08008ef9
 8008f4c:	08008ef9 	.word	0x08008ef9
 8008f50:	080090a3 	.word	0x080090a3
 8008f54:	08008ef9 	.word	0x08008ef9
 8008f58:	08008fa9 	.word	0x08008fa9
 8008f5c:	08008ef9 	.word	0x08008ef9
 8008f60:	08008ef9 	.word	0x08008ef9
 8008f64:	08009043 	.word	0x08009043
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e09f      	b.n	80090bc <_printf_i+0x1ec>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	0607      	lsls	r7, r0, #24
 8008f82:	f103 0104 	add.w	r1, r3, #4
 8008f86:	6029      	str	r1, [r5, #0]
 8008f88:	d501      	bpl.n	8008f8e <_printf_i+0xbe>
 8008f8a:	681e      	ldr	r6, [r3, #0]
 8008f8c:	e003      	b.n	8008f96 <_printf_i+0xc6>
 8008f8e:	0646      	lsls	r6, r0, #25
 8008f90:	d5fb      	bpl.n	8008f8a <_printf_i+0xba>
 8008f92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	da03      	bge.n	8008fa2 <_printf_i+0xd2>
 8008f9a:	232d      	movs	r3, #45	; 0x2d
 8008f9c:	4276      	negs	r6, r6
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa2:	485a      	ldr	r0, [pc, #360]	; (800910c <_printf_i+0x23c>)
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	e012      	b.n	8008fce <_printf_i+0xfe>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	6820      	ldr	r0, [r4, #0]
 8008fac:	1d19      	adds	r1, r3, #4
 8008fae:	6029      	str	r1, [r5, #0]
 8008fb0:	0605      	lsls	r5, r0, #24
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_i+0xe8>
 8008fb4:	681e      	ldr	r6, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <_printf_i+0xee>
 8008fb8:	0641      	lsls	r1, r0, #25
 8008fba:	d5fb      	bpl.n	8008fb4 <_printf_i+0xe4>
 8008fbc:	881e      	ldrh	r6, [r3, #0]
 8008fbe:	4853      	ldr	r0, [pc, #332]	; (800910c <_printf_i+0x23c>)
 8008fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2308      	moveq	r3, #8
 8008fc6:	230a      	movne	r3, #10
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fce:	6865      	ldr	r5, [r4, #4]
 8008fd0:	60a5      	str	r5, [r4, #8]
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	bfa2      	ittt	ge
 8008fd6:	6821      	ldrge	r1, [r4, #0]
 8008fd8:	f021 0104 	bicge.w	r1, r1, #4
 8008fdc:	6021      	strge	r1, [r4, #0]
 8008fde:	b90e      	cbnz	r6, 8008fe4 <_printf_i+0x114>
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	d04b      	beq.n	800907c <_printf_i+0x1ac>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fea:	fb03 6711 	mls	r7, r3, r1, r6
 8008fee:	5dc7      	ldrb	r7, [r0, r7]
 8008ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ff4:	4637      	mov	r7, r6
 8008ff6:	42bb      	cmp	r3, r7
 8008ff8:	460e      	mov	r6, r1
 8008ffa:	d9f4      	bls.n	8008fe6 <_printf_i+0x116>
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d10b      	bne.n	8009018 <_printf_i+0x148>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	07de      	lsls	r6, r3, #31
 8009004:	d508      	bpl.n	8009018 <_printf_i+0x148>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	6861      	ldr	r1, [r4, #4]
 800900a:	4299      	cmp	r1, r3
 800900c:	bfde      	ittt	le
 800900e:	2330      	movle	r3, #48	; 0x30
 8009010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009018:	1b52      	subs	r2, r2, r5
 800901a:	6122      	str	r2, [r4, #16]
 800901c:	f8cd a000 	str.w	sl, [sp]
 8009020:	464b      	mov	r3, r9
 8009022:	aa03      	add	r2, sp, #12
 8009024:	4621      	mov	r1, r4
 8009026:	4640      	mov	r0, r8
 8009028:	f7ff fee4 	bl	8008df4 <_printf_common>
 800902c:	3001      	adds	r0, #1
 800902e:	d14a      	bne.n	80090c6 <_printf_i+0x1f6>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b004      	add	sp, #16
 8009036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f043 0320 	orr.w	r3, r3, #32
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	4833      	ldr	r0, [pc, #204]	; (8009110 <_printf_i+0x240>)
 8009044:	2778      	movs	r7, #120	; 0x78
 8009046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	6829      	ldr	r1, [r5, #0]
 800904e:	061f      	lsls	r7, r3, #24
 8009050:	f851 6b04 	ldr.w	r6, [r1], #4
 8009054:	d402      	bmi.n	800905c <_printf_i+0x18c>
 8009056:	065f      	lsls	r7, r3, #25
 8009058:	bf48      	it	mi
 800905a:	b2b6      	uxthmi	r6, r6
 800905c:	07df      	lsls	r7, r3, #31
 800905e:	bf48      	it	mi
 8009060:	f043 0320 	orrmi.w	r3, r3, #32
 8009064:	6029      	str	r1, [r5, #0]
 8009066:	bf48      	it	mi
 8009068:	6023      	strmi	r3, [r4, #0]
 800906a:	b91e      	cbnz	r6, 8009074 <_printf_i+0x1a4>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f023 0320 	bic.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	2310      	movs	r3, #16
 8009076:	e7a7      	b.n	8008fc8 <_printf_i+0xf8>
 8009078:	4824      	ldr	r0, [pc, #144]	; (800910c <_printf_i+0x23c>)
 800907a:	e7e4      	b.n	8009046 <_printf_i+0x176>
 800907c:	4615      	mov	r5, r2
 800907e:	e7bd      	b.n	8008ffc <_printf_i+0x12c>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	6826      	ldr	r6, [r4, #0]
 8009084:	6961      	ldr	r1, [r4, #20]
 8009086:	1d18      	adds	r0, r3, #4
 8009088:	6028      	str	r0, [r5, #0]
 800908a:	0635      	lsls	r5, r6, #24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	d501      	bpl.n	8009094 <_printf_i+0x1c4>
 8009090:	6019      	str	r1, [r3, #0]
 8009092:	e002      	b.n	800909a <_printf_i+0x1ca>
 8009094:	0670      	lsls	r0, r6, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0x1c0>
 8009098:	8019      	strh	r1, [r3, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	4615      	mov	r5, r2
 80090a0:	e7bc      	b.n	800901c <_printf_i+0x14c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	602a      	str	r2, [r5, #0]
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	6862      	ldr	r2, [r4, #4]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4628      	mov	r0, r5
 80090b0:	f7f7 f89e 	bl	80001f0 <memchr>
 80090b4:	b108      	cbz	r0, 80090ba <_printf_i+0x1ea>
 80090b6:	1b40      	subs	r0, r0, r5
 80090b8:	6060      	str	r0, [r4, #4]
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	2300      	movs	r3, #0
 80090c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c4:	e7aa      	b.n	800901c <_printf_i+0x14c>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d0ad      	beq.n	8009030 <_printf_i+0x160>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	079b      	lsls	r3, r3, #30
 80090d8:	d413      	bmi.n	8009102 <_printf_i+0x232>
 80090da:	68e0      	ldr	r0, [r4, #12]
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	4298      	cmp	r0, r3
 80090e0:	bfb8      	it	lt
 80090e2:	4618      	movlt	r0, r3
 80090e4:	e7a6      	b.n	8009034 <_printf_i+0x164>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4632      	mov	r2, r6
 80090ea:	4649      	mov	r1, r9
 80090ec:	4640      	mov	r0, r8
 80090ee:	47d0      	blx	sl
 80090f0:	3001      	adds	r0, #1
 80090f2:	d09d      	beq.n	8009030 <_printf_i+0x160>
 80090f4:	3501      	adds	r5, #1
 80090f6:	68e3      	ldr	r3, [r4, #12]
 80090f8:	9903      	ldr	r1, [sp, #12]
 80090fa:	1a5b      	subs	r3, r3, r1
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dcf2      	bgt.n	80090e6 <_printf_i+0x216>
 8009100:	e7eb      	b.n	80090da <_printf_i+0x20a>
 8009102:	2500      	movs	r5, #0
 8009104:	f104 0619 	add.w	r6, r4, #25
 8009108:	e7f5      	b.n	80090f6 <_printf_i+0x226>
 800910a:	bf00      	nop
 800910c:	08009a97 	.word	0x08009a97
 8009110:	08009aa8 	.word	0x08009aa8

08009114 <__sflush_r>:
 8009114:	898a      	ldrh	r2, [r1, #12]
 8009116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	0710      	lsls	r0, r2, #28
 800911e:	460c      	mov	r4, r1
 8009120:	d458      	bmi.n	80091d4 <__sflush_r+0xc0>
 8009122:	684b      	ldr	r3, [r1, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc05      	bgt.n	8009134 <__sflush_r+0x20>
 8009128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc02      	bgt.n	8009134 <__sflush_r+0x20>
 800912e:	2000      	movs	r0, #0
 8009130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009136:	2e00      	cmp	r6, #0
 8009138:	d0f9      	beq.n	800912e <__sflush_r+0x1a>
 800913a:	2300      	movs	r3, #0
 800913c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009140:	682f      	ldr	r7, [r5, #0]
 8009142:	6a21      	ldr	r1, [r4, #32]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	d032      	beq.n	80091ae <__sflush_r+0x9a>
 8009148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	075a      	lsls	r2, r3, #29
 800914e:	d505      	bpl.n	800915c <__sflush_r+0x48>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	1ac0      	subs	r0, r0, r3
 8009154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009156:	b10b      	cbz	r3, 800915c <__sflush_r+0x48>
 8009158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915a:	1ac0      	subs	r0, r0, r3
 800915c:	2300      	movs	r3, #0
 800915e:	4602      	mov	r2, r0
 8009160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009162:	6a21      	ldr	r1, [r4, #32]
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	d106      	bne.n	800917c <__sflush_r+0x68>
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	291d      	cmp	r1, #29
 8009172:	d82b      	bhi.n	80091cc <__sflush_r+0xb8>
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <__sflush_r+0x108>)
 8009176:	410a      	asrs	r2, r1
 8009178:	07d6      	lsls	r6, r2, #31
 800917a:	d427      	bmi.n	80091cc <__sflush_r+0xb8>
 800917c:	2200      	movs	r2, #0
 800917e:	6062      	str	r2, [r4, #4]
 8009180:	04d9      	lsls	r1, r3, #19
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	d504      	bpl.n	8009192 <__sflush_r+0x7e>
 8009188:	1c42      	adds	r2, r0, #1
 800918a:	d101      	bne.n	8009190 <__sflush_r+0x7c>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b903      	cbnz	r3, 8009192 <__sflush_r+0x7e>
 8009190:	6560      	str	r0, [r4, #84]	; 0x54
 8009192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009194:	602f      	str	r7, [r5, #0]
 8009196:	2900      	cmp	r1, #0
 8009198:	d0c9      	beq.n	800912e <__sflush_r+0x1a>
 800919a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800919e:	4299      	cmp	r1, r3
 80091a0:	d002      	beq.n	80091a8 <__sflush_r+0x94>
 80091a2:	4628      	mov	r0, r5
 80091a4:	f7ff fbe2 	bl	800896c <_free_r>
 80091a8:	2000      	movs	r0, #0
 80091aa:	6360      	str	r0, [r4, #52]	; 0x34
 80091ac:	e7c0      	b.n	8009130 <__sflush_r+0x1c>
 80091ae:	2301      	movs	r3, #1
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b0      	blx	r6
 80091b4:	1c41      	adds	r1, r0, #1
 80091b6:	d1c8      	bne.n	800914a <__sflush_r+0x36>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0c5      	beq.n	800914a <__sflush_r+0x36>
 80091be:	2b1d      	cmp	r3, #29
 80091c0:	d001      	beq.n	80091c6 <__sflush_r+0xb2>
 80091c2:	2b16      	cmp	r3, #22
 80091c4:	d101      	bne.n	80091ca <__sflush_r+0xb6>
 80091c6:	602f      	str	r7, [r5, #0]
 80091c8:	e7b1      	b.n	800912e <__sflush_r+0x1a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	e7ad      	b.n	8009130 <__sflush_r+0x1c>
 80091d4:	690f      	ldr	r7, [r1, #16]
 80091d6:	2f00      	cmp	r7, #0
 80091d8:	d0a9      	beq.n	800912e <__sflush_r+0x1a>
 80091da:	0793      	lsls	r3, r2, #30
 80091dc:	680e      	ldr	r6, [r1, #0]
 80091de:	bf08      	it	eq
 80091e0:	694b      	ldreq	r3, [r1, #20]
 80091e2:	600f      	str	r7, [r1, #0]
 80091e4:	bf18      	it	ne
 80091e6:	2300      	movne	r3, #0
 80091e8:	eba6 0807 	sub.w	r8, r6, r7
 80091ec:	608b      	str	r3, [r1, #8]
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	dd9c      	ble.n	800912e <__sflush_r+0x1a>
 80091f4:	6a21      	ldr	r1, [r4, #32]
 80091f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091f8:	4643      	mov	r3, r8
 80091fa:	463a      	mov	r2, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b0      	blx	r6
 8009200:	2800      	cmp	r0, #0
 8009202:	dc06      	bgt.n	8009212 <__sflush_r+0xfe>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e78e      	b.n	8009130 <__sflush_r+0x1c>
 8009212:	4407      	add	r7, r0
 8009214:	eba8 0800 	sub.w	r8, r8, r0
 8009218:	e7e9      	b.n	80091ee <__sflush_r+0xda>
 800921a:	bf00      	nop
 800921c:	dfbffffe 	.word	0xdfbffffe

08009220 <_fflush_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	4605      	mov	r5, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b913      	cbnz	r3, 8009230 <_fflush_r+0x10>
 800922a:	2500      	movs	r5, #0
 800922c:	4628      	mov	r0, r5
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	b118      	cbz	r0, 800923a <_fflush_r+0x1a>
 8009232:	6a03      	ldr	r3, [r0, #32]
 8009234:	b90b      	cbnz	r3, 800923a <_fflush_r+0x1a>
 8009236:	f7ff f869 	bl	800830c <__sinit>
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f3      	beq.n	800922a <_fflush_r+0xa>
 8009242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d404      	bmi.n	8009252 <_fflush_r+0x32>
 8009248:	0599      	lsls	r1, r3, #22
 800924a:	d402      	bmi.n	8009252 <_fflush_r+0x32>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f7ff fb6c 	bl	800892a <__retarget_lock_acquire_recursive>
 8009252:	4628      	mov	r0, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff ff5d 	bl	8009114 <__sflush_r>
 800925a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	4605      	mov	r5, r0
 8009260:	d4e4      	bmi.n	800922c <_fflush_r+0xc>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d4e1      	bmi.n	800922c <_fflush_r+0xc>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f7ff fb5f 	bl	800892c <__retarget_lock_release_recursive>
 800926e:	e7dd      	b.n	800922c <_fflush_r+0xc>

08009270 <fiprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	b503      	push	{r0, r1, lr}
 8009274:	4601      	mov	r1, r0
 8009276:	ab03      	add	r3, sp, #12
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <fiprintf+0x20>)
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f7ff fc9d 	bl	8008bc0 <_vfiprintf_r>
 8009286:	b002      	add	sp, #8
 8009288:	f85d eb04 	ldr.w	lr, [sp], #4
 800928c:	b003      	add	sp, #12
 800928e:	4770      	bx	lr
 8009290:	200000dc 	.word	0x200000dc

08009294 <_getc_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	460c      	mov	r4, r1
 8009298:	4605      	mov	r5, r0
 800929a:	b118      	cbz	r0, 80092a4 <_getc_r+0x10>
 800929c:	6a03      	ldr	r3, [r0, #32]
 800929e:	b90b      	cbnz	r3, 80092a4 <_getc_r+0x10>
 80092a0:	f7ff f834 	bl	800830c <__sinit>
 80092a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a6:	07d8      	lsls	r0, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_getc_r+0x22>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	0599      	lsls	r1, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_getc_r+0x22>
 80092b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092b2:	f7ff fb3a 	bl	800892a <__retarget_lock_acquire_recursive>
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	6063      	str	r3, [r4, #4]
 80092be:	da0f      	bge.n	80092e0 <_getc_r+0x4c>
 80092c0:	4628      	mov	r0, r5
 80092c2:	4621      	mov	r1, r4
 80092c4:	f000 f8a7 	bl	8009416 <__srget_r>
 80092c8:	4605      	mov	r5, r0
 80092ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092cc:	07da      	lsls	r2, r3, #31
 80092ce:	d405      	bmi.n	80092dc <_getc_r+0x48>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	059b      	lsls	r3, r3, #22
 80092d4:	d402      	bmi.n	80092dc <_getc_r+0x48>
 80092d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092d8:	f7ff fb28 	bl	800892c <__retarget_lock_release_recursive>
 80092dc:	4628      	mov	r0, r5
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	6022      	str	r2, [r4, #0]
 80092e6:	781d      	ldrb	r5, [r3, #0]
 80092e8:	e7ef      	b.n	80092ca <_getc_r+0x36>

080092ea <__swhatbuf_r>:
 80092ea:	b570      	push	{r4, r5, r6, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	2900      	cmp	r1, #0
 80092f4:	b096      	sub	sp, #88	; 0x58
 80092f6:	4615      	mov	r5, r2
 80092f8:	461e      	mov	r6, r3
 80092fa:	da0d      	bge.n	8009318 <__swhatbuf_r+0x2e>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009302:	f04f 0100 	mov.w	r1, #0
 8009306:	bf0c      	ite	eq
 8009308:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800930c:	2340      	movne	r3, #64	; 0x40
 800930e:	2000      	movs	r0, #0
 8009310:	6031      	str	r1, [r6, #0]
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	b016      	add	sp, #88	; 0x58
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	466a      	mov	r2, sp
 800931a:	f000 f895 	bl	8009448 <_fstat_r>
 800931e:	2800      	cmp	r0, #0
 8009320:	dbec      	blt.n	80092fc <__swhatbuf_r+0x12>
 8009322:	9901      	ldr	r1, [sp, #4]
 8009324:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009328:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800932c:	4259      	negs	r1, r3
 800932e:	4159      	adcs	r1, r3
 8009330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009334:	e7eb      	b.n	800930e <__swhatbuf_r+0x24>

08009336 <__smakebuf_r>:
 8009336:	898b      	ldrh	r3, [r1, #12]
 8009338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800933a:	079d      	lsls	r5, r3, #30
 800933c:	4606      	mov	r6, r0
 800933e:	460c      	mov	r4, r1
 8009340:	d507      	bpl.n	8009352 <__smakebuf_r+0x1c>
 8009342:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	2301      	movs	r3, #1
 800934c:	6163      	str	r3, [r4, #20]
 800934e:	b002      	add	sp, #8
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	ab01      	add	r3, sp, #4
 8009354:	466a      	mov	r2, sp
 8009356:	f7ff ffc8 	bl	80092ea <__swhatbuf_r>
 800935a:	9900      	ldr	r1, [sp, #0]
 800935c:	4605      	mov	r5, r0
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff fb78 	bl	8008a54 <_malloc_r>
 8009364:	b948      	cbnz	r0, 800937a <__smakebuf_r+0x44>
 8009366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936a:	059a      	lsls	r2, r3, #22
 800936c:	d4ef      	bmi.n	800934e <__smakebuf_r+0x18>
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	f043 0302 	orr.w	r3, r3, #2
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	e7e3      	b.n	8009342 <__smakebuf_r+0xc>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	6020      	str	r0, [r4, #0]
 800937e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	6163      	str	r3, [r4, #20]
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	6120      	str	r0, [r4, #16]
 800938c:	b15b      	cbz	r3, 80093a6 <__smakebuf_r+0x70>
 800938e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f86a 	bl	800946c <_isatty_r>
 8009398:	b128      	cbz	r0, 80093a6 <__smakebuf_r+0x70>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f023 0303 	bic.w	r3, r3, #3
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	431d      	orrs	r5, r3
 80093aa:	81a5      	strh	r5, [r4, #12]
 80093ac:	e7cf      	b.n	800934e <__smakebuf_r+0x18>

080093ae <_putc_r>:
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	460d      	mov	r5, r1
 80093b2:	4614      	mov	r4, r2
 80093b4:	4606      	mov	r6, r0
 80093b6:	b118      	cbz	r0, 80093c0 <_putc_r+0x12>
 80093b8:	6a03      	ldr	r3, [r0, #32]
 80093ba:	b90b      	cbnz	r3, 80093c0 <_putc_r+0x12>
 80093bc:	f7fe ffa6 	bl	800830c <__sinit>
 80093c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093c2:	07d8      	lsls	r0, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_putc_r+0x24>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	0599      	lsls	r1, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_putc_r+0x24>
 80093cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ce:	f7ff faac 	bl	800892a <__retarget_lock_acquire_recursive>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	60a3      	str	r3, [r4, #8]
 80093da:	da05      	bge.n	80093e8 <_putc_r+0x3a>
 80093dc:	69a2      	ldr	r2, [r4, #24]
 80093de:	4293      	cmp	r3, r2
 80093e0:	db12      	blt.n	8009408 <_putc_r+0x5a>
 80093e2:	b2eb      	uxtb	r3, r5
 80093e4:	2b0a      	cmp	r3, #10
 80093e6:	d00f      	beq.n	8009408 <_putc_r+0x5a>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	701d      	strb	r5, [r3, #0]
 80093f0:	b2ed      	uxtb	r5, r5
 80093f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f4:	07da      	lsls	r2, r3, #31
 80093f6:	d405      	bmi.n	8009404 <_putc_r+0x56>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	059b      	lsls	r3, r3, #22
 80093fc:	d402      	bmi.n	8009404 <_putc_r+0x56>
 80093fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009400:	f7ff fa94 	bl	800892c <__retarget_lock_release_recursive>
 8009404:	4628      	mov	r0, r5
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	4629      	mov	r1, r5
 800940a:	4622      	mov	r2, r4
 800940c:	4630      	mov	r0, r6
 800940e:	f7ff f922 	bl	8008656 <__swbuf_r>
 8009412:	4605      	mov	r5, r0
 8009414:	e7ed      	b.n	80093f2 <_putc_r+0x44>

08009416 <__srget_r>:
 8009416:	b538      	push	{r3, r4, r5, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	4605      	mov	r5, r0
 800941c:	b118      	cbz	r0, 8009426 <__srget_r+0x10>
 800941e:	6a03      	ldr	r3, [r0, #32]
 8009420:	b90b      	cbnz	r3, 8009426 <__srget_r+0x10>
 8009422:	f7fe ff73 	bl	800830c <__sinit>
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f000 f855 	bl	80094d8 <__srefill_r>
 800942e:	b938      	cbnz	r0, 8009440 <__srget_r+0x2a>
 8009430:	6863      	ldr	r3, [r4, #4]
 8009432:	3b01      	subs	r3, #1
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	6022      	str	r2, [r4, #0]
 800943c:	7818      	ldrb	r0, [r3, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	e7fb      	b.n	800943e <__srget_r+0x28>
	...

08009448 <_fstat_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_fstat_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f7f8 f8b3 	bl	80015c0 <_fstat>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_fstat_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_fstat_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20000408 	.word	0x20000408

0800946c <_isatty_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	; (8009488 <_isatty_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f8 f810 	bl	800149c <_isatty>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_isatty_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_isatty_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20000408 	.word	0x20000408

0800948c <_sbrk_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_sbrk_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f8 faa4 	bl	80019e4 <_sbrk>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_sbrk_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_sbrk_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20000408 	.word	0x20000408

080094ac <abort>:
 80094ac:	b508      	push	{r3, lr}
 80094ae:	2006      	movs	r0, #6
 80094b0:	f000 f8b2 	bl	8009618 <raise>
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7f8 fa8b 	bl	80019d0 <_exit>
	...

080094bc <lflush>:
 80094bc:	898b      	ldrh	r3, [r1, #12]
 80094be:	f003 0309 	and.w	r3, r3, #9
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d103      	bne.n	80094ce <lflush+0x12>
 80094c6:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <lflush+0x18>)
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	f7ff bea9 	b.w	8009220 <_fflush_r>
 80094ce:	2000      	movs	r0, #0
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200000dc 	.word	0x200000dc

080094d8 <__srefill_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	460c      	mov	r4, r1
 80094dc:	4605      	mov	r5, r0
 80094de:	b118      	cbz	r0, 80094e8 <__srefill_r+0x10>
 80094e0:	6a03      	ldr	r3, [r0, #32]
 80094e2:	b90b      	cbnz	r3, 80094e8 <__srefill_r+0x10>
 80094e4:	f7fe ff12 	bl	800830c <__sinit>
 80094e8:	2300      	movs	r3, #0
 80094ea:	6063      	str	r3, [r4, #4]
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f2:	069e      	lsls	r6, r3, #26
 80094f4:	d502      	bpl.n	80094fc <__srefill_r+0x24>
 80094f6:	f04f 30ff 	mov.w	r0, #4294967295
 80094fa:	e05c      	b.n	80095b6 <__srefill_r+0xde>
 80094fc:	0758      	lsls	r0, r3, #29
 80094fe:	d448      	bmi.n	8009592 <__srefill_r+0xba>
 8009500:	06d9      	lsls	r1, r3, #27
 8009502:	d405      	bmi.n	8009510 <__srefill_r+0x38>
 8009504:	2309      	movs	r3, #9
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	e7f2      	b.n	80094f6 <__srefill_r+0x1e>
 8009510:	071a      	lsls	r2, r3, #28
 8009512:	d50b      	bpl.n	800952c <__srefill_r+0x54>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f7ff fe82 	bl	8009220 <_fflush_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	d1ea      	bne.n	80094f6 <__srefill_r+0x1e>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	60a0      	str	r0, [r4, #8]
 8009524:	f023 0308 	bic.w	r3, r3, #8
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	61a0      	str	r0, [r4, #24]
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f043 0304 	orr.w	r3, r3, #4
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	b91b      	cbnz	r3, 8009540 <__srefill_r+0x68>
 8009538:	4621      	mov	r1, r4
 800953a:	4628      	mov	r0, r5
 800953c:	f7ff fefb 	bl	8009336 <__smakebuf_r>
 8009540:	89a6      	ldrh	r6, [r4, #12]
 8009542:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009546:	07b3      	lsls	r3, r6, #30
 8009548:	d00f      	beq.n	800956a <__srefill_r+0x92>
 800954a:	2301      	movs	r3, #1
 800954c:	4a1b      	ldr	r2, [pc, #108]	; (80095bc <__srefill_r+0xe4>)
 800954e:	491c      	ldr	r1, [pc, #112]	; (80095c0 <__srefill_r+0xe8>)
 8009550:	481c      	ldr	r0, [pc, #112]	; (80095c4 <__srefill_r+0xec>)
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	f006 0609 	and.w	r6, r6, #9
 8009558:	f7fe fef0 	bl	800833c <_fwalk_sglue>
 800955c:	2e09      	cmp	r6, #9
 800955e:	81a7      	strh	r7, [r4, #12]
 8009560:	d103      	bne.n	800956a <__srefill_r+0x92>
 8009562:	4621      	mov	r1, r4
 8009564:	4628      	mov	r0, r5
 8009566:	f7ff fdd5 	bl	8009114 <__sflush_r>
 800956a:	6922      	ldr	r2, [r4, #16]
 800956c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800956e:	6963      	ldr	r3, [r4, #20]
 8009570:	6a21      	ldr	r1, [r4, #32]
 8009572:	6022      	str	r2, [r4, #0]
 8009574:	4628      	mov	r0, r5
 8009576:	47b0      	blx	r6
 8009578:	2800      	cmp	r0, #0
 800957a:	6060      	str	r0, [r4, #4]
 800957c:	dc1c      	bgt.n	80095b8 <__srefill_r+0xe0>
 800957e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009582:	bf17      	itett	ne
 8009584:	2200      	movne	r2, #0
 8009586:	f043 0320 	orreq.w	r3, r3, #32
 800958a:	6062      	strne	r2, [r4, #4]
 800958c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009590:	e7bc      	b.n	800950c <__srefill_r+0x34>
 8009592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009594:	2900      	cmp	r1, #0
 8009596:	d0cd      	beq.n	8009534 <__srefill_r+0x5c>
 8009598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800959c:	4299      	cmp	r1, r3
 800959e:	d002      	beq.n	80095a6 <__srefill_r+0xce>
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7ff f9e3 	bl	800896c <_free_r>
 80095a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	2000      	movs	r0, #0
 80095ac:	6360      	str	r0, [r4, #52]	; 0x34
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0c0      	beq.n	8009534 <__srefill_r+0x5c>
 80095b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	2000      	movs	r0, #0
 80095ba:	e7fc      	b.n	80095b6 <__srefill_r+0xde>
 80095bc:	20000084 	.word	0x20000084
 80095c0:	080094bd 	.word	0x080094bd
 80095c4:	20000090 	.word	0x20000090

080095c8 <_raise_r>:
 80095c8:	291f      	cmp	r1, #31
 80095ca:	b538      	push	{r3, r4, r5, lr}
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	d904      	bls.n	80095dc <_raise_r+0x14>
 80095d2:	2316      	movs	r3, #22
 80095d4:	6003      	str	r3, [r0, #0]
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095de:	b112      	cbz	r2, 80095e6 <_raise_r+0x1e>
 80095e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095e4:	b94b      	cbnz	r3, 80095fa <_raise_r+0x32>
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 f830 	bl	800964c <_getpid_r>
 80095ec:	462a      	mov	r2, r5
 80095ee:	4601      	mov	r1, r0
 80095f0:	4620      	mov	r0, r4
 80095f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095f6:	f000 b817 	b.w	8009628 <_kill_r>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d00a      	beq.n	8009614 <_raise_r+0x4c>
 80095fe:	1c59      	adds	r1, r3, #1
 8009600:	d103      	bne.n	800960a <_raise_r+0x42>
 8009602:	2316      	movs	r3, #22
 8009604:	6003      	str	r3, [r0, #0]
 8009606:	2001      	movs	r0, #1
 8009608:	e7e7      	b.n	80095da <_raise_r+0x12>
 800960a:	2400      	movs	r4, #0
 800960c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009610:	4628      	mov	r0, r5
 8009612:	4798      	blx	r3
 8009614:	2000      	movs	r0, #0
 8009616:	e7e0      	b.n	80095da <_raise_r+0x12>

08009618 <raise>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <raise+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f7ff bfd3 	b.w	80095c8 <_raise_r>
 8009622:	bf00      	nop
 8009624:	200000dc 	.word	0x200000dc

08009628 <_kill_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_kill_r+0x20>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f7f8 f9bb 	bl	80019b0 <_kill>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d102      	bne.n	8009644 <_kill_r+0x1c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b103      	cbz	r3, 8009644 <_kill_r+0x1c>
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	20000408 	.word	0x20000408

0800964c <_getpid_r>:
 800964c:	f7f8 b9a8 	b.w	80019a0 <_getpid>

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
