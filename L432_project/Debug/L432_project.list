
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd4  08004dd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ddc  08004ddc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000068  08004e4c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08004e4c  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd09  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  0002dde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  000302d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000828  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213f4  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e09c  00000000  00000000  000529b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27b9  00000000  00000000  00060a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003388  00000000  00000000  0012320c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00126594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ce0 	.word	0x08004ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004ce0 	.word	0x08004ce0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800056c:	b480      	push	{r7}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	e853 3f00 	ldrex	r3, [r3]
 800057e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	69fa      	ldr	r2, [r7, #28]
 800058c:	61ba      	str	r2, [r7, #24]
 800058e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000590:	6979      	ldr	r1, [r7, #20]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	e841 2300 	strex	r3, r2, [r1]
 8000598:	613b      	str	r3, [r7, #16]
   return(result);
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1e9      	bne.n	8000574 <LL_USART_EnableIT_RXNE+0x8>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3724      	adds	r7, #36	; 0x24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	RingBuffer_Init(&rb);
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x30>)
 80005b6:	f000 f9f5 	bl	80009a4 <RingBuffer_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc1e 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f817 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8a7 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f875 	bl	80006b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x34>)
 80005cc:	f000 f8f2 	bl	80007b4 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <main+0x38>)
 80005d2:	f7ff ffcb 	bl	800056c <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x3c>)
 80005d8:	f003 fb3c 	bl	8003c54 <iprintf>

  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x2c>
 80005de:	bf00      	nop
 80005e0:	2000010c 	.word	0x2000010c
 80005e4:	20000084 	.word	0x20000084
 80005e8:	40004400 	.word	0x40004400
 80005ec:	08004cf8 	.word	0x08004cf8

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fc33 	bl	8003e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f000 ff95 	bl	8001544 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f8c2 	bl	80007a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f000 ff70 	bl	8001508 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000638:	2314      	movs	r3, #20
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffbf 	bl	80015f0 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000678:	f000 f896 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2101      	movs	r1, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fbbf 	bl	8001e18 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a0:	f000 f882 	bl	80007a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a4:	f001 ffd2 	bl	800264c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f002 f8aa 	bl	8002850 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f851 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000778:	f000 feae 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800077c:	2308      	movs	r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000794:	f000 fd36 	bl	8001204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <RetargetInit+0x28>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <RetargetInit+0x2c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6898      	ldr	r0, [r3, #8]
 80007c8:	2300      	movs	r3, #0
 80007ca:	2202      	movs	r2, #2
 80007cc:	2100      	movs	r1, #0
 80007ce:	f003 fa5b 	bl	8003c88 <setvbuf>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200004f8 	.word	0x200004f8
 80007e0:	20000064 	.word	0x20000064

080007e4 <_isatty>:

int _isatty(int fd) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	db04      	blt.n	80007fc <_isatty+0x18>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	dc01      	bgt.n	80007fc <_isatty+0x18>
    return 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e005      	b.n	8000808 <_isatty+0x24>

  errno = EBADF;
 80007fc:	f003 fb9a 	bl	8003f34 <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	2209      	movs	r2, #9
 8000804:	601a      	str	r2, [r3, #0]
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_write>:

int _write(int fd, char* ptr, int len) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d002      	beq.n	8000828 <_write+0x18>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d111      	bne.n	800084c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <_write+0x54>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	b29a      	uxth	r2, r3
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	f002 f859 	bl	80028ec <HAL_UART_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <_write+0x38>
      return len;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	e008      	b.n	800085a <_write+0x4a>
    else
      return EIO;
 8000848:	2305      	movs	r3, #5
 800084a:	e006      	b.n	800085a <_write+0x4a>
  }
  errno = EBADF;
 800084c:	f003 fb72 	bl	8003f34 <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	2209      	movs	r2, #9
 8000854:	601a      	str	r2, [r3, #0]
  return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200004f8 	.word	0x200004f8

08000868 <_close>:

int _close(int fd) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db04      	blt.n	8000880 <_close+0x18>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc01      	bgt.n	8000880 <_close+0x18>
    return 0;
 800087c:	2300      	movs	r3, #0
 800087e:	e006      	b.n	800088e <_close+0x26>

  errno = EBADF;
 8000880:	f003 fb58 	bl	8003f34 <__errno>
 8000884:	4603      	mov	r3, r0
 8000886:	2209      	movs	r2, #9
 8000888:	601a      	str	r2, [r3, #0]
  return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80008a2:	f003 fb47 	bl	8003f34 <__errno>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2209      	movs	r2, #9
 80008aa:	601a      	str	r2, [r3, #0]
  return -1;
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_read>:

int _read(int fd, char* ptr, int len) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d110      	bne.n	80008ec <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <_read+0x4c>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	2201      	movs	r2, #1
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	f002 f893 	bl	8002a00 <HAL_UART_Receive>
 80008da:	4603      	mov	r3, r0
 80008dc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <_read+0x30>
      return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e008      	b.n	80008fa <_read+0x42>
    else
      return EIO;
 80008e8:	2305      	movs	r3, #5
 80008ea:	e006      	b.n	80008fa <_read+0x42>
  }
  errno = EBADF;
 80008ec:	f003 fb22 	bl	8003f34 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2209      	movs	r2, #9
 80008f4:	601a      	str	r2, [r3, #0]
  return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200004f8 	.word	0x200004f8

08000908 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db08      	blt.n	800092a <_fstat+0x22>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b02      	cmp	r3, #2
 800091c:	dc05      	bgt.n	800092a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000924:	605a      	str	r2, [r3, #4]
    return 0;
 8000926:	2300      	movs	r3, #0
 8000928:	e005      	b.n	8000936 <_fstat+0x2e>
  }

  errno = EBADF;
 800092a:	f003 fb03 	bl	8003f34 <__errno>
 800092e:	4603      	mov	r3, r0
 8000930:	2209      	movs	r2, #9
 8000932:	601a      	str	r2, [r3, #0]
  return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <RingBuffer_GetFreeSpace>:
#include "ringbuffer.h"
#include <string.h>

uint16_t RingBuffer_GetFreeSpace(RingBuffer *buf) {
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	if(buf->tail == buf->head)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000952:	429a      	cmp	r2, r3
 8000954:	d102      	bne.n	800095c <RingBuffer_GetFreeSpace+0x1e>
		return RING_BUFFER_LENGTH - 1;
 8000956:	f240 33e7 	movw	r3, #999	; 0x3e7
 800095a:	e01d      	b.n	8000998 <RingBuffer_GetFreeSpace+0x5a>

	if(buf->head > buf->tail)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000968:	429a      	cmp	r2, r3
 800096a:	d90b      	bls.n	8000984 <RingBuffer_GetFreeSpace+0x46>
		return RING_BUFFER_LENGTH - ((buf->head - buf->tail) + 1);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000980:	b29b      	uxth	r3, r3
 8000982:	e009      	b.n	8000998 <RingBuffer_GetFreeSpace+0x5a>
	else
		return  (buf->tail - buf->head) - 1;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	3b01      	subs	r3, #1
 8000996:	b29b      	uxth	r3, r3
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <RingBuffer_Init>:
uint16_t RingBuffer_GetDataLength(RingBuffer *buf) {
	return RING_BUFFER_LENGTH - (RingBuffer_GetFreeSpace(buf) + 1);
}


void RingBuffer_Init(RingBuffer *buf) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	buf->head = buf->tail = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	memset(buf->buf, 0, RING_BUFFER_LENGTH);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fa4e 	bl	8003e6a <memset>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <RingBuffer_Write>:
		buf->tail = (buf->tail + 1) % RING_BUFFER_LENGTH;
	}
	return counter;
}

uint8_t RingBuffer_Write(RingBuffer *buf, uint8_t *data, uint16_t len) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	82fb      	strh	r3, [r7, #22]
	uint16_t freeSpace = RingBuffer_GetFreeSpace(buf);
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ffa7 	bl	800093e <RingBuffer_GetFreeSpace>
 80009f0:	4603      	mov	r3, r0
 80009f2:	82bb      	strh	r3, [r7, #20]

	if(freeSpace == 0)
 80009f4:	8abb      	ldrh	r3, [r7, #20]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <RingBuffer_Write+0x26>
		return RING_BUFFER_FULL;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e029      	b.n	8000a52 <RingBuffer_Write+0x7a>
	else if (freeSpace < len)
 80009fe:	8aba      	ldrh	r2, [r7, #20]
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d220      	bcs.n	8000a48 <RingBuffer_Write+0x70>
		return RING_BUFFER_NO_SUFFICIENT_SPACE;
 8000a06:	2302      	movs	r3, #2
 8000a08:	e023      	b.n	8000a52 <RingBuffer_Write+0x7a>

	while(counter < len) {
		buf->buf[buf->head] = data[counter++];
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	82fa      	strh	r2, [r7, #22]
 8000a10:	461a      	mov	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
 8000a1c:	7819      	ldrb	r1, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	5499      	strb	r1, [r3, r2]
		buf->head = (buf->head + 1) % RING_BUFFER_LENGTH;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <RingBuffer_Write+0x84>)
 8000a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a30:	1191      	asrs	r1, r2, #6
 8000a32:	17da      	asrs	r2, r3, #31
 8000a34:	1a8a      	subs	r2, r1, r2
 8000a36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a3a:	fb01 f202 	mul.w	r2, r1, r2
 8000a3e:	1a9a      	subs	r2, r3, r2
 8000a40:	b292      	uxth	r2, r2
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	while(counter < len) {
 8000a48:	8afa      	ldrh	r2, [r7, #22]
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3dc      	bcc.n	8000a0a <RingBuffer_Write+0x32>
	}
 	return RING_BUFFER_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	10624dd3 	.word	0x10624dd3

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	; 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09e      	sub	sp, #120	; 0x78
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2254      	movs	r2, #84	; 0x54
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 f9ce 	bl	8003e6a <memset>
  if(huart->Instance==USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a2c      	ldr	r2, [pc, #176]	; (8000b84 <HAL_UART_MspInit+0xdc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d150      	bne.n	8000b7a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fbbb 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af0:	f7ff fe5a 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	6593      	str	r3, [r2, #88]	; 0x58
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0xe0>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b24:	2304      	movs	r3, #4
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fb5f 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fb4d 	bl	8001204 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2026      	movs	r0, #38	; 0x26
 8000b70:	f000 fa93 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b74:	2026      	movs	r0, #38	; 0x26
 8000b76:	f000 faac 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3778      	adds	r7, #120	; 0x78
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f964 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be8:	4841      	ldr	r0, [pc, #260]	; (8000cf0 <USART2_IRQHandler+0x110>)
 8000bea:	f001 ffd3 	bl	8002b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char ch;
  extern RingBuffer rb;
  char buffer[1024];
  int index = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  const char *led_on = "LON";
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <USART2_IRQHandler+0x114>)
 8000bf6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  const char *led_off = "LOF";
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <USART2_IRQHandler+0x118>)
 8000bfc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  ch = getchar();
 8000c00:	f003 f820 	bl	8003c44 <getchar>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
  if (ch=='\r' || ch == '\n') {
 8000c0c:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000c10:	2b0d      	cmp	r3, #13
 8000c12:	d003      	beq.n	8000c1c <USART2_IRQHandler+0x3c>
 8000c14:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	d147      	bne.n	8000cac <USART2_IRQHandler+0xcc>
	  printf("\r\nRing Buffer: ");
 8000c1c:	4837      	ldr	r0, [pc, #220]	; (8000cfc <USART2_IRQHandler+0x11c>)
 8000c1e:	f003 f819 	bl	8003c54 <iprintf>
	  printf(buffer);
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 f815 	bl	8003c54 <iprintf>
	  printf("\n");
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f003 f824 	bl	8003c78 <putchar>
	  buffer[index] = '\0';
 8000c30:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c34:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8000c38:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	  printf("\n\r");
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <USART2_IRQHandler+0x120>)
 8000c44:	f003 f806 	bl	8003c54 <iprintf>
	  if (strstr(buffer,led_on) != NULL) {
 8000c48:	463b      	mov	r3, r7
 8000c4a:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f913 	bl	8003e7a <strstr>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <USART2_IRQHandler+0x8c>
		  printf("led_on\n\r");
 8000c5a:	482a      	ldr	r0, [pc, #168]	; (8000d04 <USART2_IRQHandler+0x124>)
 8000c5c:	f002 fffa 	bl	8003c54 <iprintf>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2108      	movs	r1, #8
 8000c64:	4828      	ldr	r0, [pc, #160]	; (8000d08 <USART2_IRQHandler+0x128>)
 8000c66:	f000 fc37 	bl	80014d8 <HAL_GPIO_WritePin>
 8000c6a:	e014      	b.n	8000c96 <USART2_IRQHandler+0xb6>
	  }
	  else if (strstr(buffer,led_off) != NULL) {
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f901 	bl	8003e7a <strstr>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <USART2_IRQHandler+0xb0>
		  printf("led_off\n\r");
 8000c7e:	4823      	ldr	r0, [pc, #140]	; (8000d0c <USART2_IRQHandler+0x12c>)
 8000c80:	f002 ffe8 	bl	8003c54 <iprintf>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <USART2_IRQHandler+0x128>)
 8000c8a:	f000 fc25 	bl	80014d8 <HAL_GPIO_WritePin>
 8000c8e:	e002      	b.n	8000c96 <USART2_IRQHandler+0xb6>
	  }
	  else {
		  printf("invalid_command\n\r");
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <USART2_IRQHandler+0x130>)
 8000c92:	f002 ffdf 	bl	8003c54 <iprintf>
	  }

	  memset(buffer, 0, sizeof(buffer));
 8000c96:	463b      	mov	r3, r7
 8000c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 f8e3 	bl	8003e6a <memset>
	  index = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000caa:	e01c      	b.n	8000ce6 <USART2_IRQHandler+0x106>
  }
  else {
	  buffer[index] = ch;
 8000cac:	f897 1403 	ldrb.w	r1, [r7, #1027]	; 0x403
 8000cb0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000cb4:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8000cb8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
	  RingBuffer_Write(&rb,(uint8_t *)&ch, 1);
 8000cc2:	f207 4303 	addw	r3, r7, #1027	; 0x403
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <USART2_IRQHandler+0x134>)
 8000ccc:	f7ff fe84 	bl	80009d8 <RingBuffer_Write>
	  index++;
 8000cd0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  putchar(ch);
 8000cda:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 ffca 	bl	8003c78 <putchar>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	08004d10 	.word	0x08004d10
 8000cf8:	08004d14 	.word	0x08004d14
 8000cfc:	08004d18 	.word	0x08004d18
 8000d00:	08004d28 	.word	0x08004d28
 8000d04:	08004d2c 	.word	0x08004d2c
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	08004d38 	.word	0x08004d38
 8000d10:	08004d44 	.word	0x08004d44
 8000d14:	2000010c 	.word	0x2000010c

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f003 f8f4 	bl	8003f34 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20010000 	.word	0x20010000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	200004fc 	.word	0x200004fc
 8000d80:	20000650 	.word	0x20000650

08000d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f003 f8b3 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fbe9 	bl	80005b0 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dec:	08004de4 	.word	0x08004de4
  ldr r2, =_sbss
 8000df0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df4:	20000650 	.word	0x20000650

08000df8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f93d 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fe20 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_InitTick+0x70>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f949 	bl	80010ee <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d809      	bhi.n	8000e7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f913 	bl	800109a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_InitTick+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e001      	b.n	8000e8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000500 	.word	0x20000500

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000500 	.word	0x20000500

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d008      	beq.n	8001130 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e022      	b.n	8001176 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020e 	bic.w	r2, r2, #14
 800113e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	f003 021c 	and.w	r2, r3, #28
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d005      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2204      	movs	r2, #4
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e029      	b.n	80011fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 020e 	bic.w	r2, r2, #14
 80011b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f003 021c 	and.w	r2, r3, #28
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    }
  }
  return status;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e148      	b.n	80014a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 813a 	beq.w	80014a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d005      	beq.n	8001244 <HAL_GPIO_Init+0x40>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d017      	beq.n	80012e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	6939      	ldr	r1, [r7, #16]
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8094 	beq.w	80014a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <HAL_GPIO_Init+0x2c0>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x2c0>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6613      	str	r3, [r2, #96]	; 0x60
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <HAL_GPIO_Init+0x2c0>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001390:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ba:	d00d      	beq.n	80013d8 <HAL_GPIO_Init+0x1d4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a43      	ldr	r2, [pc, #268]	; (80014cc <HAL_GPIO_Init+0x2c8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_GPIO_Init+0x1d0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_GPIO_Init+0x1cc>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e004      	b.n	80013da <HAL_GPIO_Init+0x1d6>
 80013d0:	2307      	movs	r3, #7
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x1d6>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_GPIO_Init+0x1d6>
 80013d8:	2300      	movs	r3, #0
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	f002 0203 	and.w	r2, r2, #3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ea:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141c:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_GPIO_Init+0x2d0>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f aeaf 	bne.w	8001214 <HAL_GPIO_Init+0x10>
  }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_PWREx_GetVoltageRange+0x18>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40007000 	.word	0x40007000

08001544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001552:	d130      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d038      	beq.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2232      	movs	r2, #50	; 0x32
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001588:	e002      	b.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3b01      	subs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159c:	d102      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f2      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b0:	d110      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e00f      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d007      	beq.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	f000 bc02 	b.w	8001e08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001604:	4b96      	ldr	r3, [pc, #600]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800160e:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80e4 	beq.w	80017ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_RCC_OscConfig+0x4c>
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	f040 808b 	bne.w	800174a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b01      	cmp	r3, #1
 8001638:	f040 8087 	bne.w	800174a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163c:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x64>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e3d9      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_RCC_OscConfig+0x7e>
 8001664:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	e005      	b.n	800167a <HAL_RCC_OscConfig+0x8a>
 800166e:	4b7c      	ldr	r3, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167a:	4293      	cmp	r3, r2
 800167c:	d223      	bcs.n	80016c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd8c 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e3ba      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001692:	4b73      	ldr	r3, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a72      	ldr	r2, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	496d      	ldr	r1, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b0:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	4968      	ldr	r1, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e025      	b.n	8001712 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c6:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4960      	ldr	r1, [pc, #384]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	495b      	ldr	r1, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd4c 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e37a      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001712:	f000 fc81 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4950      	ldr	r1, [pc, #320]	; (8001864 <HAL_RCC_OscConfig+0x274>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_RCC_OscConfig+0x278>)
 8001730:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001732:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb78 	bl	8000e2c <HAL_InitTick>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d052      	beq.n	80017ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	e35e      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d032      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a42      	ldr	r2, [pc, #264]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800175e:	f7ff fbb5 	bl	8000ecc <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001766:	f7ff fbb1 	bl	8000ecc <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e347      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a35      	ldr	r2, [pc, #212]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	492b      	ldr	r1, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
 80017b6:	e01a      	b.n	80017ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb82 	bl	8000ecc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb7e 	bl	8000ecc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e314      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1dc>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d073      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x21c>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d10e      	bne.n	8001824 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d063      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d15f      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e2f1      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x24c>
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e025      	b.n	8001888 <HAL_RCC_OscConfig+0x298>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d114      	bne.n	8001870 <HAL_RCC_OscConfig+0x280>
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a02      	ldr	r2, [pc, #8]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e013      	b.n	8001888 <HAL_RCC_OscConfig+0x298>
 8001860:	40021000 	.word	0x40021000
 8001864:	08004d58 	.word	0x08004d58
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004
 8001870:	4ba0      	ldr	r3, [pc, #640]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a9f      	ldr	r2, [pc, #636]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b9d      	ldr	r3, [pc, #628]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a9c      	ldr	r2, [pc, #624]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fb1c 	bl	8000ecc <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fb18 	bl	8000ecc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e2ae      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018aa:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x2a8>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb08 	bl	8000ecc <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fb04 	bl	8000ecc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e29a      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2d0>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d060      	beq.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x310>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d119      	bne.n	800192e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d116      	bne.n	800192e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x328>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e277      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	4973      	ldr	r1, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800192c:	e040      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d023      	beq.n	800197e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001936:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fac3 	bl	8000ecc <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fabf 	bl	8000ecc <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e255      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195c:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	495f      	ldr	r1, [pc, #380]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
 800197c:	e018      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5c      	ldr	r2, [pc, #368]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fa9f 	bl	8000ecc <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fa9b 	bl	8000ecc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e231      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff fa7a 	bl	8000ecc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fa76 	bl	8000ecc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e20c      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ef      	beq.n	80019dc <HAL_RCC_OscConfig+0x3ec>
 80019fc:	e01b      	b.n	8001a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	4a3b      	ldr	r2, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa5d 	bl	8000ecc <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff fa59 	bl	8000ecc <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1ef      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ef      	bne.n	8001a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80a6 	beq.w	8001b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10d      	bne.n	8001a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x508>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d118      	bne.n	8001aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x508>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a88:	f7ff fa20 	bl	8000ecc <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7ff fa1c 	bl	8000ecc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1b2      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_RCC_OscConfig+0x508>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4d8>
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac6:	e029      	b.n	8001b1c <HAL_RCC_OscConfig+0x52c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d115      	bne.n	8001afc <HAL_RCC_OscConfig+0x50c>
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x52c>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
 8001afc:	4b9a      	ldr	r3, [pc, #616]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a99      	ldr	r2, [pc, #612]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0c:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a95      	ldr	r2, [pc, #596]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d016      	beq.n	8001b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f9d2 	bl	8000ecc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f9ce 	bl	8000ecc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e162      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ed      	beq.n	8001b2c <HAL_RCC_OscConfig+0x53c>
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f9bb 	bl	8000ecc <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f9b7 	bl	8000ecc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e14b      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ed      	bne.n	8001b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b84:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba4:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001baa:	4a6f      	ldr	r2, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f98a 	bl	8000ecc <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bbc:	f7ff f986 	bl	8000ecc <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e11c      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ef      	beq.n	8001bbc <HAL_RCC_OscConfig+0x5cc>
 8001bdc:	e01b      	b.n	8001c16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bde:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be4:	4a60      	ldr	r2, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff f96d 	bl	8000ecc <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf6:	f7ff f969 	bl	8000ecc <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0ff      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80f3 	beq.w	8001e06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f040 80c9 	bne.w	8001dbc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c2a:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d12c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d123      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d11b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d113      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	3b01      	subs	r3, #1
 8001c92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d06b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d062      	beq.n	8001d64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c9e:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0ac      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2d      	ldr	r2, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cba:	f7ff f907 	bl	8000ecc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f903 	bl	8000ecc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e099      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x77c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cfa:	0212      	lsls	r2, r2, #8
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d02:	0852      	lsrs	r2, r2, #1
 8001d04:	3a01      	subs	r2, #1
 8001d06:	0552      	lsls	r2, r2, #21
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d0e:	0852      	lsrs	r2, r2, #1
 8001d10:	3a01      	subs	r2, #1
 8001d12:	0652      	lsls	r2, r2, #25
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d1a:	06d2      	lsls	r2, r2, #27
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4912      	ldr	r1, [pc, #72]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7ff f8c6 	bl	8000ecc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f8c2 	bl	8000ecc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e058      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_RCC_OscConfig+0x778>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	e050      	b.n	8001e06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e04f      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d144      	bne.n	8001e06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d94:	f7ff f89a 	bl	8000ecc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f896 	bl	8000ecc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e02c      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x7ac>
 8001dba:	e024      	b.n	8001e06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d01f      	beq.n	8001e02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff f87d 	bl	8000ecc <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff f879 	bl	8000ecc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e00f      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4905      	ldr	r1, [pc, #20]	; (8001e10 <HAL_RCC_OscConfig+0x820>)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x824>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e001      	b.n	8001e06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	feeefffc 	.word	0xfeeefffc

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0e7      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4970      	ldr	r1, [pc, #448]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cf      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4960      	ldr	r1, [pc, #384]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d04c      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d121      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0a6      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e09a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e086      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4943      	ldr	r1, [pc, #268]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f00:	f7fe ffe4 	bl	8000ecc <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe ffe0 	bl	8000ecc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e06e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d208      	bcs.n	8001f5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	492b      	ldr	r1, [pc, #172]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d210      	bcs.n	8001f8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	4923      	ldr	r1, [pc, #140]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e036      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4918      	ldr	r1, [pc, #96]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4910      	ldr	r1, [pc, #64]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fcc:	f000 f824 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	490b      	ldr	r1, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1f4>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1fc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ff1b 	bl	8000e2c <HAL_InitTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	08004d58 	.word	0x08004d58
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x34>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d121      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d11e      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e005      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002074:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e004      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_RCC_GetSysClockFreq+0x114>)
 800209e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d134      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0xa6>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d003      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xac>
 80020bc:	e005      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_GetSysClockFreq+0x114>)
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	0e5b      	lsrs	r3, r3, #25
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	3301      	adds	r3, #1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002110:	69bb      	ldr	r3, [r7, #24]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	08004d70 	.word	0x08004d70
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08004d68 	.word	0x08004d68

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002178:	f7ff ffda 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCC_GetPCLK2Freq+0x28>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08004d68 	.word	0x08004d68

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9b6 	bl	8001528 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
 80021be:	e014      	b.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d8:	f7ff f9a6 	bl	8001528 <HAL_PWREx_GetVoltageRange>
 80021dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f0:	d10b      	bne.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d919      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2ba0      	cmp	r3, #160	; 0xa0
 80021fc:	d902      	bls.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fe:	2302      	movs	r3, #2
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e013      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e010      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d902      	bls.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002210:	2303      	movs	r3, #3
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e00a      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d102      	bne.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800221c:	2302      	movs	r3, #2
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e004      	b.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b70      	cmp	r3, #112	; 0x70
 8002226:	d101      	bne.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0207 	bic.w	r2, r3, #7
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	40022000 	.word	0x40022000

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002268:	2300      	movs	r3, #0
 800226a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800226c:	2300      	movs	r3, #0
 800226e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	2b00      	cmp	r3, #0
 800227a:	d031      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002284:	d01a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002286:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800228a:	d814      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002294:	d10f      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a5c      	ldr	r2, [pc, #368]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f9de 	bl	800266c <RCCEx_PLLSAI1_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	494e      	ldr	r1, [pc, #312]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 809e 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f2:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a39      	ldr	r2, [pc, #228]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002330:	f7fe fdcc 	bl	8000ecc <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002336:	e009      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fdc8 	bl	8000ecc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	74fb      	strb	r3, [r7, #19]
        break;
 800234a:	e005      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d15a      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01e      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	429a      	cmp	r2, r3
 8002378:	d019      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a6:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d016      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fd88 	bl	8000ecc <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023be:	e00b      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fd84 	bl	8000ecc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d902      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	74fb      	strb	r3, [r7, #19]
            break;
 80023d6:	e006      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ec      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	4904      	ldr	r1, [pc, #16]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002402:	e009      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
 8002408:	e006      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002418:	7c7b      	ldrb	r3, [r7, #17]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a89      	ldr	r2, [pc, #548]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002436:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f023 0203 	bic.w	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4980      	ldr	r1, [pc, #512]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002458:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 020c 	bic.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	4978      	ldr	r1, [pc, #480]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	496f      	ldr	r1, [pc, #444]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	4967      	ldr	r1, [pc, #412]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024be:	4b62      	ldr	r3, [pc, #392]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	495e      	ldr	r1, [pc, #376]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	4956      	ldr	r1, [pc, #344]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d028      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002524:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4945      	ldr	r1, [pc, #276]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002542:	d106      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254e:	60d3      	str	r3, [r2, #12]
 8002550:	e011      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800255a:	d10c      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f882 	bl	800266c <RCCEx_PLLSAI1_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ac:	60d3      	str	r3, [r2, #12]
 80025ae:	e011      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f853 	bl	800266c <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025fe:	d10c      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f830 	bl	800266c <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800263c:	7cbb      	ldrb	r3, [r7, #18]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800267a:	4b74      	ldr	r3, [pc, #464]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d018      	beq.n	80026b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002686:	4b71      	ldr	r3, [pc, #452]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d10d      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
       ||
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800269e:	4b6b      	ldr	r3, [pc, #428]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
       ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d047      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e044      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d018      	beq.n	80026f2 <RCCEx_PLLSAI1_Config+0x86>
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d825      	bhi.n	8002710 <RCCEx_PLLSAI1_Config+0xa4>
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d002      	beq.n	80026ce <RCCEx_PLLSAI1_Config+0x62>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d009      	beq.n	80026e0 <RCCEx_PLLSAI1_Config+0x74>
 80026cc:	e020      	b.n	8002710 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ce:	4b5f      	ldr	r3, [pc, #380]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11d      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026de:	e01a      	b.n	8002716 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e013      	b.n	800271a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026f2:	4b56      	ldr	r3, [pc, #344]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270e:	e006      	b.n	800271e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      break;
 8002714:	e004      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800271e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	430b      	orrs	r3, r1
 800273c:	4943      	ldr	r1, [pc, #268]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d17c      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3f      	ldr	r2, [pc, #252]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002754:	f7fe fbba 	bl	8000ecc <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800275a:	e009      	b.n	8002770 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800275c:	f7fe fbb6 	bl	8000ecc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	73fb      	strb	r3, [r7, #15]
        break;
 800276e:	e005      	b.n	800277c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002770:	4b36      	ldr	r3, [pc, #216]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ef      	bne.n	800275c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15f      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d110      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	0211      	lsls	r1, r2, #8
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	06d2      	lsls	r2, r2, #27
 80027a0:	430a      	orrs	r2, r1
 80027a2:	492a      	ldr	r1, [pc, #168]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	610b      	str	r3, [r1, #16]
 80027a8:	e027      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d112      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	0211      	lsls	r1, r2, #8
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6912      	ldr	r2, [r2, #16]
 80027c6:	0852      	lsrs	r2, r2, #1
 80027c8:	3a01      	subs	r2, #1
 80027ca:	0552      	lsls	r2, r2, #21
 80027cc:	430a      	orrs	r2, r1
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
 80027d4:	e011      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	0211      	lsls	r1, r2, #8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6952      	ldr	r2, [r2, #20]
 80027ec:	0852      	lsrs	r2, r2, #1
 80027ee:	3a01      	subs	r2, #1
 80027f0:	0652      	lsls	r2, r2, #25
 80027f2:	430a      	orrs	r2, r1
 80027f4:	4915      	ldr	r1, [pc, #84]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a13      	ldr	r2, [pc, #76]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002804:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fb61 	bl	8000ecc <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280c:	e009      	b.n	8002822 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280e:	f7fe fb5d 	bl	8000ecc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d902      	bls.n	8002822 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	73fb      	strb	r3, [r7, #15]
          break;
 8002820:	e005      	b.n	800282e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ef      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <RCCEx_PLLSAI1_Config+0x1e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e040      	b.n	80028e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f918 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 feb2 	bl	8003600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fc83 	bl	80031a8 <UART_SetConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01b      	b.n	80028e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 ff31 	bl	8003744 <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002900:	2b20      	cmp	r3, #32
 8002902:	d178      	bne.n	80029f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Transmit+0x24>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e071      	b.n	80029f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2221      	movs	r2, #33	; 0x21
 8002920:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002922:	f7fe fad3 	bl	8000ecc <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d108      	bne.n	8002954 <HAL_UART_Transmit+0x68>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e003      	b.n	800295c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800295c:	e030      	b.n	80029c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2200      	movs	r2, #0
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 ff93 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e03c      	b.n	80029f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002990:	b292      	uxth	r2, r2
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3302      	adds	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e008      	b.n	80029ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b292      	uxth	r2, r2
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1c8      	bne.n	800295e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2200      	movs	r2, #0
 80029d4:	2140      	movs	r1, #64	; 0x40
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 ff5c 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e005      	b.n	80029f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
  }
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	f040 80b6 	bne.w	8002b88 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Receive+0x28>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0ae      	b.n	8002b8a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2222      	movs	r2, #34	; 0x22
 8002a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a42:	f7fe fa43 	bl	8000ecc <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d10e      	bne.n	8002a80 <HAL_UART_Receive+0x80>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_UART_Receive+0x76>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a74:	e02d      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	22ff      	movs	r2, #255	; 0xff
 8002a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a7e:	e028      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_UART_Receive+0xa4>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_UART_Receive+0x9a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a98:	e01b      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	227f      	movs	r2, #127	; 0x7f
 8002a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aa2:	e016      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aac:	d10d      	bne.n	8002aca <HAL_UART_Receive+0xca>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d104      	bne.n	8002ac0 <HAL_UART_Receive+0xc0>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	227f      	movs	r2, #127	; 0x7f
 8002aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002abe:	e008      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	223f      	movs	r2, #63	; 0x3f
 8002ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ac8:	e003      	b.n	8002ad2 <HAL_UART_Receive+0xd2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ad8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	d108      	bne.n	8002af6 <HAL_UART_Receive+0xf6>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e003      	b.n	8002afe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002afe:	e037      	b.n	8002b70 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	2120      	movs	r1, #32
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fec2 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e033      	b.n	8002b8a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	8a7b      	ldrh	r3, [r7, #18]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e00d      	b.n	8002b5e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8a7b      	ldrh	r3, [r7, #18]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4013      	ands	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1c1      	bne.n	8002b00 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b0ba      	sub	sp, #232	; 0xe8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002bbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d115      	bne.n	8002bfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00f      	beq.n	8002bfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 82ae 	beq.w	800314e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
      }
      return;
 8002bfa:	e2a8      	b.n	800314e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8117 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_UART_IRQHandler+0x298>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 810a 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_UART_IRQHandler+0xbc>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <HAL_UART_IRQHandler+0xec>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x11c>
 8002c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ccc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce2:	f043 0208 	orr.w	r2, r3, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_UART_IRQHandler+0x18a>
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8214 	beq.w	8003152 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d005      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d04f      	beq.n	8002e16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fdf3 	bl	8003962 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d141      	bne.n	8002e0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1d9      	bne.n	8002d8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_UART_IRQHandler+0x29c>)
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f9c9 	bl	8001182 <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d017      	beq.n	8002e26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00f      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9b8 	bl	800317c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e00b      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9b4 	bl	800317c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e007      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9b0 	bl	800317c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e24:	e195      	b.n	8003152 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e26:	bf00      	nop
    return;
 8002e28:	e193      	b.n	8003152 <HAL_UART_IRQHandler+0x5be>
 8002e2a:	bf00      	nop
 8002e2c:	04000120 	.word	0x04000120
 8002e30:	08003a2b 	.word	0x08003a2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 814e 	bne.w	80030da <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8147 	beq.w	80030da <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8140 	beq.w	80030da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2210      	movs	r2, #16
 8002e60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	f040 80b8 	bne.w	8002fe2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8167 	beq.w	8003156 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e92:	429a      	cmp	r2, r3
 8002e94:	f080 815f 	bcs.w	8003156 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 8086 	bne.w	8002fc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ee2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1da      	bne.n	8002eb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e1      	bne.n	8002efe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	f023 0310 	bic.w	r3, r3, #16
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e4      	bne.n	8002f80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe f8a3 	bl	8001106 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8d8 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fe0:	e0b9      	b.n	8003156 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80ab 	beq.w	800315a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a6 	beq.w	800315a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
 8003032:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800303e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e4      	bne.n	800300e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3308      	adds	r3, #8
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	623b      	str	r3, [r7, #32]
   return(result);
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003068:	633a      	str	r2, [r7, #48]	; 0x30
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800306e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e3      	bne.n	8003044 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	60fb      	str	r3, [r7, #12]
   return(result);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0310 	bic.w	r3, r3, #16
 80030a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	617b      	str	r3, [r7, #20]
   return(result);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e4      	bne.n	8003090 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f85c 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030d8:	e03f      	b.n	800315a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <HAL_UART_IRQHandler+0x570>
 80030e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fcd4 	bl	8003aaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003102:	e02d      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
    }
    return;
 800312c:	e017      	b.n	800315e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <HAL_UART_IRQHandler+0x5cc>
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fc85 	bl	8003a56 <UART_EndTransmit_IT>
    return;
 800314c:	e008      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
      return;
 800314e:	bf00      	nop
 8003150:	e006      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003152:	bf00      	nop
 8003154:	e004      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003156:	bf00      	nop
 8003158:	e002      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
      return;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <HAL_UART_IRQHandler+0x5cc>
    return;
 800315e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003160:	37e8      	adds	r7, #232	; 0xe8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop

08003168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b08a      	sub	sp, #40	; 0x28
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4bb4      	ldr	r3, [pc, #720]	; (80034a8 <UART_SetConfig+0x300>)
 80031d8:	4013      	ands	r3, r2
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4aa9      	ldr	r2, [pc, #676]	; (80034ac <UART_SetConfig+0x304>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	4313      	orrs	r3, r2
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4aa0      	ldr	r2, [pc, #640]	; (80034b0 <UART_SetConfig+0x308>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d126      	bne.n	8003280 <UART_SetConfig+0xd8>
 8003232:	4ba0      	ldr	r3, [pc, #640]	; (80034b4 <UART_SetConfig+0x30c>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d81b      	bhi.n	8003278 <UART_SetConfig+0xd0>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0xa0>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	08003269 	.word	0x08003269
 8003250:	08003261 	.word	0x08003261
 8003254:	08003271 	.word	0x08003271
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e080      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003260:	2302      	movs	r3, #2
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e07c      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003268:	2304      	movs	r3, #4
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e078      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003270:	2308      	movs	r3, #8
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e074      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003278:	2310      	movs	r3, #16
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e070      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a8c      	ldr	r2, [pc, #560]	; (80034b8 <UART_SetConfig+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d138      	bne.n	80032fc <UART_SetConfig+0x154>
 800328a:	4b8a      	ldr	r3, [pc, #552]	; (80034b4 <UART_SetConfig+0x30c>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d82d      	bhi.n	80032f4 <UART_SetConfig+0x14c>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0xf8>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032f5 	.word	0x080032f5
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	080032f5 	.word	0x080032f5
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032ed 	.word	0x080032ed
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e042      	b.n	8003362 <UART_SetConfig+0x1ba>
 80032dc:	2302      	movs	r3, #2
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e03e      	b.n	8003362 <UART_SetConfig+0x1ba>
 80032e4:	2304      	movs	r3, #4
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e03a      	b.n	8003362 <UART_SetConfig+0x1ba>
 80032ec:	2308      	movs	r3, #8
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e036      	b.n	8003362 <UART_SetConfig+0x1ba>
 80032f4:	2310      	movs	r3, #16
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e032      	b.n	8003362 <UART_SetConfig+0x1ba>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6a      	ldr	r2, [pc, #424]	; (80034ac <UART_SetConfig+0x304>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d12a      	bne.n	800335c <UART_SetConfig+0x1b4>
 8003306:	4b6b      	ldr	r3, [pc, #428]	; (80034b4 <UART_SetConfig+0x30c>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003314:	d01a      	beq.n	800334c <UART_SetConfig+0x1a4>
 8003316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800331a:	d81b      	bhi.n	8003354 <UART_SetConfig+0x1ac>
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d00c      	beq.n	800333c <UART_SetConfig+0x194>
 8003322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003326:	d815      	bhi.n	8003354 <UART_SetConfig+0x1ac>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <UART_SetConfig+0x18c>
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d008      	beq.n	8003344 <UART_SetConfig+0x19c>
 8003332:	e00f      	b.n	8003354 <UART_SetConfig+0x1ac>
 8003334:	2300      	movs	r3, #0
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	e012      	b.n	8003362 <UART_SetConfig+0x1ba>
 800333c:	2302      	movs	r3, #2
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003342:	e00e      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003344:	2304      	movs	r3, #4
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334a:	e00a      	b.n	8003362 <UART_SetConfig+0x1ba>
 800334c:	2308      	movs	r3, #8
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003352:	e006      	b.n	8003362 <UART_SetConfig+0x1ba>
 8003354:	2310      	movs	r3, #16
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x1ba>
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a51      	ldr	r2, [pc, #324]	; (80034ac <UART_SetConfig+0x304>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d17a      	bne.n	8003462 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800336c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003370:	2b08      	cmp	r3, #8
 8003372:	d824      	bhi.n	80033be <UART_SetConfig+0x216>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0x1d4>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033af 	.word	0x080033af
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033bf 	.word	0x080033bf
 800339c:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7fe fed2 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 80033a4:	61f8      	str	r0, [r7, #28]
        break;
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b44      	ldr	r3, [pc, #272]	; (80034bc <UART_SetConfig+0x314>)
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e00d      	b.n	80033ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fe33 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80033b2:	61f8      	str	r0, [r7, #28]
        break;
 80033b4:	e009      	b.n	80033ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e005      	b.n	80033ca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8107 	beq.w	80035e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d305      	bcc.n	80033ee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d903      	bls.n	80033f6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033f4:	e0f4      	b.n	80035e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2200      	movs	r2, #0
 80033fa:	461c      	mov	r4, r3
 80033fc:	4615      	mov	r5, r2
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	022b      	lsls	r3, r5, #8
 8003408:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800340c:	0222      	lsls	r2, r4, #8
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	6849      	ldr	r1, [r1, #4]
 8003412:	0849      	lsrs	r1, r1, #1
 8003414:	2000      	movs	r0, #0
 8003416:	4688      	mov	r8, r1
 8003418:	4681      	mov	r9, r0
 800341a:	eb12 0a08 	adds.w	sl, r2, r8
 800341e:	eb43 0b09 	adc.w	fp, r3, r9
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003430:	4650      	mov	r0, sl
 8003432:	4659      	mov	r1, fp
 8003434:	f7fc ff1c 	bl	8000270 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003446:	d308      	bcc.n	800345a <UART_SetConfig+0x2b2>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344e:	d204      	bcs.n	800345a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e0c2      	b.n	80035e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003460:	e0be      	b.n	80035e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d16a      	bne.n	8003542 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800346c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003470:	2b08      	cmp	r3, #8
 8003472:	d834      	bhi.n	80034de <UART_SetConfig+0x336>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0x2d4>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034c9 	.word	0x080034c9
 8003488:	080034df 	.word	0x080034df
 800348c:	080034cf 	.word	0x080034cf
 8003490:	080034df 	.word	0x080034df
 8003494:	080034df 	.word	0x080034df
 8003498:	080034df 	.word	0x080034df
 800349c:	080034d7 	.word	0x080034d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a0:	f7fe fe52 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 80034a4:	61f8      	str	r0, [r7, #28]
        break;
 80034a6:	e020      	b.n	80034ea <UART_SetConfig+0x342>
 80034a8:	efff69f3 	.word	0xefff69f3
 80034ac:	40008000 	.word	0x40008000
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40004400 	.word	0x40004400
 80034bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c0:	f7fe fe58 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80034c4:	61f8      	str	r0, [r7, #28]
        break;
 80034c6:	e010      	b.n	80034ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <UART_SetConfig+0x454>)
 80034ca:	61fb      	str	r3, [r7, #28]
        break;
 80034cc:	e00d      	b.n	80034ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ce:	f7fe fda3 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80034d2:	61f8      	str	r0, [r7, #28]
        break;
 80034d4:	e009      	b.n	80034ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034da:	61fb      	str	r3, [r7, #28]
        break;
 80034dc:	e005      	b.n	80034ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d077      	beq.n	80035e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005a      	lsls	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b0f      	cmp	r3, #15
 800350a:	d916      	bls.n	800353a <UART_SetConfig+0x392>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d212      	bcs.n	800353a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f023 030f 	bic.w	r3, r3, #15
 800351c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	b29a      	uxth	r2, r3
 800352a:	8afb      	ldrh	r3, [r7, #22]
 800352c:	4313      	orrs	r3, r2
 800352e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	8afa      	ldrh	r2, [r7, #22]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e052      	b.n	80035e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003540:	e04e      	b.n	80035e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003546:	2b08      	cmp	r3, #8
 8003548:	d827      	bhi.n	800359a <UART_SetConfig+0x3f2>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0x3a8>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003575 	.word	0x08003575
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003585 	.word	0x08003585
 800355c:	0800359b 	.word	0x0800359b
 8003560:	0800358b 	.word	0x0800358b
 8003564:	0800359b 	.word	0x0800359b
 8003568:	0800359b 	.word	0x0800359b
 800356c:	0800359b 	.word	0x0800359b
 8003570:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7fe fde8 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8003578:	61f8      	str	r0, [r7, #28]
        break;
 800357a:	e014      	b.n	80035a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7fe fdfa 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003580:	61f8      	str	r0, [r7, #28]
        break;
 8003582:	e010      	b.n	80035a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <UART_SetConfig+0x454>)
 8003586:	61fb      	str	r3, [r7, #28]
        break;
 8003588:	e00d      	b.n	80035a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7fe fd45 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800358e:	61f8      	str	r0, [r7, #28]
        break;
 8003590:	e009      	b.n	80035a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	61fb      	str	r3, [r7, #28]
        break;
 8003598:	e005      	b.n	80035a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035a4:	bf00      	nop
    }

    if (pclk != 0U)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085a      	lsrs	r2, r3, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	441a      	add	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	d909      	bls.n	80035da <UART_SetConfig+0x432>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d205      	bcs.n	80035da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	e002      	b.n	80035e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	00f42400 	.word	0x00f42400

08003600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01a      	beq.n	8003716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fe:	d10a      	bne.n	8003716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b098      	sub	sp, #96	; 0x60
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003754:	f7fd fbba 	bl	8000ecc <HAL_GetTick>
 8003758:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d12e      	bne.n	80037c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f88c 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d021      	beq.n	80037c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003796:	653b      	str	r3, [r7, #80]	; 0x50
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
 80037a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e6      	bne.n	8003782 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e062      	b.n	800388c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d149      	bne.n	8003868 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037dc:	2200      	movs	r2, #0
 80037de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f856 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d03c      	beq.n	8003868 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	623b      	str	r3, [r7, #32]
   return(result);
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
 800380e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e6      	bne.n	80037ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	617b      	str	r3, [r7, #20]
   return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e011      	b.n	800388c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3758      	adds	r7, #88	; 0x58
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a4:	e049      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d045      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fd fb0d 	bl	8000ecc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e048      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f838 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f81e 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a6      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003962:	b480      	push	{r7}
 8003964:	b095      	sub	sp, #84	; 0x54
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	643b      	str	r3, [r7, #64]	; 0x40
 800398a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800398e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d118      	bne.n	8003a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	647b      	str	r3, [r7, #68]	; 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a1e:	bf00      	nop
 8003a20:	3754      	adds	r7, #84	; 0x54
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff fb97 	bl	800317c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fb63 	bl	8003168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <std>:
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8003aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ace:	6083      	str	r3, [r0, #8]
 8003ad0:	8181      	strh	r1, [r0, #12]
 8003ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ad4:	81c2      	strh	r2, [r0, #14]
 8003ad6:	6183      	str	r3, [r0, #24]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	2208      	movs	r2, #8
 8003adc:	305c      	adds	r0, #92	; 0x5c
 8003ade:	f000 f9c4 	bl	8003e6a <memset>
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <std+0x58>)
 8003ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <std+0x5c>)
 8003ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <std+0x60>)
 8003aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <std+0x64>)
 8003af0:	6323      	str	r3, [r4, #48]	; 0x30
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <std+0x68>)
 8003af4:	6224      	str	r4, [r4, #32]
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d006      	beq.n	8003b08 <std+0x48>
 8003afa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003afe:	4294      	cmp	r4, r2
 8003b00:	d002      	beq.n	8003b08 <std+0x48>
 8003b02:	33d0      	adds	r3, #208	; 0xd0
 8003b04:	429c      	cmp	r4, r3
 8003b06:	d105      	bne.n	8003b14 <std+0x54>
 8003b08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b10:	f000 ba3a 	b.w	8003f88 <__retarget_lock_init_recursive>
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	bf00      	nop
 8003b18:	08003de5 	.word	0x08003de5
 8003b1c:	08003e07 	.word	0x08003e07
 8003b20:	08003e3f 	.word	0x08003e3f
 8003b24:	08003e63 	.word	0x08003e63
 8003b28:	20000504 	.word	0x20000504

08003b2c <stdio_exit_handler>:
 8003b2c:	4a02      	ldr	r2, [pc, #8]	; (8003b38 <stdio_exit_handler+0xc>)
 8003b2e:	4903      	ldr	r1, [pc, #12]	; (8003b3c <stdio_exit_handler+0x10>)
 8003b30:	4803      	ldr	r0, [pc, #12]	; (8003b40 <stdio_exit_handler+0x14>)
 8003b32:	f000 b869 	b.w	8003c08 <_fwalk_sglue>
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	08004845 	.word	0x08004845
 8003b40:	20000018 	.word	0x20000018

08003b44 <cleanup_stdio>:
 8003b44:	6841      	ldr	r1, [r0, #4]
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <cleanup_stdio+0x34>)
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	d001      	beq.n	8003b54 <cleanup_stdio+0x10>
 8003b50:	f000 fe78 	bl	8004844 <_fflush_r>
 8003b54:	68a1      	ldr	r1, [r4, #8]
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <cleanup_stdio+0x38>)
 8003b58:	4299      	cmp	r1, r3
 8003b5a:	d002      	beq.n	8003b62 <cleanup_stdio+0x1e>
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 fe71 	bl	8004844 <_fflush_r>
 8003b62:	68e1      	ldr	r1, [r4, #12]
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <cleanup_stdio+0x3c>)
 8003b66:	4299      	cmp	r1, r3
 8003b68:	d004      	beq.n	8003b74 <cleanup_stdio+0x30>
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b70:	f000 be68 	b.w	8004844 <_fflush_r>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	bf00      	nop
 8003b78:	20000504 	.word	0x20000504
 8003b7c:	2000056c 	.word	0x2000056c
 8003b80:	200005d4 	.word	0x200005d4

08003b84 <global_stdio_init.part.0>:
 8003b84:	b510      	push	{r4, lr}
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <global_stdio_init.part.0+0x30>)
 8003b88:	4c0b      	ldr	r4, [pc, #44]	; (8003bb8 <global_stdio_init.part.0+0x34>)
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <global_stdio_init.part.0+0x38>)
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	4620      	mov	r0, r4
 8003b90:	2200      	movs	r2, #0
 8003b92:	2104      	movs	r1, #4
 8003b94:	f7ff ff94 	bl	8003ac0 <std>
 8003b98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	2109      	movs	r1, #9
 8003ba0:	f7ff ff8e 	bl	8003ac0 <std>
 8003ba4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ba8:	2202      	movs	r2, #2
 8003baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bae:	2112      	movs	r1, #18
 8003bb0:	f7ff bf86 	b.w	8003ac0 <std>
 8003bb4:	2000063c 	.word	0x2000063c
 8003bb8:	20000504 	.word	0x20000504
 8003bbc:	08003b2d 	.word	0x08003b2d

08003bc0 <__sfp_lock_acquire>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__sfp_lock_acquire+0x8>)
 8003bc2:	f000 b9e2 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000645 	.word	0x20000645

08003bcc <__sfp_lock_release>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__sfp_lock_release+0x8>)
 8003bce:	f000 b9dd 	b.w	8003f8c <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20000645 	.word	0x20000645

08003bd8 <__sinit>:
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	4604      	mov	r4, r0
 8003bdc:	f7ff fff0 	bl	8003bc0 <__sfp_lock_acquire>
 8003be0:	6a23      	ldr	r3, [r4, #32]
 8003be2:	b11b      	cbz	r3, 8003bec <__sinit+0x14>
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be8:	f7ff bff0 	b.w	8003bcc <__sfp_lock_release>
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <__sinit+0x28>)
 8003bee:	6223      	str	r3, [r4, #32]
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <__sinit+0x2c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f5      	bne.n	8003be4 <__sinit+0xc>
 8003bf8:	f7ff ffc4 	bl	8003b84 <global_stdio_init.part.0>
 8003bfc:	e7f2      	b.n	8003be4 <__sinit+0xc>
 8003bfe:	bf00      	nop
 8003c00:	08003b45 	.word	0x08003b45
 8003c04:	2000063c 	.word	0x2000063c

08003c08 <_fwalk_sglue>:
 8003c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	4688      	mov	r8, r1
 8003c10:	4614      	mov	r4, r2
 8003c12:	2600      	movs	r6, #0
 8003c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c18:	f1b9 0901 	subs.w	r9, r9, #1
 8003c1c:	d505      	bpl.n	8003c2a <_fwalk_sglue+0x22>
 8003c1e:	6824      	ldr	r4, [r4, #0]
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	d1f7      	bne.n	8003c14 <_fwalk_sglue+0xc>
 8003c24:	4630      	mov	r0, r6
 8003c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c2a:	89ab      	ldrh	r3, [r5, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d907      	bls.n	8003c40 <_fwalk_sglue+0x38>
 8003c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c34:	3301      	adds	r3, #1
 8003c36:	d003      	beq.n	8003c40 <_fwalk_sglue+0x38>
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	47c0      	blx	r8
 8003c3e:	4306      	orrs	r6, r0
 8003c40:	3568      	adds	r5, #104	; 0x68
 8003c42:	e7e9      	b.n	8003c18 <_fwalk_sglue+0x10>

08003c44 <getchar>:
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <getchar+0xc>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	6841      	ldr	r1, [r0, #4]
 8003c4a:	f000 be23 	b.w	8004894 <_getc_r>
 8003c4e:	bf00      	nop
 8003c50:	20000064 	.word	0x20000064

08003c54 <iprintf>:
 8003c54:	b40f      	push	{r0, r1, r2, r3}
 8003c56:	b507      	push	{r0, r1, r2, lr}
 8003c58:	4906      	ldr	r1, [pc, #24]	; (8003c74 <iprintf+0x20>)
 8003c5a:	ab04      	add	r3, sp, #16
 8003c5c:	6808      	ldr	r0, [r1, #0]
 8003c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c62:	6881      	ldr	r1, [r0, #8]
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	f000 fabd 	bl	80041e4 <_vfiprintf_r>
 8003c6a:	b003      	add	sp, #12
 8003c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c70:	b004      	add	sp, #16
 8003c72:	4770      	bx	lr
 8003c74:	20000064 	.word	0x20000064

08003c78 <putchar>:
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <putchar+0xc>)
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	6882      	ldr	r2, [r0, #8]
 8003c80:	f000 be95 	b.w	80049ae <_putc_r>
 8003c84:	20000064 	.word	0x20000064

08003c88 <setvbuf>:
 8003c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <setvbuf+0x158>)
 8003c90:	681f      	ldr	r7, [r3, #0]
 8003c92:	4604      	mov	r4, r0
 8003c94:	460e      	mov	r6, r1
 8003c96:	4690      	mov	r8, r2
 8003c98:	b127      	cbz	r7, 8003ca4 <setvbuf+0x1c>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	b913      	cbnz	r3, 8003ca4 <setvbuf+0x1c>
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff ff9a 	bl	8003bd8 <__sinit>
 8003ca4:	f1b8 0f02 	cmp.w	r8, #2
 8003ca8:	d006      	beq.n	8003cb8 <setvbuf+0x30>
 8003caa:	f1b8 0f01 	cmp.w	r8, #1
 8003cae:	f200 8094 	bhi.w	8003dda <setvbuf+0x152>
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	f2c0 8091 	blt.w	8003dda <setvbuf+0x152>
 8003cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cba:	07da      	lsls	r2, r3, #31
 8003cbc:	d405      	bmi.n	8003cca <setvbuf+0x42>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	059b      	lsls	r3, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <setvbuf+0x42>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc6:	f000 f960 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f000 fdb9 	bl	8004844 <_fflush_r>
 8003cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cd4:	b141      	cbz	r1, 8003ce8 <setvbuf+0x60>
 8003cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cda:	4299      	cmp	r1, r3
 8003cdc:	d002      	beq.n	8003ce4 <setvbuf+0x5c>
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f000 f956 	bl	8003f90 <_free_r>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61a3      	str	r3, [r4, #24]
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	0618      	lsls	r0, r3, #24
 8003cf2:	d503      	bpl.n	8003cfc <setvbuf+0x74>
 8003cf4:	6921      	ldr	r1, [r4, #16]
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f000 f94a 	bl	8003f90 <_free_r>
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	f1b8 0f02 	cmp.w	r8, #2
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	d05f      	beq.n	8003dce <setvbuf+0x146>
 8003d0e:	ab01      	add	r3, sp, #4
 8003d10:	466a      	mov	r2, sp
 8003d12:	4621      	mov	r1, r4
 8003d14:	4638      	mov	r0, r7
 8003d16:	f000 fde8 	bl	80048ea <__swhatbuf_r>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	4318      	orrs	r0, r3
 8003d1e:	81a0      	strh	r0, [r4, #12]
 8003d20:	bb2d      	cbnz	r5, 8003d6e <setvbuf+0xe6>
 8003d22:	9d00      	ldr	r5, [sp, #0]
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f97f 	bl	8004028 <malloc>
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d150      	bne.n	8003dd2 <setvbuf+0x14a>
 8003d30:	f8dd 9000 	ldr.w	r9, [sp]
 8003d34:	45a9      	cmp	r9, r5
 8003d36:	d13e      	bne.n	8003db6 <setvbuf+0x12e>
 8003d38:	f04f 35ff 	mov.w	r5, #4294967295
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	60a2      	str	r2, [r4, #8]
 8003d40:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	6122      	str	r2, [r4, #16]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d4e:	6162      	str	r2, [r4, #20]
 8003d50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d52:	f043 0302 	orr.w	r3, r3, #2
 8003d56:	07d1      	lsls	r1, r2, #31
 8003d58:	81a3      	strh	r3, [r4, #12]
 8003d5a:	d404      	bmi.n	8003d66 <setvbuf+0xde>
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d402      	bmi.n	8003d66 <setvbuf+0xde>
 8003d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d62:	f000 f913 	bl	8003f8c <__retarget_lock_release_recursive>
 8003d66:	4628      	mov	r0, r5
 8003d68:	b003      	add	sp, #12
 8003d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	d0d8      	beq.n	8003d24 <setvbuf+0x9c>
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	b913      	cbnz	r3, 8003d7c <setvbuf+0xf4>
 8003d76:	4638      	mov	r0, r7
 8003d78:	f7ff ff2e 	bl	8003bd8 <__sinit>
 8003d7c:	f1b8 0f01 	cmp.w	r8, #1
 8003d80:	bf08      	it	eq
 8003d82:	89a3      	ldrheq	r3, [r4, #12]
 8003d84:	6026      	str	r6, [r4, #0]
 8003d86:	bf04      	itt	eq
 8003d88:	f043 0301 	orreq.w	r3, r3, #1
 8003d8c:	81a3      	strheq	r3, [r4, #12]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f013 0208 	ands.w	r2, r3, #8
 8003d94:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003d98:	d01d      	beq.n	8003dd6 <setvbuf+0x14e>
 8003d9a:	07da      	lsls	r2, r3, #31
 8003d9c:	bf41      	itttt	mi
 8003d9e:	2200      	movmi	r2, #0
 8003da0:	426d      	negmi	r5, r5
 8003da2:	60a2      	strmi	r2, [r4, #8]
 8003da4:	61a5      	strmi	r5, [r4, #24]
 8003da6:	bf58      	it	pl
 8003da8:	60a5      	strpl	r5, [r4, #8]
 8003daa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003dac:	f015 0501 	ands.w	r5, r5, #1
 8003db0:	d0d4      	beq.n	8003d5c <setvbuf+0xd4>
 8003db2:	2500      	movs	r5, #0
 8003db4:	e7d7      	b.n	8003d66 <setvbuf+0xde>
 8003db6:	4648      	mov	r0, r9
 8003db8:	f000 f936 	bl	8004028 <malloc>
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d0ba      	beq.n	8003d38 <setvbuf+0xb0>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	81a3      	strh	r3, [r4, #12]
 8003dca:	464d      	mov	r5, r9
 8003dcc:	e7d1      	b.n	8003d72 <setvbuf+0xea>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e7b4      	b.n	8003d3c <setvbuf+0xb4>
 8003dd2:	46a9      	mov	r9, r5
 8003dd4:	e7f5      	b.n	8003dc2 <setvbuf+0x13a>
 8003dd6:	60a2      	str	r2, [r4, #8]
 8003dd8:	e7e7      	b.n	8003daa <setvbuf+0x122>
 8003dda:	f04f 35ff 	mov.w	r5, #4294967295
 8003dde:	e7c2      	b.n	8003d66 <setvbuf+0xde>
 8003de0:	20000064 	.word	0x20000064

08003de4 <__sread>:
 8003de4:	b510      	push	{r4, lr}
 8003de6:	460c      	mov	r4, r1
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	f000 f87e 	bl	8003eec <_read_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	bfab      	itete	ge
 8003df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003df6:	89a3      	ldrhlt	r3, [r4, #12]
 8003df8:	181b      	addge	r3, r3, r0
 8003dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dfe:	bfac      	ite	ge
 8003e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e02:	81a3      	strhlt	r3, [r4, #12]
 8003e04:	bd10      	pop	{r4, pc}

08003e06 <__swrite>:
 8003e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0a:	461f      	mov	r7, r3
 8003e0c:	898b      	ldrh	r3, [r1, #12]
 8003e0e:	05db      	lsls	r3, r3, #23
 8003e10:	4605      	mov	r5, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	4616      	mov	r6, r2
 8003e16:	d505      	bpl.n	8003e24 <__swrite+0x1e>
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f000 f852 	bl	8003ec8 <_lseek_r>
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2e:	81a3      	strh	r3, [r4, #12]
 8003e30:	4632      	mov	r2, r6
 8003e32:	463b      	mov	r3, r7
 8003e34:	4628      	mov	r0, r5
 8003e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	f000 b869 	b.w	8003f10 <_write_r>

08003e3e <__sseek>:
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	460c      	mov	r4, r1
 8003e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e46:	f000 f83f 	bl	8003ec8 <_lseek_r>
 8003e4a:	1c43      	adds	r3, r0, #1
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	bf15      	itete	ne
 8003e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e5a:	81a3      	strheq	r3, [r4, #12]
 8003e5c:	bf18      	it	ne
 8003e5e:	81a3      	strhne	r3, [r4, #12]
 8003e60:	bd10      	pop	{r4, pc}

08003e62 <__sclose>:
 8003e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e66:	f000 b81f 	b.w	8003ea8 <_close_r>

08003e6a <memset>:
 8003e6a:	4402      	add	r2, r0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d100      	bne.n	8003e74 <memset+0xa>
 8003e72:	4770      	bx	lr
 8003e74:	f803 1b01 	strb.w	r1, [r3], #1
 8003e78:	e7f9      	b.n	8003e6e <memset+0x4>

08003e7a <strstr>:
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	b96a      	cbnz	r2, 8003e9c <strstr+0x22>
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d109      	bne.n	8003e9a <strstr+0x20>
 8003e86:	460c      	mov	r4, r1
 8003e88:	4605      	mov	r5, r0
 8003e8a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f6      	beq.n	8003e80 <strstr+0x6>
 8003e92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003e96:	429e      	cmp	r6, r3
 8003e98:	d0f7      	beq.n	8003e8a <strstr+0x10>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	7803      	ldrb	r3, [r0, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <strstr+0x8>
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	e7ec      	b.n	8003e80 <strstr+0x6>
	...

08003ea8 <_close_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d06      	ldr	r5, [pc, #24]	; (8003ec4 <_close_r+0x1c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fc fcd8 	bl	8000868 <_close>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_close_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_close_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000640 	.word	0x20000640

08003ec8 <_lseek_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d07      	ldr	r5, [pc, #28]	; (8003ee8 <_lseek_r+0x20>)
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4608      	mov	r0, r1
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fcdd 	bl	8000896 <_lseek>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_lseek_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_lseek_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000640 	.word	0x20000640

08003eec <_read_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4d07      	ldr	r5, [pc, #28]	; (8003f0c <_read_r+0x20>)
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	4608      	mov	r0, r1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7fc fcdc 	bl	80008b8 <_read>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_read_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_read_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000640 	.word	0x20000640

08003f10 <_write_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4d07      	ldr	r5, [pc, #28]	; (8003f30 <_write_r+0x20>)
 8003f14:	4604      	mov	r4, r0
 8003f16:	4608      	mov	r0, r1
 8003f18:	4611      	mov	r1, r2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	602a      	str	r2, [r5, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fc fc76 	bl	8000810 <_write>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_write_r+0x1e>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_write_r+0x1e>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000640 	.word	0x20000640

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000064 	.word	0x20000064

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4d0d      	ldr	r5, [pc, #52]	; (8003f78 <__libc_init_array+0x38>)
 8003f44:	4c0d      	ldr	r4, [pc, #52]	; (8003f7c <__libc_init_array+0x3c>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	4d0b      	ldr	r5, [pc, #44]	; (8003f80 <__libc_init_array+0x40>)
 8003f52:	4c0c      	ldr	r4, [pc, #48]	; (8003f84 <__libc_init_array+0x44>)
 8003f54:	f000 fec4 	bl	8004ce0 <_init>
 8003f58:	1b64      	subs	r4, r4, r5
 8003f5a:	10a4      	asrs	r4, r4, #2
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	08004ddc 	.word	0x08004ddc
 8003f7c:	08004ddc 	.word	0x08004ddc
 8003f80:	08004ddc 	.word	0x08004ddc
 8003f84:	08004de0 	.word	0x08004de0

08003f88 <__retarget_lock_init_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_acquire_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <__retarget_lock_release_recursive>:
 8003f8c:	4770      	bx	lr
	...

08003f90 <_free_r>:
 8003f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d044      	beq.n	8004020 <_free_r+0x90>
 8003f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f9a:	9001      	str	r0, [sp, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003fa2:	bfb8      	it	lt
 8003fa4:	18e4      	addlt	r4, r4, r3
 8003fa6:	f000 f8e7 	bl	8004178 <__malloc_lock>
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <_free_r+0x94>)
 8003fac:	9801      	ldr	r0, [sp, #4]
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	b933      	cbnz	r3, 8003fc0 <_free_r+0x30>
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	6014      	str	r4, [r2, #0]
 8003fb6:	b003      	add	sp, #12
 8003fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fbc:	f000 b8e2 	b.w	8004184 <__malloc_unlock>
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	d908      	bls.n	8003fd6 <_free_r+0x46>
 8003fc4:	6825      	ldr	r5, [r4, #0]
 8003fc6:	1961      	adds	r1, r4, r5
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	bf01      	itttt	eq
 8003fcc:	6819      	ldreq	r1, [r3, #0]
 8003fce:	685b      	ldreq	r3, [r3, #4]
 8003fd0:	1949      	addeq	r1, r1, r5
 8003fd2:	6021      	streq	r1, [r4, #0]
 8003fd4:	e7ed      	b.n	8003fb2 <_free_r+0x22>
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b10b      	cbz	r3, 8003fe0 <_free_r+0x50>
 8003fdc:	42a3      	cmp	r3, r4
 8003fde:	d9fa      	bls.n	8003fd6 <_free_r+0x46>
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	1855      	adds	r5, r2, r1
 8003fe4:	42a5      	cmp	r5, r4
 8003fe6:	d10b      	bne.n	8004000 <_free_r+0x70>
 8003fe8:	6824      	ldr	r4, [r4, #0]
 8003fea:	4421      	add	r1, r4
 8003fec:	1854      	adds	r4, r2, r1
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	6011      	str	r1, [r2, #0]
 8003ff2:	d1e0      	bne.n	8003fb6 <_free_r+0x26>
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	6053      	str	r3, [r2, #4]
 8003ffa:	440c      	add	r4, r1
 8003ffc:	6014      	str	r4, [r2, #0]
 8003ffe:	e7da      	b.n	8003fb6 <_free_r+0x26>
 8004000:	d902      	bls.n	8004008 <_free_r+0x78>
 8004002:	230c      	movs	r3, #12
 8004004:	6003      	str	r3, [r0, #0]
 8004006:	e7d6      	b.n	8003fb6 <_free_r+0x26>
 8004008:	6825      	ldr	r5, [r4, #0]
 800400a:	1961      	adds	r1, r4, r5
 800400c:	428b      	cmp	r3, r1
 800400e:	bf04      	itt	eq
 8004010:	6819      	ldreq	r1, [r3, #0]
 8004012:	685b      	ldreq	r3, [r3, #4]
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	bf04      	itt	eq
 8004018:	1949      	addeq	r1, r1, r5
 800401a:	6021      	streq	r1, [r4, #0]
 800401c:	6054      	str	r4, [r2, #4]
 800401e:	e7ca      	b.n	8003fb6 <_free_r+0x26>
 8004020:	b003      	add	sp, #12
 8004022:	bd30      	pop	{r4, r5, pc}
 8004024:	20000648 	.word	0x20000648

08004028 <malloc>:
 8004028:	4b02      	ldr	r3, [pc, #8]	; (8004034 <malloc+0xc>)
 800402a:	4601      	mov	r1, r0
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	f000 b823 	b.w	8004078 <_malloc_r>
 8004032:	bf00      	nop
 8004034:	20000064 	.word	0x20000064

08004038 <sbrk_aligned>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4e0e      	ldr	r6, [pc, #56]	; (8004074 <sbrk_aligned+0x3c>)
 800403c:	460c      	mov	r4, r1
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	4605      	mov	r5, r0
 8004042:	b911      	cbnz	r1, 800404a <sbrk_aligned+0x12>
 8004044:	f000 fdb6 	bl	8004bb4 <_sbrk_r>
 8004048:	6030      	str	r0, [r6, #0]
 800404a:	4621      	mov	r1, r4
 800404c:	4628      	mov	r0, r5
 800404e:	f000 fdb1 	bl	8004bb4 <_sbrk_r>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	d00a      	beq.n	800406c <sbrk_aligned+0x34>
 8004056:	1cc4      	adds	r4, r0, #3
 8004058:	f024 0403 	bic.w	r4, r4, #3
 800405c:	42a0      	cmp	r0, r4
 800405e:	d007      	beq.n	8004070 <sbrk_aligned+0x38>
 8004060:	1a21      	subs	r1, r4, r0
 8004062:	4628      	mov	r0, r5
 8004064:	f000 fda6 	bl	8004bb4 <_sbrk_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d101      	bne.n	8004070 <sbrk_aligned+0x38>
 800406c:	f04f 34ff 	mov.w	r4, #4294967295
 8004070:	4620      	mov	r0, r4
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	2000064c 	.word	0x2000064c

08004078 <_malloc_r>:
 8004078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800407c:	1ccd      	adds	r5, r1, #3
 800407e:	f025 0503 	bic.w	r5, r5, #3
 8004082:	3508      	adds	r5, #8
 8004084:	2d0c      	cmp	r5, #12
 8004086:	bf38      	it	cc
 8004088:	250c      	movcc	r5, #12
 800408a:	2d00      	cmp	r5, #0
 800408c:	4607      	mov	r7, r0
 800408e:	db01      	blt.n	8004094 <_malloc_r+0x1c>
 8004090:	42a9      	cmp	r1, r5
 8004092:	d905      	bls.n	80040a0 <_malloc_r+0x28>
 8004094:	230c      	movs	r3, #12
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	2600      	movs	r6, #0
 800409a:	4630      	mov	r0, r6
 800409c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004174 <_malloc_r+0xfc>
 80040a4:	f000 f868 	bl	8004178 <__malloc_lock>
 80040a8:	f8d8 3000 	ldr.w	r3, [r8]
 80040ac:	461c      	mov	r4, r3
 80040ae:	bb5c      	cbnz	r4, 8004108 <_malloc_r+0x90>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4638      	mov	r0, r7
 80040b4:	f7ff ffc0 	bl	8004038 <sbrk_aligned>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	4604      	mov	r4, r0
 80040bc:	d155      	bne.n	800416a <_malloc_r+0xf2>
 80040be:	f8d8 4000 	ldr.w	r4, [r8]
 80040c2:	4626      	mov	r6, r4
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	d145      	bne.n	8004154 <_malloc_r+0xdc>
 80040c8:	2c00      	cmp	r4, #0
 80040ca:	d048      	beq.n	800415e <_malloc_r+0xe6>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	4631      	mov	r1, r6
 80040d0:	4638      	mov	r0, r7
 80040d2:	eb04 0903 	add.w	r9, r4, r3
 80040d6:	f000 fd6d 	bl	8004bb4 <_sbrk_r>
 80040da:	4581      	cmp	r9, r0
 80040dc:	d13f      	bne.n	800415e <_malloc_r+0xe6>
 80040de:	6821      	ldr	r1, [r4, #0]
 80040e0:	1a6d      	subs	r5, r5, r1
 80040e2:	4629      	mov	r1, r5
 80040e4:	4638      	mov	r0, r7
 80040e6:	f7ff ffa7 	bl	8004038 <sbrk_aligned>
 80040ea:	3001      	adds	r0, #1
 80040ec:	d037      	beq.n	800415e <_malloc_r+0xe6>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	442b      	add	r3, r5
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	f8d8 3000 	ldr.w	r3, [r8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d038      	beq.n	800416e <_malloc_r+0xf6>
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	42a2      	cmp	r2, r4
 8004100:	d12b      	bne.n	800415a <_malloc_r+0xe2>
 8004102:	2200      	movs	r2, #0
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	e00f      	b.n	8004128 <_malloc_r+0xb0>
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	1b52      	subs	r2, r2, r5
 800410c:	d41f      	bmi.n	800414e <_malloc_r+0xd6>
 800410e:	2a0b      	cmp	r2, #11
 8004110:	d917      	bls.n	8004142 <_malloc_r+0xca>
 8004112:	1961      	adds	r1, r4, r5
 8004114:	42a3      	cmp	r3, r4
 8004116:	6025      	str	r5, [r4, #0]
 8004118:	bf18      	it	ne
 800411a:	6059      	strne	r1, [r3, #4]
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	bf08      	it	eq
 8004120:	f8c8 1000 	streq.w	r1, [r8]
 8004124:	5162      	str	r2, [r4, r5]
 8004126:	604b      	str	r3, [r1, #4]
 8004128:	4638      	mov	r0, r7
 800412a:	f104 060b 	add.w	r6, r4, #11
 800412e:	f000 f829 	bl	8004184 <__malloc_unlock>
 8004132:	f026 0607 	bic.w	r6, r6, #7
 8004136:	1d23      	adds	r3, r4, #4
 8004138:	1af2      	subs	r2, r6, r3
 800413a:	d0ae      	beq.n	800409a <_malloc_r+0x22>
 800413c:	1b9b      	subs	r3, r3, r6
 800413e:	50a3      	str	r3, [r4, r2]
 8004140:	e7ab      	b.n	800409a <_malloc_r+0x22>
 8004142:	42a3      	cmp	r3, r4
 8004144:	6862      	ldr	r2, [r4, #4]
 8004146:	d1dd      	bne.n	8004104 <_malloc_r+0x8c>
 8004148:	f8c8 2000 	str.w	r2, [r8]
 800414c:	e7ec      	b.n	8004128 <_malloc_r+0xb0>
 800414e:	4623      	mov	r3, r4
 8004150:	6864      	ldr	r4, [r4, #4]
 8004152:	e7ac      	b.n	80040ae <_malloc_r+0x36>
 8004154:	4634      	mov	r4, r6
 8004156:	6876      	ldr	r6, [r6, #4]
 8004158:	e7b4      	b.n	80040c4 <_malloc_r+0x4c>
 800415a:	4613      	mov	r3, r2
 800415c:	e7cc      	b.n	80040f8 <_malloc_r+0x80>
 800415e:	230c      	movs	r3, #12
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4638      	mov	r0, r7
 8004164:	f000 f80e 	bl	8004184 <__malloc_unlock>
 8004168:	e797      	b.n	800409a <_malloc_r+0x22>
 800416a:	6025      	str	r5, [r4, #0]
 800416c:	e7dc      	b.n	8004128 <_malloc_r+0xb0>
 800416e:	605b      	str	r3, [r3, #4]
 8004170:	deff      	udf	#255	; 0xff
 8004172:	bf00      	nop
 8004174:	20000648 	.word	0x20000648

08004178 <__malloc_lock>:
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <__malloc_lock+0x8>)
 800417a:	f7ff bf06 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 800417e:	bf00      	nop
 8004180:	20000644 	.word	0x20000644

08004184 <__malloc_unlock>:
 8004184:	4801      	ldr	r0, [pc, #4]	; (800418c <__malloc_unlock+0x8>)
 8004186:	f7ff bf01 	b.w	8003f8c <__retarget_lock_release_recursive>
 800418a:	bf00      	nop
 800418c:	20000644 	.word	0x20000644

08004190 <__sfputc_r>:
 8004190:	6893      	ldr	r3, [r2, #8]
 8004192:	3b01      	subs	r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	b410      	push	{r4}
 8004198:	6093      	str	r3, [r2, #8]
 800419a:	da08      	bge.n	80041ae <__sfputc_r+0x1e>
 800419c:	6994      	ldr	r4, [r2, #24]
 800419e:	42a3      	cmp	r3, r4
 80041a0:	db01      	blt.n	80041a6 <__sfputc_r+0x16>
 80041a2:	290a      	cmp	r1, #10
 80041a4:	d103      	bne.n	80041ae <__sfputc_r+0x1e>
 80041a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041aa:	f000 bc4c 	b.w	8004a46 <__swbuf_r>
 80041ae:	6813      	ldr	r3, [r2, #0]
 80041b0:	1c58      	adds	r0, r3, #1
 80041b2:	6010      	str	r0, [r2, #0]
 80041b4:	7019      	strb	r1, [r3, #0]
 80041b6:	4608      	mov	r0, r1
 80041b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041bc:	4770      	bx	lr

080041be <__sfputs_r>:
 80041be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c0:	4606      	mov	r6, r0
 80041c2:	460f      	mov	r7, r1
 80041c4:	4614      	mov	r4, r2
 80041c6:	18d5      	adds	r5, r2, r3
 80041c8:	42ac      	cmp	r4, r5
 80041ca:	d101      	bne.n	80041d0 <__sfputs_r+0x12>
 80041cc:	2000      	movs	r0, #0
 80041ce:	e007      	b.n	80041e0 <__sfputs_r+0x22>
 80041d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d4:	463a      	mov	r2, r7
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff ffda 	bl	8004190 <__sfputc_r>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d1f3      	bne.n	80041c8 <__sfputs_r+0xa>
 80041e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041e4 <_vfiprintf_r>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	460d      	mov	r5, r1
 80041ea:	b09d      	sub	sp, #116	; 0x74
 80041ec:	4614      	mov	r4, r2
 80041ee:	4698      	mov	r8, r3
 80041f0:	4606      	mov	r6, r0
 80041f2:	b118      	cbz	r0, 80041fc <_vfiprintf_r+0x18>
 80041f4:	6a03      	ldr	r3, [r0, #32]
 80041f6:	b90b      	cbnz	r3, 80041fc <_vfiprintf_r+0x18>
 80041f8:	f7ff fcee 	bl	8003bd8 <__sinit>
 80041fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041fe:	07d9      	lsls	r1, r3, #31
 8004200:	d405      	bmi.n	800420e <_vfiprintf_r+0x2a>
 8004202:	89ab      	ldrh	r3, [r5, #12]
 8004204:	059a      	lsls	r2, r3, #22
 8004206:	d402      	bmi.n	800420e <_vfiprintf_r+0x2a>
 8004208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800420a:	f7ff febe 	bl	8003f8a <__retarget_lock_acquire_recursive>
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	d501      	bpl.n	8004218 <_vfiprintf_r+0x34>
 8004214:	692b      	ldr	r3, [r5, #16]
 8004216:	b99b      	cbnz	r3, 8004240 <_vfiprintf_r+0x5c>
 8004218:	4629      	mov	r1, r5
 800421a:	4630      	mov	r0, r6
 800421c:	f000 fc50 	bl	8004ac0 <__swsetup_r>
 8004220:	b170      	cbz	r0, 8004240 <_vfiprintf_r+0x5c>
 8004222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004224:	07dc      	lsls	r4, r3, #31
 8004226:	d504      	bpl.n	8004232 <_vfiprintf_r+0x4e>
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	b01d      	add	sp, #116	; 0x74
 800422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004232:	89ab      	ldrh	r3, [r5, #12]
 8004234:	0598      	lsls	r0, r3, #22
 8004236:	d4f7      	bmi.n	8004228 <_vfiprintf_r+0x44>
 8004238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800423a:	f7ff fea7 	bl	8003f8c <__retarget_lock_release_recursive>
 800423e:	e7f3      	b.n	8004228 <_vfiprintf_r+0x44>
 8004240:	2300      	movs	r3, #0
 8004242:	9309      	str	r3, [sp, #36]	; 0x24
 8004244:	2320      	movs	r3, #32
 8004246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800424a:	f8cd 800c 	str.w	r8, [sp, #12]
 800424e:	2330      	movs	r3, #48	; 0x30
 8004250:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004404 <_vfiprintf_r+0x220>
 8004254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004258:	f04f 0901 	mov.w	r9, #1
 800425c:	4623      	mov	r3, r4
 800425e:	469a      	mov	sl, r3
 8004260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004264:	b10a      	cbz	r2, 800426a <_vfiprintf_r+0x86>
 8004266:	2a25      	cmp	r2, #37	; 0x25
 8004268:	d1f9      	bne.n	800425e <_vfiprintf_r+0x7a>
 800426a:	ebba 0b04 	subs.w	fp, sl, r4
 800426e:	d00b      	beq.n	8004288 <_vfiprintf_r+0xa4>
 8004270:	465b      	mov	r3, fp
 8004272:	4622      	mov	r2, r4
 8004274:	4629      	mov	r1, r5
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff ffa1 	bl	80041be <__sfputs_r>
 800427c:	3001      	adds	r0, #1
 800427e:	f000 80a9 	beq.w	80043d4 <_vfiprintf_r+0x1f0>
 8004282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004284:	445a      	add	r2, fp
 8004286:	9209      	str	r2, [sp, #36]	; 0x24
 8004288:	f89a 3000 	ldrb.w	r3, [sl]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80a1 	beq.w	80043d4 <_vfiprintf_r+0x1f0>
 8004292:	2300      	movs	r3, #0
 8004294:	f04f 32ff 	mov.w	r2, #4294967295
 8004298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800429c:	f10a 0a01 	add.w	sl, sl, #1
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	9307      	str	r3, [sp, #28]
 80042a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042a8:	931a      	str	r3, [sp, #104]	; 0x68
 80042aa:	4654      	mov	r4, sl
 80042ac:	2205      	movs	r2, #5
 80042ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b2:	4854      	ldr	r0, [pc, #336]	; (8004404 <_vfiprintf_r+0x220>)
 80042b4:	f7fb ff8c 	bl	80001d0 <memchr>
 80042b8:	9a04      	ldr	r2, [sp, #16]
 80042ba:	b9d8      	cbnz	r0, 80042f4 <_vfiprintf_r+0x110>
 80042bc:	06d1      	lsls	r1, r2, #27
 80042be:	bf44      	itt	mi
 80042c0:	2320      	movmi	r3, #32
 80042c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c6:	0713      	lsls	r3, r2, #28
 80042c8:	bf44      	itt	mi
 80042ca:	232b      	movmi	r3, #43	; 0x2b
 80042cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d0:	f89a 3000 	ldrb.w	r3, [sl]
 80042d4:	2b2a      	cmp	r3, #42	; 0x2a
 80042d6:	d015      	beq.n	8004304 <_vfiprintf_r+0x120>
 80042d8:	9a07      	ldr	r2, [sp, #28]
 80042da:	4654      	mov	r4, sl
 80042dc:	2000      	movs	r0, #0
 80042de:	f04f 0c0a 	mov.w	ip, #10
 80042e2:	4621      	mov	r1, r4
 80042e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042e8:	3b30      	subs	r3, #48	; 0x30
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	d94d      	bls.n	800438a <_vfiprintf_r+0x1a6>
 80042ee:	b1b0      	cbz	r0, 800431e <_vfiprintf_r+0x13a>
 80042f0:	9207      	str	r2, [sp, #28]
 80042f2:	e014      	b.n	800431e <_vfiprintf_r+0x13a>
 80042f4:	eba0 0308 	sub.w	r3, r0, r8
 80042f8:	fa09 f303 	lsl.w	r3, r9, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	9304      	str	r3, [sp, #16]
 8004300:	46a2      	mov	sl, r4
 8004302:	e7d2      	b.n	80042aa <_vfiprintf_r+0xc6>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	1d19      	adds	r1, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	9103      	str	r1, [sp, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	bfbb      	ittet	lt
 8004310:	425b      	neglt	r3, r3
 8004312:	f042 0202 	orrlt.w	r2, r2, #2
 8004316:	9307      	strge	r3, [sp, #28]
 8004318:	9307      	strlt	r3, [sp, #28]
 800431a:	bfb8      	it	lt
 800431c:	9204      	strlt	r2, [sp, #16]
 800431e:	7823      	ldrb	r3, [r4, #0]
 8004320:	2b2e      	cmp	r3, #46	; 0x2e
 8004322:	d10c      	bne.n	800433e <_vfiprintf_r+0x15a>
 8004324:	7863      	ldrb	r3, [r4, #1]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d134      	bne.n	8004394 <_vfiprintf_r+0x1b0>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	9203      	str	r2, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfb8      	it	lt
 8004336:	f04f 33ff 	movlt.w	r3, #4294967295
 800433a:	3402      	adds	r4, #2
 800433c:	9305      	str	r3, [sp, #20]
 800433e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004414 <_vfiprintf_r+0x230>
 8004342:	7821      	ldrb	r1, [r4, #0]
 8004344:	2203      	movs	r2, #3
 8004346:	4650      	mov	r0, sl
 8004348:	f7fb ff42 	bl	80001d0 <memchr>
 800434c:	b138      	cbz	r0, 800435e <_vfiprintf_r+0x17a>
 800434e:	9b04      	ldr	r3, [sp, #16]
 8004350:	eba0 000a 	sub.w	r0, r0, sl
 8004354:	2240      	movs	r2, #64	; 0x40
 8004356:	4082      	lsls	r2, r0
 8004358:	4313      	orrs	r3, r2
 800435a:	3401      	adds	r4, #1
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004362:	4829      	ldr	r0, [pc, #164]	; (8004408 <_vfiprintf_r+0x224>)
 8004364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004368:	2206      	movs	r2, #6
 800436a:	f7fb ff31 	bl	80001d0 <memchr>
 800436e:	2800      	cmp	r0, #0
 8004370:	d03f      	beq.n	80043f2 <_vfiprintf_r+0x20e>
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <_vfiprintf_r+0x228>)
 8004374:	bb1b      	cbnz	r3, 80043be <_vfiprintf_r+0x1da>
 8004376:	9b03      	ldr	r3, [sp, #12]
 8004378:	3307      	adds	r3, #7
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	3308      	adds	r3, #8
 8004380:	9303      	str	r3, [sp, #12]
 8004382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004384:	443b      	add	r3, r7
 8004386:	9309      	str	r3, [sp, #36]	; 0x24
 8004388:	e768      	b.n	800425c <_vfiprintf_r+0x78>
 800438a:	fb0c 3202 	mla	r2, ip, r2, r3
 800438e:	460c      	mov	r4, r1
 8004390:	2001      	movs	r0, #1
 8004392:	e7a6      	b.n	80042e2 <_vfiprintf_r+0xfe>
 8004394:	2300      	movs	r3, #0
 8004396:	3401      	adds	r4, #1
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	4619      	mov	r1, r3
 800439c:	f04f 0c0a 	mov.w	ip, #10
 80043a0:	4620      	mov	r0, r4
 80043a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043a6:	3a30      	subs	r2, #48	; 0x30
 80043a8:	2a09      	cmp	r2, #9
 80043aa:	d903      	bls.n	80043b4 <_vfiprintf_r+0x1d0>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0c6      	beq.n	800433e <_vfiprintf_r+0x15a>
 80043b0:	9105      	str	r1, [sp, #20]
 80043b2:	e7c4      	b.n	800433e <_vfiprintf_r+0x15a>
 80043b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043b8:	4604      	mov	r4, r0
 80043ba:	2301      	movs	r3, #1
 80043bc:	e7f0      	b.n	80043a0 <_vfiprintf_r+0x1bc>
 80043be:	ab03      	add	r3, sp, #12
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	462a      	mov	r2, r5
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <_vfiprintf_r+0x22c>)
 80043c6:	a904      	add	r1, sp, #16
 80043c8:	4630      	mov	r0, r6
 80043ca:	f3af 8000 	nop.w
 80043ce:	4607      	mov	r7, r0
 80043d0:	1c78      	adds	r0, r7, #1
 80043d2:	d1d6      	bne.n	8004382 <_vfiprintf_r+0x19e>
 80043d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043d6:	07d9      	lsls	r1, r3, #31
 80043d8:	d405      	bmi.n	80043e6 <_vfiprintf_r+0x202>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	059a      	lsls	r2, r3, #22
 80043de:	d402      	bmi.n	80043e6 <_vfiprintf_r+0x202>
 80043e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043e2:	f7ff fdd3 	bl	8003f8c <__retarget_lock_release_recursive>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	065b      	lsls	r3, r3, #25
 80043ea:	f53f af1d 	bmi.w	8004228 <_vfiprintf_r+0x44>
 80043ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043f0:	e71c      	b.n	800422c <_vfiprintf_r+0x48>
 80043f2:	ab03      	add	r3, sp, #12
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	462a      	mov	r2, r5
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_vfiprintf_r+0x22c>)
 80043fa:	a904      	add	r1, sp, #16
 80043fc:	4630      	mov	r0, r6
 80043fe:	f000 f879 	bl	80044f4 <_printf_i>
 8004402:	e7e4      	b.n	80043ce <_vfiprintf_r+0x1ea>
 8004404:	08004da0 	.word	0x08004da0
 8004408:	08004daa 	.word	0x08004daa
 800440c:	00000000 	.word	0x00000000
 8004410:	080041bf 	.word	0x080041bf
 8004414:	08004da6 	.word	0x08004da6

08004418 <_printf_common>:
 8004418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	4616      	mov	r6, r2
 800441e:	4699      	mov	r9, r3
 8004420:	688a      	ldr	r2, [r1, #8]
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004428:	4293      	cmp	r3, r2
 800442a:	bfb8      	it	lt
 800442c:	4613      	movlt	r3, r2
 800442e:	6033      	str	r3, [r6, #0]
 8004430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004434:	4607      	mov	r7, r0
 8004436:	460c      	mov	r4, r1
 8004438:	b10a      	cbz	r2, 800443e <_printf_common+0x26>
 800443a:	3301      	adds	r3, #1
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	0699      	lsls	r1, r3, #26
 8004442:	bf42      	ittt	mi
 8004444:	6833      	ldrmi	r3, [r6, #0]
 8004446:	3302      	addmi	r3, #2
 8004448:	6033      	strmi	r3, [r6, #0]
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	f015 0506 	ands.w	r5, r5, #6
 8004450:	d106      	bne.n	8004460 <_printf_common+0x48>
 8004452:	f104 0a19 	add.w	sl, r4, #25
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	6832      	ldr	r2, [r6, #0]
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	42ab      	cmp	r3, r5
 800445e:	dc26      	bgt.n	80044ae <_printf_common+0x96>
 8004460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004464:	1e13      	subs	r3, r2, #0
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	2301      	movne	r3, #1
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d42b      	bmi.n	80044c8 <_printf_common+0xb0>
 8004470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004474:	4649      	mov	r1, r9
 8004476:	4638      	mov	r0, r7
 8004478:	47c0      	blx	r8
 800447a:	3001      	adds	r0, #1
 800447c:	d01e      	beq.n	80044bc <_printf_common+0xa4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	6922      	ldr	r2, [r4, #16]
 8004482:	f003 0306 	and.w	r3, r3, #6
 8004486:	2b04      	cmp	r3, #4
 8004488:	bf02      	ittt	eq
 800448a:	68e5      	ldreq	r5, [r4, #12]
 800448c:	6833      	ldreq	r3, [r6, #0]
 800448e:	1aed      	subeq	r5, r5, r3
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	bf0c      	ite	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	2500      	movne	r5, #0
 800449a:	4293      	cmp	r3, r2
 800449c:	bfc4      	itt	gt
 800449e:	1a9b      	subgt	r3, r3, r2
 80044a0:	18ed      	addgt	r5, r5, r3
 80044a2:	2600      	movs	r6, #0
 80044a4:	341a      	adds	r4, #26
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d11a      	bne.n	80044e0 <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e008      	b.n	80044c0 <_printf_common+0xa8>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4652      	mov	r2, sl
 80044b2:	4649      	mov	r1, r9
 80044b4:	4638      	mov	r0, r7
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d103      	bne.n	80044c4 <_printf_common+0xac>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c4:	3501      	adds	r5, #1
 80044c6:	e7c6      	b.n	8004456 <_printf_common+0x3e>
 80044c8:	18e1      	adds	r1, r4, r3
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	2030      	movs	r0, #48	; 0x30
 80044ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044d2:	4422      	add	r2, r4
 80044d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044dc:	3302      	adds	r3, #2
 80044de:	e7c7      	b.n	8004470 <_printf_common+0x58>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4622      	mov	r2, r4
 80044e4:	4649      	mov	r1, r9
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0e6      	beq.n	80044bc <_printf_common+0xa4>
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7d9      	b.n	80044a6 <_printf_common+0x8e>
	...

080044f4 <_printf_i>:
 80044f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	7e0f      	ldrb	r7, [r1, #24]
 80044fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044fc:	2f78      	cmp	r7, #120	; 0x78
 80044fe:	4691      	mov	r9, r2
 8004500:	4680      	mov	r8, r0
 8004502:	460c      	mov	r4, r1
 8004504:	469a      	mov	sl, r3
 8004506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800450a:	d807      	bhi.n	800451c <_printf_i+0x28>
 800450c:	2f62      	cmp	r7, #98	; 0x62
 800450e:	d80a      	bhi.n	8004526 <_printf_i+0x32>
 8004510:	2f00      	cmp	r7, #0
 8004512:	f000 80d4 	beq.w	80046be <_printf_i+0x1ca>
 8004516:	2f58      	cmp	r7, #88	; 0x58
 8004518:	f000 80c0 	beq.w	800469c <_printf_i+0x1a8>
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004524:	e03a      	b.n	800459c <_printf_i+0xa8>
 8004526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800452a:	2b15      	cmp	r3, #21
 800452c:	d8f6      	bhi.n	800451c <_printf_i+0x28>
 800452e:	a101      	add	r1, pc, #4	; (adr r1, 8004534 <_printf_i+0x40>)
 8004530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004534:	0800458d 	.word	0x0800458d
 8004538:	080045a1 	.word	0x080045a1
 800453c:	0800451d 	.word	0x0800451d
 8004540:	0800451d 	.word	0x0800451d
 8004544:	0800451d 	.word	0x0800451d
 8004548:	0800451d 	.word	0x0800451d
 800454c:	080045a1 	.word	0x080045a1
 8004550:	0800451d 	.word	0x0800451d
 8004554:	0800451d 	.word	0x0800451d
 8004558:	0800451d 	.word	0x0800451d
 800455c:	0800451d 	.word	0x0800451d
 8004560:	080046a5 	.word	0x080046a5
 8004564:	080045cd 	.word	0x080045cd
 8004568:	0800465f 	.word	0x0800465f
 800456c:	0800451d 	.word	0x0800451d
 8004570:	0800451d 	.word	0x0800451d
 8004574:	080046c7 	.word	0x080046c7
 8004578:	0800451d 	.word	0x0800451d
 800457c:	080045cd 	.word	0x080045cd
 8004580:	0800451d 	.word	0x0800451d
 8004584:	0800451d 	.word	0x0800451d
 8004588:	08004667 	.word	0x08004667
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800459c:	2301      	movs	r3, #1
 800459e:	e09f      	b.n	80046e0 <_printf_i+0x1ec>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	0607      	lsls	r7, r0, #24
 80045a6:	f103 0104 	add.w	r1, r3, #4
 80045aa:	6029      	str	r1, [r5, #0]
 80045ac:	d501      	bpl.n	80045b2 <_printf_i+0xbe>
 80045ae:	681e      	ldr	r6, [r3, #0]
 80045b0:	e003      	b.n	80045ba <_printf_i+0xc6>
 80045b2:	0646      	lsls	r6, r0, #25
 80045b4:	d5fb      	bpl.n	80045ae <_printf_i+0xba>
 80045b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	da03      	bge.n	80045c6 <_printf_i+0xd2>
 80045be:	232d      	movs	r3, #45	; 0x2d
 80045c0:	4276      	negs	r6, r6
 80045c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c6:	485a      	ldr	r0, [pc, #360]	; (8004730 <_printf_i+0x23c>)
 80045c8:	230a      	movs	r3, #10
 80045ca:	e012      	b.n	80045f2 <_printf_i+0xfe>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	6820      	ldr	r0, [r4, #0]
 80045d0:	1d19      	adds	r1, r3, #4
 80045d2:	6029      	str	r1, [r5, #0]
 80045d4:	0605      	lsls	r5, r0, #24
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0xe8>
 80045d8:	681e      	ldr	r6, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0xee>
 80045dc:	0641      	lsls	r1, r0, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0xe4>
 80045e0:	881e      	ldrh	r6, [r3, #0]
 80045e2:	4853      	ldr	r0, [pc, #332]	; (8004730 <_printf_i+0x23c>)
 80045e4:	2f6f      	cmp	r7, #111	; 0x6f
 80045e6:	bf0c      	ite	eq
 80045e8:	2308      	moveq	r3, #8
 80045ea:	230a      	movne	r3, #10
 80045ec:	2100      	movs	r1, #0
 80045ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f2:	6865      	ldr	r5, [r4, #4]
 80045f4:	60a5      	str	r5, [r4, #8]
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	bfa2      	ittt	ge
 80045fa:	6821      	ldrge	r1, [r4, #0]
 80045fc:	f021 0104 	bicge.w	r1, r1, #4
 8004600:	6021      	strge	r1, [r4, #0]
 8004602:	b90e      	cbnz	r6, 8004608 <_printf_i+0x114>
 8004604:	2d00      	cmp	r5, #0
 8004606:	d04b      	beq.n	80046a0 <_printf_i+0x1ac>
 8004608:	4615      	mov	r5, r2
 800460a:	fbb6 f1f3 	udiv	r1, r6, r3
 800460e:	fb03 6711 	mls	r7, r3, r1, r6
 8004612:	5dc7      	ldrb	r7, [r0, r7]
 8004614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004618:	4637      	mov	r7, r6
 800461a:	42bb      	cmp	r3, r7
 800461c:	460e      	mov	r6, r1
 800461e:	d9f4      	bls.n	800460a <_printf_i+0x116>
 8004620:	2b08      	cmp	r3, #8
 8004622:	d10b      	bne.n	800463c <_printf_i+0x148>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	07de      	lsls	r6, r3, #31
 8004628:	d508      	bpl.n	800463c <_printf_i+0x148>
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	6861      	ldr	r1, [r4, #4]
 800462e:	4299      	cmp	r1, r3
 8004630:	bfde      	ittt	le
 8004632:	2330      	movle	r3, #48	; 0x30
 8004634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004638:	f105 35ff 	addle.w	r5, r5, #4294967295
 800463c:	1b52      	subs	r2, r2, r5
 800463e:	6122      	str	r2, [r4, #16]
 8004640:	f8cd a000 	str.w	sl, [sp]
 8004644:	464b      	mov	r3, r9
 8004646:	aa03      	add	r2, sp, #12
 8004648:	4621      	mov	r1, r4
 800464a:	4640      	mov	r0, r8
 800464c:	f7ff fee4 	bl	8004418 <_printf_common>
 8004650:	3001      	adds	r0, #1
 8004652:	d14a      	bne.n	80046ea <_printf_i+0x1f6>
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	b004      	add	sp, #16
 800465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	4833      	ldr	r0, [pc, #204]	; (8004734 <_printf_i+0x240>)
 8004668:	2778      	movs	r7, #120	; 0x78
 800466a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	6829      	ldr	r1, [r5, #0]
 8004672:	061f      	lsls	r7, r3, #24
 8004674:	f851 6b04 	ldr.w	r6, [r1], #4
 8004678:	d402      	bmi.n	8004680 <_printf_i+0x18c>
 800467a:	065f      	lsls	r7, r3, #25
 800467c:	bf48      	it	mi
 800467e:	b2b6      	uxthmi	r6, r6
 8004680:	07df      	lsls	r7, r3, #31
 8004682:	bf48      	it	mi
 8004684:	f043 0320 	orrmi.w	r3, r3, #32
 8004688:	6029      	str	r1, [r5, #0]
 800468a:	bf48      	it	mi
 800468c:	6023      	strmi	r3, [r4, #0]
 800468e:	b91e      	cbnz	r6, 8004698 <_printf_i+0x1a4>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f023 0320 	bic.w	r3, r3, #32
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	2310      	movs	r3, #16
 800469a:	e7a7      	b.n	80045ec <_printf_i+0xf8>
 800469c:	4824      	ldr	r0, [pc, #144]	; (8004730 <_printf_i+0x23c>)
 800469e:	e7e4      	b.n	800466a <_printf_i+0x176>
 80046a0:	4615      	mov	r5, r2
 80046a2:	e7bd      	b.n	8004620 <_printf_i+0x12c>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	6826      	ldr	r6, [r4, #0]
 80046a8:	6961      	ldr	r1, [r4, #20]
 80046aa:	1d18      	adds	r0, r3, #4
 80046ac:	6028      	str	r0, [r5, #0]
 80046ae:	0635      	lsls	r5, r6, #24
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	d501      	bpl.n	80046b8 <_printf_i+0x1c4>
 80046b4:	6019      	str	r1, [r3, #0]
 80046b6:	e002      	b.n	80046be <_printf_i+0x1ca>
 80046b8:	0670      	lsls	r0, r6, #25
 80046ba:	d5fb      	bpl.n	80046b4 <_printf_i+0x1c0>
 80046bc:	8019      	strh	r1, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	6123      	str	r3, [r4, #16]
 80046c2:	4615      	mov	r5, r2
 80046c4:	e7bc      	b.n	8004640 <_printf_i+0x14c>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	1d1a      	adds	r2, r3, #4
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	2100      	movs	r1, #0
 80046d2:	4628      	mov	r0, r5
 80046d4:	f7fb fd7c 	bl	80001d0 <memchr>
 80046d8:	b108      	cbz	r0, 80046de <_printf_i+0x1ea>
 80046da:	1b40      	subs	r0, r0, r5
 80046dc:	6060      	str	r0, [r4, #4]
 80046de:	6863      	ldr	r3, [r4, #4]
 80046e0:	6123      	str	r3, [r4, #16]
 80046e2:	2300      	movs	r3, #0
 80046e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e8:	e7aa      	b.n	8004640 <_printf_i+0x14c>
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4649      	mov	r1, r9
 80046f0:	4640      	mov	r0, r8
 80046f2:	47d0      	blx	sl
 80046f4:	3001      	adds	r0, #1
 80046f6:	d0ad      	beq.n	8004654 <_printf_i+0x160>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	079b      	lsls	r3, r3, #30
 80046fc:	d413      	bmi.n	8004726 <_printf_i+0x232>
 80046fe:	68e0      	ldr	r0, [r4, #12]
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	4298      	cmp	r0, r3
 8004704:	bfb8      	it	lt
 8004706:	4618      	movlt	r0, r3
 8004708:	e7a6      	b.n	8004658 <_printf_i+0x164>
 800470a:	2301      	movs	r3, #1
 800470c:	4632      	mov	r2, r6
 800470e:	4649      	mov	r1, r9
 8004710:	4640      	mov	r0, r8
 8004712:	47d0      	blx	sl
 8004714:	3001      	adds	r0, #1
 8004716:	d09d      	beq.n	8004654 <_printf_i+0x160>
 8004718:	3501      	adds	r5, #1
 800471a:	68e3      	ldr	r3, [r4, #12]
 800471c:	9903      	ldr	r1, [sp, #12]
 800471e:	1a5b      	subs	r3, r3, r1
 8004720:	42ab      	cmp	r3, r5
 8004722:	dcf2      	bgt.n	800470a <_printf_i+0x216>
 8004724:	e7eb      	b.n	80046fe <_printf_i+0x20a>
 8004726:	2500      	movs	r5, #0
 8004728:	f104 0619 	add.w	r6, r4, #25
 800472c:	e7f5      	b.n	800471a <_printf_i+0x226>
 800472e:	bf00      	nop
 8004730:	08004db1 	.word	0x08004db1
 8004734:	08004dc2 	.word	0x08004dc2

08004738 <__sflush_r>:
 8004738:	898a      	ldrh	r2, [r1, #12]
 800473a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	0710      	lsls	r0, r2, #28
 8004742:	460c      	mov	r4, r1
 8004744:	d458      	bmi.n	80047f8 <__sflush_r+0xc0>
 8004746:	684b      	ldr	r3, [r1, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	dc05      	bgt.n	8004758 <__sflush_r+0x20>
 800474c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	dc02      	bgt.n	8004758 <__sflush_r+0x20>
 8004752:	2000      	movs	r0, #0
 8004754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800475a:	2e00      	cmp	r6, #0
 800475c:	d0f9      	beq.n	8004752 <__sflush_r+0x1a>
 800475e:	2300      	movs	r3, #0
 8004760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004764:	682f      	ldr	r7, [r5, #0]
 8004766:	6a21      	ldr	r1, [r4, #32]
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	d032      	beq.n	80047d2 <__sflush_r+0x9a>
 800476c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	075a      	lsls	r2, r3, #29
 8004772:	d505      	bpl.n	8004780 <__sflush_r+0x48>
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	1ac0      	subs	r0, r0, r3
 8004778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800477a:	b10b      	cbz	r3, 8004780 <__sflush_r+0x48>
 800477c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800477e:	1ac0      	subs	r0, r0, r3
 8004780:	2300      	movs	r3, #0
 8004782:	4602      	mov	r2, r0
 8004784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004786:	6a21      	ldr	r1, [r4, #32]
 8004788:	4628      	mov	r0, r5
 800478a:	47b0      	blx	r6
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	d106      	bne.n	80047a0 <__sflush_r+0x68>
 8004792:	6829      	ldr	r1, [r5, #0]
 8004794:	291d      	cmp	r1, #29
 8004796:	d82b      	bhi.n	80047f0 <__sflush_r+0xb8>
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <__sflush_r+0x108>)
 800479a:	410a      	asrs	r2, r1
 800479c:	07d6      	lsls	r6, r2, #31
 800479e:	d427      	bmi.n	80047f0 <__sflush_r+0xb8>
 80047a0:	2200      	movs	r2, #0
 80047a2:	6062      	str	r2, [r4, #4]
 80047a4:	04d9      	lsls	r1, r3, #19
 80047a6:	6922      	ldr	r2, [r4, #16]
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	d504      	bpl.n	80047b6 <__sflush_r+0x7e>
 80047ac:	1c42      	adds	r2, r0, #1
 80047ae:	d101      	bne.n	80047b4 <__sflush_r+0x7c>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b903      	cbnz	r3, 80047b6 <__sflush_r+0x7e>
 80047b4:	6560      	str	r0, [r4, #84]	; 0x54
 80047b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b8:	602f      	str	r7, [r5, #0]
 80047ba:	2900      	cmp	r1, #0
 80047bc:	d0c9      	beq.n	8004752 <__sflush_r+0x1a>
 80047be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d002      	beq.n	80047cc <__sflush_r+0x94>
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7ff fbe2 	bl	8003f90 <_free_r>
 80047cc:	2000      	movs	r0, #0
 80047ce:	6360      	str	r0, [r4, #52]	; 0x34
 80047d0:	e7c0      	b.n	8004754 <__sflush_r+0x1c>
 80047d2:	2301      	movs	r3, #1
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b0      	blx	r6
 80047d8:	1c41      	adds	r1, r0, #1
 80047da:	d1c8      	bne.n	800476e <__sflush_r+0x36>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0c5      	beq.n	800476e <__sflush_r+0x36>
 80047e2:	2b1d      	cmp	r3, #29
 80047e4:	d001      	beq.n	80047ea <__sflush_r+0xb2>
 80047e6:	2b16      	cmp	r3, #22
 80047e8:	d101      	bne.n	80047ee <__sflush_r+0xb6>
 80047ea:	602f      	str	r7, [r5, #0]
 80047ec:	e7b1      	b.n	8004752 <__sflush_r+0x1a>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f4:	81a3      	strh	r3, [r4, #12]
 80047f6:	e7ad      	b.n	8004754 <__sflush_r+0x1c>
 80047f8:	690f      	ldr	r7, [r1, #16]
 80047fa:	2f00      	cmp	r7, #0
 80047fc:	d0a9      	beq.n	8004752 <__sflush_r+0x1a>
 80047fe:	0793      	lsls	r3, r2, #30
 8004800:	680e      	ldr	r6, [r1, #0]
 8004802:	bf08      	it	eq
 8004804:	694b      	ldreq	r3, [r1, #20]
 8004806:	600f      	str	r7, [r1, #0]
 8004808:	bf18      	it	ne
 800480a:	2300      	movne	r3, #0
 800480c:	eba6 0807 	sub.w	r8, r6, r7
 8004810:	608b      	str	r3, [r1, #8]
 8004812:	f1b8 0f00 	cmp.w	r8, #0
 8004816:	dd9c      	ble.n	8004752 <__sflush_r+0x1a>
 8004818:	6a21      	ldr	r1, [r4, #32]
 800481a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800481c:	4643      	mov	r3, r8
 800481e:	463a      	mov	r2, r7
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	2800      	cmp	r0, #0
 8004826:	dc06      	bgt.n	8004836 <__sflush_r+0xfe>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482e:	81a3      	strh	r3, [r4, #12]
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	e78e      	b.n	8004754 <__sflush_r+0x1c>
 8004836:	4407      	add	r7, r0
 8004838:	eba8 0800 	sub.w	r8, r8, r0
 800483c:	e7e9      	b.n	8004812 <__sflush_r+0xda>
 800483e:	bf00      	nop
 8004840:	dfbffffe 	.word	0xdfbffffe

08004844 <_fflush_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	690b      	ldr	r3, [r1, #16]
 8004848:	4605      	mov	r5, r0
 800484a:	460c      	mov	r4, r1
 800484c:	b913      	cbnz	r3, 8004854 <_fflush_r+0x10>
 800484e:	2500      	movs	r5, #0
 8004850:	4628      	mov	r0, r5
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	b118      	cbz	r0, 800485e <_fflush_r+0x1a>
 8004856:	6a03      	ldr	r3, [r0, #32]
 8004858:	b90b      	cbnz	r3, 800485e <_fflush_r+0x1a>
 800485a:	f7ff f9bd 	bl	8003bd8 <__sinit>
 800485e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f3      	beq.n	800484e <_fflush_r+0xa>
 8004866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004868:	07d0      	lsls	r0, r2, #31
 800486a:	d404      	bmi.n	8004876 <_fflush_r+0x32>
 800486c:	0599      	lsls	r1, r3, #22
 800486e:	d402      	bmi.n	8004876 <_fflush_r+0x32>
 8004870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004872:	f7ff fb8a 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8004876:	4628      	mov	r0, r5
 8004878:	4621      	mov	r1, r4
 800487a:	f7ff ff5d 	bl	8004738 <__sflush_r>
 800487e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004880:	07da      	lsls	r2, r3, #31
 8004882:	4605      	mov	r5, r0
 8004884:	d4e4      	bmi.n	8004850 <_fflush_r+0xc>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	d4e1      	bmi.n	8004850 <_fflush_r+0xc>
 800488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488e:	f7ff fb7d 	bl	8003f8c <__retarget_lock_release_recursive>
 8004892:	e7dd      	b.n	8004850 <_fflush_r+0xc>

08004894 <_getc_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	4605      	mov	r5, r0
 800489a:	b118      	cbz	r0, 80048a4 <_getc_r+0x10>
 800489c:	6a03      	ldr	r3, [r0, #32]
 800489e:	b90b      	cbnz	r3, 80048a4 <_getc_r+0x10>
 80048a0:	f7ff f99a 	bl	8003bd8 <__sinit>
 80048a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a6:	07d8      	lsls	r0, r3, #31
 80048a8:	d405      	bmi.n	80048b6 <_getc_r+0x22>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	0599      	lsls	r1, r3, #22
 80048ae:	d402      	bmi.n	80048b6 <_getc_r+0x22>
 80048b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b2:	f7ff fb6a 	bl	8003f8a <__retarget_lock_acquire_recursive>
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	da0f      	bge.n	80048e0 <_getc_r+0x4c>
 80048c0:	4628      	mov	r0, r5
 80048c2:	4621      	mov	r1, r4
 80048c4:	f000 f8a7 	bl	8004a16 <__srget_r>
 80048c8:	4605      	mov	r5, r0
 80048ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048cc:	07da      	lsls	r2, r3, #31
 80048ce:	d405      	bmi.n	80048dc <_getc_r+0x48>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	059b      	lsls	r3, r3, #22
 80048d4:	d402      	bmi.n	80048dc <_getc_r+0x48>
 80048d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d8:	f7ff fb58 	bl	8003f8c <__retarget_lock_release_recursive>
 80048dc:	4628      	mov	r0, r5
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	781d      	ldrb	r5, [r3, #0]
 80048e8:	e7ef      	b.n	80048ca <_getc_r+0x36>

080048ea <__swhatbuf_r>:
 80048ea:	b570      	push	{r4, r5, r6, lr}
 80048ec:	460c      	mov	r4, r1
 80048ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f2:	2900      	cmp	r1, #0
 80048f4:	b096      	sub	sp, #88	; 0x58
 80048f6:	4615      	mov	r5, r2
 80048f8:	461e      	mov	r6, r3
 80048fa:	da0d      	bge.n	8004918 <__swhatbuf_r+0x2e>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	bf0c      	ite	eq
 8004908:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800490c:	2340      	movne	r3, #64	; 0x40
 800490e:	2000      	movs	r0, #0
 8004910:	6031      	str	r1, [r6, #0]
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	b016      	add	sp, #88	; 0x58
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	466a      	mov	r2, sp
 800491a:	f000 f929 	bl	8004b70 <_fstat_r>
 800491e:	2800      	cmp	r0, #0
 8004920:	dbec      	blt.n	80048fc <__swhatbuf_r+0x12>
 8004922:	9901      	ldr	r1, [sp, #4]
 8004924:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004928:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800492c:	4259      	negs	r1, r3
 800492e:	4159      	adcs	r1, r3
 8004930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004934:	e7eb      	b.n	800490e <__swhatbuf_r+0x24>

08004936 <__smakebuf_r>:
 8004936:	898b      	ldrh	r3, [r1, #12]
 8004938:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800493a:	079d      	lsls	r5, r3, #30
 800493c:	4606      	mov	r6, r0
 800493e:	460c      	mov	r4, r1
 8004940:	d507      	bpl.n	8004952 <__smakebuf_r+0x1c>
 8004942:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	6123      	str	r3, [r4, #16]
 800494a:	2301      	movs	r3, #1
 800494c:	6163      	str	r3, [r4, #20]
 800494e:	b002      	add	sp, #8
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	ab01      	add	r3, sp, #4
 8004954:	466a      	mov	r2, sp
 8004956:	f7ff ffc8 	bl	80048ea <__swhatbuf_r>
 800495a:	9900      	ldr	r1, [sp, #0]
 800495c:	4605      	mov	r5, r0
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff fb8a 	bl	8004078 <_malloc_r>
 8004964:	b948      	cbnz	r0, 800497a <__smakebuf_r+0x44>
 8004966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496a:	059a      	lsls	r2, r3, #22
 800496c:	d4ef      	bmi.n	800494e <__smakebuf_r+0x18>
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	e7e3      	b.n	8004942 <__smakebuf_r+0xc>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	9b00      	ldr	r3, [sp, #0]
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	9b01      	ldr	r3, [sp, #4]
 800498a:	6120      	str	r0, [r4, #16]
 800498c:	b15b      	cbz	r3, 80049a6 <__smakebuf_r+0x70>
 800498e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004992:	4630      	mov	r0, r6
 8004994:	f000 f8fe 	bl	8004b94 <_isatty_r>
 8004998:	b128      	cbz	r0, 80049a6 <__smakebuf_r+0x70>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f023 0303 	bic.w	r3, r3, #3
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	431d      	orrs	r5, r3
 80049aa:	81a5      	strh	r5, [r4, #12]
 80049ac:	e7cf      	b.n	800494e <__smakebuf_r+0x18>

080049ae <_putc_r>:
 80049ae:	b570      	push	{r4, r5, r6, lr}
 80049b0:	460d      	mov	r5, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	4606      	mov	r6, r0
 80049b6:	b118      	cbz	r0, 80049c0 <_putc_r+0x12>
 80049b8:	6a03      	ldr	r3, [r0, #32]
 80049ba:	b90b      	cbnz	r3, 80049c0 <_putc_r+0x12>
 80049bc:	f7ff f90c 	bl	8003bd8 <__sinit>
 80049c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c2:	07d8      	lsls	r0, r3, #31
 80049c4:	d405      	bmi.n	80049d2 <_putc_r+0x24>
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	0599      	lsls	r1, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_putc_r+0x24>
 80049cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ce:	f7ff fadc 	bl	8003f8a <__retarget_lock_acquire_recursive>
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	60a3      	str	r3, [r4, #8]
 80049da:	da05      	bge.n	80049e8 <_putc_r+0x3a>
 80049dc:	69a2      	ldr	r2, [r4, #24]
 80049de:	4293      	cmp	r3, r2
 80049e0:	db12      	blt.n	8004a08 <_putc_r+0x5a>
 80049e2:	b2eb      	uxtb	r3, r5
 80049e4:	2b0a      	cmp	r3, #10
 80049e6:	d00f      	beq.n	8004a08 <_putc_r+0x5a>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	6022      	str	r2, [r4, #0]
 80049ee:	701d      	strb	r5, [r3, #0]
 80049f0:	b2ed      	uxtb	r5, r5
 80049f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f4:	07da      	lsls	r2, r3, #31
 80049f6:	d405      	bmi.n	8004a04 <_putc_r+0x56>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	059b      	lsls	r3, r3, #22
 80049fc:	d402      	bmi.n	8004a04 <_putc_r+0x56>
 80049fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a00:	f7ff fac4 	bl	8003f8c <__retarget_lock_release_recursive>
 8004a04:	4628      	mov	r0, r5
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 f81a 	bl	8004a46 <__swbuf_r>
 8004a12:	4605      	mov	r5, r0
 8004a14:	e7ed      	b.n	80049f2 <_putc_r+0x44>

08004a16 <__srget_r>:
 8004a16:	b538      	push	{r3, r4, r5, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	b118      	cbz	r0, 8004a26 <__srget_r+0x10>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	b90b      	cbnz	r3, 8004a26 <__srget_r+0x10>
 8004a22:	f7ff f8d9 	bl	8003bd8 <__sinit>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f8e1 	bl	8004bf0 <__srefill_r>
 8004a2e:	b938      	cbnz	r0, 8004a40 <__srget_r+0x2a>
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	6063      	str	r3, [r4, #4]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	7818      	ldrb	r0, [r3, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	e7fb      	b.n	8004a3e <__srget_r+0x28>

08004a46 <__swbuf_r>:
 8004a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a48:	460e      	mov	r6, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <__swbuf_r+0x12>
 8004a50:	6a03      	ldr	r3, [r0, #32]
 8004a52:	b90b      	cbnz	r3, 8004a58 <__swbuf_r+0x12>
 8004a54:	f7ff f8c0 	bl	8003bd8 <__sinit>
 8004a58:	69a3      	ldr	r3, [r4, #24]
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	071a      	lsls	r2, r3, #28
 8004a60:	d525      	bpl.n	8004aae <__swbuf_r+0x68>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	b31b      	cbz	r3, 8004aae <__swbuf_r+0x68>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	6922      	ldr	r2, [r4, #16]
 8004a6a:	1a98      	subs	r0, r3, r2
 8004a6c:	6963      	ldr	r3, [r4, #20]
 8004a6e:	b2f6      	uxtb	r6, r6
 8004a70:	4283      	cmp	r3, r0
 8004a72:	4637      	mov	r7, r6
 8004a74:	dc04      	bgt.n	8004a80 <__swbuf_r+0x3a>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fee3 	bl	8004844 <_fflush_r>
 8004a7e:	b9e0      	cbnz	r0, 8004aba <__swbuf_r+0x74>
 8004a80:	68a3      	ldr	r3, [r4, #8]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60a3      	str	r3, [r4, #8]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	6022      	str	r2, [r4, #0]
 8004a8c:	701e      	strb	r6, [r3, #0]
 8004a8e:	6962      	ldr	r2, [r4, #20]
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d004      	beq.n	8004aa0 <__swbuf_r+0x5a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	07db      	lsls	r3, r3, #31
 8004a9a:	d506      	bpl.n	8004aaa <__swbuf_r+0x64>
 8004a9c:	2e0a      	cmp	r6, #10
 8004a9e:	d104      	bne.n	8004aaa <__swbuf_r+0x64>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff fece 	bl	8004844 <_fflush_r>
 8004aa8:	b938      	cbnz	r0, 8004aba <__swbuf_r+0x74>
 8004aaa:	4638      	mov	r0, r7
 8004aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 f805 	bl	8004ac0 <__swsetup_r>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d0d5      	beq.n	8004a66 <__swbuf_r+0x20>
 8004aba:	f04f 37ff 	mov.w	r7, #4294967295
 8004abe:	e7f4      	b.n	8004aaa <__swbuf_r+0x64>

08004ac0 <__swsetup_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <__swsetup_r+0xac>)
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	460c      	mov	r4, r1
 8004aca:	b118      	cbz	r0, 8004ad4 <__swsetup_r+0x14>
 8004acc:	6a03      	ldr	r3, [r0, #32]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <__swsetup_r+0x14>
 8004ad0:	f7ff f882 	bl	8003bd8 <__sinit>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ada:	0718      	lsls	r0, r3, #28
 8004adc:	d422      	bmi.n	8004b24 <__swsetup_r+0x64>
 8004ade:	06d9      	lsls	r1, r3, #27
 8004ae0:	d407      	bmi.n	8004af2 <__swsetup_r+0x32>
 8004ae2:	2309      	movs	r3, #9
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e034      	b.n	8004b5c <__swsetup_r+0x9c>
 8004af2:	0758      	lsls	r0, r3, #29
 8004af4:	d512      	bpl.n	8004b1c <__swsetup_r+0x5c>
 8004af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af8:	b141      	cbz	r1, 8004b0c <__swsetup_r+0x4c>
 8004afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004afe:	4299      	cmp	r1, r3
 8004b00:	d002      	beq.n	8004b08 <__swsetup_r+0x48>
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff fa44 	bl	8003f90 <_free_r>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6363      	str	r3, [r4, #52]	; 0x34
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	2300      	movs	r3, #0
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f043 0308 	orr.w	r3, r3, #8
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	b94b      	cbnz	r3, 8004b3c <__swsetup_r+0x7c>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d003      	beq.n	8004b3c <__swsetup_r+0x7c>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7ff fefd 	bl	8004936 <__smakebuf_r>
 8004b3c:	89a0      	ldrh	r0, [r4, #12]
 8004b3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b42:	f010 0301 	ands.w	r3, r0, #1
 8004b46:	d00a      	beq.n	8004b5e <__swsetup_r+0x9e>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	6963      	ldr	r3, [r4, #20]
 8004b4e:	425b      	negs	r3, r3
 8004b50:	61a3      	str	r3, [r4, #24]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	b943      	cbnz	r3, 8004b68 <__swsetup_r+0xa8>
 8004b56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b5a:	d1c4      	bne.n	8004ae6 <__swsetup_r+0x26>
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	0781      	lsls	r1, r0, #30
 8004b60:	bf58      	it	pl
 8004b62:	6963      	ldrpl	r3, [r4, #20]
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	e7f4      	b.n	8004b52 <__swsetup_r+0x92>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7f7      	b.n	8004b5c <__swsetup_r+0x9c>
 8004b6c:	20000064 	.word	0x20000064

08004b70 <_fstat_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d07      	ldr	r5, [pc, #28]	; (8004b90 <_fstat_r+0x20>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	f7fb fec3 	bl	8000908 <_fstat>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	d102      	bne.n	8004b8c <_fstat_r+0x1c>
 8004b86:	682b      	ldr	r3, [r5, #0]
 8004b88:	b103      	cbz	r3, 8004b8c <_fstat_r+0x1c>
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000640 	.word	0x20000640

08004b94 <_isatty_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	; (8004bb0 <_isatty_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fb fe20 	bl	80007e4 <_isatty>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_isatty_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_isatty_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000640 	.word	0x20000640

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc f8aa 	bl	8000d18 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000640 	.word	0x20000640

08004bd4 <lflush>:
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	f003 0309 	and.w	r3, r3, #9
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	d103      	bne.n	8004be6 <lflush+0x12>
 8004bde:	4b03      	ldr	r3, [pc, #12]	; (8004bec <lflush+0x18>)
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	f7ff be2f 	b.w	8004844 <_fflush_r>
 8004be6:	2000      	movs	r0, #0
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000064 	.word	0x20000064

08004bf0 <__srefill_r>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	b118      	cbz	r0, 8004c00 <__srefill_r+0x10>
 8004bf8:	6a03      	ldr	r3, [r0, #32]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <__srefill_r+0x10>
 8004bfc:	f7fe ffec 	bl	8003bd8 <__sinit>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c0a:	069e      	lsls	r6, r3, #26
 8004c0c:	d502      	bpl.n	8004c14 <__srefill_r+0x24>
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e05c      	b.n	8004cce <__srefill_r+0xde>
 8004c14:	0758      	lsls	r0, r3, #29
 8004c16:	d448      	bmi.n	8004caa <__srefill_r+0xba>
 8004c18:	06d9      	lsls	r1, r3, #27
 8004c1a:	d405      	bmi.n	8004c28 <__srefill_r+0x38>
 8004c1c:	2309      	movs	r3, #9
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	e7f2      	b.n	8004c0e <__srefill_r+0x1e>
 8004c28:	071a      	lsls	r2, r3, #28
 8004c2a:	d50b      	bpl.n	8004c44 <__srefill_r+0x54>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7ff fe08 	bl	8004844 <_fflush_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1ea      	bne.n	8004c0e <__srefill_r+0x1e>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	60a0      	str	r0, [r4, #8]
 8004c3c:	f023 0308 	bic.w	r3, r3, #8
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	61a0      	str	r0, [r4, #24]
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f043 0304 	orr.w	r3, r3, #4
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b91b      	cbnz	r3, 8004c58 <__srefill_r+0x68>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7ff fe6f 	bl	8004936 <__smakebuf_r>
 8004c58:	89a6      	ldrh	r6, [r4, #12]
 8004c5a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004c5e:	07b3      	lsls	r3, r6, #30
 8004c60:	d00f      	beq.n	8004c82 <__srefill_r+0x92>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <__srefill_r+0xe4>)
 8004c66:	491c      	ldr	r1, [pc, #112]	; (8004cd8 <__srefill_r+0xe8>)
 8004c68:	481c      	ldr	r0, [pc, #112]	; (8004cdc <__srefill_r+0xec>)
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	f006 0609 	and.w	r6, r6, #9
 8004c70:	f7fe ffca 	bl	8003c08 <_fwalk_sglue>
 8004c74:	2e09      	cmp	r6, #9
 8004c76:	81a7      	strh	r7, [r4, #12]
 8004c78:	d103      	bne.n	8004c82 <__srefill_r+0x92>
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f7ff fd5b 	bl	8004738 <__sflush_r>
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c86:	6963      	ldr	r3, [r4, #20]
 8004c88:	6a21      	ldr	r1, [r4, #32]
 8004c8a:	6022      	str	r2, [r4, #0]
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b0      	blx	r6
 8004c90:	2800      	cmp	r0, #0
 8004c92:	6060      	str	r0, [r4, #4]
 8004c94:	dc1c      	bgt.n	8004cd0 <__srefill_r+0xe0>
 8004c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9a:	bf17      	itett	ne
 8004c9c:	2200      	movne	r2, #0
 8004c9e:	f043 0320 	orreq.w	r3, r3, #32
 8004ca2:	6062      	strne	r2, [r4, #4]
 8004ca4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004ca8:	e7bc      	b.n	8004c24 <__srefill_r+0x34>
 8004caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d0cd      	beq.n	8004c4c <__srefill_r+0x5c>
 8004cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d002      	beq.n	8004cbe <__srefill_r+0xce>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7ff f969 	bl	8003f90 <_free_r>
 8004cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cc0:	6063      	str	r3, [r4, #4]
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	6360      	str	r0, [r4, #52]	; 0x34
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0c0      	beq.n	8004c4c <__srefill_r+0x5c>
 8004cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e7fc      	b.n	8004cce <__srefill_r+0xde>
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	08004bd5 	.word	0x08004bd5
 8004cdc:	20000018 	.word	0x20000018

08004ce0 <_init>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr

08004cec <_fini>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr
