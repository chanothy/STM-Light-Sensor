
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d30  08006d30  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200000a8  08006de0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006de0  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164e6  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003373  00000000  00000000  00036601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00039978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3c  00000000  00000000  0003ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024188  00000000  00000000  0003bc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018351  00000000  00000000  0005fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36f5  00000000  00000000  0007813d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005df4  00000000  00000000  0014b834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00151628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069d8 	.word	0x080069d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080069d8 	.word	0x080069d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f002 ff5b 	bl	8003458 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f002 fe71 	bl	8003292 <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f005 f904 	bl	80057c8 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f005 f8fc 	bl	80057c8 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f005 f8f9 	bl	80057c8 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	080069f0 	.word	0x080069f0
 80005ec:	08006a00 	.word	0x08006a00
 80005f0:	08006a10 	.word	0x08006a10

080005f4 <help_command>:
	{"tsl237",tsl237_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f005 f8e3 	bl	80057c8 <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f005 f8e0 	bl	80057c8 <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f005 f8dd 	bl	80057c8 <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f005 f8da 	bl	80057c8 <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f005 f8d7 	bl	80057c8 <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08006a40 	.word	0x08006a40
 8000628:	08006a58 	.word	0x08006a58
 800062c:	08006a60 	.word	0x08006a60
 8000630:	08006a68 	.word	0x08006a68
 8000634:	08006a70 	.word	0x08006a70

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lof_command+0x1c>)
 8000646:	f001 fb43 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lon_command+0x1c>)
 8000666:	f001 fb33 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <test_command+0x40>)
 8000682:	f005 f8a1 	bl	80057c8 <iprintf>
	if (arguments) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <test_command+0x44>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f005 f9ae 	bl	80059f0 <strtok>
 8000694:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000696:	e008      	b.n	80006aa <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <test_command+0x48>)
 800069c:	f005 f894 	bl	80057c8 <iprintf>
			pt = strtok (NULL, ",");
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <test_command+0x44>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f005 f9a4 	bl	80059f0 <strtok>
 80006a8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <test_command+0x20>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08006a78 	.word	0x08006a78
 80006bc:	08006a88 	.word	0x08006a88
 80006c0:	08006a8c 	.word	0x08006a8c

080006c4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01f      	beq.n	8000712 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006d2:	492a      	ldr	r1, [pc, #168]	; (800077c <ts_command+0xb8>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f005 f98b 	bl	80059f0 <strtok>
 80006da:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e0:	e014      	b.n	800070c <ts_command+0x48>
			if (pt != NULL) {
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <ts_command+0x42>
				t[i] = atoi(pt);
 80006e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ea:	f004 ff12 	bl	8005512 <atoi>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	3330      	adds	r3, #48	; 0x30
 80006f6:	443b      	add	r3, r7
 80006f8:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <ts_command+0xb8>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f005 f976 	bl	80059f0 <strtok>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	3301      	adds	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	2b02      	cmp	r3, #2
 8000710:	dde7      	ble.n	80006e2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ts_command+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db26      	blt.n	800076c <ts_command+0xa8>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b17      	cmp	r3, #23
 8000722:	dc23      	bgt.n	800076c <ts_command+0xa8>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <ts_command+0xa8>
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db1d      	blt.n	800076c <ts_command+0xa8>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b3b      	cmp	r3, #59	; 0x3b
 8000734:	dc1a      	bgt.n	800076c <ts_command+0xa8>
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d017      	beq.n	800076c <ts_command+0xa8>
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	db14      	blt.n	800076c <ts_command+0xa8>
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	dc11      	bgt.n	800076c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ts_command+0xbc>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <ts_command+0xc0>)
 8000766:	f002 fcf7 	bl	8003158 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800076a:	e003      	b.n	8000774 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <ts_command+0xc4>)
 800076e:	f005 f82b 	bl	80057c8 <iprintf>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08006a88 	.word	0x08006a88
 8000780:	200000c4 	.word	0x200000c4
 8000784:	200000d0 	.word	0x200000d0
 8000788:	08006a94 	.word	0x08006a94

0800078c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800079a:	4924      	ldr	r1, [pc, #144]	; (800082c <ds_command+0xa0>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f005 f927 	bl	80059f0 <strtok>
 80007a2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e014      	b.n	80007d4 <ds_command+0x48>
			if (pt != NULL) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <ds_command+0x42>
				d[i] = atoi(pt);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f004 feae 	bl	8005512 <atoi>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007c4:	4919      	ldr	r1, [pc, #100]	; (800082c <ds_command+0xa0>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f005 f912 	bl	80059f0 <strtok>
 80007cc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dde7      	ble.n	80007aa <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01d      	beq.n	800081c <ds_command+0x90>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd1a      	ble.n	800081c <ds_command+0x90>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	dc17      	bgt.n	800081c <ds_command+0x90>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d014      	beq.n	800081c <ds_command+0x90>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d011      	beq.n	800081c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ds_command+0xa4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <ds_command+0xa8>)
 8000816:	f002 fd98 	bl	800334a <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800081a:	e003      	b.n	8000824 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <ds_command+0xac>)
 800081e:	f004 ffd3 	bl	80057c8 <iprintf>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08006a88 	.word	0x08006a88
 8000830:	200000c4 	.word	0x200000c4
 8000834:	200000d0 	.word	0x200000d0
 8000838:	08006a94 	.word	0x08006a94

0800083c <tsl237_command>:

void __attribute__((weak)) tsl237_command(char *arguments) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <get_commands+0xc8>)
 800085e:	f000 fbb5 	bl	8000fcc <dequeue>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 8000866:	e03a      	b.n	80008de <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d027      	beq.n	80008be <get_commands+0x6e>
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b0d      	cmp	r3, #13
 8000872:	d024      	beq.n	80008be <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	2b7f      	cmp	r3, #127	; 0x7f
 8000878:	d10c      	bne.n	8000894 <get_commands+0x44>
        if (counter > 0) {
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <get_commands+0xcc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d021      	beq.n	80008c6 <get_commands+0x76>
            printf("\b \b");
 8000882:	4827      	ldr	r0, [pc, #156]	; (8000920 <get_commands+0xd0>)
 8000884:	f004 ffa0 	bl	80057c8 <iprintf>
            counter--;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <get_commands+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <get_commands+0xcc>)
 8000890:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 8000892:	e018      	b.n	80008c6 <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4618      	mov	r0, r3
 8000898:	f004 ffa8 	bl	80057ec <putchar>
        command_buf[counter++]=ch;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <get_commands+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	491e      	ldr	r1, [pc, #120]	; (800091c <get_commands+0xcc>)
 80008a4:	600a      	str	r2, [r1, #0]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <get_commands+0xcc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b1d      	cmp	r3, #29
 80008b4:	d907      	bls.n	80008c6 <get_commands+0x76>
          mode=COMPLETE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <get_commands+0xd4>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
          break;
 80008bc:	e012      	b.n	80008e4 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <get_commands+0xd4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
      break;
 80008c4:	e00e      	b.n	80008e4 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80008c6:	bf00      	nop
    }
    mask = disable();
 80008c8:	f000 f8b8 	bl	8000a3c <disable>
 80008cc:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <get_commands+0xc8>)
 80008d0:	f000 fb7c 	bl	8000fcc <dequeue>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80008d8:	68b8      	ldr	r0, [r7, #8]
 80008da:	f000 f8c2 	bl	8000a62 <restore>
  while (ch!=0) {
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1c1      	bne.n	8000868 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <get_commands+0xd4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d110      	bne.n	800090e <get_commands+0xbe>
    command_buf[counter] = 0;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <get_commands+0xcc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <get_commands+0xd8>)
 80008fa:	f004 ff65 	bl	80057c8 <iprintf>
    counter = 0;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <get_commands+0xcc>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <get_commands+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
    return(1);
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <get_commands+0xc0>
  }
  else {
    return(0);
 800090e:	2300      	movs	r3, #0
  }
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200001c8 	.word	0x200001c8
 800091c:	200000c8 	.word	0x200000c8
 8000920:	08006a9c 	.word	0x08006a9c
 8000924:	200000cc 	.word	0x200000cc
 8000928:	08006aa0 	.word	0x08006aa0

0800092c <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <parse_command+0x1e>
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <parse_command+0x1e>
     (!command) ||
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <parse_command+0x24>
     (!args)) {
    return (-1);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e01e      	b.n	800098e <parse_command+0x62>
  }
  *command = line;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	601a      	str	r2, [r3, #0]
  p = line;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 800095a:	e00b      	b.n	8000974 <parse_command+0x48>
    if (!*p) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d104      	bne.n	800096e <parse_command+0x42>
      *args = '\0';
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
      return(0);
 800096a:	2300      	movs	r3, #0
 800096c:	e00f      	b.n	800098e <parse_command+0x62>
    }
    p++;
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b2c      	cmp	r3, #44	; 0x2c
 800097a:	d1ef      	bne.n	800095c <parse_command+0x30>
  }
  *p++ = '\0';
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	617a      	str	r2, [r7, #20]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	601a      	str	r2, [r3, #0]
  return (0);
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <execute_command+0x98>)
 80009a6:	617b      	str	r3, [r7, #20]
  int success = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]

  if (!line) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <execute_command+0x1c>
    return (-1);
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e038      	b.n	8000a2a <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 80009b8:	f107 0208 	add.w	r2, r7, #8
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb2 	bl	800092c <parse_command>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ce:	d121      	bne.n	8000a14 <execute_command+0x78>
    printf("Error with parse command\n\r");
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <execute_command+0x9c>)
 80009d2:	f004 fef9 	bl	80057c8 <iprintf>
    return (-1);
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e026      	b.n	8000a2a <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fbf3 	bl	80001d0 <strcmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10e      	bne.n	8000a0e <execute_command+0x72>
      if (!p->cmd_function) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <execute_command+0x62>
        return (-1);
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	e015      	b.n	8000a2a <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4610      	mov	r0, r2
 8000a06:	4798      	blx	r3
      success = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
      break;
 8000a0c:	e006      	b.n	8000a1c <execute_command+0x80>
    }
    p++;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3308      	adds	r3, #8
 8000a12:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1df      	bne.n	80009dc <execute_command+0x40>
  }
  if (success) {
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <execute_command+0x8a>
    return (0);
 8000a22:	2300      	movs	r3, #0
 8000a24:	e001      	b.n	8000a2a <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08006aa4 	.word	0x08006aa4

08000a3c <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a46:	f3ef 8310 	mrs	r3, PRIMASK
 8000a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8000a4c:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000a4e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <restore>:

void restore(uint32_t priority_mask) {
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f383 8810 	msr	PRIMASK, r3
}
 8000a74:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b089      	sub	sp, #36	; 0x24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	e853 3f00 	ldrex	r3, [r3]
 8000a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	61ba      	str	r2, [r7, #24]
 8000aa4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aa6:	6979      	ldr	r1, [r7, #20]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	e841 2300 	strex	r3, r2, [r1]
 8000aae:	613b      	str	r3, [r7, #16]
   return(result);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1e9      	bne.n	8000a8a <LL_USART_EnableIT_RXNE+0x8>
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000ac8:	4828      	ldr	r0, [pc, #160]	; (8000b6c <main+0xa8>)
 8000aca:	f000 fa32 	bl	8000f32 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 fd6c 	bl	80015aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f85f 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 f9dd 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ada:	f000 f9ab 	bl	8000e34 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ade:	f000 f8bd 	bl	8000c5c <MX_RTC_Init>
  MX_TIM2_Init();
 8000ae2:	f000 f94d 	bl	8000d80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <main+0xac>)
 8000ae8:	f000 fa9a 	bl	8001020 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <main+0xb0>)
 8000aee:	f7ff ffc8 	bl	8000a82 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000af2:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0xb4>)
 8000af4:	f004 fe68 	bl	80057c8 <iprintf>


  prompt();
 8000af8:	f7ff fd48 	bl	800058c <prompt>
  while (1)
  {
	  if (get_commands(command)) {
 8000afc:	481f      	ldr	r0, [pc, #124]	; (8000b7c <main+0xb8>)
 8000afe:	f7ff fea7 	bl	8000850 <get_commands>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d01e      	beq.n	8000b46 <main+0x82>
		  command_length = 16;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <main+0xbc>)
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <main+0xbc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b16:	d011      	beq.n	8000b3c <main+0x78>
			  if(execute_command(command)) {
 8000b18:	4818      	ldr	r0, [pc, #96]	; (8000b7c <main+0xb8>)
 8000b1a:	f7ff ff3f 	bl	800099c <execute_command>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <main+0x6c>
				  printf("NOK\n\r");
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <main+0xc0>)
 8000b26:	f004 fe4f 	bl	80057c8 <iprintf>
				  prompt();
 8000b2a:	f7ff fd2f 	bl	800058c <prompt>
 8000b2e:	e00a      	b.n	8000b46 <main+0x82>
			  }
			  else {
				  printf("OK\n\r");
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <main+0xc4>)
 8000b32:	f004 fe49 	bl	80057c8 <iprintf>
				  prompt();
 8000b36:	f7ff fd29 	bl	800058c <prompt>
 8000b3a:	e004      	b.n	8000b46 <main+0x82>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <main+0xc0>)
 8000b3e:	f004 fe43 	bl	80057c8 <iprintf>
			  prompt();
 8000b42:	f7ff fd23 	bl	800058c <prompt>
		  }

	  }

	  if (alarm) {
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <main+0xc8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0d6      	beq.n	8000afc <main+0x38>
		  printf("alarm_triggered\n\r");
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <main+0xcc>)
 8000b50:	f004 fe3a 	bl	80057c8 <iprintf>
		  lon_command();
 8000b54:	f7ff fd80 	bl	8000658 <lon_command>
		  HAL_Delay(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f000 fd9b 	bl	8001694 <HAL_Delay>
		  lof_command();
 8000b5e:	f7ff fd6b 	bl	8000638 <lof_command>
		  alarm = 0;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <main+0xc8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	  if (get_commands(command)) {
 8000b68:	e7c8      	b.n	8000afc <main+0x38>
 8000b6a:	bf00      	nop
 8000b6c:	200001c8 	.word	0x200001c8
 8000b70:	20000140 	.word	0x20000140
 8000b74:	40004400 	.word	0x40004400
 8000b78:	08006ac0 	.word	0x08006ac0
 8000b7c:	200001f0 	.word	0x200001f0
 8000b80:	20000200 	.word	0x20000200
 8000b84:	08006ad8 	.word	0x08006ad8
 8000b88:	08006ae0 	.word	0x08006ae0
 8000b8c:	20000204 	.word	0x20000204
 8000b90:	08006ae8 	.word	0x08006ae8

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b096      	sub	sp, #88	; 0x58
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2244      	movs	r2, #68	; 0x44
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 ff1b 	bl	80059de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bb6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bba:	f001 f8bf 	bl	8001d3c <HAL_PWREx_ControlVoltageScaling>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bc4:	f000 f9b0 	bl	8000f28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bc8:	f001 f89a 	bl	8001d00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <SystemClock_Config+0xc4>)
 8000bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <SystemClock_Config+0xc4>)
 8000bd4:	f023 0318 	bic.w	r3, r3, #24
 8000bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000bdc:	231c      	movs	r3, #28
 8000bde:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c00:	2310      	movs	r3, #16
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 f8e7 	bl	8001de8 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c20:	f000 f982 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fce7 	bl	8002610 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c48:	f000 f96e 	bl	8000f28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c4c:	f002 f8fa 	bl	8002e44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c50:	bf00      	nop
 8000c52:	3758      	adds	r7, #88	; 0x58
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b092      	sub	sp, #72	; 0x48
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	222c      	movs	r2, #44	; 0x2c
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 feae 	bl	80059de <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <MX_RTC_Init+0x118>)
 8000c84:	4a3c      	ldr	r2, [pc, #240]	; (8000d78 <MX_RTC_Init+0x11c>)
 8000c86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <MX_RTC_Init+0x118>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c8e:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <MX_RTC_Init+0x118>)
 8000c90:	227f      	movs	r2, #127	; 0x7f
 8000c92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c94:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <MX_RTC_Init+0x118>)
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <MX_RTC_Init+0x118>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MX_RTC_Init+0x118>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_RTC_Init+0x118>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_RTC_Init+0x118>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <MX_RTC_Init+0x118>)
 8000cb4:	f002 f9c8 	bl	8003048 <HAL_RTC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000cbe:	f000 f933 	bl	8000f28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4823      	ldr	r0, [pc, #140]	; (8000d74 <MX_RTC_Init+0x118>)
 8000ce6:	f002 fa37 	bl	8003158 <HAL_RTC_SetTime>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000cf0:	f000 f91a 	bl	8000f28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <MX_RTC_Init+0x118>)
 8000d16:	f002 fb18 	bl	800334a <HAL_RTC_SetDate>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000d20:	f000 f902 	bl	8000f28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000d2c:	2330      	movs	r3, #48	; 0x30
 8000d2e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_RTC_Init+0x120>)
 8000d3e:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_RTC_Init+0x118>)
 8000d5c:	f002 fbca 	bl	80034f4 <HAL_RTC_SetAlarm_IT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000d66:	f000 f8df 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3748      	adds	r7, #72	; 0x48
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000d0 	.word	0x200000d0
 8000d78:	40002800 	.word	0x40002800
 8000d7c:	80808000 	.word	0x80808000

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000dc8:	f002 fe4e 	bl	8003a68 <HAL_TIM_IC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dd2:	f000 f8a9 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000de6:	f003 f9f7 	bl	80041d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000df0:	f000 f89a 	bl	8000f28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000e0c:	f002 ffb2 	bl	8003d74 <HAL_TIM_IC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e16:	f000 f887 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000e1c:	f002 fdd0 	bl	80039c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000e20:	2100      	movs	r1, #0
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_TIM2_Init+0xb0>)
 8000e24:	f002 fe78 	bl	8003b18 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000f4 	.word	0x200000f4

08000e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART2_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e78:	f003 fa14 	bl	80042a4 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 f851 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000140 	.word	0x20000140
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_GPIO_Init+0x8c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0x90>)
 8000ef8:	f000 feea 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000efc:	2308      	movs	r3, #8
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_GPIO_Init+0x90>)
 8000f14:	f000 fd72 	bl	80019fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>

08000f32 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8000f3a:	f7ff fd7f 	bl	8000a3c <disable>
 8000f3e:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  restore(mask);
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff fd88 	bl	8000a62 <restore>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000f6a:	f7ff fd67 	bl	8000a3c <disable>
 8000f6e:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	425a      	negs	r2, r3
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	f002 021f 	and.w	r2, r2, #31
 8000f80:	bf58      	it	pl
 8000f82:	4253      	negpl	r3, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6852      	ldr	r2, [r2, #4]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d014      	beq.n	8000fb6 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	425a      	negs	r2, r3
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	f002 021f 	and.w	r2, r2, #31
 8000fa8:	bf58      	it	pl
 8000faa:	4253      	negpl	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e002      	b.n	8000fbc <enqueue+0x62>
  }
  else {
    return_val=-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f7ff fd50 	bl	8000a62 <restore>
  return (return_val);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000fd8:	f7ff fd30 	bl	8000a3c <disable>
 8000fdc:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d011      	beq.n	800100e <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	7a1b      	ldrb	r3, [r3, #8]
 8000ff4:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	425a      	negs	r2, r3
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	f002 021f 	and.w	r2, r2, #31
 8001006:	bf58      	it	pl
 8001008:	4253      	negpl	r3, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f7ff fd27 	bl	8000a62 <restore>
  return(return_val);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <RetargetInit+0x28>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <RetargetInit+0x2c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	2300      	movs	r3, #0
 8001036:	2202      	movs	r2, #2
 8001038:	2100      	movs	r1, #0
 800103a:	f004 fbdf 	bl	80057fc <setvbuf>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000208 	.word	0x20000208
 800104c:	200000a4 	.word	0x200000a4

08001050 <_isatty>:

int _isatty(int fd) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db04      	blt.n	8001068 <_isatty+0x18>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	dc01      	bgt.n	8001068 <_isatty+0x18>
    return 1;
 8001064:	2301      	movs	r3, #1
 8001066:	e005      	b.n	8001074 <_isatty+0x24>

  errno = EBADF;
 8001068:	f004 fd64 	bl	8005b34 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	2209      	movs	r2, #9
 8001070:	601a      	str	r2, [r3, #0]
  return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_write>:

int _write(int fd, char* ptr, int len) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d002      	beq.n	8001094 <_write+0x18>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d111      	bne.n	80010b8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <_write+0x54>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b29a      	uxth	r2, r3
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	f003 f94d 	bl	8004340 <HAL_UART_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <_write+0x38>
      return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	e008      	b.n	80010c6 <_write+0x4a>
    else
      return EIO;
 80010b4:	2305      	movs	r3, #5
 80010b6:	e006      	b.n	80010c6 <_write+0x4a>
  }
  errno = EBADF;
 80010b8:	f004 fd3c 	bl	8005b34 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	2209      	movs	r2, #9
 80010c0:	601a      	str	r2, [r3, #0]
  return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000208 	.word	0x20000208

080010d4 <_close>:

int _close(int fd) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db04      	blt.n	80010ec <_close+0x18>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	dc01      	bgt.n	80010ec <_close+0x18>
    return 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e006      	b.n	80010fa <_close+0x26>

  errno = EBADF;
 80010ec:	f004 fd22 	bl	8005b34 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2209      	movs	r2, #9
 80010f4:	601a      	str	r2, [r3, #0]
  return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800110e:	f004 fd11 	bl	8005b34 <__errno>
 8001112:	4603      	mov	r3, r0
 8001114:	2209      	movs	r2, #9
 8001116:	601a      	str	r2, [r3, #0]
  return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_read>:

int _read(int fd, char* ptr, int len) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d110      	bne.n	8001158 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <_read+0x4c>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2201      	movs	r2, #1
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	f003 f987 	bl	8004454 <HAL_UART_Receive>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <_read+0x30>
      return 1;
 8001150:	2301      	movs	r3, #1
 8001152:	e008      	b.n	8001166 <_read+0x42>
    else
      return EIO;
 8001154:	2305      	movs	r3, #5
 8001156:	e006      	b.n	8001166 <_read+0x42>
  }
  errno = EBADF;
 8001158:	f004 fcec 	bl	8005b34 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	2209      	movs	r2, #9
 8001160:	601a      	str	r2, [r3, #0]
  return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000208 	.word	0x20000208

08001174 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db08      	blt.n	8001196 <_fstat+0x22>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	dc05      	bgt.n	8001196 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	605a      	str	r2, [r3, #4]
    return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e005      	b.n	80011a2 <_fstat+0x2e>
  }

  errno = EBADF;
 8001196:	f004 fccd 	bl	8005b34 <__errno>
 800119a:	4603      	mov	r3, r0
 800119c:	2209      	movs	r2, #9
 800119e:	601a      	str	r2, [r3, #0]
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_MspInit+0x44>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_MspInit+0x44>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6613      	str	r3, [r2, #96]	; 0x60
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x44>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x44>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b098      	sub	sp, #96	; 0x60
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2254      	movs	r2, #84	; 0x54
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fbea 	bl	80059de <memset>
  if(hrtc->Instance==RTC)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_RTC_MspInit+0x68>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d11f      	bne.n	8001254 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001218:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800121a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fc17 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001230:	f7ff fe7a 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_RTC_MspInit+0x6c>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_RTC_MspInit+0x6c>)
 800123c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2029      	movs	r0, #41	; 0x29
 800124a:	f000 fb22 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800124e:	2029      	movs	r0, #41	; 0x29
 8001250:	f000 fb3b 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3760      	adds	r7, #96	; 0x60
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40002800 	.word	0x40002800
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001284:	d128      	bne.n	80012d8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_TIM_IC_MspInit+0x7c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012b6:	2320      	movs	r3, #32
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012c6:	2301      	movs	r3, #1
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fb92 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b09e      	sub	sp, #120	; 0x78
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2254      	movs	r2, #84	; 0x54
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f004 fb6a 	bl	80059de <memset>
  if(huart->Instance==USART2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <HAL_UART_MspInit+0xdc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d150      	bne.n	80013b6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fb99 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800132c:	f7ff fdfc 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 8001336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133a:	6593      	str	r3, [r2, #88]	; 0x58
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_UART_MspInit+0xe0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001360:	2304      	movs	r3, #4
 8001362:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001370:	2307      	movs	r3, #7
 8001372:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f000 fb3d 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001386:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001394:	2303      	movs	r3, #3
 8001396:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 fb2b 	bl	80019fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2026      	movs	r0, #38	; 0x26
 80013ac:	f000 fa71 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b0:	2026      	movs	r0, #38	; 0x26
 80013b2:	f000 fa8a 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3778      	adds	r7, #120	; 0x78
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f91e 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <USART2_IRQHandler+0x40>)
 8001422:	f003 f8e1 	bl	80045e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001426:	f004 f9c7 	bl	80057b8 <getchar>
 800142a:	4603      	mov	r3, r0
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <USART2_IRQHandler+0x44>)
 8001430:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <USART2_IRQHandler+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <USART2_IRQHandler+0x48>)
 800143a:	f7ff fd8e 	bl	8000f5a <enqueue>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <USART2_IRQHandler+0x48>)
 8001446:	f7ff fdc1 	bl	8000fcc <dequeue>
      enqueue(&buf,ch);
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <USART2_IRQHandler+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <USART2_IRQHandler+0x48>)
 8001452:	f7ff fd82 	bl	8000f5a <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000140 	.word	0x20000140
 8001460:	2000020c 	.word	0x2000020c
 8001464:	200001c8 	.word	0x200001c8

08001468 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <RTC_Alarm_IRQHandler+0x14>)
 800146e:	f002 f97d 	bl	800376c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 8001472:	4b03      	ldr	r3, [pc, #12]	; (8001480 <RTC_Alarm_IRQHandler+0x18>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000d0 	.word	0x200000d0
 8001480:	20000204 	.word	0x20000204

08001484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_kill>:

int _kill(int pid, int sig)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800149e:	f004 fb49 	bl	8005b34 <__errno>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2216      	movs	r2, #22
 80014a6:	601a      	str	r2, [r3, #0]
  return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_exit>:

void _exit (int status)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffe7 	bl	8001494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c6:	e7fe      	b.n	80014c6 <_exit+0x12>

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f004 fb1c 	bl	8005b34 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20010000 	.word	0x20010000
 8001528:	00000400 	.word	0x00000400
 800152c:	20000210 	.word	0x20000210
 8001530:	20000368 	.word	0x20000368

08001534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <Reset_Handler>:
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopForever+0x2>
 800155c:	f7ff ffea 	bl	8001534 <SystemInit>
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <LoopForever+0x6>)
 8001562:	490d      	ldr	r1, [pc, #52]	; (8001598 <LoopForever+0xa>)
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <LoopForever+0xe>)
 8001566:	2300      	movs	r3, #0
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:
 800156a:	58d4      	ldr	r4, [r2, r3]
 800156c:	50c4      	str	r4, [r0, r3]
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:
 8001570:	18c4      	adds	r4, r0, r3
 8001572:	428c      	cmp	r4, r1
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopForever+0x12>)
 8001578:	4c0a      	ldr	r4, [pc, #40]	; (80015a4 <LoopForever+0x16>)
 800157a:	2300      	movs	r3, #0
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:
 8001582:	42a2      	cmp	r2, r4
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>
 8001586:	f004 fadb 	bl	8005b40 <__libc_init_array>
 800158a:	f7ff fa9b 	bl	8000ac4 <main>

0800158e <LoopForever>:
 800158e:	e7fe      	b.n	800158e <LoopForever>
 8001590:	20010000 	.word	0x20010000
 8001594:	20000000 	.word	0x20000000
 8001598:	200000a8 	.word	0x200000a8
 800159c:	08006d38 	.word	0x08006d38
 80015a0:	200000a8 	.word	0x200000a8
 80015a4:	20000364 	.word	0x20000364

080015a8 <ADC1_IRQHandler>:
 80015a8:	e7fe      	b.n	80015a8 <ADC1_IRQHandler>

080015aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f961 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f80e 	bl	80015dc <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e001      	b.n	80015d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015cc:	f7ff fdee 	bl	80011ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_InitTick+0x70>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f96d 	bl	80018e6 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d809      	bhi.n	800162c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f937 	bl	8001892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_InitTick+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e007      	b.n	800163c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e004      	b.n	800163c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e001      	b.n	800163c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000048 	.word	0x20000048
 800164c:	20000040 	.word	0x20000040
 8001650:	20000044 	.word	0x20000044

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000048 	.word	0x20000048
 8001678:	20000214 	.word	0x20000214

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000214 	.word	0x20000214

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000048 	.word	0x20000048

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d008      	beq.n	8001928 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2204      	movs	r2, #4
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e022      	b.n	800196e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020e 	bic.w	r2, r2, #14
 8001936:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f003 021c 	and.w	r2, r3, #28
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d005      	beq.n	800199e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2204      	movs	r2, #4
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e029      	b.n	80019f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 020e 	bic.w	r2, r2, #14
 80019ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 021c 	and.w	r2, r3, #28
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
    }
  }
  return status;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e148      	b.n	8001c9e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 813a 	beq.w	8001c98 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d005      	beq.n	8001a3c <HAL_GPIO_Init+0x40>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d130      	bne.n	8001a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a72:	2201      	movs	r2, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 0201 	and.w	r2, r3, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d017      	beq.n	8001ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d123      	bne.n	8001b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8094 	beq.w	8001c98 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x2c0>)
 8001b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x2c0>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x2c0>)
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b88:	4a4d      	ldr	r2, [pc, #308]	; (8001cc0 <HAL_GPIO_Init+0x2c4>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1d4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1d0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <HAL_GPIO_Init+0x2cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1cc>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1d6>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1d6>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1d6>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be2:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x2c4>)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c3e:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f aeaf 	bne.w	8001a0c <HAL_GPIO_Init+0x10>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40007000 	.word	0x40007000

08001d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d130      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d038      	beq.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2232      	movs	r2, #50	; 0x32
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9b      	lsrs	r3, r3, #18
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d80:	e002      	b.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d94:	d102      	bne.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d110      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e00f      	b.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d007      	beq.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	20000040 	.word	0x20000040
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f000 bc02 	b.w	8002600 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e06:	4b94      	ldr	r3, [pc, #592]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80e4 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4c>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	f040 808b 	bne.w	8001f42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 8087 	bne.w	8001f42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e34:	4b88      	ldr	r3, [pc, #544]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x64>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e3d9      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_RCC_OscConfig+0x7e>
 8001e5c:	4b7e      	ldr	r3, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e64:	e005      	b.n	8001e72 <HAL_RCC_OscConfig+0x8a>
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d223      	bcs.n	8001ebe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fd8c 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e3ba      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	496d      	ldr	r1, [pc, #436]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea8:	4b6b      	ldr	r3, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4968      	ldr	r1, [pc, #416]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e025      	b.n	8001f0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebe:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4960      	ldr	r1, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	495b      	ldr	r1, [pc, #364]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fd4c 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e37a      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0a:	f000 fc81 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b51      	ldr	r3, [pc, #324]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4950      	ldr	r1, [pc, #320]	; (800205c <HAL_RCC_OscConfig+0x274>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_RCC_OscConfig+0x278>)
 8001f28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fb54 	bl	80015dc <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d052      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	e35e      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d032      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f56:	f7ff fb91 	bl	800167c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fb8d 	bl	800167c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e347      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4930      	ldr	r1, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	492b      	ldr	r1, [pc, #172]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
 8001fae:	e01a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fb5e 	bl	800167c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fb5a 	bl	800167c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e314      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1dc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d073      	beq.n	80020da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x21c>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d10e      	bne.n	800201c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10b      	bne.n	800201c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d063      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d15f      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e2f1      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x24c>
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e025      	b.n	8002080 <HAL_RCC_OscConfig+0x298>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d114      	bne.n	8002068 <HAL_RCC_OscConfig+0x280>
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a02      	ldr	r2, [pc, #8]	; (8002058 <HAL_RCC_OscConfig+0x270>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0x298>
 8002058:	40021000 	.word	0x40021000
 800205c:	08006afc 	.word	0x08006afc
 8002060:	20000040 	.word	0x20000040
 8002064:	20000044 	.word	0x20000044
 8002068:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a9f      	ldr	r2, [pc, #636]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a9c      	ldr	r2, [pc, #624]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff faf8 	bl	800167c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff faf4 	bl	800167c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e2ae      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x2a8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fae4 	bl	800167c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fae0 	bl	800167c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e29a      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d0>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d060      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x310>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d116      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	4b7c      	ldr	r3, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x328>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e277      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4973      	ldr	r1, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	e040      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d023      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212e:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff fa9f 	bl	800167c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff fa9b 	bl	800167c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e255      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b62      	ldr	r3, [pc, #392]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	495f      	ldr	r1, [pc, #380]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e018      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800217c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff fa7b 	bl	800167c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fa77 	bl	800167c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e231      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03c      	beq.n	800222e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fa56 	bl	800167c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fa52 	bl	800167c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e20c      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80021e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3ec>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fa39 	bl	800167c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220e:	f7ff fa35 	bl	800167c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1ef      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80a6 	beq.w	8002388 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x508>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_RCC_OscConfig+0x508>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x508>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7ff f9fc 	bl	800167c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7ff f9f8 	bl	800167c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1b2      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x508>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d8>
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	e029      	b.n	8002314 <HAL_RCC_OscConfig+0x52c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d115      	bne.n	80022f4 <HAL_RCC_OscConfig+0x50c>
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_RCC_OscConfig+0x504>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x52c>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	4b9a      	ldr	r3, [pc, #616]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a99      	ldr	r2, [pc, #612]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	4b96      	ldr	r3, [pc, #600]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a95      	ldr	r2, [pc, #596]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7ff f9ae 	bl	800167c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7ff f9aa 	bl	800167c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e162      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ed      	beq.n	8002324 <HAL_RCC_OscConfig+0x53c>
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7ff f997 	bl	800167c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff f993 	bl	800167c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e14b      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4b7d      	ldr	r3, [pc, #500]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ed      	bne.n	8002352 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b78      	ldr	r3, [pc, #480]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a77      	ldr	r2, [pc, #476]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03c      	beq.n	800240e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800239c:	4b70      	ldr	r3, [pc, #448]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	4a6f      	ldr	r2, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff f966 	bl	800167c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b4:	f7ff f962 	bl	800167c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e11c      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c6:	4b66      	ldr	r3, [pc, #408]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80023c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x5cc>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80023d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023dc:	4a60      	ldr	r2, [pc, #384]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7ff f949 	bl	800167c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ee:	f7ff f945 	bl	800167c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0ff      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80f3 	beq.w	80025fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2b02      	cmp	r3, #2
 800241e:	f040 80c9 	bne.w	80025b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0203 	and.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	429a      	cmp	r2, r3
 8002434:	d12c      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	3b01      	subs	r3, #1
 8002442:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d123      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d11b      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d113      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d109      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d06b      	beq.n	8002568 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d062      	beq.n	800255c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002496:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0ac      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024b2:	f7ff f8e3 	bl	800167c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f8df 	bl	800167c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e099      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x77c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024f2:	0212      	lsls	r2, r2, #8
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0552      	lsls	r2, r2, #21
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002506:	0852      	lsrs	r2, r2, #1
 8002508:	3a01      	subs	r2, #1
 800250a:	0652      	lsls	r2, r2, #25
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002512:	06d2      	lsls	r2, r2, #27
 8002514:	430a      	orrs	r2, r1
 8002516:	4912      	ldr	r1, [pc, #72]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002534:	f7ff f8a2 	bl	800167c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f89e 	bl	800167c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e058      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCC_OscConfig+0x778>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800255a:	e050      	b.n	80025fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e04f      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
 8002560:	40021000 	.word	0x40021000
 8002564:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d144      	bne.n	80025fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a23      	ldr	r2, [pc, #140]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800258c:	f7ff f876 	bl	800167c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f872 	bl	800167c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e02c      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x7ac>
 80025b2:	e024      	b.n	80025fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d01f      	beq.n	80025fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff f859 	bl	800167c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7ff f855 	bl	800167c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e00f      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4905      	ldr	r1, [pc, #20]	; (8002608 <HAL_RCC_OscConfig+0x820>)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e001      	b.n	80025fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	feeefffc 	.word	0xfeeefffc

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0e7      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b75      	ldr	r3, [pc, #468]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d910      	bls.n	8002654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4970      	ldr	r1, [pc, #448]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cf      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d010      	beq.n	8002682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	429a      	cmp	r2, r3
 800266e:	d908      	bls.n	8002682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4960      	ldr	r1, [pc, #384]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04c      	beq.n	8002728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0a6      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e09a      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c6:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e08e      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e086      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4943      	ldr	r1, [pc, #268]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe ffc0 	bl	800167c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe ffbc 	bl	800167c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e06e      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002740:	429a      	cmp	r2, r3
 8002742:	d208      	bcs.n	8002756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	492b      	ldr	r1, [pc, #172]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d210      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0207 	bic.w	r2, r3, #7
 800276c:	4923      	ldr	r1, [pc, #140]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e036      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4918      	ldr	r1, [pc, #96]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c4:	f000 f824 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1f4>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80027e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1fc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fef7 	bl	80015dc <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40022000 	.word	0x40022000
 8002800:	40021000 	.word	0x40021000
 8002804:	08006afc 	.word	0x08006afc
 8002808:	20000040 	.word	0x20000040
 800280c:	20000044 	.word	0x20000044

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x34>
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d121      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d11e      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e005      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800286c:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_RCC_GetSysClockFreq+0x10c>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10d      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d102      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_GetSysClockFreq+0x110>)
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e004      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d101      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCC_GetSysClockFreq+0x114>)
 8002896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d134      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0xac>
 80028b4:	e005      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_GetSysClockFreq+0x110>)
 80028b8:	617b      	str	r3, [r7, #20]
      break;
 80028ba:	e005      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_GetSysClockFreq+0x114>)
 80028be:	617b      	str	r3, [r7, #20]
      break;
 80028c0:	e002      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	617b      	str	r3, [r7, #20]
      break;
 80028c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	3301      	adds	r3, #1
 80028d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fb03 f202 	mul.w	r2, r3, r2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	0e5b      	lsrs	r3, r3, #25
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	3301      	adds	r3, #1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002908:	69bb      	ldr	r3, [r7, #24]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	08006b14 	.word	0x08006b14
 8002920:	00f42400 	.word	0x00f42400
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000040 	.word	0x20000040

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08006b0c 	.word	0x08006b0c

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002970:	f7ff ffda 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	08006b0c 	.word	0x08006b0c

08002998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b0:	f7ff f9b6 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 80029b4:	6178      	str	r0, [r7, #20]
 80029b6:	e014      	b.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d0:	f7ff f9a6 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 80029d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d10b      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d919      	bls.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2ba0      	cmp	r3, #160	; 0xa0
 80029f4:	d902      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f6:	2302      	movs	r3, #2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e013      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e010      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d902      	bls.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e00a      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d102      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a14:	2302      	movs	r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e004      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d101      	bne.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d031      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a82:	d814      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8c:	d10f      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a5c      	ldr	r2, [pc, #368]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a9a:	e00c      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f9de 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	494e      	ldr	r1, [pc, #312]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ad2:	e001      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 809e 	beq.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a39      	ldr	r2, [pc, #228]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b28:	f7fe fda8 	bl	800167c <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2e:	e009      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fda4 	bl	800167c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	74fb      	strb	r3, [r7, #19]
        break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15a      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01e      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d019      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b9e:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fd64 	bl	800167c <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fd60 	bl	800167c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d902      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	74fb      	strb	r3, [r7, #19]
            break;
 8002bce:	e006      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ec      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bfa:	e009      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
 8002c00:	e006      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c10:	7c7b      	ldrb	r3, [r7, #17]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a89      	ldr	r2, [pc, #548]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c2e:	4b84      	ldr	r3, [pc, #528]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 0203 	bic.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4980      	ldr	r1, [pc, #512]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c50:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 020c 	bic.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	4978      	ldr	r1, [pc, #480]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c72:	4b73      	ldr	r3, [pc, #460]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	496f      	ldr	r1, [pc, #444]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c94:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	4967      	ldr	r1, [pc, #412]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cb6:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	495e      	ldr	r1, [pc, #376]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	4956      	ldr	r1, [pc, #344]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	494d      	ldr	r1, [pc, #308]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d028      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d1c:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4945      	ldr	r1, [pc, #276]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3c:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d46:	60d3      	str	r3, [r2, #12]
 8002d48:	e011      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f882 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d028      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	492d      	ldr	r1, [pc, #180]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da4:	60d3      	str	r3, [r2, #12]
 8002da6:	e011      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f853 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de6:	4916      	ldr	r1, [pc, #88]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d10c      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f830 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e72:	4b74      	ldr	r3, [pc, #464]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d018      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e7e:	4b71      	ldr	r3, [pc, #452]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
       ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e96:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d047      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e044      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d018      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x86>
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d825      	bhi.n	8002f08 <RCCEx_PLLSAI1_Config+0xa4>
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x62>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d009      	beq.n	8002ed8 <RCCEx_PLLSAI1_Config+0x74>
 8002ec4:	e020      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11d      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed6:	e01a      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed8:	4b5a      	ldr	r3, [pc, #360]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d116      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee8:	e013      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eea:	4b56      	ldr	r3, [pc, #344]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f06:	e006      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e004      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f1e:	4b49      	ldr	r3, [pc, #292]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	430b      	orrs	r3, r1
 8002f34:	4943      	ldr	r1, [pc, #268]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d17c      	bne.n	800303a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a3f      	ldr	r2, [pc, #252]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fb96 	bl	800167c <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fe fb92 	bl	800167c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
        break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ef      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d15f      	bne.n	800303a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d110      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	0211      	lsls	r1, r2, #8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	06d2      	lsls	r2, r2, #27
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	492a      	ldr	r1, [pc, #168]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	610b      	str	r3, [r1, #16]
 8002fa0:	e027      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d112      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
 8002fb8:	0211      	lsls	r1, r2, #8
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6912      	ldr	r2, [r2, #16]
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0552      	lsls	r2, r2, #21
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	491f      	ldr	r1, [pc, #124]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
 8002fcc:	e011      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	0211      	lsls	r1, r2, #8
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6952      	ldr	r2, [r2, #20]
 8002fe4:	0852      	lsrs	r2, r2, #1
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0652      	lsls	r2, r2, #25
 8002fea:	430a      	orrs	r2, r1
 8002fec:	4915      	ldr	r1, [pc, #84]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fb3d 	bl	800167c <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003004:	e009      	b.n	800301a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003006:	f7fe fb39 	bl	800167c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	73fb      	strb	r3, [r7, #15]
          break;
 8003018:	e005      	b.n	8003026 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d079      	beq.n	800314e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe f8c0 	bl	80011f4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d058      	beq.n	800313c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	22ca      	movs	r2, #202	; 0xca
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2253      	movs	r2, #83	; 0x53
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fbda 	bl	8003854 <RTC_EnterInitMode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d127      	bne.n	80030fa <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030bc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68d2      	ldr	r2, [r2, #12]
 80030e4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fbde 	bl	80038bc <RTC_ExitInitMode>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d113      	bne.n	8003132 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0203 	bic.w	r2, r2, #3
 8003118:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
 800313a:	e001      	b.n	8003140 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_RTC_SetTime+0x1a>
 800316e:	2302      	movs	r3, #2
 8003170:	e08b      	b.n	800328a <HAL_RTC_SetTime+0x132>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	22ca      	movs	r2, #202	; 0xca
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2253      	movs	r2, #83	; 0x53
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb5e 	bl	8003854 <RTC_EnterInitMode>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d163      	bne.n	800326a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d126      	bne.n	80031f6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fbb9 	bl	8003938 <RTC_ByteToBcd2>
 80031c6:	4603      	mov	r3, r0
 80031c8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fbb2 	bl	8003938 <RTC_ByteToBcd2>
 80031d4:	4603      	mov	r3, r0
 80031d6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031d8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fbaa 	bl	8003938 <RTC_ByteToBcd2>
 80031e4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031e6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e018      	b.n	8003228 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003216:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800321c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003232:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003236:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003246:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6899      	ldr	r1, [r3, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fb2b 	bl	80038bc <RTC_ExitInitMode>
 8003266:	4603      	mov	r3, r0
 8003268:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	22ff      	movs	r2, #255	; 0xff
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}

08003292 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	0d9b      	lsrs	r3, r3, #22
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11a      	bne.n	8003340 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fb32 	bl	8003978 <RTC_Bcd2ToByte>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fb29 	bl	8003978 <RTC_Bcd2ToByte>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	789b      	ldrb	r3, [r3, #2]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fb20 	bl	8003978 <RTC_Bcd2ToByte>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800334a:	b590      	push	{r4, r7, lr}
 800334c:	b087      	sub	sp, #28
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_RTC_SetDate+0x1a>
 8003360:	2302      	movs	r3, #2
 8003362:	e075      	b.n	8003450 <HAL_RTC_SetDate+0x106>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10e      	bne.n	8003398 <HAL_RTC_SetDate+0x4e>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	f023 0310 	bic.w	r3, r3, #16
 800338e:	b2db      	uxtb	r3, r3
 8003390:	330a      	adds	r3, #10
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11c      	bne.n	80033d8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fac8 	bl	8003938 <RTC_ByteToBcd2>
 80033a8:	4603      	mov	r3, r0
 80033aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fac1 	bl	8003938 <RTC_ByteToBcd2>
 80033b6:	4603      	mov	r3, r0
 80033b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80033ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	789b      	ldrb	r3, [r3, #2]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fab9 	bl	8003938 <RTC_ByteToBcd2>
 80033c6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033c8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e00e      	b.n	80033f6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	78db      	ldrb	r3, [r3, #3]
 80033dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033e4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80033ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	22ca      	movs	r2, #202	; 0xca
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2253      	movs	r2, #83	; 0x53
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fa24 	bl	8003854 <RTC_EnterInitMode>
 800340c:	4603      	mov	r3, r0
 800340e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003420:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003424:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa48 	bl	80038bc <RTC_ExitInitMode>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800344e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800346e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003472:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11a      	bne.n	80034e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fa5e 	bl	8003978 <RTC_Bcd2ToByte>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fa55 	bl	8003978 <RTC_Bcd2ToByte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	789b      	ldrb	r3, [r3, #2]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa4c 	bl	8003978 <RTC_Bcd2ToByte>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_RTC_SetAlarm_IT+0x1a>
 800350a:	2302      	movs	r3, #2
 800350c:	e127      	b.n	800375e <HAL_RTC_SetAlarm_IT+0x26a>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d137      	bne.n	8003594 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f9fb 	bl	8003938 <RTC_ByteToBcd2>
 8003542:	4603      	mov	r3, r0
 8003544:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9f4 	bl	8003938 <RTC_ByteToBcd2>
 8003550:	4603      	mov	r3, r0
 8003552:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003554:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9ec 	bl	8003938 <RTC_ByteToBcd2>
 8003560:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003562:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800356c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f9de 	bl	8003938 <RTC_ByteToBcd2>
 800357c:	4603      	mov	r3, r0
 800357e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003580:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003588:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800358e:	4313      	orrs	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e023      	b.n	80035dc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035b4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035d8:	4313      	orrs	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	22ca      	movs	r2, #202	; 0xca
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2253      	movs	r2, #83	; 0x53
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003600:	d14a      	bne.n	8003698 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003610:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003622:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003624:	f7fe f82a 	bl	800167c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800362a:	e015      	b.n	8003658 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800362c:	f7fe f826 	bl	800167c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800363a:	d90d      	bls.n	8003658 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2203      	movs	r2, #3
 8003648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e082      	b.n	800375e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0e2      	beq.n	800362c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	e049      	b.n	800372c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80036b8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80036ba:	f7fd ffdf 	bl	800167c <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80036c0:	e015      	b.n	80036ee <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c2:	f7fd ffdb 	bl	800167c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036d0:	d90d      	bls.n	80036ee <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2203      	movs	r2, #3
 80036de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e037      	b.n	800375e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0e2      	beq.n	80036c2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RTC_SetAlarm_IT+0x274>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RTC_SetAlarm_IT+0x274>)
 8003732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003736:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RTC_SetAlarm_IT+0x274>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RTC_SetAlarm_IT+0x274>)
 800373e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003742:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	22ff      	movs	r2, #255	; 0xff
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	40010400 	.word	0x40010400

0800376c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003776:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800377a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d012      	beq.n	80037b0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80037a8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f824 	bl	80037f8 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80037dc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8e4 	bl	80039ac <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_RTC_WaitForSynchro+0x44>)
 800381a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800381c:	f7fd ff2e 	bl	800167c <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003824:	f7fd ff2a 	bl	800167c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003832:	d901      	bls.n	8003838 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e007      	b.n	8003848 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	0003ff5f 	.word	0x0003ff5f

08003854 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d120      	bne.n	80038b0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003878:	f7fd ff00 	bl	800167c <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800387e:	e00d      	b.n	800389c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003880:	f7fd fefc 	bl	800167c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388e:	d905      	bls.n	800389c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <RTC_EnterInitMode+0x5c>
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d1e7      	bne.n	8003880 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <RTC_ExitInitMode+0x78>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <RTC_ExitInitMode+0x78>)
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <RTC_ExitInitMode+0x78>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff93 	bl	800380c <HAL_RTC_WaitForSynchro>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01e      	beq.n	800392a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2203      	movs	r2, #3
 80038f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e017      	b.n	800392a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <RTC_ExitInitMode+0x78>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <RTC_ExitInitMode+0x78>)
 8003900:	f023 0320 	bic.w	r3, r3, #32
 8003904:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ff80 	bl	800380c <HAL_RTC_WaitForSynchro>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2203      	movs	r2, #3
 8003916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <RTC_ExitInitMode+0x78>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <RTC_ExitInitMode+0x78>)
 8003924:	f043 0320 	orr.w	r3, r3, #32
 8003928:	6093      	str	r3, [r2, #8]
  }

  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40002800 	.word	0x40002800

08003938 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800394a:	e005      	b.n	8003958 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	3b0a      	subs	r3, #10
 8003956:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	2b09      	cmp	r3, #9
 800395c:	d8f6      	bhi.n	800394c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	b2da      	uxtb	r2, r3
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	4313      	orrs	r3, r2
 800396a:	b2db      	uxtb	r3, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	4413      	add	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	b2da      	uxtb	r2, r3
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	4413      	add	r3, r2
 800399e:	b2db      	uxtb	r3, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e03b      	b.n	8003a50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_TIM_Base_Start_IT+0x9c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIM_Base_Start_IT+0x4e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d004      	beq.n	8003a0e <HAL_TIM_Base_Start_IT+0x4e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d115      	bne.n	8003a3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d015      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x8c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d011      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	e008      	b.n	8003a4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e000      	b.n	8003a4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	00010007 	.word	0x00010007

08003a68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e049      	b.n	8003b0e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fbe8 	bl	8001264 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fa00 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_IC_Start_IT+0x1e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e023      	b.n	8003b7e <HAL_TIM_IC_Start_IT+0x66>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d104      	bne.n	8003b46 <HAL_TIM_IC_Start_IT+0x2e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e01b      	b.n	8003b7e <HAL_TIM_IC_Start_IT+0x66>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_IC_Start_IT+0x3e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e013      	b.n	8003b7e <HAL_TIM_IC_Start_IT+0x66>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_IC_Start_IT+0x4e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_IC_Start_IT+0x66>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_IC_Start_IT+0x5e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e003      	b.n	8003b7e <HAL_TIM_IC_Start_IT+0x66>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <HAL_TIM_IC_Start_IT+0x78>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e013      	b.n	8003bb8 <HAL_TIM_IC_Start_IT+0xa0>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIM_IC_Start_IT+0x88>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e00b      	b.n	8003bb8 <HAL_TIM_IC_Start_IT+0xa0>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_IC_Start_IT+0x98>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_IC_Start_IT+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d102      	bne.n	8003bc6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bc0:	7b7b      	ldrb	r3, [r7, #13]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0c9      	b.n	8003d5e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_IC_Start_IT+0xc2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	e023      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x10a>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d104      	bne.n	8003bea <HAL_TIM_IC_Start_IT+0xd2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	e01b      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x10a>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0xe2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	e013      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x10a>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0xf2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c08:	e00b      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x10a>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_IC_Start_IT+0x102>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c18:	e003      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0x10a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_IC_Start_IT+0x11a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x142>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Start_IT+0x12a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x142>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0x13a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x142>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d841      	bhi.n	8003ce4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_TIM_IC_Start_IT+0x150>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003ce5 	.word	0x08003ce5
 8003c74:	08003ce5 	.word	0x08003ce5
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003cd3 	.word	0x08003cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0202 	orr.w	r2, r2, #2
 8003caa:	60da      	str	r2, [r3, #12]
      break;
 8003cac:	e01d      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0204 	orr.w	r2, r2, #4
 8003cbc:	60da      	str	r2, [r3, #12]
      break;
 8003cbe:	e014      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	60da      	str	r2, [r3, #12]
      break;
 8003cd0:	e00b      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0210 	orr.w	r2, r2, #16
 8003ce0:	60da      	str	r2, [r3, #12]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d135      	bne.n	8003d5c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fa47 	bl	800418c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_TIM_IC_Start_IT+0x250>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_IC_Start_IT+0x204>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_IC_Start_IT+0x204>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_IC_Start_IT+0x254>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d115      	bne.n	8003d48 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_TIM_IC_Start_IT+0x258>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d015      	beq.n	8003d5a <HAL_TIM_IC_Start_IT+0x242>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d011      	beq.n	8003d5a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	e008      	b.n	8003d5a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	00010007 	.word	0x00010007

08003d74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e088      	b.n	8003ea4 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003db0:	f000 f8e0 	bl	8003f74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 020c 	bic.w	r2, r2, #12
 8003dc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6999      	ldr	r1, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	619a      	str	r2, [r3, #24]
 8003dd6:	e060      	b.n	8003e9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d11c      	bne.n	8003e18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003dee:	f000 f917 	bl	8004020 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6999      	ldr	r1, [r3, #24]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	619a      	str	r2, [r3, #24]
 8003e16:	e040      	b.n	8003e9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11b      	bne.n	8003e56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e2e:	f000 f934 	bl	800409a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 020c 	bic.w	r2, r2, #12
 8003e40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	61da      	str	r2, [r3, #28]
 8003e54:	e021      	b.n	8003e9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d11c      	bne.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003e6c:	f000 f951 	bl	8004112 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69d9      	ldr	r1, [r3, #28]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
 8003e94:	e001      	b.n	8003e9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <TIM_Base_SetConfig+0xbc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x20>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <TIM_Base_SetConfig+0xbc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_Base_SetConfig+0x52>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d007      	beq.n	8003efe <TIM_Base_SetConfig+0x52>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <TIM_Base_SetConfig+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_Base_SetConfig+0x52>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <TIM_Base_SetConfig+0xc4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <TIM_Base_SetConfig+0xbc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_Base_SetConfig+0xa0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <TIM_Base_SetConfig+0xc0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0xa0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <TIM_Base_SetConfig+0xc4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400

08003f74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 0201 	bic.w	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <TIM_TI1_SetConfig+0xa4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x3e>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d003      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x3e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a1b      	ldr	r2, [pc, #108]	; (800401c <TIM_TI1_SetConfig+0xa8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <TIM_TI1_SetConfig+0x42>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <TIM_TI1_SetConfig+0x44>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e003      	b.n	8003fd6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 030a 	bic.w	r3, r3, #10
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f003 030a 	and.w	r3, r3, #10
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40014000 	.word	0x40014000

08004020 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	031b      	lsls	r3, r3, #12
 8004064:	b29b      	uxth	r3, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004072:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800409a:	b480      	push	{r7}
 800409c:	b087      	sub	sp, #28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004150:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	b29b      	uxth	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2201      	movs	r2, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e04f      	b.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004220:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d004      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10c      	bne.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e040      	b.n	8004338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd f80c 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 feb2 	bl	8005054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fc83 	bl	8004bfc <UART_SetConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e01b      	b.n	8004338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800430e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800431e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 ff31 	bl	8005198 <UART_CheckIdleState>
 8004336:	4603      	mov	r3, r0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004354:	2b20      	cmp	r3, #32
 8004356:	d178      	bne.n	800444a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_UART_Transmit+0x24>
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e071      	b.n	800444c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2221      	movs	r2, #33	; 0x21
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004376:	f7fd f981 	bl	800167c <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d108      	bne.n	80043a8 <HAL_UART_Transmit+0x68>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e003      	b.n	80043b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043b0:	e030      	b.n	8004414 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 ff93 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e03c      	b.n	800444c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	b292      	uxth	r2, r2
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	3302      	adds	r3, #2
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e008      	b.n	8004402 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b292      	uxth	r2, r2
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1c8      	bne.n	80043b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2200      	movs	r2, #0
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 ff5c 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e005      	b.n	800444c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446a:	2b20      	cmp	r3, #32
 800446c:	f040 80b6 	bne.w	80045dc <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Receive+0x28>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0ae      	b.n	80045de <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2222      	movs	r2, #34	; 0x22
 800448c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004496:	f7fd f8f1 	bl	800167c <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d10e      	bne.n	80044d4 <HAL_UART_Receive+0x80>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_UART_Receive+0x76>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c8:	e02d      	b.n	8004526 <HAL_UART_Receive+0xd2>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d2:	e028      	b.n	8004526 <HAL_UART_Receive+0xd2>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10d      	bne.n	80044f8 <HAL_UART_Receive+0xa4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_UART_Receive+0x9a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	22ff      	movs	r2, #255	; 0xff
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ec:	e01b      	b.n	8004526 <HAL_UART_Receive+0xd2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	227f      	movs	r2, #127	; 0x7f
 80044f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f6:	e016      	b.n	8004526 <HAL_UART_Receive+0xd2>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004500:	d10d      	bne.n	800451e <HAL_UART_Receive+0xca>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_UART_Receive+0xc0>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	227f      	movs	r2, #127	; 0x7f
 800450e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004512:	e008      	b.n	8004526 <HAL_UART_Receive+0xd2>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	223f      	movs	r2, #63	; 0x3f
 8004518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800451c:	e003      	b.n	8004526 <HAL_UART_Receive+0xd2>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800452c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d108      	bne.n	800454a <HAL_UART_Receive+0xf6>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e003      	b.n	8004552 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004552:	e037      	b.n	80045c4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	2120      	movs	r1, #32
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fec2 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e033      	b.n	80045de <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10c      	bne.n	8004596 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004582:	b29a      	uxth	r2, r3
 8004584:	8a7b      	ldrh	r3, [r7, #18]
 8004586:	4013      	ands	r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e00d      	b.n	80045b2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	8a7b      	ldrh	r3, [r7, #18]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4013      	ands	r3, r2
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1c1      	bne.n	8004554 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b0ba      	sub	sp, #232	; 0xe8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800460e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004612:	f640 030f 	movw	r3, #2063	; 0x80f
 8004616:	4013      	ands	r3, r2
 8004618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800461c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 82ae 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      }
      return;
 800464e:	e2a8      	b.n	8004ba2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8117 	beq.w	8004888 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800465a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_UART_IRQHandler+0x298>)
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 810a 	beq.w	8004888 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d011      	beq.n	80046a4 <HAL_UART_IRQHandler+0xbc>
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2201      	movs	r2, #1
 8004692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d011      	beq.n	80046d4 <HAL_UART_IRQHandler+0xec>
 80046b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2202      	movs	r2, #2
 80046c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d011      	beq.n	8004704 <HAL_UART_IRQHandler+0x11c>
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2204      	movs	r2, #4
 80046f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fa:	f043 0202 	orr.w	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004720:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004736:	f043 0208 	orr.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <HAL_UART_IRQHandler+0x18a>
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8214 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04f      	beq.n	800486a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fdf3 	bl	80053b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d141      	bne.n	8004862 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800480a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800480e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1d9      	bne.n	80047de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	2b00      	cmp	r3, #0
 8004830:	d013      	beq.n	800485a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_UART_IRQHandler+0x29c>)
 8004838:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd f89b 	bl	800197a <HAL_DMA_Abort_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e00f      	b.n	800487a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9b8 	bl	8004bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e00b      	b.n	800487a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9b4 	bl	8004bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	e007      	b.n	800487a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9b0 	bl	8004bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004878:	e195      	b.n	8004ba6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	bf00      	nop
    return;
 800487c:	e193      	b.n	8004ba6 <HAL_UART_IRQHandler+0x5be>
 800487e:	bf00      	nop
 8004880:	04000120 	.word	0x04000120
 8004884:	0800547f 	.word	0x0800547f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 814e 	bne.w	8004b2e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8147 	beq.w	8004b2e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8140 	beq.w	8004b2e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2210      	movs	r2, #16
 80048b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	f040 80b8 	bne.w	8004a36 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8167 	beq.w	8004baa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048e6:	429a      	cmp	r2, r3
 80048e8:	f080 815f 	bcs.w	8004baa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 8086 	bne.w	8004a14 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800491c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004936:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800493e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800494a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1da      	bne.n	8004908 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004976:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800497a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800497e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e1      	bne.n	8004952 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e3      	bne.n	800498e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e4:	f023 0310 	bic.w	r3, r3, #16
 80049e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e4      	bne.n	80049d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc ff75 	bl	80018fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8d8 	bl	8004be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a34:	e0b9      	b.n	8004baa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80ab 	beq.w	8004bae <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a6 	beq.w	8004bae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
 8004a86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e4      	bne.n	8004a62 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004abc:	633a      	str	r2, [r7, #48]	; 0x30
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e3      	bne.n	8004a98 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f023 0310 	bic.w	r3, r3, #16
 8004af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	617b      	str	r3, [r7, #20]
   return(result);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e4      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f85c 	bl	8004be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b2c:	e03f      	b.n	8004bae <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00e      	beq.n	8004b58 <HAL_UART_IRQHandler+0x570>
 8004b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fcd4 	bl	80054fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b56:	e02d      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
    }
    return;
 8004b80:	e017      	b.n	8004bb2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d012      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
 8004b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fc85 	bl	80054aa <UART_EndTransmit_IT>
    return;
 8004ba0:	e008      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004ba2:	bf00      	nop
 8004ba4:	e006      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004ba6:	bf00      	nop
 8004ba8:	e004      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004baa:	bf00      	nop
 8004bac:	e002      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004bb2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bb4:	37e8      	adds	r7, #232	; 0xe8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop

08004bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b08a      	sub	sp, #40	; 0x28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4bb4      	ldr	r3, [pc, #720]	; (8004efc <UART_SetConfig+0x300>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4aa9      	ldr	r2, [pc, #676]	; (8004f00 <UART_SetConfig+0x304>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	4313      	orrs	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4aa0      	ldr	r2, [pc, #640]	; (8004f04 <UART_SetConfig+0x308>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d126      	bne.n	8004cd4 <UART_SetConfig+0xd8>
 8004c86:	4ba0      	ldr	r3, [pc, #640]	; (8004f08 <UART_SetConfig+0x30c>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0xd0>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0xa0>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e080      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e07c      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e078      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e074      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e070      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a8c      	ldr	r2, [pc, #560]	; (8004f0c <UART_SetConfig+0x310>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d138      	bne.n	8004d50 <UART_SetConfig+0x154>
 8004cde:	4b8a      	ldr	r3, [pc, #552]	; (8004f08 <UART_SetConfig+0x30c>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d82d      	bhi.n	8004d48 <UART_SetConfig+0x14c>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0xf8>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004d49 	.word	0x08004d49
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d49 	.word	0x08004d49
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e042      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e03e      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e03a      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e036      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e032      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a6a      	ldr	r2, [pc, #424]	; (8004f00 <UART_SetConfig+0x304>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d12a      	bne.n	8004db0 <UART_SetConfig+0x1b4>
 8004d5a:	4b6b      	ldr	r3, [pc, #428]	; (8004f08 <UART_SetConfig+0x30c>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d68:	d01a      	beq.n	8004da0 <UART_SetConfig+0x1a4>
 8004d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d6e:	d81b      	bhi.n	8004da8 <UART_SetConfig+0x1ac>
 8004d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d74:	d00c      	beq.n	8004d90 <UART_SetConfig+0x194>
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7a:	d815      	bhi.n	8004da8 <UART_SetConfig+0x1ac>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <UART_SetConfig+0x18c>
 8004d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d84:	d008      	beq.n	8004d98 <UART_SetConfig+0x19c>
 8004d86:	e00f      	b.n	8004da8 <UART_SetConfig+0x1ac>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e012      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e00e      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e00a      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e006      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e002      	b.n	8004db6 <UART_SetConfig+0x1ba>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a51      	ldr	r2, [pc, #324]	; (8004f00 <UART_SetConfig+0x304>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d17a      	bne.n	8004eb6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d824      	bhi.n	8004e12 <UART_SetConfig+0x216>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x1d4>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004e13 	.word	0x08004e13
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e03 	.word	0x08004e03
 8004de4:	08004e13 	.word	0x08004e13
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e13 	.word	0x08004e13
 8004df0:	08004e0b 	.word	0x08004e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fd fda4 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8004df8:	61f8      	str	r0, [r7, #28]
        break;
 8004dfa:	e010      	b.n	8004e1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <UART_SetConfig+0x314>)
 8004dfe:	61fb      	str	r3, [r7, #28]
        break;
 8004e00:	e00d      	b.n	8004e1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7fd fd05 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8004e06:	61f8      	str	r0, [r7, #28]
        break;
 8004e08:	e009      	b.n	8004e1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	61fb      	str	r3, [r7, #28]
        break;
 8004e10:	e005      	b.n	8004e1e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8107 	beq.w	8005034 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d305      	bcc.n	8004e42 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d903      	bls.n	8004e4a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e48:	e0f4      	b.n	8005034 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	461c      	mov	r4, r3
 8004e50:	4615      	mov	r5, r2
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	022b      	lsls	r3, r5, #8
 8004e5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e60:	0222      	lsls	r2, r4, #8
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	6849      	ldr	r1, [r1, #4]
 8004e66:	0849      	lsrs	r1, r1, #1
 8004e68:	2000      	movs	r0, #0
 8004e6a:	4688      	mov	r8, r1
 8004e6c:	4681      	mov	r9, r0
 8004e6e:	eb12 0a08 	adds.w	sl, r2, r8
 8004e72:	eb43 0b09 	adc.w	fp, r3, r9
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e84:	4650      	mov	r0, sl
 8004e86:	4659      	mov	r1, fp
 8004e88:	f7fb fa02 	bl	8000290 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9a:	d308      	bcc.n	8004eae <UART_SetConfig+0x2b2>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d204      	bcs.n	8004eae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e0c2      	b.n	8005034 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb4:	e0be      	b.n	8005034 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ebe:	d16a      	bne.n	8004f96 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d834      	bhi.n	8004f32 <UART_SetConfig+0x336>
 8004ec8:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x2d4>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f15 	.word	0x08004f15
 8004ed8:	08004f1d 	.word	0x08004f1d
 8004edc:	08004f33 	.word	0x08004f33
 8004ee0:	08004f23 	.word	0x08004f23
 8004ee4:	08004f33 	.word	0x08004f33
 8004ee8:	08004f33 	.word	0x08004f33
 8004eec:	08004f33 	.word	0x08004f33
 8004ef0:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7fd fd24 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8004ef8:	61f8      	str	r0, [r7, #28]
        break;
 8004efa:	e020      	b.n	8004f3e <UART_SetConfig+0x342>
 8004efc:	efff69f3 	.word	0xefff69f3
 8004f00:	40008000 	.word	0x40008000
 8004f04:	40013800 	.word	0x40013800
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fd fd2a 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004f18:	61f8      	str	r0, [r7, #28]
        break;
 8004f1a:	e010      	b.n	8004f3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b4c      	ldr	r3, [pc, #304]	; (8005050 <UART_SetConfig+0x454>)
 8004f1e:	61fb      	str	r3, [r7, #28]
        break;
 8004f20:	e00d      	b.n	8004f3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fd fc75 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8004f26:	61f8      	str	r0, [r7, #28]
        break;
 8004f28:	e009      	b.n	8004f3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	61fb      	str	r3, [r7, #28]
        break;
 8004f30:	e005      	b.n	8004f3e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d077      	beq.n	8005034 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005a      	lsls	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	441a      	add	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b0f      	cmp	r3, #15
 8004f5e:	d916      	bls.n	8004f8e <UART_SetConfig+0x392>
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f66:	d212      	bcs.n	8004f8e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f023 030f 	bic.w	r3, r3, #15
 8004f70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	8afa      	ldrh	r2, [r7, #22]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e052      	b.n	8005034 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f94:	e04e      	b.n	8005034 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d827      	bhi.n	8004fee <UART_SetConfig+0x3f2>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0x3a8>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fef 	.word	0x08004fef
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fef 	.word	0x08004fef
 8004fbc:	08004fef 	.word	0x08004fef
 8004fc0:	08004fef 	.word	0x08004fef
 8004fc4:	08004fe7 	.word	0x08004fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fd fcba 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e014      	b.n	8004ffa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7fd fccc 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004fd4:	61f8      	str	r0, [r7, #28]
        break;
 8004fd6:	e010      	b.n	8004ffa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <UART_SetConfig+0x454>)
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e00d      	b.n	8004ffa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fde:	f7fd fc17 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8004fe2:	61f8      	str	r0, [r7, #28]
        break;
 8004fe4:	e009      	b.n	8004ffa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	61fb      	str	r3, [r7, #28]
        break;
 8004fec:	e005      	b.n	8004ffa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d019      	beq.n	8005034 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	085a      	lsrs	r2, r3, #1
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	441a      	add	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d909      	bls.n	800502e <UART_SetConfig+0x432>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d205      	bcs.n	800502e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e002      	b.n	8005034 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005044:	4618      	mov	r0, r3
 8005046:	3728      	adds	r7, #40	; 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	00f42400 	.word	0x00f42400

08005054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01a      	beq.n	800516a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005152:	d10a      	bne.n	800516a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b098      	sub	sp, #96	; 0x60
 800519c:	af02      	add	r7, sp, #8
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a8:	f7fc fa68 	bl	800167c <HAL_GetTick>
 80051ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d12e      	bne.n	800521a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c4:	2200      	movs	r2, #0
 80051c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f88c 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d021      	beq.n	800521a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ea:	653b      	str	r3, [r7, #80]	; 0x50
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	647b      	str	r3, [r7, #68]	; 0x44
 80051f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e062      	b.n	80052e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d149      	bne.n	80052bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005230:	2200      	movs	r2, #0
 8005232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f856 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03c      	beq.n	80052bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	623b      	str	r3, [r7, #32]
   return(result);
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
 8005262:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e6      	bne.n	8005242 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60fb      	str	r3, [r7, #12]
   return(result);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	64bb      	str	r3, [r7, #72]	; 0x48
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	69b9      	ldr	r1, [r7, #24]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	617b      	str	r3, [r7, #20]
   return(result);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e011      	b.n	80052e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3758      	adds	r7, #88	; 0x58
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	e049      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d045      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fc f9bb 	bl	800167c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <UART_WaitOnFlagUntilTimeout+0x30>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e048      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d031      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d110      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2208      	movs	r2, #8
 800533e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f838 	bl	80053b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2208      	movs	r2, #8
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e029      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005368:	d111      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f81e 	bl	80053b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d0a6      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b095      	sub	sp, #84	; 0x54
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	643b      	str	r3, [r7, #64]	; 0x40
 80053de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005428:	2b01      	cmp	r3, #1
 800542a:	d118      	bne.n	800545e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60bb      	str	r3, [r7, #8]
   return(result);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 0310 	bic.w	r3, r3, #16
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6979      	ldr	r1, [r7, #20]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	613b      	str	r3, [r7, #16]
   return(result);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e6      	bne.n	800542c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005472:	bf00      	nop
 8005474:	3754      	adds	r7, #84	; 0x54
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff fb97 	bl	8004bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6979      	ldr	r1, [r7, #20]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	613b      	str	r3, [r7, #16]
   return(result);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fb63 	bl	8004bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f6:	bf00      	nop
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <atoi>:
 8005512:	220a      	movs	r2, #10
 8005514:	2100      	movs	r1, #0
 8005516:	f000 b883 	b.w	8005620 <strtol>
	...

0800551c <_strtol_l.constprop.0>:
 800551c:	2b01      	cmp	r3, #1
 800551e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005522:	d001      	beq.n	8005528 <_strtol_l.constprop.0+0xc>
 8005524:	2b24      	cmp	r3, #36	; 0x24
 8005526:	d906      	bls.n	8005536 <_strtol_l.constprop.0+0x1a>
 8005528:	f000 fb04 	bl	8005b34 <__errno>
 800552c:	2316      	movs	r3, #22
 800552e:	6003      	str	r3, [r0, #0]
 8005530:	2000      	movs	r0, #0
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800561c <_strtol_l.constprop.0+0x100>
 800553a:	460d      	mov	r5, r1
 800553c:	462e      	mov	r6, r5
 800553e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005542:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005546:	f017 0708 	ands.w	r7, r7, #8
 800554a:	d1f7      	bne.n	800553c <_strtol_l.constprop.0+0x20>
 800554c:	2c2d      	cmp	r4, #45	; 0x2d
 800554e:	d132      	bne.n	80055b6 <_strtol_l.constprop.0+0x9a>
 8005550:	782c      	ldrb	r4, [r5, #0]
 8005552:	2701      	movs	r7, #1
 8005554:	1cb5      	adds	r5, r6, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d05b      	beq.n	8005612 <_strtol_l.constprop.0+0xf6>
 800555a:	2b10      	cmp	r3, #16
 800555c:	d109      	bne.n	8005572 <_strtol_l.constprop.0+0x56>
 800555e:	2c30      	cmp	r4, #48	; 0x30
 8005560:	d107      	bne.n	8005572 <_strtol_l.constprop.0+0x56>
 8005562:	782c      	ldrb	r4, [r5, #0]
 8005564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005568:	2c58      	cmp	r4, #88	; 0x58
 800556a:	d14d      	bne.n	8005608 <_strtol_l.constprop.0+0xec>
 800556c:	786c      	ldrb	r4, [r5, #1]
 800556e:	2310      	movs	r3, #16
 8005570:	3502      	adds	r5, #2
 8005572:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005576:	f108 38ff 	add.w	r8, r8, #4294967295
 800557a:	f04f 0e00 	mov.w	lr, #0
 800557e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005582:	4676      	mov	r6, lr
 8005584:	fb03 8a19 	mls	sl, r3, r9, r8
 8005588:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800558c:	f1bc 0f09 	cmp.w	ip, #9
 8005590:	d816      	bhi.n	80055c0 <_strtol_l.constprop.0+0xa4>
 8005592:	4664      	mov	r4, ip
 8005594:	42a3      	cmp	r3, r4
 8005596:	dd24      	ble.n	80055e2 <_strtol_l.constprop.0+0xc6>
 8005598:	f1be 3fff 	cmp.w	lr, #4294967295
 800559c:	d008      	beq.n	80055b0 <_strtol_l.constprop.0+0x94>
 800559e:	45b1      	cmp	r9, r6
 80055a0:	d31c      	bcc.n	80055dc <_strtol_l.constprop.0+0xc0>
 80055a2:	d101      	bne.n	80055a8 <_strtol_l.constprop.0+0x8c>
 80055a4:	45a2      	cmp	sl, r4
 80055a6:	db19      	blt.n	80055dc <_strtol_l.constprop.0+0xc0>
 80055a8:	fb06 4603 	mla	r6, r6, r3, r4
 80055ac:	f04f 0e01 	mov.w	lr, #1
 80055b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055b4:	e7e8      	b.n	8005588 <_strtol_l.constprop.0+0x6c>
 80055b6:	2c2b      	cmp	r4, #43	; 0x2b
 80055b8:	bf04      	itt	eq
 80055ba:	782c      	ldrbeq	r4, [r5, #0]
 80055bc:	1cb5      	addeq	r5, r6, #2
 80055be:	e7ca      	b.n	8005556 <_strtol_l.constprop.0+0x3a>
 80055c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80055c4:	f1bc 0f19 	cmp.w	ip, #25
 80055c8:	d801      	bhi.n	80055ce <_strtol_l.constprop.0+0xb2>
 80055ca:	3c37      	subs	r4, #55	; 0x37
 80055cc:	e7e2      	b.n	8005594 <_strtol_l.constprop.0+0x78>
 80055ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80055d2:	f1bc 0f19 	cmp.w	ip, #25
 80055d6:	d804      	bhi.n	80055e2 <_strtol_l.constprop.0+0xc6>
 80055d8:	3c57      	subs	r4, #87	; 0x57
 80055da:	e7db      	b.n	8005594 <_strtol_l.constprop.0+0x78>
 80055dc:	f04f 3eff 	mov.w	lr, #4294967295
 80055e0:	e7e6      	b.n	80055b0 <_strtol_l.constprop.0+0x94>
 80055e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80055e6:	d105      	bne.n	80055f4 <_strtol_l.constprop.0+0xd8>
 80055e8:	2322      	movs	r3, #34	; 0x22
 80055ea:	6003      	str	r3, [r0, #0]
 80055ec:	4646      	mov	r6, r8
 80055ee:	b942      	cbnz	r2, 8005602 <_strtol_l.constprop.0+0xe6>
 80055f0:	4630      	mov	r0, r6
 80055f2:	e79e      	b.n	8005532 <_strtol_l.constprop.0+0x16>
 80055f4:	b107      	cbz	r7, 80055f8 <_strtol_l.constprop.0+0xdc>
 80055f6:	4276      	negs	r6, r6
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	d0f9      	beq.n	80055f0 <_strtol_l.constprop.0+0xd4>
 80055fc:	f1be 0f00 	cmp.w	lr, #0
 8005600:	d000      	beq.n	8005604 <_strtol_l.constprop.0+0xe8>
 8005602:	1e69      	subs	r1, r5, #1
 8005604:	6011      	str	r1, [r2, #0]
 8005606:	e7f3      	b.n	80055f0 <_strtol_l.constprop.0+0xd4>
 8005608:	2430      	movs	r4, #48	; 0x30
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1b1      	bne.n	8005572 <_strtol_l.constprop.0+0x56>
 800560e:	2308      	movs	r3, #8
 8005610:	e7af      	b.n	8005572 <_strtol_l.constprop.0+0x56>
 8005612:	2c30      	cmp	r4, #48	; 0x30
 8005614:	d0a5      	beq.n	8005562 <_strtol_l.constprop.0+0x46>
 8005616:	230a      	movs	r3, #10
 8005618:	e7ab      	b.n	8005572 <_strtol_l.constprop.0+0x56>
 800561a:	bf00      	nop
 800561c:	08006b45 	.word	0x08006b45

08005620 <strtol>:
 8005620:	4613      	mov	r3, r2
 8005622:	460a      	mov	r2, r1
 8005624:	4601      	mov	r1, r0
 8005626:	4802      	ldr	r0, [pc, #8]	; (8005630 <strtol+0x10>)
 8005628:	6800      	ldr	r0, [r0, #0]
 800562a:	f7ff bf77 	b.w	800551c <_strtol_l.constprop.0>
 800562e:	bf00      	nop
 8005630:	200000a4 	.word	0x200000a4

08005634 <std>:
 8005634:	2300      	movs	r3, #0
 8005636:	b510      	push	{r4, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	e9c0 3300 	strd	r3, r3, [r0]
 800563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005642:	6083      	str	r3, [r0, #8]
 8005644:	8181      	strh	r1, [r0, #12]
 8005646:	6643      	str	r3, [r0, #100]	; 0x64
 8005648:	81c2      	strh	r2, [r0, #14]
 800564a:	6183      	str	r3, [r0, #24]
 800564c:	4619      	mov	r1, r3
 800564e:	2208      	movs	r2, #8
 8005650:	305c      	adds	r0, #92	; 0x5c
 8005652:	f000 f9c4 	bl	80059de <memset>
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <std+0x58>)
 8005658:	6263      	str	r3, [r4, #36]	; 0x24
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <std+0x5c>)
 800565c:	62a3      	str	r3, [r4, #40]	; 0x28
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <std+0x60>)
 8005660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <std+0x64>)
 8005664:	6323      	str	r3, [r4, #48]	; 0x30
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <std+0x68>)
 8005668:	6224      	str	r4, [r4, #32]
 800566a:	429c      	cmp	r4, r3
 800566c:	d006      	beq.n	800567c <std+0x48>
 800566e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005672:	4294      	cmp	r4, r2
 8005674:	d002      	beq.n	800567c <std+0x48>
 8005676:	33d0      	adds	r3, #208	; 0xd0
 8005678:	429c      	cmp	r4, r3
 800567a:	d105      	bne.n	8005688 <std+0x54>
 800567c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005684:	f000 ba80 	b.w	8005b88 <__retarget_lock_init_recursive>
 8005688:	bd10      	pop	{r4, pc}
 800568a:	bf00      	nop
 800568c:	08005959 	.word	0x08005959
 8005690:	0800597b 	.word	0x0800597b
 8005694:	080059b3 	.word	0x080059b3
 8005698:	080059d7 	.word	0x080059d7
 800569c:	20000218 	.word	0x20000218

080056a0 <stdio_exit_handler>:
 80056a0:	4a02      	ldr	r2, [pc, #8]	; (80056ac <stdio_exit_handler+0xc>)
 80056a2:	4903      	ldr	r1, [pc, #12]	; (80056b0 <stdio_exit_handler+0x10>)
 80056a4:	4803      	ldr	r0, [pc, #12]	; (80056b4 <stdio_exit_handler+0x14>)
 80056a6:	f000 b869 	b.w	800577c <_fwalk_sglue>
 80056aa:	bf00      	nop
 80056ac:	2000004c 	.word	0x2000004c
 80056b0:	08006481 	.word	0x08006481
 80056b4:	20000058 	.word	0x20000058

080056b8 <cleanup_stdio>:
 80056b8:	6841      	ldr	r1, [r0, #4]
 80056ba:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <cleanup_stdio+0x34>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	b510      	push	{r4, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	d001      	beq.n	80056c8 <cleanup_stdio+0x10>
 80056c4:	f000 fedc 	bl	8006480 <_fflush_r>
 80056c8:	68a1      	ldr	r1, [r4, #8]
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <cleanup_stdio+0x38>)
 80056cc:	4299      	cmp	r1, r3
 80056ce:	d002      	beq.n	80056d6 <cleanup_stdio+0x1e>
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fed5 	bl	8006480 <_fflush_r>
 80056d6:	68e1      	ldr	r1, [r4, #12]
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <cleanup_stdio+0x3c>)
 80056da:	4299      	cmp	r1, r3
 80056dc:	d004      	beq.n	80056e8 <cleanup_stdio+0x30>
 80056de:	4620      	mov	r0, r4
 80056e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e4:	f000 becc 	b.w	8006480 <_fflush_r>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop
 80056ec:	20000218 	.word	0x20000218
 80056f0:	20000280 	.word	0x20000280
 80056f4:	200002e8 	.word	0x200002e8

080056f8 <global_stdio_init.part.0>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <global_stdio_init.part.0+0x30>)
 80056fc:	4c0b      	ldr	r4, [pc, #44]	; (800572c <global_stdio_init.part.0+0x34>)
 80056fe:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <global_stdio_init.part.0+0x38>)
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	4620      	mov	r0, r4
 8005704:	2200      	movs	r2, #0
 8005706:	2104      	movs	r1, #4
 8005708:	f7ff ff94 	bl	8005634 <std>
 800570c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005710:	2201      	movs	r2, #1
 8005712:	2109      	movs	r1, #9
 8005714:	f7ff ff8e 	bl	8005634 <std>
 8005718:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800571c:	2202      	movs	r2, #2
 800571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005722:	2112      	movs	r1, #18
 8005724:	f7ff bf86 	b.w	8005634 <std>
 8005728:	20000350 	.word	0x20000350
 800572c:	20000218 	.word	0x20000218
 8005730:	080056a1 	.word	0x080056a1

08005734 <__sfp_lock_acquire>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sfp_lock_acquire+0x8>)
 8005736:	f000 ba28 	b.w	8005b8a <__retarget_lock_acquire_recursive>
 800573a:	bf00      	nop
 800573c:	20000359 	.word	0x20000359

08005740 <__sfp_lock_release>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__sfp_lock_release+0x8>)
 8005742:	f000 ba23 	b.w	8005b8c <__retarget_lock_release_recursive>
 8005746:	bf00      	nop
 8005748:	20000359 	.word	0x20000359

0800574c <__sinit>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	f7ff fff0 	bl	8005734 <__sfp_lock_acquire>
 8005754:	6a23      	ldr	r3, [r4, #32]
 8005756:	b11b      	cbz	r3, 8005760 <__sinit+0x14>
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f7ff bff0 	b.w	8005740 <__sfp_lock_release>
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <__sinit+0x28>)
 8005762:	6223      	str	r3, [r4, #32]
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <__sinit+0x2c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f5      	bne.n	8005758 <__sinit+0xc>
 800576c:	f7ff ffc4 	bl	80056f8 <global_stdio_init.part.0>
 8005770:	e7f2      	b.n	8005758 <__sinit+0xc>
 8005772:	bf00      	nop
 8005774:	080056b9 	.word	0x080056b9
 8005778:	20000350 	.word	0x20000350

0800577c <_fwalk_sglue>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	4607      	mov	r7, r0
 8005782:	4688      	mov	r8, r1
 8005784:	4614      	mov	r4, r2
 8005786:	2600      	movs	r6, #0
 8005788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800578c:	f1b9 0901 	subs.w	r9, r9, #1
 8005790:	d505      	bpl.n	800579e <_fwalk_sglue+0x22>
 8005792:	6824      	ldr	r4, [r4, #0]
 8005794:	2c00      	cmp	r4, #0
 8005796:	d1f7      	bne.n	8005788 <_fwalk_sglue+0xc>
 8005798:	4630      	mov	r0, r6
 800579a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d907      	bls.n	80057b4 <_fwalk_sglue+0x38>
 80057a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a8:	3301      	adds	r3, #1
 80057aa:	d003      	beq.n	80057b4 <_fwalk_sglue+0x38>
 80057ac:	4629      	mov	r1, r5
 80057ae:	4638      	mov	r0, r7
 80057b0:	47c0      	blx	r8
 80057b2:	4306      	orrs	r6, r0
 80057b4:	3568      	adds	r5, #104	; 0x68
 80057b6:	e7e9      	b.n	800578c <_fwalk_sglue+0x10>

080057b8 <getchar>:
 80057b8:	4b02      	ldr	r3, [pc, #8]	; (80057c4 <getchar+0xc>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	6841      	ldr	r1, [r0, #4]
 80057be:	f000 be99 	b.w	80064f4 <_getc_r>
 80057c2:	bf00      	nop
 80057c4:	200000a4 	.word	0x200000a4

080057c8 <iprintf>:
 80057c8:	b40f      	push	{r0, r1, r2, r3}
 80057ca:	b507      	push	{r0, r1, r2, lr}
 80057cc:	4906      	ldr	r1, [pc, #24]	; (80057e8 <iprintf+0x20>)
 80057ce:	ab04      	add	r3, sp, #16
 80057d0:	6808      	ldr	r0, [r1, #0]
 80057d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d6:	6881      	ldr	r1, [r0, #8]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	f000 fb21 	bl	8005e20 <_vfiprintf_r>
 80057de:	b003      	add	sp, #12
 80057e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e4:	b004      	add	sp, #16
 80057e6:	4770      	bx	lr
 80057e8:	200000a4 	.word	0x200000a4

080057ec <putchar>:
 80057ec:	4b02      	ldr	r3, [pc, #8]	; (80057f8 <putchar+0xc>)
 80057ee:	4601      	mov	r1, r0
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	6882      	ldr	r2, [r0, #8]
 80057f4:	f000 bf0b 	b.w	800660e <_putc_r>
 80057f8:	200000a4 	.word	0x200000a4

080057fc <setvbuf>:
 80057fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005800:	461d      	mov	r5, r3
 8005802:	4b54      	ldr	r3, [pc, #336]	; (8005954 <setvbuf+0x158>)
 8005804:	681f      	ldr	r7, [r3, #0]
 8005806:	4604      	mov	r4, r0
 8005808:	460e      	mov	r6, r1
 800580a:	4690      	mov	r8, r2
 800580c:	b127      	cbz	r7, 8005818 <setvbuf+0x1c>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	b913      	cbnz	r3, 8005818 <setvbuf+0x1c>
 8005812:	4638      	mov	r0, r7
 8005814:	f7ff ff9a 	bl	800574c <__sinit>
 8005818:	f1b8 0f02 	cmp.w	r8, #2
 800581c:	d006      	beq.n	800582c <setvbuf+0x30>
 800581e:	f1b8 0f01 	cmp.w	r8, #1
 8005822:	f200 8094 	bhi.w	800594e <setvbuf+0x152>
 8005826:	2d00      	cmp	r5, #0
 8005828:	f2c0 8091 	blt.w	800594e <setvbuf+0x152>
 800582c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d405      	bmi.n	800583e <setvbuf+0x42>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d402      	bmi.n	800583e <setvbuf+0x42>
 8005838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583a:	f000 f9a6 	bl	8005b8a <__retarget_lock_acquire_recursive>
 800583e:	4621      	mov	r1, r4
 8005840:	4638      	mov	r0, r7
 8005842:	f000 fe1d 	bl	8006480 <_fflush_r>
 8005846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005848:	b141      	cbz	r1, 800585c <setvbuf+0x60>
 800584a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584e:	4299      	cmp	r1, r3
 8005850:	d002      	beq.n	8005858 <setvbuf+0x5c>
 8005852:	4638      	mov	r0, r7
 8005854:	f000 f9ba 	bl	8005bcc <_free_r>
 8005858:	2300      	movs	r3, #0
 800585a:	6363      	str	r3, [r4, #52]	; 0x34
 800585c:	2300      	movs	r3, #0
 800585e:	61a3      	str	r3, [r4, #24]
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0618      	lsls	r0, r3, #24
 8005866:	d503      	bpl.n	8005870 <setvbuf+0x74>
 8005868:	6921      	ldr	r1, [r4, #16]
 800586a:	4638      	mov	r0, r7
 800586c:	f000 f9ae 	bl	8005bcc <_free_r>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	f1b8 0f02 	cmp.w	r8, #2
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	d05f      	beq.n	8005942 <setvbuf+0x146>
 8005882:	ab01      	add	r3, sp, #4
 8005884:	466a      	mov	r2, sp
 8005886:	4621      	mov	r1, r4
 8005888:	4638      	mov	r0, r7
 800588a:	f000 fe5e 	bl	800654a <__swhatbuf_r>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	4318      	orrs	r0, r3
 8005892:	81a0      	strh	r0, [r4, #12]
 8005894:	bb2d      	cbnz	r5, 80058e2 <setvbuf+0xe6>
 8005896:	9d00      	ldr	r5, [sp, #0]
 8005898:	4628      	mov	r0, r5
 800589a:	f000 f9e3 	bl	8005c64 <malloc>
 800589e:	4606      	mov	r6, r0
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d150      	bne.n	8005946 <setvbuf+0x14a>
 80058a4:	f8dd 9000 	ldr.w	r9, [sp]
 80058a8:	45a9      	cmp	r9, r5
 80058aa:	d13e      	bne.n	800592a <setvbuf+0x12e>
 80058ac:	f04f 35ff 	mov.w	r5, #4294967295
 80058b0:	2200      	movs	r2, #0
 80058b2:	60a2      	str	r2, [r4, #8]
 80058b4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	6122      	str	r2, [r4, #16]
 80058bc:	2201      	movs	r2, #1
 80058be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c2:	6162      	str	r2, [r4, #20]
 80058c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058c6:	f043 0302 	orr.w	r3, r3, #2
 80058ca:	07d1      	lsls	r1, r2, #31
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	d404      	bmi.n	80058da <setvbuf+0xde>
 80058d0:	059b      	lsls	r3, r3, #22
 80058d2:	d402      	bmi.n	80058da <setvbuf+0xde>
 80058d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058d6:	f000 f959 	bl	8005b8c <__retarget_lock_release_recursive>
 80058da:	4628      	mov	r0, r5
 80058dc:	b003      	add	sp, #12
 80058de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	d0d8      	beq.n	8005898 <setvbuf+0x9c>
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	b913      	cbnz	r3, 80058f0 <setvbuf+0xf4>
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7ff ff2e 	bl	800574c <__sinit>
 80058f0:	f1b8 0f01 	cmp.w	r8, #1
 80058f4:	bf08      	it	eq
 80058f6:	89a3      	ldrheq	r3, [r4, #12]
 80058f8:	6026      	str	r6, [r4, #0]
 80058fa:	bf04      	itt	eq
 80058fc:	f043 0301 	orreq.w	r3, r3, #1
 8005900:	81a3      	strheq	r3, [r4, #12]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f013 0208 	ands.w	r2, r3, #8
 8005908:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800590c:	d01d      	beq.n	800594a <setvbuf+0x14e>
 800590e:	07da      	lsls	r2, r3, #31
 8005910:	bf41      	itttt	mi
 8005912:	2200      	movmi	r2, #0
 8005914:	426d      	negmi	r5, r5
 8005916:	60a2      	strmi	r2, [r4, #8]
 8005918:	61a5      	strmi	r5, [r4, #24]
 800591a:	bf58      	it	pl
 800591c:	60a5      	strpl	r5, [r4, #8]
 800591e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005920:	f015 0501 	ands.w	r5, r5, #1
 8005924:	d0d4      	beq.n	80058d0 <setvbuf+0xd4>
 8005926:	2500      	movs	r5, #0
 8005928:	e7d7      	b.n	80058da <setvbuf+0xde>
 800592a:	4648      	mov	r0, r9
 800592c:	f000 f99a 	bl	8005c64 <malloc>
 8005930:	4606      	mov	r6, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d0ba      	beq.n	80058ac <setvbuf+0xb0>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	464d      	mov	r5, r9
 8005940:	e7d1      	b.n	80058e6 <setvbuf+0xea>
 8005942:	2500      	movs	r5, #0
 8005944:	e7b4      	b.n	80058b0 <setvbuf+0xb4>
 8005946:	46a9      	mov	r9, r5
 8005948:	e7f5      	b.n	8005936 <setvbuf+0x13a>
 800594a:	60a2      	str	r2, [r4, #8]
 800594c:	e7e7      	b.n	800591e <setvbuf+0x122>
 800594e:	f04f 35ff 	mov.w	r5, #4294967295
 8005952:	e7c2      	b.n	80058da <setvbuf+0xde>
 8005954:	200000a4 	.word	0x200000a4

08005958 <__sread>:
 8005958:	b510      	push	{r4, lr}
 800595a:	460c      	mov	r4, r1
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	f000 f8c4 	bl	8005aec <_read_r>
 8005964:	2800      	cmp	r0, #0
 8005966:	bfab      	itete	ge
 8005968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800596a:	89a3      	ldrhlt	r3, [r4, #12]
 800596c:	181b      	addge	r3, r3, r0
 800596e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005972:	bfac      	ite	ge
 8005974:	6563      	strge	r3, [r4, #84]	; 0x54
 8005976:	81a3      	strhlt	r3, [r4, #12]
 8005978:	bd10      	pop	{r4, pc}

0800597a <__swrite>:
 800597a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	461f      	mov	r7, r3
 8005980:	898b      	ldrh	r3, [r1, #12]
 8005982:	05db      	lsls	r3, r3, #23
 8005984:	4605      	mov	r5, r0
 8005986:	460c      	mov	r4, r1
 8005988:	4616      	mov	r6, r2
 800598a:	d505      	bpl.n	8005998 <__swrite+0x1e>
 800598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005990:	2302      	movs	r3, #2
 8005992:	2200      	movs	r2, #0
 8005994:	f000 f898 	bl	8005ac8 <_lseek_r>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800599e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	4628      	mov	r0, r5
 80059aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	f000 b8af 	b.w	8005b10 <_write_r>

080059b2 <__sseek>:
 80059b2:	b510      	push	{r4, lr}
 80059b4:	460c      	mov	r4, r1
 80059b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ba:	f000 f885 	bl	8005ac8 <_lseek_r>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	bf15      	itete	ne
 80059c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059ce:	81a3      	strheq	r3, [r4, #12]
 80059d0:	bf18      	it	ne
 80059d2:	81a3      	strhne	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__sclose>:
 80059d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059da:	f000 b865 	b.w	8005aa8 <_close_r>

080059de <memset>:
 80059de:	4402      	add	r2, r0
 80059e0:	4603      	mov	r3, r0
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d100      	bne.n	80059e8 <memset+0xa>
 80059e6:	4770      	bx	lr
 80059e8:	f803 1b01 	strb.w	r1, [r3], #1
 80059ec:	e7f9      	b.n	80059e2 <memset+0x4>
	...

080059f0 <strtok>:
 80059f0:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <strtok+0x5c>)
 80059f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80059f8:	4605      	mov	r5, r0
 80059fa:	b9fc      	cbnz	r4, 8005a3c <strtok+0x4c>
 80059fc:	2050      	movs	r0, #80	; 0x50
 80059fe:	9101      	str	r1, [sp, #4]
 8005a00:	f000 f930 	bl	8005c64 <malloc>
 8005a04:	9901      	ldr	r1, [sp, #4]
 8005a06:	6470      	str	r0, [r6, #68]	; 0x44
 8005a08:	4602      	mov	r2, r0
 8005a0a:	b920      	cbnz	r0, 8005a16 <strtok+0x26>
 8005a0c:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <strtok+0x60>)
 8005a0e:	4811      	ldr	r0, [pc, #68]	; (8005a54 <strtok+0x64>)
 8005a10:	215b      	movs	r1, #91	; 0x5b
 8005a12:	f000 f8bd 	bl	8005b90 <__assert_func>
 8005a16:	e9c0 4400 	strd	r4, r4, [r0]
 8005a1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a36:	6184      	str	r4, [r0, #24]
 8005a38:	7704      	strb	r4, [r0, #28]
 8005a3a:	6244      	str	r4, [r0, #36]	; 0x24
 8005a3c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4628      	mov	r0, r5
 8005a42:	b002      	add	sp, #8
 8005a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a48:	f000 b806 	b.w	8005a58 <__strtok_r>
 8005a4c:	200000a4 	.word	0x200000a4
 8005a50:	08006c45 	.word	0x08006c45
 8005a54:	08006c5c 	.word	0x08006c5c

08005a58 <__strtok_r>:
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	b908      	cbnz	r0, 8005a60 <__strtok_r+0x8>
 8005a5c:	6810      	ldr	r0, [r2, #0]
 8005a5e:	b188      	cbz	r0, 8005a84 <__strtok_r+0x2c>
 8005a60:	4604      	mov	r4, r0
 8005a62:	4620      	mov	r0, r4
 8005a64:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a68:	460f      	mov	r7, r1
 8005a6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a6e:	b91e      	cbnz	r6, 8005a78 <__strtok_r+0x20>
 8005a70:	b965      	cbnz	r5, 8005a8c <__strtok_r+0x34>
 8005a72:	6015      	str	r5, [r2, #0]
 8005a74:	4628      	mov	r0, r5
 8005a76:	e005      	b.n	8005a84 <__strtok_r+0x2c>
 8005a78:	42b5      	cmp	r5, r6
 8005a7a:	d1f6      	bne.n	8005a6a <__strtok_r+0x12>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <__strtok_r+0xa>
 8005a80:	6014      	str	r4, [r2, #0]
 8005a82:	7003      	strb	r3, [r0, #0]
 8005a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a86:	461c      	mov	r4, r3
 8005a88:	e00c      	b.n	8005aa4 <__strtok_r+0x4c>
 8005a8a:	b915      	cbnz	r5, 8005a92 <__strtok_r+0x3a>
 8005a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a90:	460e      	mov	r6, r1
 8005a92:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a96:	42ab      	cmp	r3, r5
 8005a98:	d1f7      	bne.n	8005a8a <__strtok_r+0x32>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f3      	beq.n	8005a86 <__strtok_r+0x2e>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005aa4:	6014      	str	r4, [r2, #0]
 8005aa6:	e7ed      	b.n	8005a84 <__strtok_r+0x2c>

08005aa8 <_close_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <_close_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fb fb0e 	bl	80010d4 <_close>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_close_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_close_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000354 	.word	0x20000354

08005ac8 <_lseek_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	; (8005ae8 <_lseek_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fb fb13 	bl	8001102 <_lseek>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_lseek_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_lseek_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000354 	.word	0x20000354

08005aec <_read_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	; (8005b0c <_read_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb fb12 	bl	8001124 <_read>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_read_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_read_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000354 	.word	0x20000354

08005b10 <_write_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	; (8005b30 <_write_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fb faac 	bl	800107c <_write>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_write_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_write_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000354 	.word	0x20000354

08005b34 <__errno>:
 8005b34:	4b01      	ldr	r3, [pc, #4]	; (8005b3c <__errno+0x8>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	200000a4 	.word	0x200000a4

08005b40 <__libc_init_array>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4d0d      	ldr	r5, [pc, #52]	; (8005b78 <__libc_init_array+0x38>)
 8005b44:	4c0d      	ldr	r4, [pc, #52]	; (8005b7c <__libc_init_array+0x3c>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	2600      	movs	r6, #0
 8005b4c:	42a6      	cmp	r6, r4
 8005b4e:	d109      	bne.n	8005b64 <__libc_init_array+0x24>
 8005b50:	4d0b      	ldr	r5, [pc, #44]	; (8005b80 <__libc_init_array+0x40>)
 8005b52:	4c0c      	ldr	r4, [pc, #48]	; (8005b84 <__libc_init_array+0x44>)
 8005b54:	f000 ff40 	bl	80069d8 <_init>
 8005b58:	1b64      	subs	r4, r4, r5
 8005b5a:	10a4      	asrs	r4, r4, #2
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	42a6      	cmp	r6, r4
 8005b60:	d105      	bne.n	8005b6e <__libc_init_array+0x2e>
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b68:	4798      	blx	r3
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7ee      	b.n	8005b4c <__libc_init_array+0xc>
 8005b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b72:	4798      	blx	r3
 8005b74:	3601      	adds	r6, #1
 8005b76:	e7f2      	b.n	8005b5e <__libc_init_array+0x1e>
 8005b78:	08006d30 	.word	0x08006d30
 8005b7c:	08006d30 	.word	0x08006d30
 8005b80:	08006d30 	.word	0x08006d30
 8005b84:	08006d34 	.word	0x08006d34

08005b88 <__retarget_lock_init_recursive>:
 8005b88:	4770      	bx	lr

08005b8a <__retarget_lock_acquire_recursive>:
 8005b8a:	4770      	bx	lr

08005b8c <__retarget_lock_release_recursive>:
 8005b8c:	4770      	bx	lr
	...

08005b90 <__assert_func>:
 8005b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b92:	4614      	mov	r4, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <__assert_func+0x2c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	68d8      	ldr	r0, [r3, #12]
 8005b9e:	b14c      	cbz	r4, 8005bb4 <__assert_func+0x24>
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <__assert_func+0x30>)
 8005ba2:	9100      	str	r1, [sp, #0]
 8005ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ba8:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <__assert_func+0x34>)
 8005baa:	462b      	mov	r3, r5
 8005bac:	f000 fc90 	bl	80064d0 <fiprintf>
 8005bb0:	f000 fe40 	bl	8006834 <abort>
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <__assert_func+0x38>)
 8005bb6:	461c      	mov	r4, r3
 8005bb8:	e7f3      	b.n	8005ba2 <__assert_func+0x12>
 8005bba:	bf00      	nop
 8005bbc:	200000a4 	.word	0x200000a4
 8005bc0:	08006cb6 	.word	0x08006cb6
 8005bc4:	08006cc3 	.word	0x08006cc3
 8005bc8:	08006cf1 	.word	0x08006cf1

08005bcc <_free_r>:
 8005bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d044      	beq.n	8005c5c <_free_r+0x90>
 8005bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd6:	9001      	str	r0, [sp, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f1a1 0404 	sub.w	r4, r1, #4
 8005bde:	bfb8      	it	lt
 8005be0:	18e4      	addlt	r4, r4, r3
 8005be2:	f000 f8e7 	bl	8005db4 <__malloc_lock>
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <_free_r+0x94>)
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	b933      	cbnz	r3, 8005bfc <_free_r+0x30>
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	6014      	str	r4, [r2, #0]
 8005bf2:	b003      	add	sp, #12
 8005bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf8:	f000 b8e2 	b.w	8005dc0 <__malloc_unlock>
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	d908      	bls.n	8005c12 <_free_r+0x46>
 8005c00:	6825      	ldr	r5, [r4, #0]
 8005c02:	1961      	adds	r1, r4, r5
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf01      	itttt	eq
 8005c08:	6819      	ldreq	r1, [r3, #0]
 8005c0a:	685b      	ldreq	r3, [r3, #4]
 8005c0c:	1949      	addeq	r1, r1, r5
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	e7ed      	b.n	8005bee <_free_r+0x22>
 8005c12:	461a      	mov	r2, r3
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	b10b      	cbz	r3, 8005c1c <_free_r+0x50>
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d9fa      	bls.n	8005c12 <_free_r+0x46>
 8005c1c:	6811      	ldr	r1, [r2, #0]
 8005c1e:	1855      	adds	r5, r2, r1
 8005c20:	42a5      	cmp	r5, r4
 8005c22:	d10b      	bne.n	8005c3c <_free_r+0x70>
 8005c24:	6824      	ldr	r4, [r4, #0]
 8005c26:	4421      	add	r1, r4
 8005c28:	1854      	adds	r4, r2, r1
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	d1e0      	bne.n	8005bf2 <_free_r+0x26>
 8005c30:	681c      	ldr	r4, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	6053      	str	r3, [r2, #4]
 8005c36:	440c      	add	r4, r1
 8005c38:	6014      	str	r4, [r2, #0]
 8005c3a:	e7da      	b.n	8005bf2 <_free_r+0x26>
 8005c3c:	d902      	bls.n	8005c44 <_free_r+0x78>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	6003      	str	r3, [r0, #0]
 8005c42:	e7d6      	b.n	8005bf2 <_free_r+0x26>
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	1961      	adds	r1, r4, r5
 8005c48:	428b      	cmp	r3, r1
 8005c4a:	bf04      	itt	eq
 8005c4c:	6819      	ldreq	r1, [r3, #0]
 8005c4e:	685b      	ldreq	r3, [r3, #4]
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	bf04      	itt	eq
 8005c54:	1949      	addeq	r1, r1, r5
 8005c56:	6021      	streq	r1, [r4, #0]
 8005c58:	6054      	str	r4, [r2, #4]
 8005c5a:	e7ca      	b.n	8005bf2 <_free_r+0x26>
 8005c5c:	b003      	add	sp, #12
 8005c5e:	bd30      	pop	{r4, r5, pc}
 8005c60:	2000035c 	.word	0x2000035c

08005c64 <malloc>:
 8005c64:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <malloc+0xc>)
 8005c66:	4601      	mov	r1, r0
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f000 b823 	b.w	8005cb4 <_malloc_r>
 8005c6e:	bf00      	nop
 8005c70:	200000a4 	.word	0x200000a4

08005c74 <sbrk_aligned>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4e0e      	ldr	r6, [pc, #56]	; (8005cb0 <sbrk_aligned+0x3c>)
 8005c78:	460c      	mov	r4, r1
 8005c7a:	6831      	ldr	r1, [r6, #0]
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	b911      	cbnz	r1, 8005c86 <sbrk_aligned+0x12>
 8005c80:	f000 fdc8 	bl	8006814 <_sbrk_r>
 8005c84:	6030      	str	r0, [r6, #0]
 8005c86:	4621      	mov	r1, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fdc3 	bl	8006814 <_sbrk_r>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d00a      	beq.n	8005ca8 <sbrk_aligned+0x34>
 8005c92:	1cc4      	adds	r4, r0, #3
 8005c94:	f024 0403 	bic.w	r4, r4, #3
 8005c98:	42a0      	cmp	r0, r4
 8005c9a:	d007      	beq.n	8005cac <sbrk_aligned+0x38>
 8005c9c:	1a21      	subs	r1, r4, r0
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 fdb8 	bl	8006814 <_sbrk_r>
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d101      	bne.n	8005cac <sbrk_aligned+0x38>
 8005ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8005cac:	4620      	mov	r0, r4
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	20000360 	.word	0x20000360

08005cb4 <_malloc_r>:
 8005cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	1ccd      	adds	r5, r1, #3
 8005cba:	f025 0503 	bic.w	r5, r5, #3
 8005cbe:	3508      	adds	r5, #8
 8005cc0:	2d0c      	cmp	r5, #12
 8005cc2:	bf38      	it	cc
 8005cc4:	250c      	movcc	r5, #12
 8005cc6:	2d00      	cmp	r5, #0
 8005cc8:	4607      	mov	r7, r0
 8005cca:	db01      	blt.n	8005cd0 <_malloc_r+0x1c>
 8005ccc:	42a9      	cmp	r1, r5
 8005cce:	d905      	bls.n	8005cdc <_malloc_r+0x28>
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005db0 <_malloc_r+0xfc>
 8005ce0:	f000 f868 	bl	8005db4 <__malloc_lock>
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	461c      	mov	r4, r3
 8005cea:	bb5c      	cbnz	r4, 8005d44 <_malloc_r+0x90>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ffc0 	bl	8005c74 <sbrk_aligned>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	d155      	bne.n	8005da6 <_malloc_r+0xf2>
 8005cfa:	f8d8 4000 	ldr.w	r4, [r8]
 8005cfe:	4626      	mov	r6, r4
 8005d00:	2e00      	cmp	r6, #0
 8005d02:	d145      	bne.n	8005d90 <_malloc_r+0xdc>
 8005d04:	2c00      	cmp	r4, #0
 8005d06:	d048      	beq.n	8005d9a <_malloc_r+0xe6>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	eb04 0903 	add.w	r9, r4, r3
 8005d12:	f000 fd7f 	bl	8006814 <_sbrk_r>
 8005d16:	4581      	cmp	r9, r0
 8005d18:	d13f      	bne.n	8005d9a <_malloc_r+0xe6>
 8005d1a:	6821      	ldr	r1, [r4, #0]
 8005d1c:	1a6d      	subs	r5, r5, r1
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4638      	mov	r0, r7
 8005d22:	f7ff ffa7 	bl	8005c74 <sbrk_aligned>
 8005d26:	3001      	adds	r0, #1
 8005d28:	d037      	beq.n	8005d9a <_malloc_r+0xe6>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	442b      	add	r3, r5
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	f8d8 3000 	ldr.w	r3, [r8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d038      	beq.n	8005daa <_malloc_r+0xf6>
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	42a2      	cmp	r2, r4
 8005d3c:	d12b      	bne.n	8005d96 <_malloc_r+0xe2>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	e00f      	b.n	8005d64 <_malloc_r+0xb0>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	1b52      	subs	r2, r2, r5
 8005d48:	d41f      	bmi.n	8005d8a <_malloc_r+0xd6>
 8005d4a:	2a0b      	cmp	r2, #11
 8005d4c:	d917      	bls.n	8005d7e <_malloc_r+0xca>
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	6025      	str	r5, [r4, #0]
 8005d54:	bf18      	it	ne
 8005d56:	6059      	strne	r1, [r3, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	bf08      	it	eq
 8005d5c:	f8c8 1000 	streq.w	r1, [r8]
 8005d60:	5162      	str	r2, [r4, r5]
 8005d62:	604b      	str	r3, [r1, #4]
 8005d64:	4638      	mov	r0, r7
 8005d66:	f104 060b 	add.w	r6, r4, #11
 8005d6a:	f000 f829 	bl	8005dc0 <__malloc_unlock>
 8005d6e:	f026 0607 	bic.w	r6, r6, #7
 8005d72:	1d23      	adds	r3, r4, #4
 8005d74:	1af2      	subs	r2, r6, r3
 8005d76:	d0ae      	beq.n	8005cd6 <_malloc_r+0x22>
 8005d78:	1b9b      	subs	r3, r3, r6
 8005d7a:	50a3      	str	r3, [r4, r2]
 8005d7c:	e7ab      	b.n	8005cd6 <_malloc_r+0x22>
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	6862      	ldr	r2, [r4, #4]
 8005d82:	d1dd      	bne.n	8005d40 <_malloc_r+0x8c>
 8005d84:	f8c8 2000 	str.w	r2, [r8]
 8005d88:	e7ec      	b.n	8005d64 <_malloc_r+0xb0>
 8005d8a:	4623      	mov	r3, r4
 8005d8c:	6864      	ldr	r4, [r4, #4]
 8005d8e:	e7ac      	b.n	8005cea <_malloc_r+0x36>
 8005d90:	4634      	mov	r4, r6
 8005d92:	6876      	ldr	r6, [r6, #4]
 8005d94:	e7b4      	b.n	8005d00 <_malloc_r+0x4c>
 8005d96:	4613      	mov	r3, r2
 8005d98:	e7cc      	b.n	8005d34 <_malloc_r+0x80>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f000 f80e 	bl	8005dc0 <__malloc_unlock>
 8005da4:	e797      	b.n	8005cd6 <_malloc_r+0x22>
 8005da6:	6025      	str	r5, [r4, #0]
 8005da8:	e7dc      	b.n	8005d64 <_malloc_r+0xb0>
 8005daa:	605b      	str	r3, [r3, #4]
 8005dac:	deff      	udf	#255	; 0xff
 8005dae:	bf00      	nop
 8005db0:	2000035c 	.word	0x2000035c

08005db4 <__malloc_lock>:
 8005db4:	4801      	ldr	r0, [pc, #4]	; (8005dbc <__malloc_lock+0x8>)
 8005db6:	f7ff bee8 	b.w	8005b8a <__retarget_lock_acquire_recursive>
 8005dba:	bf00      	nop
 8005dbc:	20000358 	.word	0x20000358

08005dc0 <__malloc_unlock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_unlock+0x8>)
 8005dc2:	f7ff bee3 	b.w	8005b8c <__retarget_lock_release_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20000358 	.word	0x20000358

08005dcc <__sfputc_r>:
 8005dcc:	6893      	ldr	r3, [r2, #8]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	b410      	push	{r4}
 8005dd4:	6093      	str	r3, [r2, #8]
 8005dd6:	da08      	bge.n	8005dea <__sfputc_r+0x1e>
 8005dd8:	6994      	ldr	r4, [r2, #24]
 8005dda:	42a3      	cmp	r3, r4
 8005ddc:	db01      	blt.n	8005de2 <__sfputc_r+0x16>
 8005dde:	290a      	cmp	r1, #10
 8005de0:	d103      	bne.n	8005dea <__sfputc_r+0x1e>
 8005de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de6:	f000 bc5e 	b.w	80066a6 <__swbuf_r>
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	1c58      	adds	r0, r3, #1
 8005dee:	6010      	str	r0, [r2, #0]
 8005df0:	7019      	strb	r1, [r3, #0]
 8005df2:	4608      	mov	r0, r1
 8005df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <__sfputs_r>:
 8005dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	4614      	mov	r4, r2
 8005e02:	18d5      	adds	r5, r2, r3
 8005e04:	42ac      	cmp	r4, r5
 8005e06:	d101      	bne.n	8005e0c <__sfputs_r+0x12>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e007      	b.n	8005e1c <__sfputs_r+0x22>
 8005e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e10:	463a      	mov	r2, r7
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff ffda 	bl	8005dcc <__sfputc_r>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d1f3      	bne.n	8005e04 <__sfputs_r+0xa>
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e20 <_vfiprintf_r>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	460d      	mov	r5, r1
 8005e26:	b09d      	sub	sp, #116	; 0x74
 8005e28:	4614      	mov	r4, r2
 8005e2a:	4698      	mov	r8, r3
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	b118      	cbz	r0, 8005e38 <_vfiprintf_r+0x18>
 8005e30:	6a03      	ldr	r3, [r0, #32]
 8005e32:	b90b      	cbnz	r3, 8005e38 <_vfiprintf_r+0x18>
 8005e34:	f7ff fc8a 	bl	800574c <__sinit>
 8005e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x2a>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x2a>
 8005e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e46:	f7ff fea0 	bl	8005b8a <__retarget_lock_acquire_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	d501      	bpl.n	8005e54 <_vfiprintf_r+0x34>
 8005e50:	692b      	ldr	r3, [r5, #16]
 8005e52:	b99b      	cbnz	r3, 8005e7c <_vfiprintf_r+0x5c>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 fc62 	bl	8006720 <__swsetup_r>
 8005e5c:	b170      	cbz	r0, 8005e7c <_vfiprintf_r+0x5c>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e60:	07dc      	lsls	r4, r3, #31
 8005e62:	d504      	bpl.n	8005e6e <_vfiprintf_r+0x4e>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	; 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	0598      	lsls	r0, r3, #22
 8005e72:	d4f7      	bmi.n	8005e64 <_vfiprintf_r+0x44>
 8005e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e76:	f7ff fe89 	bl	8005b8c <__retarget_lock_release_recursive>
 8005e7a:	e7f3      	b.n	8005e64 <_vfiprintf_r+0x44>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	2320      	movs	r3, #32
 8005e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e8a:	2330      	movs	r3, #48	; 0x30
 8005e8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006040 <_vfiprintf_r+0x220>
 8005e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e94:	f04f 0901 	mov.w	r9, #1
 8005e98:	4623      	mov	r3, r4
 8005e9a:	469a      	mov	sl, r3
 8005e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ea0:	b10a      	cbz	r2, 8005ea6 <_vfiprintf_r+0x86>
 8005ea2:	2a25      	cmp	r2, #37	; 0x25
 8005ea4:	d1f9      	bne.n	8005e9a <_vfiprintf_r+0x7a>
 8005ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eaa:	d00b      	beq.n	8005ec4 <_vfiprintf_r+0xa4>
 8005eac:	465b      	mov	r3, fp
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffa1 	bl	8005dfa <__sfputs_r>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f000 80a9 	beq.w	8006010 <_vfiprintf_r+0x1f0>
 8005ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec0:	445a      	add	r2, fp
 8005ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80a1 	beq.w	8006010 <_vfiprintf_r+0x1f0>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed8:	f10a 0a01 	add.w	sl, sl, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ee6:	4654      	mov	r4, sl
 8005ee8:	2205      	movs	r2, #5
 8005eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eee:	4854      	ldr	r0, [pc, #336]	; (8006040 <_vfiprintf_r+0x220>)
 8005ef0:	f7fa f97e 	bl	80001f0 <memchr>
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	b9d8      	cbnz	r0, 8005f30 <_vfiprintf_r+0x110>
 8005ef8:	06d1      	lsls	r1, r2, #27
 8005efa:	bf44      	itt	mi
 8005efc:	2320      	movmi	r3, #32
 8005efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f02:	0713      	lsls	r3, r2, #28
 8005f04:	bf44      	itt	mi
 8005f06:	232b      	movmi	r3, #43	; 0x2b
 8005f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f10:	2b2a      	cmp	r3, #42	; 0x2a
 8005f12:	d015      	beq.n	8005f40 <_vfiprintf_r+0x120>
 8005f14:	9a07      	ldr	r2, [sp, #28]
 8005f16:	4654      	mov	r4, sl
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f04f 0c0a 	mov.w	ip, #10
 8005f1e:	4621      	mov	r1, r4
 8005f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f24:	3b30      	subs	r3, #48	; 0x30
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d94d      	bls.n	8005fc6 <_vfiprintf_r+0x1a6>
 8005f2a:	b1b0      	cbz	r0, 8005f5a <_vfiprintf_r+0x13a>
 8005f2c:	9207      	str	r2, [sp, #28]
 8005f2e:	e014      	b.n	8005f5a <_vfiprintf_r+0x13a>
 8005f30:	eba0 0308 	sub.w	r3, r0, r8
 8005f34:	fa09 f303 	lsl.w	r3, r9, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	46a2      	mov	sl, r4
 8005f3e:	e7d2      	b.n	8005ee6 <_vfiprintf_r+0xc6>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	1d19      	adds	r1, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9103      	str	r1, [sp, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfbb      	ittet	lt
 8005f4c:	425b      	neglt	r3, r3
 8005f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f52:	9307      	strge	r3, [sp, #28]
 8005f54:	9307      	strlt	r3, [sp, #28]
 8005f56:	bfb8      	it	lt
 8005f58:	9204      	strlt	r2, [sp, #16]
 8005f5a:	7823      	ldrb	r3, [r4, #0]
 8005f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5e:	d10c      	bne.n	8005f7a <_vfiprintf_r+0x15a>
 8005f60:	7863      	ldrb	r3, [r4, #1]
 8005f62:	2b2a      	cmp	r3, #42	; 0x2a
 8005f64:	d134      	bne.n	8005fd0 <_vfiprintf_r+0x1b0>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	1d1a      	adds	r2, r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	9203      	str	r2, [sp, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfb8      	it	lt
 8005f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f76:	3402      	adds	r4, #2
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006050 <_vfiprintf_r+0x230>
 8005f7e:	7821      	ldrb	r1, [r4, #0]
 8005f80:	2203      	movs	r2, #3
 8005f82:	4650      	mov	r0, sl
 8005f84:	f7fa f934 	bl	80001f0 <memchr>
 8005f88:	b138      	cbz	r0, 8005f9a <_vfiprintf_r+0x17a>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	eba0 000a 	sub.w	r0, r0, sl
 8005f90:	2240      	movs	r2, #64	; 0x40
 8005f92:	4082      	lsls	r2, r0
 8005f94:	4313      	orrs	r3, r2
 8005f96:	3401      	adds	r4, #1
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9e:	4829      	ldr	r0, [pc, #164]	; (8006044 <_vfiprintf_r+0x224>)
 8005fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa4:	2206      	movs	r2, #6
 8005fa6:	f7fa f923 	bl	80001f0 <memchr>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d03f      	beq.n	800602e <_vfiprintf_r+0x20e>
 8005fae:	4b26      	ldr	r3, [pc, #152]	; (8006048 <_vfiprintf_r+0x228>)
 8005fb0:	bb1b      	cbnz	r3, 8005ffa <_vfiprintf_r+0x1da>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	3308      	adds	r3, #8
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	443b      	add	r3, r7
 8005fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc4:	e768      	b.n	8005e98 <_vfiprintf_r+0x78>
 8005fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fca:	460c      	mov	r4, r1
 8005fcc:	2001      	movs	r0, #1
 8005fce:	e7a6      	b.n	8005f1e <_vfiprintf_r+0xfe>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	3401      	adds	r4, #1
 8005fd4:	9305      	str	r3, [sp, #20]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f04f 0c0a 	mov.w	ip, #10
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe2:	3a30      	subs	r2, #48	; 0x30
 8005fe4:	2a09      	cmp	r2, #9
 8005fe6:	d903      	bls.n	8005ff0 <_vfiprintf_r+0x1d0>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0c6      	beq.n	8005f7a <_vfiprintf_r+0x15a>
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	e7c4      	b.n	8005f7a <_vfiprintf_r+0x15a>
 8005ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7f0      	b.n	8005fdc <_vfiprintf_r+0x1bc>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	462a      	mov	r2, r5
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <_vfiprintf_r+0x22c>)
 8006002:	a904      	add	r1, sp, #16
 8006004:	4630      	mov	r0, r6
 8006006:	f3af 8000 	nop.w
 800600a:	4607      	mov	r7, r0
 800600c:	1c78      	adds	r0, r7, #1
 800600e:	d1d6      	bne.n	8005fbe <_vfiprintf_r+0x19e>
 8006010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006012:	07d9      	lsls	r1, r3, #31
 8006014:	d405      	bmi.n	8006022 <_vfiprintf_r+0x202>
 8006016:	89ab      	ldrh	r3, [r5, #12]
 8006018:	059a      	lsls	r2, r3, #22
 800601a:	d402      	bmi.n	8006022 <_vfiprintf_r+0x202>
 800601c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800601e:	f7ff fdb5 	bl	8005b8c <__retarget_lock_release_recursive>
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	065b      	lsls	r3, r3, #25
 8006026:	f53f af1d 	bmi.w	8005e64 <_vfiprintf_r+0x44>
 800602a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800602c:	e71c      	b.n	8005e68 <_vfiprintf_r+0x48>
 800602e:	ab03      	add	r3, sp, #12
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	462a      	mov	r2, r5
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_vfiprintf_r+0x22c>)
 8006036:	a904      	add	r1, sp, #16
 8006038:	4630      	mov	r0, r6
 800603a:	f000 f879 	bl	8006130 <_printf_i>
 800603e:	e7e4      	b.n	800600a <_vfiprintf_r+0x1ea>
 8006040:	08006cf2 	.word	0x08006cf2
 8006044:	08006cfc 	.word	0x08006cfc
 8006048:	00000000 	.word	0x00000000
 800604c:	08005dfb 	.word	0x08005dfb
 8006050:	08006cf8 	.word	0x08006cf8

08006054 <_printf_common>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	4616      	mov	r6, r2
 800605a:	4699      	mov	r9, r3
 800605c:	688a      	ldr	r2, [r1, #8]
 800605e:	690b      	ldr	r3, [r1, #16]
 8006060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006064:	4293      	cmp	r3, r2
 8006066:	bfb8      	it	lt
 8006068:	4613      	movlt	r3, r2
 800606a:	6033      	str	r3, [r6, #0]
 800606c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006070:	4607      	mov	r7, r0
 8006072:	460c      	mov	r4, r1
 8006074:	b10a      	cbz	r2, 800607a <_printf_common+0x26>
 8006076:	3301      	adds	r3, #1
 8006078:	6033      	str	r3, [r6, #0]
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	0699      	lsls	r1, r3, #26
 800607e:	bf42      	ittt	mi
 8006080:	6833      	ldrmi	r3, [r6, #0]
 8006082:	3302      	addmi	r3, #2
 8006084:	6033      	strmi	r3, [r6, #0]
 8006086:	6825      	ldr	r5, [r4, #0]
 8006088:	f015 0506 	ands.w	r5, r5, #6
 800608c:	d106      	bne.n	800609c <_printf_common+0x48>
 800608e:	f104 0a19 	add.w	sl, r4, #25
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	6832      	ldr	r2, [r6, #0]
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	42ab      	cmp	r3, r5
 800609a:	dc26      	bgt.n	80060ea <_printf_common+0x96>
 800609c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a0:	1e13      	subs	r3, r2, #0
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	0692      	lsls	r2, r2, #26
 80060aa:	d42b      	bmi.n	8006104 <_printf_common+0xb0>
 80060ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d01e      	beq.n	80060f8 <_printf_common+0xa4>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	6922      	ldr	r2, [r4, #16]
 80060be:	f003 0306 	and.w	r3, r3, #6
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	bf02      	ittt	eq
 80060c6:	68e5      	ldreq	r5, [r4, #12]
 80060c8:	6833      	ldreq	r3, [r6, #0]
 80060ca:	1aed      	subeq	r5, r5, r3
 80060cc:	68a3      	ldr	r3, [r4, #8]
 80060ce:	bf0c      	ite	eq
 80060d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d4:	2500      	movne	r5, #0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfc4      	itt	gt
 80060da:	1a9b      	subgt	r3, r3, r2
 80060dc:	18ed      	addgt	r5, r5, r3
 80060de:	2600      	movs	r6, #0
 80060e0:	341a      	adds	r4, #26
 80060e2:	42b5      	cmp	r5, r6
 80060e4:	d11a      	bne.n	800611c <_printf_common+0xc8>
 80060e6:	2000      	movs	r0, #0
 80060e8:	e008      	b.n	80060fc <_printf_common+0xa8>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4652      	mov	r2, sl
 80060ee:	4649      	mov	r1, r9
 80060f0:	4638      	mov	r0, r7
 80060f2:	47c0      	blx	r8
 80060f4:	3001      	adds	r0, #1
 80060f6:	d103      	bne.n	8006100 <_printf_common+0xac>
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	3501      	adds	r5, #1
 8006102:	e7c6      	b.n	8006092 <_printf_common+0x3e>
 8006104:	18e1      	adds	r1, r4, r3
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	2030      	movs	r0, #48	; 0x30
 800610a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800610e:	4422      	add	r2, r4
 8006110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006118:	3302      	adds	r3, #2
 800611a:	e7c7      	b.n	80060ac <_printf_common+0x58>
 800611c:	2301      	movs	r3, #1
 800611e:	4622      	mov	r2, r4
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	3001      	adds	r0, #1
 8006128:	d0e6      	beq.n	80060f8 <_printf_common+0xa4>
 800612a:	3601      	adds	r6, #1
 800612c:	e7d9      	b.n	80060e2 <_printf_common+0x8e>
	...

08006130 <_printf_i>:
 8006130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	7e0f      	ldrb	r7, [r1, #24]
 8006136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006138:	2f78      	cmp	r7, #120	; 0x78
 800613a:	4691      	mov	r9, r2
 800613c:	4680      	mov	r8, r0
 800613e:	460c      	mov	r4, r1
 8006140:	469a      	mov	sl, r3
 8006142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006146:	d807      	bhi.n	8006158 <_printf_i+0x28>
 8006148:	2f62      	cmp	r7, #98	; 0x62
 800614a:	d80a      	bhi.n	8006162 <_printf_i+0x32>
 800614c:	2f00      	cmp	r7, #0
 800614e:	f000 80d4 	beq.w	80062fa <_printf_i+0x1ca>
 8006152:	2f58      	cmp	r7, #88	; 0x58
 8006154:	f000 80c0 	beq.w	80062d8 <_printf_i+0x1a8>
 8006158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800615c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006160:	e03a      	b.n	80061d8 <_printf_i+0xa8>
 8006162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006166:	2b15      	cmp	r3, #21
 8006168:	d8f6      	bhi.n	8006158 <_printf_i+0x28>
 800616a:	a101      	add	r1, pc, #4	; (adr r1, 8006170 <_printf_i+0x40>)
 800616c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006170:	080061c9 	.word	0x080061c9
 8006174:	080061dd 	.word	0x080061dd
 8006178:	08006159 	.word	0x08006159
 800617c:	08006159 	.word	0x08006159
 8006180:	08006159 	.word	0x08006159
 8006184:	08006159 	.word	0x08006159
 8006188:	080061dd 	.word	0x080061dd
 800618c:	08006159 	.word	0x08006159
 8006190:	08006159 	.word	0x08006159
 8006194:	08006159 	.word	0x08006159
 8006198:	08006159 	.word	0x08006159
 800619c:	080062e1 	.word	0x080062e1
 80061a0:	08006209 	.word	0x08006209
 80061a4:	0800629b 	.word	0x0800629b
 80061a8:	08006159 	.word	0x08006159
 80061ac:	08006159 	.word	0x08006159
 80061b0:	08006303 	.word	0x08006303
 80061b4:	08006159 	.word	0x08006159
 80061b8:	08006209 	.word	0x08006209
 80061bc:	08006159 	.word	0x08006159
 80061c0:	08006159 	.word	0x08006159
 80061c4:	080062a3 	.word	0x080062a3
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	1d1a      	adds	r2, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	602a      	str	r2, [r5, #0]
 80061d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d8:	2301      	movs	r3, #1
 80061da:	e09f      	b.n	800631c <_printf_i+0x1ec>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	682b      	ldr	r3, [r5, #0]
 80061e0:	0607      	lsls	r7, r0, #24
 80061e2:	f103 0104 	add.w	r1, r3, #4
 80061e6:	6029      	str	r1, [r5, #0]
 80061e8:	d501      	bpl.n	80061ee <_printf_i+0xbe>
 80061ea:	681e      	ldr	r6, [r3, #0]
 80061ec:	e003      	b.n	80061f6 <_printf_i+0xc6>
 80061ee:	0646      	lsls	r6, r0, #25
 80061f0:	d5fb      	bpl.n	80061ea <_printf_i+0xba>
 80061f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	da03      	bge.n	8006202 <_printf_i+0xd2>
 80061fa:	232d      	movs	r3, #45	; 0x2d
 80061fc:	4276      	negs	r6, r6
 80061fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006202:	485a      	ldr	r0, [pc, #360]	; (800636c <_printf_i+0x23c>)
 8006204:	230a      	movs	r3, #10
 8006206:	e012      	b.n	800622e <_printf_i+0xfe>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	1d19      	adds	r1, r3, #4
 800620e:	6029      	str	r1, [r5, #0]
 8006210:	0605      	lsls	r5, r0, #24
 8006212:	d501      	bpl.n	8006218 <_printf_i+0xe8>
 8006214:	681e      	ldr	r6, [r3, #0]
 8006216:	e002      	b.n	800621e <_printf_i+0xee>
 8006218:	0641      	lsls	r1, r0, #25
 800621a:	d5fb      	bpl.n	8006214 <_printf_i+0xe4>
 800621c:	881e      	ldrh	r6, [r3, #0]
 800621e:	4853      	ldr	r0, [pc, #332]	; (800636c <_printf_i+0x23c>)
 8006220:	2f6f      	cmp	r7, #111	; 0x6f
 8006222:	bf0c      	ite	eq
 8006224:	2308      	moveq	r3, #8
 8006226:	230a      	movne	r3, #10
 8006228:	2100      	movs	r1, #0
 800622a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800622e:	6865      	ldr	r5, [r4, #4]
 8006230:	60a5      	str	r5, [r4, #8]
 8006232:	2d00      	cmp	r5, #0
 8006234:	bfa2      	ittt	ge
 8006236:	6821      	ldrge	r1, [r4, #0]
 8006238:	f021 0104 	bicge.w	r1, r1, #4
 800623c:	6021      	strge	r1, [r4, #0]
 800623e:	b90e      	cbnz	r6, 8006244 <_printf_i+0x114>
 8006240:	2d00      	cmp	r5, #0
 8006242:	d04b      	beq.n	80062dc <_printf_i+0x1ac>
 8006244:	4615      	mov	r5, r2
 8006246:	fbb6 f1f3 	udiv	r1, r6, r3
 800624a:	fb03 6711 	mls	r7, r3, r1, r6
 800624e:	5dc7      	ldrb	r7, [r0, r7]
 8006250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006254:	4637      	mov	r7, r6
 8006256:	42bb      	cmp	r3, r7
 8006258:	460e      	mov	r6, r1
 800625a:	d9f4      	bls.n	8006246 <_printf_i+0x116>
 800625c:	2b08      	cmp	r3, #8
 800625e:	d10b      	bne.n	8006278 <_printf_i+0x148>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	07de      	lsls	r6, r3, #31
 8006264:	d508      	bpl.n	8006278 <_printf_i+0x148>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	6861      	ldr	r1, [r4, #4]
 800626a:	4299      	cmp	r1, r3
 800626c:	bfde      	ittt	le
 800626e:	2330      	movle	r3, #48	; 0x30
 8006270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006274:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006278:	1b52      	subs	r2, r2, r5
 800627a:	6122      	str	r2, [r4, #16]
 800627c:	f8cd a000 	str.w	sl, [sp]
 8006280:	464b      	mov	r3, r9
 8006282:	aa03      	add	r2, sp, #12
 8006284:	4621      	mov	r1, r4
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fee4 	bl	8006054 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	d14a      	bne.n	8006326 <_printf_i+0x1f6>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	b004      	add	sp, #16
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f043 0320 	orr.w	r3, r3, #32
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	4833      	ldr	r0, [pc, #204]	; (8006370 <_printf_i+0x240>)
 80062a4:	2778      	movs	r7, #120	; 0x78
 80062a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	6829      	ldr	r1, [r5, #0]
 80062ae:	061f      	lsls	r7, r3, #24
 80062b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80062b4:	d402      	bmi.n	80062bc <_printf_i+0x18c>
 80062b6:	065f      	lsls	r7, r3, #25
 80062b8:	bf48      	it	mi
 80062ba:	b2b6      	uxthmi	r6, r6
 80062bc:	07df      	lsls	r7, r3, #31
 80062be:	bf48      	it	mi
 80062c0:	f043 0320 	orrmi.w	r3, r3, #32
 80062c4:	6029      	str	r1, [r5, #0]
 80062c6:	bf48      	it	mi
 80062c8:	6023      	strmi	r3, [r4, #0]
 80062ca:	b91e      	cbnz	r6, 80062d4 <_printf_i+0x1a4>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	f023 0320 	bic.w	r3, r3, #32
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	2310      	movs	r3, #16
 80062d6:	e7a7      	b.n	8006228 <_printf_i+0xf8>
 80062d8:	4824      	ldr	r0, [pc, #144]	; (800636c <_printf_i+0x23c>)
 80062da:	e7e4      	b.n	80062a6 <_printf_i+0x176>
 80062dc:	4615      	mov	r5, r2
 80062de:	e7bd      	b.n	800625c <_printf_i+0x12c>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	6826      	ldr	r6, [r4, #0]
 80062e4:	6961      	ldr	r1, [r4, #20]
 80062e6:	1d18      	adds	r0, r3, #4
 80062e8:	6028      	str	r0, [r5, #0]
 80062ea:	0635      	lsls	r5, r6, #24
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	d501      	bpl.n	80062f4 <_printf_i+0x1c4>
 80062f0:	6019      	str	r1, [r3, #0]
 80062f2:	e002      	b.n	80062fa <_printf_i+0x1ca>
 80062f4:	0670      	lsls	r0, r6, #25
 80062f6:	d5fb      	bpl.n	80062f0 <_printf_i+0x1c0>
 80062f8:	8019      	strh	r1, [r3, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	4615      	mov	r5, r2
 8006300:	e7bc      	b.n	800627c <_printf_i+0x14c>
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	1d1a      	adds	r2, r3, #4
 8006306:	602a      	str	r2, [r5, #0]
 8006308:	681d      	ldr	r5, [r3, #0]
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	2100      	movs	r1, #0
 800630e:	4628      	mov	r0, r5
 8006310:	f7f9 ff6e 	bl	80001f0 <memchr>
 8006314:	b108      	cbz	r0, 800631a <_printf_i+0x1ea>
 8006316:	1b40      	subs	r0, r0, r5
 8006318:	6060      	str	r0, [r4, #4]
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	2300      	movs	r3, #0
 8006320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006324:	e7aa      	b.n	800627c <_printf_i+0x14c>
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	462a      	mov	r2, r5
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d0ad      	beq.n	8006290 <_printf_i+0x160>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	079b      	lsls	r3, r3, #30
 8006338:	d413      	bmi.n	8006362 <_printf_i+0x232>
 800633a:	68e0      	ldr	r0, [r4, #12]
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	4298      	cmp	r0, r3
 8006340:	bfb8      	it	lt
 8006342:	4618      	movlt	r0, r3
 8006344:	e7a6      	b.n	8006294 <_printf_i+0x164>
 8006346:	2301      	movs	r3, #1
 8006348:	4632      	mov	r2, r6
 800634a:	4649      	mov	r1, r9
 800634c:	4640      	mov	r0, r8
 800634e:	47d0      	blx	sl
 8006350:	3001      	adds	r0, #1
 8006352:	d09d      	beq.n	8006290 <_printf_i+0x160>
 8006354:	3501      	adds	r5, #1
 8006356:	68e3      	ldr	r3, [r4, #12]
 8006358:	9903      	ldr	r1, [sp, #12]
 800635a:	1a5b      	subs	r3, r3, r1
 800635c:	42ab      	cmp	r3, r5
 800635e:	dcf2      	bgt.n	8006346 <_printf_i+0x216>
 8006360:	e7eb      	b.n	800633a <_printf_i+0x20a>
 8006362:	2500      	movs	r5, #0
 8006364:	f104 0619 	add.w	r6, r4, #25
 8006368:	e7f5      	b.n	8006356 <_printf_i+0x226>
 800636a:	bf00      	nop
 800636c:	08006d03 	.word	0x08006d03
 8006370:	08006d14 	.word	0x08006d14

08006374 <__sflush_r>:
 8006374:	898a      	ldrh	r2, [r1, #12]
 8006376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	0710      	lsls	r0, r2, #28
 800637e:	460c      	mov	r4, r1
 8006380:	d458      	bmi.n	8006434 <__sflush_r+0xc0>
 8006382:	684b      	ldr	r3, [r1, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc05      	bgt.n	8006394 <__sflush_r+0x20>
 8006388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc02      	bgt.n	8006394 <__sflush_r+0x20>
 800638e:	2000      	movs	r0, #0
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006396:	2e00      	cmp	r6, #0
 8006398:	d0f9      	beq.n	800638e <__sflush_r+0x1a>
 800639a:	2300      	movs	r3, #0
 800639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063a0:	682f      	ldr	r7, [r5, #0]
 80063a2:	6a21      	ldr	r1, [r4, #32]
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	d032      	beq.n	800640e <__sflush_r+0x9a>
 80063a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	075a      	lsls	r2, r3, #29
 80063ae:	d505      	bpl.n	80063bc <__sflush_r+0x48>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	1ac0      	subs	r0, r0, r3
 80063b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063b6:	b10b      	cbz	r3, 80063bc <__sflush_r+0x48>
 80063b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063ba:	1ac0      	subs	r0, r0, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	4602      	mov	r2, r0
 80063c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	d106      	bne.n	80063dc <__sflush_r+0x68>
 80063ce:	6829      	ldr	r1, [r5, #0]
 80063d0:	291d      	cmp	r1, #29
 80063d2:	d82b      	bhi.n	800642c <__sflush_r+0xb8>
 80063d4:	4a29      	ldr	r2, [pc, #164]	; (800647c <__sflush_r+0x108>)
 80063d6:	410a      	asrs	r2, r1
 80063d8:	07d6      	lsls	r6, r2, #31
 80063da:	d427      	bmi.n	800642c <__sflush_r+0xb8>
 80063dc:	2200      	movs	r2, #0
 80063de:	6062      	str	r2, [r4, #4]
 80063e0:	04d9      	lsls	r1, r3, #19
 80063e2:	6922      	ldr	r2, [r4, #16]
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	d504      	bpl.n	80063f2 <__sflush_r+0x7e>
 80063e8:	1c42      	adds	r2, r0, #1
 80063ea:	d101      	bne.n	80063f0 <__sflush_r+0x7c>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b903      	cbnz	r3, 80063f2 <__sflush_r+0x7e>
 80063f0:	6560      	str	r0, [r4, #84]	; 0x54
 80063f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063f4:	602f      	str	r7, [r5, #0]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d0c9      	beq.n	800638e <__sflush_r+0x1a>
 80063fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063fe:	4299      	cmp	r1, r3
 8006400:	d002      	beq.n	8006408 <__sflush_r+0x94>
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff fbe2 	bl	8005bcc <_free_r>
 8006408:	2000      	movs	r0, #0
 800640a:	6360      	str	r0, [r4, #52]	; 0x34
 800640c:	e7c0      	b.n	8006390 <__sflush_r+0x1c>
 800640e:	2301      	movs	r3, #1
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	1c41      	adds	r1, r0, #1
 8006416:	d1c8      	bne.n	80063aa <__sflush_r+0x36>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c5      	beq.n	80063aa <__sflush_r+0x36>
 800641e:	2b1d      	cmp	r3, #29
 8006420:	d001      	beq.n	8006426 <__sflush_r+0xb2>
 8006422:	2b16      	cmp	r3, #22
 8006424:	d101      	bne.n	800642a <__sflush_r+0xb6>
 8006426:	602f      	str	r7, [r5, #0]
 8006428:	e7b1      	b.n	800638e <__sflush_r+0x1a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7ad      	b.n	8006390 <__sflush_r+0x1c>
 8006434:	690f      	ldr	r7, [r1, #16]
 8006436:	2f00      	cmp	r7, #0
 8006438:	d0a9      	beq.n	800638e <__sflush_r+0x1a>
 800643a:	0793      	lsls	r3, r2, #30
 800643c:	680e      	ldr	r6, [r1, #0]
 800643e:	bf08      	it	eq
 8006440:	694b      	ldreq	r3, [r1, #20]
 8006442:	600f      	str	r7, [r1, #0]
 8006444:	bf18      	it	ne
 8006446:	2300      	movne	r3, #0
 8006448:	eba6 0807 	sub.w	r8, r6, r7
 800644c:	608b      	str	r3, [r1, #8]
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	dd9c      	ble.n	800638e <__sflush_r+0x1a>
 8006454:	6a21      	ldr	r1, [r4, #32]
 8006456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006458:	4643      	mov	r3, r8
 800645a:	463a      	mov	r2, r7
 800645c:	4628      	mov	r0, r5
 800645e:	47b0      	blx	r6
 8006460:	2800      	cmp	r0, #0
 8006462:	dc06      	bgt.n	8006472 <__sflush_r+0xfe>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e78e      	b.n	8006390 <__sflush_r+0x1c>
 8006472:	4407      	add	r7, r0
 8006474:	eba8 0800 	sub.w	r8, r8, r0
 8006478:	e7e9      	b.n	800644e <__sflush_r+0xda>
 800647a:	bf00      	nop
 800647c:	dfbffffe 	.word	0xdfbffffe

08006480 <_fflush_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b913      	cbnz	r3, 8006490 <_fflush_r+0x10>
 800648a:	2500      	movs	r5, #0
 800648c:	4628      	mov	r0, r5
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	b118      	cbz	r0, 800649a <_fflush_r+0x1a>
 8006492:	6a03      	ldr	r3, [r0, #32]
 8006494:	b90b      	cbnz	r3, 800649a <_fflush_r+0x1a>
 8006496:	f7ff f959 	bl	800574c <__sinit>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f3      	beq.n	800648a <_fflush_r+0xa>
 80064a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064a4:	07d0      	lsls	r0, r2, #31
 80064a6:	d404      	bmi.n	80064b2 <_fflush_r+0x32>
 80064a8:	0599      	lsls	r1, r3, #22
 80064aa:	d402      	bmi.n	80064b2 <_fflush_r+0x32>
 80064ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ae:	f7ff fb6c 	bl	8005b8a <__retarget_lock_acquire_recursive>
 80064b2:	4628      	mov	r0, r5
 80064b4:	4621      	mov	r1, r4
 80064b6:	f7ff ff5d 	bl	8006374 <__sflush_r>
 80064ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064bc:	07da      	lsls	r2, r3, #31
 80064be:	4605      	mov	r5, r0
 80064c0:	d4e4      	bmi.n	800648c <_fflush_r+0xc>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	059b      	lsls	r3, r3, #22
 80064c6:	d4e1      	bmi.n	800648c <_fflush_r+0xc>
 80064c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ca:	f7ff fb5f 	bl	8005b8c <__retarget_lock_release_recursive>
 80064ce:	e7dd      	b.n	800648c <_fflush_r+0xc>

080064d0 <fiprintf>:
 80064d0:	b40e      	push	{r1, r2, r3}
 80064d2:	b503      	push	{r0, r1, lr}
 80064d4:	4601      	mov	r1, r0
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	4805      	ldr	r0, [pc, #20]	; (80064f0 <fiprintf+0x20>)
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	6800      	ldr	r0, [r0, #0]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f7ff fc9d 	bl	8005e20 <_vfiprintf_r>
 80064e6:	b002      	add	sp, #8
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b003      	add	sp, #12
 80064ee:	4770      	bx	lr
 80064f0:	200000a4 	.word	0x200000a4

080064f4 <_getc_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	460c      	mov	r4, r1
 80064f8:	4605      	mov	r5, r0
 80064fa:	b118      	cbz	r0, 8006504 <_getc_r+0x10>
 80064fc:	6a03      	ldr	r3, [r0, #32]
 80064fe:	b90b      	cbnz	r3, 8006504 <_getc_r+0x10>
 8006500:	f7ff f924 	bl	800574c <__sinit>
 8006504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006506:	07d8      	lsls	r0, r3, #31
 8006508:	d405      	bmi.n	8006516 <_getc_r+0x22>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	0599      	lsls	r1, r3, #22
 800650e:	d402      	bmi.n	8006516 <_getc_r+0x22>
 8006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006512:	f7ff fb3a 	bl	8005b8a <__retarget_lock_acquire_recursive>
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	3b01      	subs	r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	6063      	str	r3, [r4, #4]
 800651e:	da0f      	bge.n	8006540 <_getc_r+0x4c>
 8006520:	4628      	mov	r0, r5
 8006522:	4621      	mov	r1, r4
 8006524:	f000 f8a7 	bl	8006676 <__srget_r>
 8006528:	4605      	mov	r5, r0
 800652a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652c:	07da      	lsls	r2, r3, #31
 800652e:	d405      	bmi.n	800653c <_getc_r+0x48>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	059b      	lsls	r3, r3, #22
 8006534:	d402      	bmi.n	800653c <_getc_r+0x48>
 8006536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006538:	f7ff fb28 	bl	8005b8c <__retarget_lock_release_recursive>
 800653c:	4628      	mov	r0, r5
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	781d      	ldrb	r5, [r3, #0]
 8006548:	e7ef      	b.n	800652a <_getc_r+0x36>

0800654a <__swhatbuf_r>:
 800654a:	b570      	push	{r4, r5, r6, lr}
 800654c:	460c      	mov	r4, r1
 800654e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006552:	2900      	cmp	r1, #0
 8006554:	b096      	sub	sp, #88	; 0x58
 8006556:	4615      	mov	r5, r2
 8006558:	461e      	mov	r6, r3
 800655a:	da0d      	bge.n	8006578 <__swhatbuf_r+0x2e>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	bf0c      	ite	eq
 8006568:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800656c:	2340      	movne	r3, #64	; 0x40
 800656e:	2000      	movs	r0, #0
 8006570:	6031      	str	r1, [r6, #0]
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	b016      	add	sp, #88	; 0x58
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	466a      	mov	r2, sp
 800657a:	f000 f929 	bl	80067d0 <_fstat_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	dbec      	blt.n	800655c <__swhatbuf_r+0x12>
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006588:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800658c:	4259      	negs	r1, r3
 800658e:	4159      	adcs	r1, r3
 8006590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006594:	e7eb      	b.n	800656e <__swhatbuf_r+0x24>

08006596 <__smakebuf_r>:
 8006596:	898b      	ldrh	r3, [r1, #12]
 8006598:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800659a:	079d      	lsls	r5, r3, #30
 800659c:	4606      	mov	r6, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	d507      	bpl.n	80065b2 <__smakebuf_r+0x1c>
 80065a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	2301      	movs	r3, #1
 80065ac:	6163      	str	r3, [r4, #20]
 80065ae:	b002      	add	sp, #8
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	ab01      	add	r3, sp, #4
 80065b4:	466a      	mov	r2, sp
 80065b6:	f7ff ffc8 	bl	800654a <__swhatbuf_r>
 80065ba:	9900      	ldr	r1, [sp, #0]
 80065bc:	4605      	mov	r5, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff fb78 	bl	8005cb4 <_malloc_r>
 80065c4:	b948      	cbnz	r0, 80065da <__smakebuf_r+0x44>
 80065c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ca:	059a      	lsls	r2, r3, #22
 80065cc:	d4ef      	bmi.n	80065ae <__smakebuf_r+0x18>
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	e7e3      	b.n	80065a2 <__smakebuf_r+0xc>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	6020      	str	r0, [r4, #0]
 80065de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	6163      	str	r3, [r4, #20]
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	6120      	str	r0, [r4, #16]
 80065ec:	b15b      	cbz	r3, 8006606 <__smakebuf_r+0x70>
 80065ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 f8fe 	bl	80067f4 <_isatty_r>
 80065f8:	b128      	cbz	r0, 8006606 <__smakebuf_r+0x70>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	431d      	orrs	r5, r3
 800660a:	81a5      	strh	r5, [r4, #12]
 800660c:	e7cf      	b.n	80065ae <__smakebuf_r+0x18>

0800660e <_putc_r>:
 800660e:	b570      	push	{r4, r5, r6, lr}
 8006610:	460d      	mov	r5, r1
 8006612:	4614      	mov	r4, r2
 8006614:	4606      	mov	r6, r0
 8006616:	b118      	cbz	r0, 8006620 <_putc_r+0x12>
 8006618:	6a03      	ldr	r3, [r0, #32]
 800661a:	b90b      	cbnz	r3, 8006620 <_putc_r+0x12>
 800661c:	f7ff f896 	bl	800574c <__sinit>
 8006620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006622:	07d8      	lsls	r0, r3, #31
 8006624:	d405      	bmi.n	8006632 <_putc_r+0x24>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	0599      	lsls	r1, r3, #22
 800662a:	d402      	bmi.n	8006632 <_putc_r+0x24>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f7ff faac 	bl	8005b8a <__retarget_lock_acquire_recursive>
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	3b01      	subs	r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	60a3      	str	r3, [r4, #8]
 800663a:	da05      	bge.n	8006648 <_putc_r+0x3a>
 800663c:	69a2      	ldr	r2, [r4, #24]
 800663e:	4293      	cmp	r3, r2
 8006640:	db12      	blt.n	8006668 <_putc_r+0x5a>
 8006642:	b2eb      	uxtb	r3, r5
 8006644:	2b0a      	cmp	r3, #10
 8006646:	d00f      	beq.n	8006668 <_putc_r+0x5a>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	701d      	strb	r5, [r3, #0]
 8006650:	b2ed      	uxtb	r5, r5
 8006652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006654:	07da      	lsls	r2, r3, #31
 8006656:	d405      	bmi.n	8006664 <_putc_r+0x56>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	059b      	lsls	r3, r3, #22
 800665c:	d402      	bmi.n	8006664 <_putc_r+0x56>
 800665e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006660:	f7ff fa94 	bl	8005b8c <__retarget_lock_release_recursive>
 8006664:	4628      	mov	r0, r5
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	4629      	mov	r1, r5
 800666a:	4622      	mov	r2, r4
 800666c:	4630      	mov	r0, r6
 800666e:	f000 f81a 	bl	80066a6 <__swbuf_r>
 8006672:	4605      	mov	r5, r0
 8006674:	e7ed      	b.n	8006652 <_putc_r+0x44>

08006676 <__srget_r>:
 8006676:	b538      	push	{r3, r4, r5, lr}
 8006678:	460c      	mov	r4, r1
 800667a:	4605      	mov	r5, r0
 800667c:	b118      	cbz	r0, 8006686 <__srget_r+0x10>
 800667e:	6a03      	ldr	r3, [r0, #32]
 8006680:	b90b      	cbnz	r3, 8006686 <__srget_r+0x10>
 8006682:	f7ff f863 	bl	800574c <__sinit>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f8e9 	bl	8006860 <__srefill_r>
 800668e:	b938      	cbnz	r0, 80066a0 <__srget_r+0x2a>
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	3b01      	subs	r3, #1
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	7818      	ldrb	r0, [r3, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	e7fb      	b.n	800669e <__srget_r+0x28>

080066a6 <__swbuf_r>:
 80066a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a8:	460e      	mov	r6, r1
 80066aa:	4614      	mov	r4, r2
 80066ac:	4605      	mov	r5, r0
 80066ae:	b118      	cbz	r0, 80066b8 <__swbuf_r+0x12>
 80066b0:	6a03      	ldr	r3, [r0, #32]
 80066b2:	b90b      	cbnz	r3, 80066b8 <__swbuf_r+0x12>
 80066b4:	f7ff f84a 	bl	800574c <__sinit>
 80066b8:	69a3      	ldr	r3, [r4, #24]
 80066ba:	60a3      	str	r3, [r4, #8]
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	071a      	lsls	r2, r3, #28
 80066c0:	d525      	bpl.n	800670e <__swbuf_r+0x68>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	b31b      	cbz	r3, 800670e <__swbuf_r+0x68>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	6922      	ldr	r2, [r4, #16]
 80066ca:	1a98      	subs	r0, r3, r2
 80066cc:	6963      	ldr	r3, [r4, #20]
 80066ce:	b2f6      	uxtb	r6, r6
 80066d0:	4283      	cmp	r3, r0
 80066d2:	4637      	mov	r7, r6
 80066d4:	dc04      	bgt.n	80066e0 <__swbuf_r+0x3a>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fed1 	bl	8006480 <_fflush_r>
 80066de:	b9e0      	cbnz	r0, 800671a <__swbuf_r+0x74>
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	6022      	str	r2, [r4, #0]
 80066ec:	701e      	strb	r6, [r3, #0]
 80066ee:	6962      	ldr	r2, [r4, #20]
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d004      	beq.n	8006700 <__swbuf_r+0x5a>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	07db      	lsls	r3, r3, #31
 80066fa:	d506      	bpl.n	800670a <__swbuf_r+0x64>
 80066fc:	2e0a      	cmp	r6, #10
 80066fe:	d104      	bne.n	800670a <__swbuf_r+0x64>
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f7ff febc 	bl	8006480 <_fflush_r>
 8006708:	b938      	cbnz	r0, 800671a <__swbuf_r+0x74>
 800670a:	4638      	mov	r0, r7
 800670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670e:	4621      	mov	r1, r4
 8006710:	4628      	mov	r0, r5
 8006712:	f000 f805 	bl	8006720 <__swsetup_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	d0d5      	beq.n	80066c6 <__swbuf_r+0x20>
 800671a:	f04f 37ff 	mov.w	r7, #4294967295
 800671e:	e7f4      	b.n	800670a <__swbuf_r+0x64>

08006720 <__swsetup_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <__swsetup_r+0xac>)
 8006724:	4605      	mov	r5, r0
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	460c      	mov	r4, r1
 800672a:	b118      	cbz	r0, 8006734 <__swsetup_r+0x14>
 800672c:	6a03      	ldr	r3, [r0, #32]
 800672e:	b90b      	cbnz	r3, 8006734 <__swsetup_r+0x14>
 8006730:	f7ff f80c 	bl	800574c <__sinit>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800673a:	0718      	lsls	r0, r3, #28
 800673c:	d422      	bmi.n	8006784 <__swsetup_r+0x64>
 800673e:	06d9      	lsls	r1, r3, #27
 8006740:	d407      	bmi.n	8006752 <__swsetup_r+0x32>
 8006742:	2309      	movs	r3, #9
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e034      	b.n	80067bc <__swsetup_r+0x9c>
 8006752:	0758      	lsls	r0, r3, #29
 8006754:	d512      	bpl.n	800677c <__swsetup_r+0x5c>
 8006756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006758:	b141      	cbz	r1, 800676c <__swsetup_r+0x4c>
 800675a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800675e:	4299      	cmp	r1, r3
 8006760:	d002      	beq.n	8006768 <__swsetup_r+0x48>
 8006762:	4628      	mov	r0, r5
 8006764:	f7ff fa32 	bl	8005bcc <_free_r>
 8006768:	2300      	movs	r3, #0
 800676a:	6363      	str	r3, [r4, #52]	; 0x34
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	2300      	movs	r3, #0
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f043 0308 	orr.w	r3, r3, #8
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	b94b      	cbnz	r3, 800679c <__swsetup_r+0x7c>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800678e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006792:	d003      	beq.n	800679c <__swsetup_r+0x7c>
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f7ff fefd 	bl	8006596 <__smakebuf_r>
 800679c:	89a0      	ldrh	r0, [r4, #12]
 800679e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067a2:	f010 0301 	ands.w	r3, r0, #1
 80067a6:	d00a      	beq.n	80067be <__swsetup_r+0x9e>
 80067a8:	2300      	movs	r3, #0
 80067aa:	60a3      	str	r3, [r4, #8]
 80067ac:	6963      	ldr	r3, [r4, #20]
 80067ae:	425b      	negs	r3, r3
 80067b0:	61a3      	str	r3, [r4, #24]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	b943      	cbnz	r3, 80067c8 <__swsetup_r+0xa8>
 80067b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067ba:	d1c4      	bne.n	8006746 <__swsetup_r+0x26>
 80067bc:	bd38      	pop	{r3, r4, r5, pc}
 80067be:	0781      	lsls	r1, r0, #30
 80067c0:	bf58      	it	pl
 80067c2:	6963      	ldrpl	r3, [r4, #20]
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	e7f4      	b.n	80067b2 <__swsetup_r+0x92>
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7f7      	b.n	80067bc <__swsetup_r+0x9c>
 80067cc:	200000a4 	.word	0x200000a4

080067d0 <_fstat_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	; (80067f0 <_fstat_r+0x20>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	602b      	str	r3, [r5, #0]
 80067de:	f7fa fcc9 	bl	8001174 <_fstat>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	d102      	bne.n	80067ec <_fstat_r+0x1c>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	b103      	cbz	r3, 80067ec <_fstat_r+0x1c>
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	bf00      	nop
 80067f0:	20000354 	.word	0x20000354

080067f4 <_isatty_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4d06      	ldr	r5, [pc, #24]	; (8006810 <_isatty_r+0x1c>)
 80067f8:	2300      	movs	r3, #0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fa fc26 	bl	8001050 <_isatty>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_isatty_r+0x1a>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_isatty_r+0x1a>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20000354 	.word	0x20000354

08006814 <_sbrk_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	; (8006830 <_sbrk_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fa fe52 	bl	80014c8 <_sbrk>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_sbrk_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_sbrk_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000354 	.word	0x20000354

08006834 <abort>:
 8006834:	b508      	push	{r3, lr}
 8006836:	2006      	movs	r0, #6
 8006838:	f000 f8b2 	bl	80069a0 <raise>
 800683c:	2001      	movs	r0, #1
 800683e:	f7fa fe39 	bl	80014b4 <_exit>
	...

08006844 <lflush>:
 8006844:	898b      	ldrh	r3, [r1, #12]
 8006846:	f003 0309 	and.w	r3, r3, #9
 800684a:	2b09      	cmp	r3, #9
 800684c:	d103      	bne.n	8006856 <lflush+0x12>
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <lflush+0x18>)
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f7ff be15 	b.w	8006480 <_fflush_r>
 8006856:	2000      	movs	r0, #0
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200000a4 	.word	0x200000a4

08006860 <__srefill_r>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	4605      	mov	r5, r0
 8006866:	b118      	cbz	r0, 8006870 <__srefill_r+0x10>
 8006868:	6a03      	ldr	r3, [r0, #32]
 800686a:	b90b      	cbnz	r3, 8006870 <__srefill_r+0x10>
 800686c:	f7fe ff6e 	bl	800574c <__sinit>
 8006870:	2300      	movs	r3, #0
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800687a:	069e      	lsls	r6, r3, #26
 800687c:	d502      	bpl.n	8006884 <__srefill_r+0x24>
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	e05c      	b.n	800693e <__srefill_r+0xde>
 8006884:	0758      	lsls	r0, r3, #29
 8006886:	d448      	bmi.n	800691a <__srefill_r+0xba>
 8006888:	06d9      	lsls	r1, r3, #27
 800688a:	d405      	bmi.n	8006898 <__srefill_r+0x38>
 800688c:	2309      	movs	r3, #9
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006894:	81a3      	strh	r3, [r4, #12]
 8006896:	e7f2      	b.n	800687e <__srefill_r+0x1e>
 8006898:	071a      	lsls	r2, r3, #28
 800689a:	d50b      	bpl.n	80068b4 <__srefill_r+0x54>
 800689c:	4621      	mov	r1, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	f7ff fdee 	bl	8006480 <_fflush_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1ea      	bne.n	800687e <__srefill_r+0x1e>
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	60a0      	str	r0, [r4, #8]
 80068ac:	f023 0308 	bic.w	r3, r3, #8
 80068b0:	81a3      	strh	r3, [r4, #12]
 80068b2:	61a0      	str	r0, [r4, #24]
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	b91b      	cbnz	r3, 80068c8 <__srefill_r+0x68>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7ff fe67 	bl	8006596 <__smakebuf_r>
 80068c8:	89a6      	ldrh	r6, [r4, #12]
 80068ca:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80068ce:	07b3      	lsls	r3, r6, #30
 80068d0:	d00f      	beq.n	80068f2 <__srefill_r+0x92>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <__srefill_r+0xe4>)
 80068d6:	491c      	ldr	r1, [pc, #112]	; (8006948 <__srefill_r+0xe8>)
 80068d8:	481c      	ldr	r0, [pc, #112]	; (800694c <__srefill_r+0xec>)
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	f006 0609 	and.w	r6, r6, #9
 80068e0:	f7fe ff4c 	bl	800577c <_fwalk_sglue>
 80068e4:	2e09      	cmp	r6, #9
 80068e6:	81a7      	strh	r7, [r4, #12]
 80068e8:	d103      	bne.n	80068f2 <__srefill_r+0x92>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f7ff fd41 	bl	8006374 <__sflush_r>
 80068f2:	6922      	ldr	r2, [r4, #16]
 80068f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068f6:	6963      	ldr	r3, [r4, #20]
 80068f8:	6a21      	ldr	r1, [r4, #32]
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b0      	blx	r6
 8006900:	2800      	cmp	r0, #0
 8006902:	6060      	str	r0, [r4, #4]
 8006904:	dc1c      	bgt.n	8006940 <__srefill_r+0xe0>
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	bf17      	itett	ne
 800690c:	2200      	movne	r2, #0
 800690e:	f043 0320 	orreq.w	r3, r3, #32
 8006912:	6062      	strne	r2, [r4, #4]
 8006914:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006918:	e7bc      	b.n	8006894 <__srefill_r+0x34>
 800691a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691c:	2900      	cmp	r1, #0
 800691e:	d0cd      	beq.n	80068bc <__srefill_r+0x5c>
 8006920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <__srefill_r+0xce>
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff f94f 	bl	8005bcc <_free_r>
 800692e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	2000      	movs	r0, #0
 8006934:	6360      	str	r0, [r4, #52]	; 0x34
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0c0      	beq.n	80068bc <__srefill_r+0x5c>
 800693a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006940:	2000      	movs	r0, #0
 8006942:	e7fc      	b.n	800693e <__srefill_r+0xde>
 8006944:	2000004c 	.word	0x2000004c
 8006948:	08006845 	.word	0x08006845
 800694c:	20000058 	.word	0x20000058

08006950 <_raise_r>:
 8006950:	291f      	cmp	r1, #31
 8006952:	b538      	push	{r3, r4, r5, lr}
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	d904      	bls.n	8006964 <_raise_r+0x14>
 800695a:	2316      	movs	r3, #22
 800695c:	6003      	str	r3, [r0, #0]
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006966:	b112      	cbz	r2, 800696e <_raise_r+0x1e>
 8006968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800696c:	b94b      	cbnz	r3, 8006982 <_raise_r+0x32>
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f830 	bl	80069d4 <_getpid_r>
 8006974:	462a      	mov	r2, r5
 8006976:	4601      	mov	r1, r0
 8006978:	4620      	mov	r0, r4
 800697a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800697e:	f000 b817 	b.w	80069b0 <_kill_r>
 8006982:	2b01      	cmp	r3, #1
 8006984:	d00a      	beq.n	800699c <_raise_r+0x4c>
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	d103      	bne.n	8006992 <_raise_r+0x42>
 800698a:	2316      	movs	r3, #22
 800698c:	6003      	str	r3, [r0, #0]
 800698e:	2001      	movs	r0, #1
 8006990:	e7e7      	b.n	8006962 <_raise_r+0x12>
 8006992:	2400      	movs	r4, #0
 8006994:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006998:	4628      	mov	r0, r5
 800699a:	4798      	blx	r3
 800699c:	2000      	movs	r0, #0
 800699e:	e7e0      	b.n	8006962 <_raise_r+0x12>

080069a0 <raise>:
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <raise+0xc>)
 80069a2:	4601      	mov	r1, r0
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	f7ff bfd3 	b.w	8006950 <_raise_r>
 80069aa:	bf00      	nop
 80069ac:	200000a4 	.word	0x200000a4

080069b0 <_kill_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	; (80069d0 <_kill_r+0x20>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	f7fa fd69 	bl	8001494 <_kill>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d102      	bne.n	80069cc <_kill_r+0x1c>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	b103      	cbz	r3, 80069cc <_kill_r+0x1c>
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
 80069ce:	bf00      	nop
 80069d0:	20000354 	.word	0x20000354

080069d4 <_getpid_r>:
 80069d4:	f7fa bd56 	b.w	8001484 <_getpid>

080069d8 <_init>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr

080069e4 <_fini>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr
