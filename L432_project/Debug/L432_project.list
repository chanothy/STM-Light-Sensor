
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080062d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200000a0  08006370  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006370  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a61  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e03  00000000  00000000  00031b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00034978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac1  00000000  00000000  000357a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002307a  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ed2  00000000  00000000  000592e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f92  00000000  00000000  0006b1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004498  00000000  00000000  00134148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001385e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f60 	.word	0x08005f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005f60 	.word	0x08005f60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:
void ds_command(char *);

extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f002 fe91 	bl	80032c4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f002 fda7 	bl	80030fe <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f004 fcd8 	bl	8004f70 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f004 fcd0 	bl	8004f70 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f004 fccd 	bl	8004f70 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000bc 	.word	0x200000bc
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	08005f78 	.word	0x08005f78
 80005ec:	08005f88 	.word	0x08005f88
 80005f0:	08005f98 	.word	0x08005f98

080005f4 <help_command>:
	{"ds",ds_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f004 fcb7 	bl	8004f70 <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f004 fcb4 	bl	8004f70 <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f004 fcb1 	bl	8004f70 <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f004 fcae 	bl	8004f70 <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f004 fcab 	bl	8004f70 <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08005fc0 	.word	0x08005fc0
 8000628:	08005fd8 	.word	0x08005fd8
 800062c:	08005fe0 	.word	0x08005fe0
 8000630:	08005fe8 	.word	0x08005fe8
 8000634:	08005ff0 	.word	0x08005ff0

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	printf("led_off\n\r");
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <lof_command+0x20>)
 8000642:	f004 fc95 	bl	8004f70 <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <lof_command+0x24>)
 800064c:	f001 fa76 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	08005ff8 	.word	0x08005ff8
 800065c:	48000400 	.word	0x48000400

08000660 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	printf("led_on\n\r");
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <lon_command+0x20>)
 800066a:	f004 fc81 	bl	8004f70 <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <lon_command+0x24>)
 8000674:	f001 fa62 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08006004 	.word	0x08006004
 8000684:	48000400 	.word	0x48000400

08000688 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <test_command+0x40>)
 8000692:	f004 fc6d 	bl	8004f70 <iprintf>
	if (arguments) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d011      	beq.n	80006c0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800069c:	490b      	ldr	r1, [pc, #44]	; (80006cc <test_command+0x44>)
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f004 fc80 	bl	8004fa4 <strtok>
 80006a4:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006a6:	e008      	b.n	80006ba <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 80006a8:	68f9      	ldr	r1, [r7, #12]
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <test_command+0x48>)
 80006ac:	f004 fc60 	bl	8004f70 <iprintf>
			pt = strtok (NULL, ",");
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <test_command+0x44>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f004 fc76 	bl	8004fa4 <strtok>
 80006b8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1f3      	bne.n	80006a8 <test_command+0x20>
		}
	}
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08006010 	.word	0x08006010
 80006cc:	08006020 	.word	0x08006020
 80006d0:	08006024 	.word	0x08006024

080006d4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01f      	beq.n	8000722 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006e2:	492a      	ldr	r1, [pc, #168]	; (800078c <ts_command+0xb8>)
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f004 fc5d 	bl	8004fa4 <strtok>
 80006ea:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80006f0:	e014      	b.n	800071c <ts_command+0x48>
			if (pt != NULL) {
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00e      	beq.n	8000716 <ts_command+0x42>
				t[i] = atoi(pt);
 80006f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006fa:	f004 f9ce 	bl	8004a9a <atoi>
 80006fe:	4602      	mov	r2, r0
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	3330      	adds	r3, #48	; 0x30
 8000706:	443b      	add	r3, r7
 8000708:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 800070c:	491f      	ldr	r1, [pc, #124]	; (800078c <ts_command+0xb8>)
 800070e:	2000      	movs	r0, #0
 8000710:	f004 fc48 	bl	8004fa4 <strtok>
 8000714:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000718:	3301      	adds	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	2b02      	cmp	r3, #2
 8000720:	dde7      	ble.n	80006f2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d029      	beq.n	800077c <ts_command+0xa8>
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db26      	blt.n	800077c <ts_command+0xa8>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	2b17      	cmp	r3, #23
 8000732:	dc23      	bgt.n	800077c <ts_command+0xa8>
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d020      	beq.n	800077c <ts_command+0xa8>
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db1d      	blt.n	800077c <ts_command+0xa8>
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	2b3b      	cmp	r3, #59	; 0x3b
 8000744:	dc1a      	bgt.n	800077c <ts_command+0xa8>
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	2b00      	cmp	r3, #0
 800074a:	d017      	beq.n	800077c <ts_command+0xa8>
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	2b00      	cmp	r3, #0
 8000750:	db14      	blt.n	800077c <ts_command+0xa8>
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	2b3b      	cmp	r3, #59	; 0x3b
 8000756:	dc11      	bgt.n	800077c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <ts_command+0xbc>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <ts_command+0xc0>)
 8000776:	f002 fc25 	bl	8002fc4 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800077a:	e003      	b.n	8000784 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <ts_command+0xc4>)
 800077e:	f004 fbf7 	bl	8004f70 <iprintf>
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08006020 	.word	0x08006020
 8000790:	200000bc 	.word	0x200000bc
 8000794:	200000c8 	.word	0x200000c8
 8000798:	0800602c 	.word	0x0800602c

0800079c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d01f      	beq.n	80007ea <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80007aa:	4924      	ldr	r1, [pc, #144]	; (800083c <ds_command+0xa0>)
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f004 fbf9 	bl	8004fa4 <strtok>
 80007b2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	e014      	b.n	80007e4 <ds_command+0x48>
			if (pt != NULL) {
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00e      	beq.n	80007de <ds_command+0x42>
				d[i] = atoi(pt);
 80007c0:	69f8      	ldr	r0, [r7, #28]
 80007c2:	f004 f96a 	bl	8004a9a <atoi>
 80007c6:	4602      	mov	r2, r0
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	3320      	adds	r3, #32
 80007ce:	443b      	add	r3, r7
 80007d0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007d4:	4919      	ldr	r1, [pc, #100]	; (800083c <ds_command+0xa0>)
 80007d6:	2000      	movs	r0, #0
 80007d8:	f004 fbe4 	bl	8004fa4 <strtok>
 80007dc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	dde7      	ble.n	80007ba <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d01d      	beq.n	800082c <ds_command+0x90>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dd1a      	ble.n	800082c <ds_command+0x90>
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b0c      	cmp	r3, #12
 80007fa:	dc17      	bgt.n	800082c <ds_command+0x90>
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d014      	beq.n	800082c <ds_command+0x90>
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d011      	beq.n	800082c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <ds_command+0xa4>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <ds_command+0xa8>)
 8000826:	f002 fcc6 	bl	80031b6 <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800082a:	e003      	b.n	8000834 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <ds_command+0xac>)
 800082e:	f004 fb9f 	bl	8004f70 <iprintf>
	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08006020 	.word	0x08006020
 8000840:	200000bc 	.word	0x200000bc
 8000844:	200000c8 	.word	0x200000c8
 8000848:	0800602c 	.word	0x0800602c

0800084c <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000858:	482e      	ldr	r0, [pc, #184]	; (8000914 <get_commands+0xc8>)
 800085a:	f000 fb51 	bl	8000f00 <dequeue>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 8000862:	e03a      	b.n	80008da <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b0a      	cmp	r3, #10
 8000868:	d027      	beq.n	80008ba <get_commands+0x6e>
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	2b0d      	cmp	r3, #13
 800086e:	d024      	beq.n	80008ba <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b7f      	cmp	r3, #127	; 0x7f
 8000874:	d10c      	bne.n	8000890 <get_commands+0x44>
        if (counter > 0) {
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <get_commands+0xcc>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d021      	beq.n	80008c2 <get_commands+0x76>
            printf("\b \b");
 800087e:	4827      	ldr	r0, [pc, #156]	; (800091c <get_commands+0xd0>)
 8000880:	f004 fb76 	bl	8004f70 <iprintf>
            counter--;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <get_commands+0xcc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <get_commands+0xcc>)
 800088c:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 800088e:	e018      	b.n	80008c2 <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fb7e 	bl	8004f94 <putchar>
        command_buf[counter++]=ch;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <get_commands+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	491e      	ldr	r1, [pc, #120]	; (8000918 <get_commands+0xcc>)
 80008a0:	600a      	str	r2, [r1, #0]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <get_commands+0xcc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b1d      	cmp	r3, #29
 80008b0:	d907      	bls.n	80008c2 <get_commands+0x76>
          mode=COMPLETE;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <get_commands+0xd4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
          break;
 80008b8:	e012      	b.n	80008e0 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <get_commands+0xd4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
      break;
 80008c0:	e00e      	b.n	80008e0 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80008c2:	bf00      	nop
    }
    mask = disable();
 80008c4:	f000 f8b8 	bl	8000a38 <disable>
 80008c8:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <get_commands+0xc8>)
 80008cc:	f000 fb18 	bl	8000f00 <dequeue>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f000 f8c2 	bl	8000a5e <restore>
  while (ch!=0) {
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1c1      	bne.n	8000864 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <get_commands+0xd4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d110      	bne.n	800090a <get_commands+0xbe>
    command_buf[counter] = 0;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <get_commands+0xcc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <get_commands+0xd8>)
 80008f6:	f004 fb3b 	bl	8004f70 <iprintf>
    counter = 0;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <get_commands+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <get_commands+0xd4>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
    return(1);
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <get_commands+0xc0>
  }
  else {
    return(0);
 800090a:	2300      	movs	r3, #0
  }
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000174 	.word	0x20000174
 8000918:	200000c0 	.word	0x200000c0
 800091c:	08006034 	.word	0x08006034
 8000920:	200000c4 	.word	0x200000c4
 8000924:	08006038 	.word	0x08006038

08000928 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <parse_command+0x1e>
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <parse_command+0x1e>
     (!command) ||
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <parse_command+0x24>
     (!args)) {
    return (-1);
 8000946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094a:	e01e      	b.n	800098a <parse_command+0x62>
  }
  *command = line;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	601a      	str	r2, [r3, #0]
  p = line;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000956:	e00b      	b.n	8000970 <parse_command+0x48>
    if (!*p) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <parse_command+0x42>
      *args = '\0';
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
      return(0);
 8000966:	2300      	movs	r3, #0
 8000968:	e00f      	b.n	800098a <parse_command+0x62>
    }
    p++;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b2c      	cmp	r3, #44	; 0x2c
 8000976:	d1ef      	bne.n	8000958 <parse_command+0x30>
  }
  *p++ = '\0';
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	617a      	str	r2, [r7, #20]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]
  return (0);
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <execute_command+0x98>)
 80009a2:	617b      	str	r3, [r7, #20]
  int success = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (!line) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <execute_command+0x1c>
    return (-1);
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b2:	e038      	b.n	8000a26 <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 80009b4:	f107 0208 	add.w	r2, r7, #8
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffb2 	bl	8000928 <parse_command>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ca:	d121      	bne.n	8000a10 <execute_command+0x78>
    printf("Error with parse command\n\r");
 80009cc:	4819      	ldr	r0, [pc, #100]	; (8000a34 <execute_command+0x9c>)
 80009ce:	f004 facf 	bl	8004f70 <iprintf>
    return (-1);
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d6:	e026      	b.n	8000a26 <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fbf5 	bl	80001d0 <strcmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10e      	bne.n	8000a0a <execute_command+0x72>
      if (!p->cmd_function) {
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <execute_command+0x62>
        return (-1);
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f8:	e015      	b.n	8000a26 <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	4610      	mov	r0, r2
 8000a02:	4798      	blx	r3
      success = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
      break;
 8000a08:	e006      	b.n	8000a18 <execute_command+0x80>
    }
    p++;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3308      	adds	r3, #8
 8000a0e:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1df      	bne.n	80009d8 <execute_command+0x40>
  }
  if (success) {
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <execute_command+0x8a>
    return (0);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e001      	b.n	8000a26 <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
 8000a34:	0800603c 	.word	0x0800603c

08000a38 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a42:	f3ef 8310 	mrs	r3, PRIMASK
 8000a46:	603b      	str	r3, [r7, #0]
  return(result);
 8000a48:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000a4a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <restore>:

void restore(uint32_t priority_mask) {
 8000a5e:	b480      	push	{r7}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f383 8810 	msr	PRIMASK, r3
}
 8000a70:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b089      	sub	sp, #36	; 0x24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	e853 3f00 	ldrex	r3, [r3]
 8000a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	61ba      	str	r2, [r7, #24]
 8000aa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aa2:	6979      	ldr	r1, [r7, #20]
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	e841 2300 	strex	r3, r2, [r1]
 8000aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1e9      	bne.n	8000a86 <LL_USART_EnableIT_RXNE+0x8>
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <main+0x94>)
 8000ac6:	f000 f9ce 	bl	8000e66 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fcc8 	bl	800145e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f855 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f979 	bl	8000dc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad6:	f000 f947 	bl	8000d68 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ada:	f000 f8b3 	bl	8000c44 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000ade:	481e      	ldr	r0, [pc, #120]	; (8000b58 <main+0x98>)
 8000ae0:	f000 fa38 	bl	8000f54 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <main+0x9c>)
 8000ae6:	f7ff ffca 	bl	8000a7e <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <main+0xa0>)
 8000aec:	f004 fa40 	bl	8004f70 <iprintf>
  prompt();
 8000af0:	f7ff fd4c 	bl	800058c <prompt>
  while (1)
  {
	  if (get_commands(command)) {
 8000af4:	481b      	ldr	r0, [pc, #108]	; (8000b64 <main+0xa4>)
 8000af6:	f7ff fea9 	bl	800084c <get_commands>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d01e      	beq.n	8000b3e <main+0x7e>
		  command_length = 16;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <main+0xa8>)
 8000b02:	2210      	movs	r2, #16
 8000b04:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <main+0xa8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b0e:	d011      	beq.n	8000b34 <main+0x74>
			  if(execute_command(command)) {
 8000b10:	4814      	ldr	r0, [pc, #80]	; (8000b64 <main+0xa4>)
 8000b12:	f7ff ff41 	bl	8000998 <execute_command>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <main+0x68>
				  printf("NOK\n\r");
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <main+0xac>)
 8000b1e:	f004 fa27 	bl	8004f70 <iprintf>
				  prompt();
 8000b22:	f7ff fd33 	bl	800058c <prompt>
 8000b26:	e00a      	b.n	8000b3e <main+0x7e>
			  }
			  else {
				  printf("OK\n\r");
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <main+0xb0>)
 8000b2a:	f004 fa21 	bl	8004f70 <iprintf>
				  prompt();
 8000b2e:	f7ff fd2d 	bl	800058c <prompt>
 8000b32:	e004      	b.n	8000b3e <main+0x7e>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <main+0xac>)
 8000b36:	f004 fa1b 	bl	8004f70 <iprintf>
			  prompt();
 8000b3a:	f7ff fd27 	bl	800058c <prompt>
		  }

	  }

	  if (alarm) {
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <main+0xb4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0d6      	beq.n	8000af4 <main+0x34>
		  printf("alarm_triggered\n\r");
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <main+0xb8>)
 8000b48:	f004 fa12 	bl	8004f70 <iprintf>
		  alarm = 0;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <main+0xb4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
	  if (get_commands(command)) {
 8000b52:	e7cf      	b.n	8000af4 <main+0x34>
 8000b54:	20000174 	.word	0x20000174
 8000b58:	200000ec 	.word	0x200000ec
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	08006058 	.word	0x08006058
 8000b64:	2000019c 	.word	0x2000019c
 8000b68:	200001ac 	.word	0x200001ac
 8000b6c:	08006070 	.word	0x08006070
 8000b70:	08006078 	.word	0x08006078
 8000b74:	200001b0 	.word	0x200001b0
 8000b78:	08006080 	.word	0x08006080

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b096      	sub	sp, #88	; 0x58
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2244      	movs	r2, #68	; 0x44
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fa66 	bl	800505c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ba2:	f001 f801 	bl	8001ba8 <HAL_PWREx_ControlVoltageScaling>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bac:	f000 f956 	bl	8000e5c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bb0:	f000 ffdc 	bl	8001b6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <SystemClock_Config+0xc4>)
 8000bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bba:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <SystemClock_Config+0xc4>)
 8000bbc:	f023 0318 	bic.w	r3, r3, #24
 8000bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000bc4:	231c      	movs	r3, #28
 8000bc6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000be8:	2310      	movs	r3, #16
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 f829 	bl	8001c54 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c08:	f000 f928 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2303      	movs	r3, #3
 8000c12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fc29 	bl	800247c <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c30:	f000 f914 	bl	8000e5c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c34:	f002 f83c 	bl	8002cb0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c38:	bf00      	nop
 8000c3a:	3758      	adds	r7, #88	; 0x58
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b092      	sub	sp, #72	; 0x48
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	222c      	movs	r2, #44	; 0x2c
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f9f9 	bl	800505c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c6c:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <MX_RTC_Init+0x11c>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c78:	227f      	movs	r2, #127	; 0x7f
 8000c7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c88:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c9a:	4830      	ldr	r0, [pc, #192]	; (8000d5c <MX_RTC_Init+0x118>)
 8000c9c:	f002 f90a 	bl	8002eb4 <HAL_RTC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ca6:	f000 f8d9 	bl	8000e5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_RTC_Init+0x118>)
 8000cce:	f002 f979 	bl	8002fc4 <HAL_RTC_SetTime>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000cd8:	f000 f8c0 	bl	8000e5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <MX_RTC_Init+0x118>)
 8000cfe:	f002 fa5a 	bl	80031b6 <HAL_RTC_SetDate>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000d08:	f000 f8a8 	bl	8000e5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000d14:	2330      	movs	r3, #48	; 0x30
 8000d16:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_RTC_Init+0x120>)
 8000d26:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_RTC_Init+0x118>)
 8000d44:	f002 fb0c 	bl	8003360 <HAL_RTC_SetAlarm_IT>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000d4e:	f000 f885 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3748      	adds	r7, #72	; 0x48
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000c8 	.word	0x200000c8
 8000d60:	40002800 	.word	0x40002800
 8000d64:	80808000 	.word	0x80808000

08000d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_USART2_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000dac:	f002 fd3e 	bl	800382c <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f851 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000ec 	.word	0x200000ec
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_GPIO_Init+0x8c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2108      	movs	r1, #8
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0x90>)
 8000e2c:	f000 fe86 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e30:	2308      	movs	r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x90>)
 8000e48:	f000 fd0e 	bl	8001868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>

08000e66 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8000e6e:	f7ff fde3 	bl	8000a38 <disable>
 8000e72:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  restore(mask);
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fdec 	bl	8000a5e <restore>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000e9e:	f7ff fdcb 	bl	8000a38 <disable>
 8000ea2:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	425a      	negs	r2, r3
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	f002 021f 	and.w	r2, r2, #31
 8000eb4:	bf58      	it	pl
 8000eb6:	4253      	negpl	r3, r2
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6852      	ldr	r2, [r2, #4]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d014      	beq.n	8000eea <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	425a      	negs	r2, r3
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	f002 021f 	and.w	r2, r2, #31
 8000edc:	bf58      	it	pl
 8000ede:	4253      	negpl	r3, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e002      	b.n	8000ef0 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eee:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000ef0:	68b8      	ldr	r0, [r7, #8]
 8000ef2:	f7ff fdb4 	bl	8000a5e <restore>
  return (return_val);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000f0c:	f7ff fd94 	bl	8000a38 <disable>
 8000f10:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d011      	beq.n	8000f42 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7a1b      	ldrb	r3, [r3, #8]
 8000f28:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	425a      	negs	r2, r3
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	f002 021f 	and.w	r2, r2, #31
 8000f3a:	bf58      	it	pl
 8000f3c:	4253      	negpl	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8000f42:	68b8      	ldr	r0, [r7, #8]
 8000f44:	f7ff fd8b 	bl	8000a5e <restore>
  return(return_val);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <RetargetInit+0x28>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <RetargetInit+0x2c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6898      	ldr	r0, [r3, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f003 fd99 	bl	8004aa4 <setvbuf>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b4 	.word	0x200001b4
 8000f80:	2000009c 	.word	0x2000009c

08000f84 <_isatty>:

int _isatty(int fd) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db04      	blt.n	8000f9c <_isatty+0x18>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	dc01      	bgt.n	8000f9c <_isatty+0x18>
    return 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e005      	b.n	8000fa8 <_isatty+0x24>

  errno = EBADF;
 8000f9c:	f004 f888 	bl	80050b0 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2209      	movs	r2, #9
 8000fa4:	601a      	str	r2, [r3, #0]
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d002      	beq.n	8000fc8 <_write+0x18>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d111      	bne.n	8000fec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <_write+0x54>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	f002 fc77 	bl	80038c8 <HAL_UART_Transmit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <_write+0x38>
      return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	e008      	b.n	8000ffa <_write+0x4a>
    else
      return EIO;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e006      	b.n	8000ffa <_write+0x4a>
  }
  errno = EBADF;
 8000fec:	f004 f860 	bl	80050b0 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2209      	movs	r2, #9
 8000ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001b4 	.word	0x200001b4

08001008 <_close>:

int _close(int fd) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db04      	blt.n	8001020 <_close+0x18>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	dc01      	bgt.n	8001020 <_close+0x18>
    return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e006      	b.n	800102e <_close+0x26>

  errno = EBADF;
 8001020:	f004 f846 	bl	80050b0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	2209      	movs	r2, #9
 8001028:	601a      	str	r2, [r3, #0]
  return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001042:	f004 f835 	bl	80050b0 <__errno>
 8001046:	4603      	mov	r3, r0
 8001048:	2209      	movs	r2, #9
 800104a:	601a      	str	r2, [r3, #0]
  return -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_read>:

int _read(int fd, char* ptr, int len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <_read+0x4c>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	2201      	movs	r2, #1
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	f002 fcb1 	bl	80039dc <HAL_UART_Receive>
 800107a:	4603      	mov	r3, r0
 800107c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <_read+0x30>
      return 1;
 8001084:	2301      	movs	r3, #1
 8001086:	e008      	b.n	800109a <_read+0x42>
    else
      return EIO;
 8001088:	2305      	movs	r3, #5
 800108a:	e006      	b.n	800109a <_read+0x42>
  }
  errno = EBADF;
 800108c:	f004 f810 	bl	80050b0 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	2209      	movs	r2, #9
 8001094:	601a      	str	r2, [r3, #0]
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001b4 	.word	0x200001b4

080010a8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db08      	blt.n	80010ca <_fstat+0x22>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	dc05      	bgt.n	80010ca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c4:	605a      	str	r2, [r3, #4]
    return 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e005      	b.n	80010d6 <_fstat+0x2e>
  }

  errno = EBADF;
 80010ca:	f003 fff1 	bl	80050b0 <__errno>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2209      	movs	r2, #9
 80010d2:	601a      	str	r2, [r3, #0]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x44>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_MspInit+0x44>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6613      	str	r3, [r2, #96]	; 0x60
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_MspInit+0x44>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b098      	sub	sp, #96	; 0x60
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2254      	movs	r2, #84	; 0x54
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f003 ff8f 	bl	800505c <memset>
  if(hrtc->Instance==RTC)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_RTC_MspInit+0x68>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d11f      	bne.n	8001188 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800114e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001152:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fbb3 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001164:	f7ff fe7a 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_RTC_MspInit+0x6c>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_RTC_MspInit+0x6c>)
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2029      	movs	r0, #41	; 0x29
 800117e:	f000 fabe 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001182:	2029      	movs	r0, #41	; 0x29
 8001184:	f000 fad7 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3760      	adds	r7, #96	; 0x60
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40002800 	.word	0x40002800
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09e      	sub	sp, #120	; 0x78
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2254      	movs	r2, #84	; 0x54
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 ff4f 	bl	800505c <memset>
  if(huart->Instance==USART2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <HAL_UART_MspInit+0xdc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d150      	bne.n	800126a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 fb75 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e0:	f7ff fe3c 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_UART_MspInit+0xe0>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_UART_MspInit+0xe0>)
 80011ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_UART_MspInit+0xe0>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_UART_MspInit+0xe0>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_UART_MspInit+0xe0>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_UART_MspInit+0xe0>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001214:	2304      	movs	r3, #4
 8001216:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001224:	2307      	movs	r3, #7
 8001226:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fb19 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001248:	2303      	movs	r3, #3
 800124a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f000 fb07 	bl	8001868 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2026      	movs	r0, #38	; 0x26
 8001260:	f000 fa4d 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001264:	2026      	movs	r0, #38	; 0x26
 8001266:	f000 fa66 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3778      	adds	r7, #120	; 0x78
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40004400 	.word	0x40004400
 8001278:	40021000 	.word	0x40021000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f91e 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d4:	480e      	ldr	r0, [pc, #56]	; (8001310 <USART2_IRQHandler+0x40>)
 80012d6:	f002 fc4b 	bl	8003b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 80012da:	f003 fddf 	bl	8004e9c <getchar>
 80012de:	4603      	mov	r3, r0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <USART2_IRQHandler+0x44>)
 80012e4:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <USART2_IRQHandler+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <USART2_IRQHandler+0x48>)
 80012ee:	f7ff fdce 	bl	8000e8e <enqueue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <USART2_IRQHandler+0x48>)
 80012fa:	f7ff fe01 	bl	8000f00 <dequeue>
      enqueue(&buf,ch);
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <USART2_IRQHandler+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <USART2_IRQHandler+0x48>)
 8001306:	f7ff fdc2 	bl	8000e8e <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000ec 	.word	0x200000ec
 8001314:	200001b8 	.word	0x200001b8
 8001318:	20000174 	.word	0x20000174

0800131c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <RTC_Alarm_IRQHandler+0x14>)
 8001322:	f002 f959 	bl	80035d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <RTC_Alarm_IRQHandler+0x18>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200000c8 	.word	0x200000c8
 8001334:	200001b0 	.word	0x200001b0

08001338 <_getpid>:
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
 800133c:	2301      	movs	r3, #1
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_kill>:
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	f003 fead 	bl	80050b0 <__errno>
 8001356:	4603      	mov	r3, r0
 8001358:	2216      	movs	r2, #22
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_exit>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ffe7 	bl	8001348 <_kill>
 800137a:	e7fe      	b.n	800137a <_exit+0x12>

0800137c <_sbrk>:
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
 80013ac:	f003 fe80 	bl	80050b0 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20010000 	.word	0x20010000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	200001bc 	.word	0x200001bc
 80013e4:	20000310 	.word	0x20000310

080013e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff ffea 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopForever+0x6>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopForever+0xe>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopForever+0x16>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f003 fe3f 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143e:	f7ff fb3f 	bl	8000ac0 <main>

08001442 <LoopForever>:

LoopForever:
    b LoopForever
 8001442:	e7fe      	b.n	8001442 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001444:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001450:	080062d0 	.word	0x080062d0
  ldr r2, =_sbss
 8001454:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001458:	20000310 	.word	0x20000310

0800145c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_IRQHandler>

0800145e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 f93d 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f80e 	bl	8001490 <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	e001      	b.n	8001484 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001480:	f7ff fe2e 	bl	80010e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001484:	79fb      	ldrb	r3, [r7, #7]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_InitTick+0x70>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f949 	bl	8001752 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d809      	bhi.n	80014e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f000 f913 	bl	80016fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e007      	b.n	80014f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e004      	b.n	80014f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000040 	.word	0x20000040
 8001500:	20000038 	.word	0x20000038
 8001504:	2000003c 	.word	0x2000003c

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000040 	.word	0x20000040
 800152c:	200001c0 	.word	0x200001c0

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200001c0 	.word	0x200001c0

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff29 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff3e 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff31 	bl	80015ac <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d008      	beq.n	8001794 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2204      	movs	r2, #4
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e022      	b.n	80017da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 020e 	bic.w	r2, r2, #14
 80017a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f003 021c 	and.w	r2, r3, #28
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d005      	beq.n	800180a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e029      	b.n	800185e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f003 021c 	and.w	r2, r3, #28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
    }
  }
  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e148      	b.n	8001b0a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 813a 	beq.w	8001b04 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d005      	beq.n	80018a8 <HAL_GPIO_Init+0x40>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b03      	cmp	r3, #3
 8001914:	d017      	beq.n	8001946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d123      	bne.n	800199a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8094 	beq.w	8001b04 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <HAL_GPIO_Init+0x2c0>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x2c0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6613      	str	r3, [r2, #96]	; 0x60
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x2c0>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f4:	4a4d      	ldr	r2, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1d4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1d0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1cc>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1d6>
 8001a34:	2307      	movs	r3, #7
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1d6>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1d6>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aeaf 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb6:	d130      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d038      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	e002      	b.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d102      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f2      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d110      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00f      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d007      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	20000038 	.word	0x20000038
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f000 bc02 	b.w	800246c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c72:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80e4 	beq.w	8001e52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4c>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	f040 808b 	bne.w	8001dae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	f040 8087 	bne.w	8001dae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x64>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e3d9      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1a      	ldr	r2, [r3, #32]
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x7e>
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	e005      	b.n	8001cde <HAL_RCC_OscConfig+0x8a>
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d223      	bcs.n	8001d2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd8c 	bl	8002804 <RCC_SetFlashLatencyFromMSIRange>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e3ba      	b.n	800246c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a72      	ldr	r2, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	496d      	ldr	r1, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	4968      	ldr	r1, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e025      	b.n	8001d76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4960      	ldr	r1, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	495b      	ldr	r1, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fd4c 	bl	8002804 <RCC_SetFlashLatencyFromMSIRange>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e37a      	b.n	800246c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d76:	f000 fc81 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	4950      	ldr	r1, [pc, #320]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a4e      	ldr	r2, [pc, #312]	; (8001ecc <HAL_RCC_OscConfig+0x278>)
 8001d94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb78 	bl	8001490 <HAL_InitTick>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d052      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	e35e      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d032      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fbb5 	bl	8001530 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dca:	f7ff fbb1 	bl	8001530 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e347      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ddc:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	492b      	ldr	r1, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
 8001e1a:	e01a      	b.n	8001e52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb82 	bl	8001530 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb7e 	bl	8001530 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e314      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1dc>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d073      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x21c>
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d10e      	bne.n	8001e88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d063      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d15f      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e2f1      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e025      	b.n	8001eec <HAL_RCC_OscConfig+0x298>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d114      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x280>
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a02      	ldr	r2, [pc, #8]	; (8001ec4 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e013      	b.n	8001eec <HAL_RCC_OscConfig+0x298>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08006094 	.word	0x08006094
 8001ecc:	20000038 	.word	0x20000038
 8001ed0:	2000003c 	.word	0x2000003c
 8001ed4:	4ba0      	ldr	r3, [pc, #640]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a9f      	ldr	r2, [pc, #636]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b9d      	ldr	r3, [pc, #628]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a9c      	ldr	r2, [pc, #624]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fb1c 	bl	8001530 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fb18 	bl	8001530 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e2ae      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4b92      	ldr	r3, [pc, #584]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x2a8>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fb08 	bl	8001530 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fb04 	bl	8001530 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e29a      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2d0>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d060      	beq.n	8002014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x310>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d116      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x328>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e277      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	4973      	ldr	r1, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	e040      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d023      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fac3 	bl	8001530 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fabf 	bl	8001530 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e255      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	4b65      	ldr	r3, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	495f      	ldr	r1, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e018      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa9f 	bl	8001530 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fa9b 	bl	8001530 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e231      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff fa7a 	bl	8001530 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fa76 	bl	8001530 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e20c      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x3ec>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	4a3b      	ldr	r2, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fa5d 	bl	8001530 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff fa59 	bl	8001530 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1ef      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80a6 	beq.w	80021f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_RCC_OscConfig+0x508>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d118      	bne.n	8002112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_OscConfig+0x508>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_RCC_OscConfig+0x508>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa20 	bl	8001530 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7ff fa1c 	bl	8001530 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1b2      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_RCC_OscConfig+0x508>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x4d8>
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212a:	e029      	b.n	8002180 <HAL_RCC_OscConfig+0x52c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d115      	bne.n	8002160 <HAL_RCC_OscConfig+0x50c>
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_OscConfig+0x504>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x52c>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
 8002160:	4b9a      	ldr	r3, [pc, #616]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a99      	ldr	r2, [pc, #612]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002170:	4b96      	ldr	r3, [pc, #600]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a95      	ldr	r2, [pc, #596]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d016      	beq.n	80021b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7ff f9d2 	bl	8001530 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7ff f9ce 	bl	8001530 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e162      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ed      	beq.n	8002190 <HAL_RCC_OscConfig+0x53c>
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7ff f9bb 	bl	8001530 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff f9b7 	bl	8001530 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e14b      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ed      	bne.n	80021be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b78      	ldr	r3, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a77      	ldr	r2, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03c      	beq.n	800227a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01c      	beq.n	8002242 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002208:	4b70      	ldr	r3, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800220a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800220e:	4a6f      	ldr	r2, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff f98a 	bl	8001530 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002220:	f7ff f986 	bl	8001530 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e11c      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002232:	4b66      	ldr	r3, [pc, #408]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x5cc>
 8002240:	e01b      	b.n	800227a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002248:	4a60      	ldr	r2, [pc, #384]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff f96d 	bl	8001530 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225a:	f7ff f969 	bl	8001530 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0ff      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800226c:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800226e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80f3 	beq.w	800246a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	2b02      	cmp	r3, #2
 800228a:	f040 80c9 	bne.w	8002420 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	429a      	cmp	r2, r3
 80022a0:	d12c      	bne.n	80022fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	3b01      	subs	r3, #1
 80022ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d123      	bne.n	80022fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d11b      	bne.n	80022fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d113      	bne.n	80022fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d06b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d062      	beq.n	80023c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0ac      	b.n	800246c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800231e:	f7ff f907 	bl	8001530 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff f903 	bl	8001530 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e099      	b.n	800246c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x77c>)
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002354:	3a01      	subs	r2, #1
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800235e:	0212      	lsls	r2, r2, #8
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002366:	0852      	lsrs	r2, r2, #1
 8002368:	3a01      	subs	r2, #1
 800236a:	0552      	lsls	r2, r2, #21
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002372:	0852      	lsrs	r2, r2, #1
 8002374:	3a01      	subs	r2, #1
 8002376:	0652      	lsls	r2, r2, #25
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800237e:	06d2      	lsls	r2, r2, #27
 8002380:	430a      	orrs	r2, r1
 8002382:	4912      	ldr	r1, [pc, #72]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002384:	4313      	orrs	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800238e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a0:	f7ff f8c6 	bl	8001530 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff f8c2 	bl	8001530 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e058      	b.n	800246c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_OscConfig+0x778>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c6:	e050      	b.n	800246a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e04f      	b.n	800246c <HAL_RCC_OscConfig+0x818>
 80023cc:	40021000 	.word	0x40021000
 80023d0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d144      	bne.n	800246a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f8:	f7ff f89a 	bl	8001530 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff f896 	bl	8001530 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e02c      	b.n	800246c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x7ac>
 800241e:	e024      	b.n	800246a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d01f      	beq.n	8002466 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 800242c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff f87d 	bl	8001530 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff f879 	bl	8001530 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e00f      	b.n	800246c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	4905      	ldr	r1, [pc, #20]	; (8002474 <HAL_RCC_OscConfig+0x820>)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x824>)
 8002460:	4013      	ands	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
 8002464:	e001      	b.n	800246a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	feeefffc 	.word	0xfeeefffc

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0e7      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b75      	ldr	r3, [pc, #468]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b72      	ldr	r3, [pc, #456]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4970      	ldr	r1, [pc, #448]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cf      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	429a      	cmp	r2, r3
 80024da:	d908      	bls.n	80024ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4960      	ldr	r1, [pc, #384]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04c      	beq.n	8002594 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b5a      	ldr	r3, [pc, #360]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d121      	bne.n	8002552 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0a6      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251a:	4b54      	ldr	r3, [pc, #336]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e09a      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e08e      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e086      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4943      	ldr	r1, [pc, #268]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe ffe4 	bl	8001530 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe ffe0 	bl	8001530 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e06e      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d208      	bcs.n	80025c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	492b      	ldr	r1, [pc, #172]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c2:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d210      	bcs.n	80025f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0207 	bic.w	r2, r3, #7
 80025d8:	4923      	ldr	r1, [pc, #140]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e036      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	4918      	ldr	r1, [pc, #96]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4910      	ldr	r1, [pc, #64]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002630:	f000 f824 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x1f4>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1f8>)
 800264e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1fc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe ff1b 	bl	8001490 <HAL_InitTick>
 800265a:	4603      	mov	r3, r0
 800265c:	72fb      	strb	r3, [r7, #11]

  return status;
 800265e:	7afb      	ldrb	r3, [r7, #11]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40022000 	.word	0x40022000
 800266c:	40021000 	.word	0x40021000
 8002670:	08006094 	.word	0x08006094
 8002674:	20000038 	.word	0x20000038
 8002678:	2000003c 	.word	0x2000003c

0800267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x34>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d11e      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d8:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_RCC_GetSysClockFreq+0x110>)
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e004      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_RCC_GetSysClockFreq+0x114>)
 8002702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d134      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0xa6>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d003      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0xac>
 8002720:	e005      	b.n	800272e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_GetSysClockFreq+0x110>)
 8002724:	617b      	str	r3, [r7, #20]
      break;
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_GetSysClockFreq+0x114>)
 800272a:	617b      	str	r3, [r7, #20]
      break;
 800272c:	e002      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	617b      	str	r3, [r7, #20]
      break;
 8002732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	3301      	adds	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	fb03 f202 	mul.w	r2, r3, r2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	0e5b      	lsrs	r3, r3, #25
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	3301      	adds	r3, #1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002774:	69bb      	ldr	r3, [r7, #24]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	080060ac 	.word	0x080060ac
 800278c:	00f42400 	.word	0x00f42400
 8002790:	007a1200 	.word	0x007a1200

08002794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000038 	.word	0x20000038

080027ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b0:	f7ff fff0 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	080060a4 	.word	0x080060a4

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027dc:	f7ff ffda 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4904      	ldr	r1, [pc, #16]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	080060a4 	.word	0x080060a4

08002804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800281c:	f7ff f9b6 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 8002820:	6178      	str	r0, [r7, #20]
 8002822:	e014      	b.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800283c:	f7ff f9a6 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 8002840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d10b      	bne.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d919      	bls.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2ba0      	cmp	r3, #160	; 0xa0
 8002860:	d902      	bls.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002862:	2302      	movs	r3, #2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e013      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e010      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d902      	bls.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002874:	2303      	movs	r3, #3
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e00a      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d102      	bne.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002880:	2302      	movs	r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e004      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d101      	bne.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	4909      	ldr	r1, [pc, #36]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40022000 	.word	0x40022000

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d0:	2300      	movs	r3, #0
 80028d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d031      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e8:	d01a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ee:	d814      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f8:	d10f      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4a5c      	ldr	r2, [pc, #368]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002906:	e00c      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f9de 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002918:	e003      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	74fb      	strb	r3, [r7, #19]
      break;
 800291e:	e000      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10b      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002928:	4b51      	ldr	r3, [pc, #324]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	494e      	ldr	r1, [pc, #312]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800293e:	e001      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 809e 	beq.w	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002956:	4b46      	ldr	r3, [pc, #280]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a3f      	ldr	r2, [pc, #252]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002994:	f7fe fdcc 	bl	8001530 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800299a:	e009      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299c:	f7fe fdc8 	bl	8001530 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d902      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	74fb      	strb	r3, [r7, #19]
        break;
 80029ae:	e005      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ef      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d15a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01e      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d019      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a0a:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd88 	bl	8001530 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	e00b      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fd84 	bl	8001530 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d902      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	74fb      	strb	r3, [r7, #19]
            break;
 8002a3a:	e006      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ec      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	4904      	ldr	r1, [pc, #16]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a66:	e009      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
 8002a6c:	e006      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7c:	7c7b      	ldrb	r3, [r7, #17]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b8a      	ldr	r3, [pc, #552]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	4a89      	ldr	r2, [pc, #548]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a9a:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 0203 	bic.w	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4980      	ldr	r1, [pc, #512]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002abc:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 020c 	bic.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	4978      	ldr	r1, [pc, #480]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	496f      	ldr	r1, [pc, #444]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4967      	ldr	r1, [pc, #412]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	495e      	ldr	r1, [pc, #376]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	4956      	ldr	r1, [pc, #344]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b66:	4b51      	ldr	r3, [pc, #324]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	494d      	ldr	r1, [pc, #308]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d028      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b88:	4b48      	ldr	r3, [pc, #288]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4945      	ldr	r1, [pc, #276]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
 8002bb4:	e011      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f882 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	492d      	ldr	r1, [pc, #180]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4a28      	ldr	r2, [pc, #160]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c10:	60d3      	str	r3, [r2, #12]
 8002c12:	e011      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f853 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01c      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	4916      	ldr	r1, [pc, #88]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f830 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ca0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cea:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10d      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d02:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
       ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d047      	beq.n	8002da6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e044      	b.n	8002da6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d018      	beq.n	8002d56 <RCCEx_PLLSAI1_Config+0x86>
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d825      	bhi.n	8002d74 <RCCEx_PLLSAI1_Config+0xa4>
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d002      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0x62>
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d009      	beq.n	8002d44 <RCCEx_PLLSAI1_Config+0x74>
 8002d30:	e020      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d32:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11d      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e01a      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d54:	e013      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d62:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d72:	e006      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e004      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	4943      	ldr	r1, [pc, #268]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d17c      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dac:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3f      	ldr	r2, [pc, #252]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe fbba 	bl	8001530 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dbe:	e009      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc0:	f7fe fbb6 	bl	8001530 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd2:	e005      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ef      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d15f      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d110      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002df4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	0211      	lsls	r1, r2, #8
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	06d2      	lsls	r2, r2, #27
 8002e04:	430a      	orrs	r2, r1
 8002e06:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	610b      	str	r3, [r1, #16]
 8002e0c:	e027      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d112      	bne.n	8002e3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6892      	ldr	r2, [r2, #8]
 8002e24:	0211      	lsls	r1, r2, #8
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6912      	ldr	r2, [r2, #16]
 8002e2a:	0852      	lsrs	r2, r2, #1
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	430a      	orrs	r2, r1
 8002e32:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	610b      	str	r3, [r1, #16]
 8002e38:	e011      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	0211      	lsls	r1, r2, #8
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6952      	ldr	r2, [r2, #20]
 8002e50:	0852      	lsrs	r2, r2, #1
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0652      	lsls	r2, r2, #25
 8002e56:	430a      	orrs	r2, r1
 8002e58:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fb61 	bl	8001530 <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e70:	e009      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e72:	f7fe fb5d 	bl	8001530 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	73fb      	strb	r3, [r7, #15]
          break;
 8002e84:	e005      	b.n	8002e92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ef      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d079      	beq.n	8002fba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe f924 	bl	8001128 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d058      	beq.n	8002fa8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ca      	movs	r2, #202	; 0xca
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2253      	movs	r2, #83	; 0x53
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fbda 	bl	80036c0 <RTC_EnterInitMode>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d127      	bne.n	8002f66 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f28:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6899      	ldr	r1, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68d2      	ldr	r2, [r2, #12]
 8002f50:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	041a      	lsls	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fbde 	bl	8003728 <RTC_ExitInitMode>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0203 	bic.w	r2, r2, #3
 8002f84:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	22ff      	movs	r2, #255	; 0xff
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8002fa6:	e001      	b.n	8002fac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RTC_SetTime+0x1a>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e08b      	b.n	80030f6 <HAL_RTC_SetTime+0x132>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	22ca      	movs	r2, #202	; 0xca
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2253      	movs	r2, #83	; 0x53
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fb5e 	bl	80036c0 <RTC_EnterInitMode>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d163      	bne.n	80030d6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d126      	bne.n	8003062 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fbb9 	bl	80037a4 <RTC_ByteToBcd2>
 8003032:	4603      	mov	r3, r0
 8003034:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fbb2 	bl	80037a4 <RTC_ByteToBcd2>
 8003040:	4603      	mov	r3, r0
 8003042:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003044:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	789b      	ldrb	r3, [r3, #2]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fbaa 	bl	80037a4 <RTC_ByteToBcd2>
 8003050:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003052:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e018      	b.n	8003094 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003082:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003088:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800309e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fb2b 	bl	8003728 <RTC_ExitInitMode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}

080030fe <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800312c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003130:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	0d9b      	lsrs	r3, r3, #22
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11a      	bne.n	80031ac <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb32 	bl	80037e4 <RTC_Bcd2ToByte>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fb29 	bl	80037e4 <RTC_Bcd2ToByte>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	789b      	ldrb	r3, [r3, #2]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb20 	bl	80037e4 <RTC_Bcd2ToByte>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031b6:	b590      	push	{r4, r7, lr}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_RTC_SetDate+0x1a>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e075      	b.n	80032bc <HAL_RTC_SetDate+0x106>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <HAL_RTC_SetDate+0x4e>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	f023 0310 	bic.w	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	330a      	adds	r3, #10
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11c      	bne.n	8003244 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	78db      	ldrb	r3, [r3, #3]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fac8 	bl	80037a4 <RTC_ByteToBcd2>
 8003214:	4603      	mov	r3, r0
 8003216:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fac1 	bl	80037a4 <RTC_ByteToBcd2>
 8003222:	4603      	mov	r3, r0
 8003224:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003226:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	789b      	ldrb	r3, [r3, #2]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fab9 	bl	80037a4 <RTC_ByteToBcd2>
 8003232:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003234:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e00e      	b.n	8003262 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	78db      	ldrb	r3, [r3, #3]
 8003248:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003250:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003256:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ca      	movs	r2, #202	; 0xca
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2253      	movs	r2, #83	; 0x53
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa24 	bl	80036c0 <RTC_EnterInitMode>
 8003278:	4603      	mov	r3, r0
 800327a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800328c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003290:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa48 	bl	8003728 <RTC_ExitInitMode>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	22ff      	movs	r2, #255	; 0xff
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}

080032c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11a      	bne.n	8003354 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	78db      	ldrb	r3, [r3, #3]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fa5e 	bl	80037e4 <RTC_Bcd2ToByte>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fa55 	bl	80037e4 <RTC_Bcd2ToByte>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	789b      	ldrb	r3, [r3, #2]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fa4c 	bl	80037e4 <RTC_Bcd2ToByte>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_RTC_SetAlarm_IT+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e127      	b.n	80035ca <HAL_RTC_SetAlarm_IT+0x26a>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d137      	bne.n	8003400 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f9fb 	bl	80037a4 <RTC_ByteToBcd2>
 80033ae:	4603      	mov	r3, r0
 80033b0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9f4 	bl	80037a4 <RTC_ByteToBcd2>
 80033bc:	4603      	mov	r3, r0
 80033be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80033c0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	789b      	ldrb	r3, [r3, #2]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9ec 	bl	80037a4 <RTC_ByteToBcd2>
 80033cc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80033d8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f9de 	bl	80037a4 <RTC_ByteToBcd2>
 80033e8:	4603      	mov	r3, r0
 80033ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80033ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80033f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e023      	b.n	8003448 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2200      	movs	r2, #0
 8003412:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003420:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003426:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	78db      	ldrb	r3, [r3, #3]
 800342c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800342e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003436:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003438:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800343e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003444:	4313      	orrs	r3, r2
 8003446:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	; 0xca
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2253      	movs	r2, #83	; 0x53
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d14a      	bne.n	8003504 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800348e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003490:	f7fe f84e 	bl	8001530 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003496:	e015      	b.n	80034c4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003498:	f7fe f84a 	bl	8001530 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a6:	d90d      	bls.n	80034c4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2203      	movs	r2, #3
 80034b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e082      	b.n	80035ca <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0e2      	beq.n	8003498 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	e049      	b.n	8003598 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003512:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003524:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003526:	f7fe f803 	bl	8001530 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800352c:	e015      	b.n	800355a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800352e:	f7fd ffff 	bl	8001530 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353c:	d90d      	bls.n	800355a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e037      	b.n	80035ca <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0e2      	beq.n	800352e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x274>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x274>)
 800359e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x274>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x274>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RTC_AlarmIRQHandler+0x88>)
 80035e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80035e6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003614:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f824 	bl	8003664 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003648:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8e4 	bl	8003818 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <HAL_RTC_WaitForSynchro+0x44>)
 8003686:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003688:	f7fd ff52 	bl	8001530 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800368e:	e009      	b.n	80036a4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003690:	f7fd ff4e 	bl	8001530 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800369e:	d901      	bls.n	80036a4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e007      	b.n	80036b4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ee      	beq.n	8003690 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	0003ff5f 	.word	0x0003ff5f

080036c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d120      	bne.n	800371c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036e4:	f7fd ff24 	bl	8001530 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036ea:	e00d      	b.n	8003708 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80036ec:	f7fd ff20 	bl	8001530 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fa:	d905      	bls.n	8003708 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2203      	movs	r2, #3
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <RTC_EnterInitMode+0x5c>
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d1e7      	bne.n	80036ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <RTC_ExitInitMode+0x78>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <RTC_ExitInitMode+0x78>)
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <RTC_ExitInitMode+0x78>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10c      	bne.n	8003766 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff93 	bl	8003678 <HAL_RTC_WaitForSynchro>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01e      	beq.n	8003796 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e017      	b.n	8003796 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <RTC_ExitInitMode+0x78>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <RTC_ExitInitMode+0x78>)
 800376c:	f023 0320 	bic.w	r3, r3, #32
 8003770:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff80 	bl	8003678 <HAL_RTC_WaitForSynchro>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <RTC_ExitInitMode+0x78>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <RTC_ExitInitMode+0x78>)
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40002800 	.word	0x40002800

080037a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80037b6:	e005      	b.n	80037c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80037be:	7afb      	ldrb	r3, [r7, #11]
 80037c0:	3b0a      	subs	r3, #10
 80037c2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	d8f6      	bhi.n	80037b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	b2da      	uxtb	r2, r3
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	4413      	add	r3, r2
 800380a:	b2db      	uxtb	r3, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e040      	b.n	80038c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fca2 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 feb2 	bl	80045dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fc83 	bl	8004184 <UART_SetConfig>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e01b      	b.n	80038c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 ff31 	bl	8004720 <UART_CheckIdleState>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d178      	bne.n	80039d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Transmit+0x24>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e071      	b.n	80039d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2221      	movs	r2, #33	; 0x21
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fe:	f7fd fe17 	bl	8001530 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d108      	bne.n	8003930 <HAL_UART_Transmit+0x68>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e003      	b.n	8003938 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003938:	e030      	b.n	800399c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 ff93 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e03c      	b.n	80039d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	b292      	uxth	r2, r2
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	3302      	adds	r3, #2
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e008      	b.n	800398a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b292      	uxth	r2, r2
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1c8      	bne.n	800393a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 ff5c 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e005      	b.n	80039d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	f040 80b6 	bne.w	8003b64 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Receive+0x28>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0ae      	b.n	8003b66 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fd87 	bl	8001530 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d10e      	bne.n	8003a5c <HAL_UART_Receive+0x80>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_UART_Receive+0x76>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a50:	e02d      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a5a:	e028      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10d      	bne.n	8003a80 <HAL_UART_Receive+0xa4>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_UART_Receive+0x9a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a74:	e01b      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	227f      	movs	r2, #127	; 0x7f
 8003a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a7e:	e016      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a88:	d10d      	bne.n	8003aa6 <HAL_UART_Receive+0xca>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_UART_Receive+0xc0>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	227f      	movs	r2, #127	; 0x7f
 8003a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a9a:	e008      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	223f      	movs	r2, #63	; 0x3f
 8003aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aa4:	e003      	b.n	8003aae <HAL_UART_Receive+0xd2>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ab4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d108      	bne.n	8003ad2 <HAL_UART_Receive+0xf6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e003      	b.n	8003ada <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ada:	e037      	b.n	8003b4c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fec2 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e033      	b.n	8003b66 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10c      	bne.n	8003b1e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	8a7b      	ldrh	r3, [r7, #18]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e00d      	b.n	8003b3a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	8a7b      	ldrh	r3, [r7, #18]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1c1      	bne.n	8003adc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0ba      	sub	sp, #232	; 0xe8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d115      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 82ae 	beq.w	800412a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
      }
      return;
 8003bd6:	e2a8      	b.n	800412a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8117 	beq.w	8003e10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bf2:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_UART_IRQHandler+0x298>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 810a 	beq.w	8003e10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d011      	beq.n	8003c2c <HAL_UART_IRQHandler+0xbc>
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d011      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_UART_IRQHandler+0x11c>
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d012      	beq.n	8003cfa <HAL_UART_IRQHandler+0x18a>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8214 	beq.w	800412e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04f      	beq.n	8003df2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fdf3 	bl	800493e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d141      	bne.n	8003dea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1d9      	bne.n	8003d66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <HAL_UART_IRQHandler+0x29c>)
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fd0d 	bl	80017e6 <HAL_DMA_Abort_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d017      	beq.n	8003e02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e00f      	b.n	8003e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9b8 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00b      	b.n	8003e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9b4 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e007      	b.n	8003e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f9b0 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e00:	e195      	b.n	800412e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e02:	bf00      	nop
    return;
 8003e04:	e193      	b.n	800412e <HAL_UART_IRQHandler+0x5be>
 8003e06:	bf00      	nop
 8003e08:	04000120 	.word	0x04000120
 8003e0c:	08004a07 	.word	0x08004a07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 814e 	bne.w	80040b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8147 	beq.w	80040b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8140 	beq.w	80040b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	f040 80b8 	bne.w	8003fbe <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8167 	beq.w	8004132 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	f080 815f 	bcs.w	8004132 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8086 	bne.w	8003f9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ebe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1da      	bne.n	8003e90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e1      	bne.n	8003eda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6c:	f023 0310 	bic.w	r3, r3, #16
 8003f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e4      	bne.n	8003f5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fbe7 	bl	800176a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8d8 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fbc:	e0b9      	b.n	8004132 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80ab 	beq.w	8004136 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a6 	beq.w	8004136 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
 800400e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e4      	bne.n	8003fea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	623b      	str	r3, [r7, #32]
   return(result);
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004044:	633a      	str	r2, [r7, #48]	; 0x30
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800404a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e3      	bne.n	8004020 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	60fb      	str	r3, [r7, #12]
   return(result);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	617b      	str	r3, [r7, #20]
   return(result);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e4      	bne.n	800406c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f85c 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040b4:	e03f      	b.n	8004136 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00e      	beq.n	80040e0 <HAL_UART_IRQHandler+0x570>
 80040c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fcd4 	bl	8004a86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040de:	e02d      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
    }
    return;
 8004108:	e017      	b.n	800413a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_UART_IRQHandler+0x5cc>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fc85 	bl	8004a32 <UART_EndTransmit_IT>
    return;
 8004128:	e008      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
      return;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
    return;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <HAL_UART_IRQHandler+0x5cc>
    return;
 800413a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800413c:	37e8      	adds	r7, #232	; 0xe8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop

08004144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4bb4      	ldr	r3, [pc, #720]	; (8004484 <UART_SetConfig+0x300>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041bc:	430b      	orrs	r3, r1
 80041be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4aa9      	ldr	r2, [pc, #676]	; (8004488 <UART_SetConfig+0x304>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	4313      	orrs	r3, r2
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4aa0      	ldr	r2, [pc, #640]	; (800448c <UART_SetConfig+0x308>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d126      	bne.n	800425c <UART_SetConfig+0xd8>
 800420e:	4ba0      	ldr	r3, [pc, #640]	; (8004490 <UART_SetConfig+0x30c>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d81b      	bhi.n	8004254 <UART_SetConfig+0xd0>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0xa0>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004235 	.word	0x08004235
 8004228:	08004245 	.word	0x08004245
 800422c:	0800423d 	.word	0x0800423d
 8004230:	0800424d 	.word	0x0800424d
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e080      	b.n	800433e <UART_SetConfig+0x1ba>
 800423c:	2302      	movs	r3, #2
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e07c      	b.n	800433e <UART_SetConfig+0x1ba>
 8004244:	2304      	movs	r3, #4
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e078      	b.n	800433e <UART_SetConfig+0x1ba>
 800424c:	2308      	movs	r3, #8
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e074      	b.n	800433e <UART_SetConfig+0x1ba>
 8004254:	2310      	movs	r3, #16
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e070      	b.n	800433e <UART_SetConfig+0x1ba>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a8c      	ldr	r2, [pc, #560]	; (8004494 <UART_SetConfig+0x310>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d138      	bne.n	80042d8 <UART_SetConfig+0x154>
 8004266:	4b8a      	ldr	r3, [pc, #552]	; (8004490 <UART_SetConfig+0x30c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d82d      	bhi.n	80042d0 <UART_SetConfig+0x14c>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0xf8>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042d1 	.word	0x080042d1
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042d1 	.word	0x080042d1
 8004298:	080042d1 	.word	0x080042d1
 800429c:	080042b9 	.word	0x080042b9
 80042a0:	080042d1 	.word	0x080042d1
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e042      	b.n	800433e <UART_SetConfig+0x1ba>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e03e      	b.n	800433e <UART_SetConfig+0x1ba>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e03a      	b.n	800433e <UART_SetConfig+0x1ba>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e036      	b.n	800433e <UART_SetConfig+0x1ba>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e032      	b.n	800433e <UART_SetConfig+0x1ba>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <UART_SetConfig+0x304>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d12a      	bne.n	8004338 <UART_SetConfig+0x1b4>
 80042e2:	4b6b      	ldr	r3, [pc, #428]	; (8004490 <UART_SetConfig+0x30c>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f0:	d01a      	beq.n	8004328 <UART_SetConfig+0x1a4>
 80042f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f6:	d81b      	bhi.n	8004330 <UART_SetConfig+0x1ac>
 80042f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fc:	d00c      	beq.n	8004318 <UART_SetConfig+0x194>
 80042fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004302:	d815      	bhi.n	8004330 <UART_SetConfig+0x1ac>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <UART_SetConfig+0x18c>
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d008      	beq.n	8004320 <UART_SetConfig+0x19c>
 800430e:	e00f      	b.n	8004330 <UART_SetConfig+0x1ac>
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e012      	b.n	800433e <UART_SetConfig+0x1ba>
 8004318:	2302      	movs	r3, #2
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e00e      	b.n	800433e <UART_SetConfig+0x1ba>
 8004320:	2304      	movs	r3, #4
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e00a      	b.n	800433e <UART_SetConfig+0x1ba>
 8004328:	2308      	movs	r3, #8
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e006      	b.n	800433e <UART_SetConfig+0x1ba>
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e002      	b.n	800433e <UART_SetConfig+0x1ba>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a51      	ldr	r2, [pc, #324]	; (8004488 <UART_SetConfig+0x304>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d17a      	bne.n	800443e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800434c:	2b08      	cmp	r3, #8
 800434e:	d824      	bhi.n	800439a <UART_SetConfig+0x216>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0x1d4>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800437d 	.word	0x0800437d
 800435c:	0800439b 	.word	0x0800439b
 8004360:	08004385 	.word	0x08004385
 8004364:	0800439b 	.word	0x0800439b
 8004368:	0800438b 	.word	0x0800438b
 800436c:	0800439b 	.word	0x0800439b
 8004370:	0800439b 	.word	0x0800439b
 8004374:	0800439b 	.word	0x0800439b
 8004378:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe fa16 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8004380:	61f8      	str	r0, [r7, #28]
        break;
 8004382:	e010      	b.n	80043a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b44      	ldr	r3, [pc, #272]	; (8004498 <UART_SetConfig+0x314>)
 8004386:	61fb      	str	r3, [r7, #28]
        break;
 8004388:	e00d      	b.n	80043a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7fe f977 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800438e:	61f8      	str	r0, [r7, #28]
        break;
 8004390:	e009      	b.n	80043a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	61fb      	str	r3, [r7, #28]
        break;
 8004398:	e005      	b.n	80043a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8107 	beq.w	80045bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d305      	bcc.n	80043ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043d0:	e0f4      	b.n	80045bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2200      	movs	r2, #0
 80043d6:	461c      	mov	r4, r3
 80043d8:	4615      	mov	r5, r2
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	022b      	lsls	r3, r5, #8
 80043e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043e8:	0222      	lsls	r2, r4, #8
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6849      	ldr	r1, [r1, #4]
 80043ee:	0849      	lsrs	r1, r1, #1
 80043f0:	2000      	movs	r0, #0
 80043f2:	4688      	mov	r8, r1
 80043f4:	4681      	mov	r9, r0
 80043f6:	eb12 0a08 	adds.w	sl, r2, r8
 80043fa:	eb43 0b09 	adc.w	fp, r3, r9
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440c:	4650      	mov	r0, sl
 800440e:	4659      	mov	r1, fp
 8004410:	f7fb ff3e 	bl	8000290 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d308      	bcc.n	8004436 <UART_SetConfig+0x2b2>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d204      	bcs.n	8004436 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e0c2      	b.n	80045bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800443c:	e0be      	b.n	80045bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004446:	d16a      	bne.n	800451e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800444c:	2b08      	cmp	r3, #8
 800444e:	d834      	bhi.n	80044ba <UART_SetConfig+0x336>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x2d4>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800447d 	.word	0x0800447d
 800445c:	0800449d 	.word	0x0800449d
 8004460:	080044a5 	.word	0x080044a5
 8004464:	080044bb 	.word	0x080044bb
 8004468:	080044ab 	.word	0x080044ab
 800446c:	080044bb 	.word	0x080044bb
 8004470:	080044bb 	.word	0x080044bb
 8004474:	080044bb 	.word	0x080044bb
 8004478:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe f996 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8004480:	61f8      	str	r0, [r7, #28]
        break;
 8004482:	e020      	b.n	80044c6 <UART_SetConfig+0x342>
 8004484:	efff69f3 	.word	0xefff69f3
 8004488:	40008000 	.word	0x40008000
 800448c:	40013800 	.word	0x40013800
 8004490:	40021000 	.word	0x40021000
 8004494:	40004400 	.word	0x40004400
 8004498:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe f99c 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 80044a0:	61f8      	str	r0, [r7, #28]
        break;
 80044a2:	e010      	b.n	80044c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <UART_SetConfig+0x454>)
 80044a6:	61fb      	str	r3, [r7, #28]
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe f8e7 	bl	800267c <HAL_RCC_GetSysClockFreq>
 80044ae:	61f8      	str	r0, [r7, #28]
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	61fb      	str	r3, [r7, #28]
        break;
 80044b8:	e005      	b.n	80044c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d077      	beq.n	80045bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005a      	lsls	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b0f      	cmp	r3, #15
 80044e6:	d916      	bls.n	8004516 <UART_SetConfig+0x392>
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ee:	d212      	bcs.n	8004516 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f023 030f 	bic.w	r3, r3, #15
 80044f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	b29a      	uxth	r2, r3
 8004506:	8afb      	ldrh	r3, [r7, #22]
 8004508:	4313      	orrs	r3, r2
 800450a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	8afa      	ldrh	r2, [r7, #22]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e052      	b.n	80045bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800451c:	e04e      	b.n	80045bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004522:	2b08      	cmp	r3, #8
 8004524:	d827      	bhi.n	8004576 <UART_SetConfig+0x3f2>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x3a8>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	08004577 	.word	0x08004577
 800453c:	08004567 	.word	0x08004567
 8004540:	08004577 	.word	0x08004577
 8004544:	08004577 	.word	0x08004577
 8004548:	08004577 	.word	0x08004577
 800454c:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe f92c 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8004554:	61f8      	str	r0, [r7, #28]
        break;
 8004556:	e014      	b.n	8004582 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7fe f93e 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 800455c:	61f8      	str	r0, [r7, #28]
        break;
 800455e:	e010      	b.n	8004582 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <UART_SetConfig+0x454>)
 8004562:	61fb      	str	r3, [r7, #28]
        break;
 8004564:	e00d      	b.n	8004582 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7fe f889 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800456a:	61f8      	str	r0, [r7, #28]
        break;
 800456c:	e009      	b.n	8004582 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	61fb      	str	r3, [r7, #28]
        break;
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004580:	bf00      	nop
    }

    if (pclk != 0U)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	085a      	lsrs	r2, r3, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	441a      	add	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	d909      	bls.n	80045b6 <UART_SetConfig+0x432>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d205      	bcs.n	80045b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	e002      	b.n	80045bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3728      	adds	r7, #40	; 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	00f42400 	.word	0x00f42400

080045dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d10a      	bne.n	80046f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b098      	sub	sp, #96	; 0x60
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004730:	f7fc fefe 	bl	8001530 <HAL_GetTick>
 8004734:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d12e      	bne.n	80047a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f88c 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	653b      	str	r3, [r7, #80]	; 0x50
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
 800477e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e062      	b.n	8004868 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d149      	bne.n	8004844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b8:	2200      	movs	r2, #0
 80047ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f856 	bl	8004870 <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03c      	beq.n	8004844 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	623b      	str	r3, [r7, #32]
   return(result);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e6      	bne.n	80047ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481c:	61fa      	str	r2, [r7, #28]
 800481e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	617b      	str	r3, [r7, #20]
   return(result);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e5      	bne.n	80047fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e011      	b.n	8004868 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3758      	adds	r7, #88	; 0x58
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004880:	e049      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004888:	d045      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fc fe51 	bl	8001530 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e048      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d031      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d110      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f838 	bl	800493e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2208      	movs	r2, #8
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e029      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	d111      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f81e 	bl	800493e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	429a      	cmp	r2, r3
 8004932:	d0a6      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800493e:	b480      	push	{r7}
 8004940:	b095      	sub	sp, #84	; 0x54
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
 8004966:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800496a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e6      	bne.n	8004946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	61fb      	str	r3, [r7, #28]
   return(result);
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6979      	ldr	r1, [r7, #20]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	613b      	str	r3, [r7, #16]
   return(result);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049fa:	bf00      	nop
 80049fc:	3754      	adds	r7, #84	; 0x54
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fb97 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b088      	sub	sp, #32
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6979      	ldr	r1, [r7, #20]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	613b      	str	r3, [r7, #16]
   return(result);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fb63 	bl	8004144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <atoi>:
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f000 b9d5 	b.w	8004e4c <strtol>
	...

08004aa4 <setvbuf>:
 8004aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <setvbuf+0x158>)
 8004aac:	681f      	ldr	r7, [r3, #0]
 8004aae:	4604      	mov	r4, r0
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	b127      	cbz	r7, 8004ac0 <setvbuf+0x1c>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	b913      	cbnz	r3, 8004ac0 <setvbuf+0x1c>
 8004aba:	4638      	mov	r0, r7
 8004abc:	f000 f92c 	bl	8004d18 <__sinit>
 8004ac0:	f1b8 0f02 	cmp.w	r8, #2
 8004ac4:	d006      	beq.n	8004ad4 <setvbuf+0x30>
 8004ac6:	f1b8 0f01 	cmp.w	r8, #1
 8004aca:	f200 8094 	bhi.w	8004bf6 <setvbuf+0x152>
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	f2c0 8091 	blt.w	8004bf6 <setvbuf+0x152>
 8004ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad6:	07da      	lsls	r2, r3, #31
 8004ad8:	d405      	bmi.n	8004ae6 <setvbuf+0x42>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	059b      	lsls	r3, r3, #22
 8004ade:	d402      	bmi.n	8004ae6 <setvbuf+0x42>
 8004ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ae2:	f000 fb10 	bl	8005106 <__retarget_lock_acquire_recursive>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f000 ff7b 	bl	80059e4 <_fflush_r>
 8004aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af0:	b141      	cbz	r1, 8004b04 <setvbuf+0x60>
 8004af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d002      	beq.n	8004b00 <setvbuf+0x5c>
 8004afa:	4638      	mov	r0, r7
 8004afc:	f000 fb24 	bl	8005148 <_free_r>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6363      	str	r3, [r4, #52]	; 0x34
 8004b04:	2300      	movs	r3, #0
 8004b06:	61a3      	str	r3, [r4, #24]
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	0618      	lsls	r0, r3, #24
 8004b0e:	d503      	bpl.n	8004b18 <setvbuf+0x74>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	4638      	mov	r0, r7
 8004b14:	f000 fb18 	bl	8005148 <_free_r>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f1b8 0f02 	cmp.w	r8, #2
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	d05f      	beq.n	8004bea <setvbuf+0x146>
 8004b2a:	ab01      	add	r3, sp, #4
 8004b2c:	466a      	mov	r2, sp
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4638      	mov	r0, r7
 8004b32:	f000 f9bb 	bl	8004eac <__swhatbuf_r>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	4318      	orrs	r0, r3
 8004b3a:	81a0      	strh	r0, [r4, #12]
 8004b3c:	bb2d      	cbnz	r5, 8004b8a <setvbuf+0xe6>
 8004b3e:	9d00      	ldr	r5, [sp, #0]
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 fc91 	bl	8005468 <malloc>
 8004b46:	4606      	mov	r6, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d150      	bne.n	8004bee <setvbuf+0x14a>
 8004b4c:	f8dd 9000 	ldr.w	r9, [sp]
 8004b50:	45a9      	cmp	r9, r5
 8004b52:	d13e      	bne.n	8004bd2 <setvbuf+0x12e>
 8004b54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60a2      	str	r2, [r4, #8]
 8004b5c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	6122      	str	r2, [r4, #16]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6a:	6162      	str	r2, [r4, #20]
 8004b6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	07d1      	lsls	r1, r2, #31
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	d404      	bmi.n	8004b82 <setvbuf+0xde>
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <setvbuf+0xde>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f000 fac3 	bl	8005108 <__retarget_lock_release_recursive>
 8004b82:	4628      	mov	r0, r5
 8004b84:	b003      	add	sp, #12
 8004b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	d0d8      	beq.n	8004b40 <setvbuf+0x9c>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	b913      	cbnz	r3, 8004b98 <setvbuf+0xf4>
 8004b92:	4638      	mov	r0, r7
 8004b94:	f000 f8c0 	bl	8004d18 <__sinit>
 8004b98:	f1b8 0f01 	cmp.w	r8, #1
 8004b9c:	bf08      	it	eq
 8004b9e:	89a3      	ldrheq	r3, [r4, #12]
 8004ba0:	6026      	str	r6, [r4, #0]
 8004ba2:	bf04      	itt	eq
 8004ba4:	f043 0301 	orreq.w	r3, r3, #1
 8004ba8:	81a3      	strheq	r3, [r4, #12]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f013 0208 	ands.w	r2, r3, #8
 8004bb0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004bb4:	d01d      	beq.n	8004bf2 <setvbuf+0x14e>
 8004bb6:	07da      	lsls	r2, r3, #31
 8004bb8:	bf41      	itttt	mi
 8004bba:	2200      	movmi	r2, #0
 8004bbc:	426d      	negmi	r5, r5
 8004bbe:	60a2      	strmi	r2, [r4, #8]
 8004bc0:	61a5      	strmi	r5, [r4, #24]
 8004bc2:	bf58      	it	pl
 8004bc4:	60a5      	strpl	r5, [r4, #8]
 8004bc6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004bc8:	f015 0501 	ands.w	r5, r5, #1
 8004bcc:	d0d4      	beq.n	8004b78 <setvbuf+0xd4>
 8004bce:	2500      	movs	r5, #0
 8004bd0:	e7d7      	b.n	8004b82 <setvbuf+0xde>
 8004bd2:	4648      	mov	r0, r9
 8004bd4:	f000 fc48 	bl	8005468 <malloc>
 8004bd8:	4606      	mov	r6, r0
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0ba      	beq.n	8004b54 <setvbuf+0xb0>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	464d      	mov	r5, r9
 8004be8:	e7d1      	b.n	8004b8e <setvbuf+0xea>
 8004bea:	2500      	movs	r5, #0
 8004bec:	e7b4      	b.n	8004b58 <setvbuf+0xb4>
 8004bee:	46a9      	mov	r9, r5
 8004bf0:	e7f5      	b.n	8004bde <setvbuf+0x13a>
 8004bf2:	60a2      	str	r2, [r4, #8]
 8004bf4:	e7e7      	b.n	8004bc6 <setvbuf+0x122>
 8004bf6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004bfa:	e7c2      	b.n	8004b82 <setvbuf+0xde>
 8004bfc:	2000009c 	.word	0x2000009c

08004c00 <std>:
 8004c00:	2300      	movs	r3, #0
 8004c02:	b510      	push	{r4, lr}
 8004c04:	4604      	mov	r4, r0
 8004c06:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	8181      	strh	r1, [r0, #12]
 8004c12:	6643      	str	r3, [r0, #100]	; 0x64
 8004c14:	81c2      	strh	r2, [r0, #14]
 8004c16:	6183      	str	r3, [r0, #24]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	305c      	adds	r0, #92	; 0x5c
 8004c1e:	f000 fa1d 	bl	800505c <memset>
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <std+0x58>)
 8004c24:	6263      	str	r3, [r4, #36]	; 0x24
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <std+0x5c>)
 8004c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <std+0x60>)
 8004c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <std+0x64>)
 8004c30:	6323      	str	r3, [r4, #48]	; 0x30
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <std+0x68>)
 8004c34:	6224      	str	r4, [r4, #32]
 8004c36:	429c      	cmp	r4, r3
 8004c38:	d006      	beq.n	8004c48 <std+0x48>
 8004c3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c3e:	4294      	cmp	r4, r2
 8004c40:	d002      	beq.n	8004c48 <std+0x48>
 8004c42:	33d0      	adds	r3, #208	; 0xd0
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d105      	bne.n	8004c54 <std+0x54>
 8004c48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f000 ba58 	b.w	8005104 <__retarget_lock_init_recursive>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	bf00      	nop
 8004c58:	08005a4d 	.word	0x08005a4d
 8004c5c:	08005a6f 	.word	0x08005a6f
 8004c60:	08005aa7 	.word	0x08005aa7
 8004c64:	08005acb 	.word	0x08005acb
 8004c68:	200001c4 	.word	0x200001c4

08004c6c <stdio_exit_handler>:
 8004c6c:	4a02      	ldr	r2, [pc, #8]	; (8004c78 <stdio_exit_handler+0xc>)
 8004c6e:	4903      	ldr	r1, [pc, #12]	; (8004c7c <stdio_exit_handler+0x10>)
 8004c70:	4803      	ldr	r0, [pc, #12]	; (8004c80 <stdio_exit_handler+0x14>)
 8004c72:	f000 b8f5 	b.w	8004e60 <_fwalk_sglue>
 8004c76:	bf00      	nop
 8004c78:	20000044 	.word	0x20000044
 8004c7c:	080059e5 	.word	0x080059e5
 8004c80:	20000050 	.word	0x20000050

08004c84 <cleanup_stdio>:
 8004c84:	6841      	ldr	r1, [r0, #4]
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <cleanup_stdio+0x34>)
 8004c88:	4299      	cmp	r1, r3
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	d001      	beq.n	8004c94 <cleanup_stdio+0x10>
 8004c90:	f000 fea8 	bl	80059e4 <_fflush_r>
 8004c94:	68a1      	ldr	r1, [r4, #8]
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <cleanup_stdio+0x38>)
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	d002      	beq.n	8004ca2 <cleanup_stdio+0x1e>
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 fea1 	bl	80059e4 <_fflush_r>
 8004ca2:	68e1      	ldr	r1, [r4, #12]
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <cleanup_stdio+0x3c>)
 8004ca6:	4299      	cmp	r1, r3
 8004ca8:	d004      	beq.n	8004cb4 <cleanup_stdio+0x30>
 8004caa:	4620      	mov	r0, r4
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb0:	f000 be98 	b.w	80059e4 <_fflush_r>
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200001c4 	.word	0x200001c4
 8004cbc:	2000022c 	.word	0x2000022c
 8004cc0:	20000294 	.word	0x20000294

08004cc4 <global_stdio_init.part.0>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <global_stdio_init.part.0+0x30>)
 8004cc8:	4c0b      	ldr	r4, [pc, #44]	; (8004cf8 <global_stdio_init.part.0+0x34>)
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <global_stdio_init.part.0+0x38>)
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2104      	movs	r1, #4
 8004cd4:	f7ff ff94 	bl	8004c00 <std>
 8004cd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2109      	movs	r1, #9
 8004ce0:	f7ff ff8e 	bl	8004c00 <std>
 8004ce4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ce8:	2202      	movs	r2, #2
 8004cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cee:	2112      	movs	r1, #18
 8004cf0:	f7ff bf86 	b.w	8004c00 <std>
 8004cf4:	200002fc 	.word	0x200002fc
 8004cf8:	200001c4 	.word	0x200001c4
 8004cfc:	08004c6d 	.word	0x08004c6d

08004d00 <__sfp_lock_acquire>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__sfp_lock_acquire+0x8>)
 8004d02:	f000 ba00 	b.w	8005106 <__retarget_lock_acquire_recursive>
 8004d06:	bf00      	nop
 8004d08:	20000301 	.word	0x20000301

08004d0c <__sfp_lock_release>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__sfp_lock_release+0x8>)
 8004d0e:	f000 b9fb 	b.w	8005108 <__retarget_lock_release_recursive>
 8004d12:	bf00      	nop
 8004d14:	20000301 	.word	0x20000301

08004d18 <__sinit>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	f7ff fff0 	bl	8004d00 <__sfp_lock_acquire>
 8004d20:	6a23      	ldr	r3, [r4, #32]
 8004d22:	b11b      	cbz	r3, 8004d2c <__sinit+0x14>
 8004d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d28:	f7ff bff0 	b.w	8004d0c <__sfp_lock_release>
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <__sinit+0x28>)
 8004d2e:	6223      	str	r3, [r4, #32]
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <__sinit+0x2c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f5      	bne.n	8004d24 <__sinit+0xc>
 8004d38:	f7ff ffc4 	bl	8004cc4 <global_stdio_init.part.0>
 8004d3c:	e7f2      	b.n	8004d24 <__sinit+0xc>
 8004d3e:	bf00      	nop
 8004d40:	08004c85 	.word	0x08004c85
 8004d44:	200002fc 	.word	0x200002fc

08004d48 <_strtol_l.constprop.0>:
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4e:	d001      	beq.n	8004d54 <_strtol_l.constprop.0+0xc>
 8004d50:	2b24      	cmp	r3, #36	; 0x24
 8004d52:	d906      	bls.n	8004d62 <_strtol_l.constprop.0+0x1a>
 8004d54:	f000 f9ac 	bl	80050b0 <__errno>
 8004d58:	2316      	movs	r3, #22
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e48 <_strtol_l.constprop.0+0x100>
 8004d66:	460d      	mov	r5, r1
 8004d68:	462e      	mov	r6, r5
 8004d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004d72:	f017 0708 	ands.w	r7, r7, #8
 8004d76:	d1f7      	bne.n	8004d68 <_strtol_l.constprop.0+0x20>
 8004d78:	2c2d      	cmp	r4, #45	; 0x2d
 8004d7a:	d132      	bne.n	8004de2 <_strtol_l.constprop.0+0x9a>
 8004d7c:	782c      	ldrb	r4, [r5, #0]
 8004d7e:	2701      	movs	r7, #1
 8004d80:	1cb5      	adds	r5, r6, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d05b      	beq.n	8004e3e <_strtol_l.constprop.0+0xf6>
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d109      	bne.n	8004d9e <_strtol_l.constprop.0+0x56>
 8004d8a:	2c30      	cmp	r4, #48	; 0x30
 8004d8c:	d107      	bne.n	8004d9e <_strtol_l.constprop.0+0x56>
 8004d8e:	782c      	ldrb	r4, [r5, #0]
 8004d90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004d94:	2c58      	cmp	r4, #88	; 0x58
 8004d96:	d14d      	bne.n	8004e34 <_strtol_l.constprop.0+0xec>
 8004d98:	786c      	ldrb	r4, [r5, #1]
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	3502      	adds	r5, #2
 8004d9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004da2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004da6:	f04f 0e00 	mov.w	lr, #0
 8004daa:	fbb8 f9f3 	udiv	r9, r8, r3
 8004dae:	4676      	mov	r6, lr
 8004db0:	fb03 8a19 	mls	sl, r3, r9, r8
 8004db4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004db8:	f1bc 0f09 	cmp.w	ip, #9
 8004dbc:	d816      	bhi.n	8004dec <_strtol_l.constprop.0+0xa4>
 8004dbe:	4664      	mov	r4, ip
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	dd24      	ble.n	8004e0e <_strtol_l.constprop.0+0xc6>
 8004dc4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004dc8:	d008      	beq.n	8004ddc <_strtol_l.constprop.0+0x94>
 8004dca:	45b1      	cmp	r9, r6
 8004dcc:	d31c      	bcc.n	8004e08 <_strtol_l.constprop.0+0xc0>
 8004dce:	d101      	bne.n	8004dd4 <_strtol_l.constprop.0+0x8c>
 8004dd0:	45a2      	cmp	sl, r4
 8004dd2:	db19      	blt.n	8004e08 <_strtol_l.constprop.0+0xc0>
 8004dd4:	fb06 4603 	mla	r6, r6, r3, r4
 8004dd8:	f04f 0e01 	mov.w	lr, #1
 8004ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004de0:	e7e8      	b.n	8004db4 <_strtol_l.constprop.0+0x6c>
 8004de2:	2c2b      	cmp	r4, #43	; 0x2b
 8004de4:	bf04      	itt	eq
 8004de6:	782c      	ldrbeq	r4, [r5, #0]
 8004de8:	1cb5      	addeq	r5, r6, #2
 8004dea:	e7ca      	b.n	8004d82 <_strtol_l.constprop.0+0x3a>
 8004dec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004df0:	f1bc 0f19 	cmp.w	ip, #25
 8004df4:	d801      	bhi.n	8004dfa <_strtol_l.constprop.0+0xb2>
 8004df6:	3c37      	subs	r4, #55	; 0x37
 8004df8:	e7e2      	b.n	8004dc0 <_strtol_l.constprop.0+0x78>
 8004dfa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004dfe:	f1bc 0f19 	cmp.w	ip, #25
 8004e02:	d804      	bhi.n	8004e0e <_strtol_l.constprop.0+0xc6>
 8004e04:	3c57      	subs	r4, #87	; 0x57
 8004e06:	e7db      	b.n	8004dc0 <_strtol_l.constprop.0+0x78>
 8004e08:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004e0c:	e7e6      	b.n	8004ddc <_strtol_l.constprop.0+0x94>
 8004e0e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004e12:	d105      	bne.n	8004e20 <_strtol_l.constprop.0+0xd8>
 8004e14:	2322      	movs	r3, #34	; 0x22
 8004e16:	6003      	str	r3, [r0, #0]
 8004e18:	4646      	mov	r6, r8
 8004e1a:	b942      	cbnz	r2, 8004e2e <_strtol_l.constprop.0+0xe6>
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	e79e      	b.n	8004d5e <_strtol_l.constprop.0+0x16>
 8004e20:	b107      	cbz	r7, 8004e24 <_strtol_l.constprop.0+0xdc>
 8004e22:	4276      	negs	r6, r6
 8004e24:	2a00      	cmp	r2, #0
 8004e26:	d0f9      	beq.n	8004e1c <_strtol_l.constprop.0+0xd4>
 8004e28:	f1be 0f00 	cmp.w	lr, #0
 8004e2c:	d000      	beq.n	8004e30 <_strtol_l.constprop.0+0xe8>
 8004e2e:	1e69      	subs	r1, r5, #1
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	e7f3      	b.n	8004e1c <_strtol_l.constprop.0+0xd4>
 8004e34:	2430      	movs	r4, #48	; 0x30
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1b1      	bne.n	8004d9e <_strtol_l.constprop.0+0x56>
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	e7af      	b.n	8004d9e <_strtol_l.constprop.0+0x56>
 8004e3e:	2c30      	cmp	r4, #48	; 0x30
 8004e40:	d0a5      	beq.n	8004d8e <_strtol_l.constprop.0+0x46>
 8004e42:	230a      	movs	r3, #10
 8004e44:	e7ab      	b.n	8004d9e <_strtol_l.constprop.0+0x56>
 8004e46:	bf00      	nop
 8004e48:	0800614e 	.word	0x0800614e

08004e4c <strtol>:
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	460a      	mov	r2, r1
 8004e50:	4601      	mov	r1, r0
 8004e52:	4802      	ldr	r0, [pc, #8]	; (8004e5c <strtol+0x10>)
 8004e54:	6800      	ldr	r0, [r0, #0]
 8004e56:	f7ff bf77 	b.w	8004d48 <_strtol_l.constprop.0>
 8004e5a:	bf00      	nop
 8004e5c:	2000009c 	.word	0x2000009c

08004e60 <_fwalk_sglue>:
 8004e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4607      	mov	r7, r0
 8004e66:	4688      	mov	r8, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e70:	f1b9 0901 	subs.w	r9, r9, #1
 8004e74:	d505      	bpl.n	8004e82 <_fwalk_sglue+0x22>
 8004e76:	6824      	ldr	r4, [r4, #0]
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	d1f7      	bne.n	8004e6c <_fwalk_sglue+0xc>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d907      	bls.n	8004e98 <_fwalk_sglue+0x38>
 8004e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	d003      	beq.n	8004e98 <_fwalk_sglue+0x38>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c0      	blx	r8
 8004e96:	4306      	orrs	r6, r0
 8004e98:	3568      	adds	r5, #104	; 0x68
 8004e9a:	e7e9      	b.n	8004e70 <_fwalk_sglue+0x10>

08004e9c <getchar>:
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <getchar+0xc>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	6841      	ldr	r1, [r0, #4]
 8004ea2:	f000 be29 	b.w	8005af8 <_getc_r>
 8004ea6:	bf00      	nop
 8004ea8:	2000009c 	.word	0x2000009c

08004eac <__swhatbuf_r>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	b096      	sub	sp, #88	; 0x58
 8004eb8:	4615      	mov	r5, r2
 8004eba:	461e      	mov	r6, r3
 8004ebc:	da0d      	bge.n	8004eda <__swhatbuf_r+0x2e>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ec4:	f04f 0100 	mov.w	r1, #0
 8004ec8:	bf0c      	ite	eq
 8004eca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ece:	2340      	movne	r3, #64	; 0x40
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	6031      	str	r1, [r6, #0]
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	b016      	add	sp, #88	; 0x58
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
 8004eda:	466a      	mov	r2, sp
 8004edc:	f000 f8c6 	bl	800506c <_fstat_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	dbec      	blt.n	8004ebe <__swhatbuf_r+0x12>
 8004ee4:	9901      	ldr	r1, [sp, #4]
 8004ee6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004eea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004eee:	4259      	negs	r1, r3
 8004ef0:	4159      	adcs	r1, r3
 8004ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef6:	e7eb      	b.n	8004ed0 <__swhatbuf_r+0x24>

08004ef8 <__smakebuf_r>:
 8004ef8:	898b      	ldrh	r3, [r1, #12]
 8004efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004efc:	079d      	lsls	r5, r3, #30
 8004efe:	4606      	mov	r6, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	d507      	bpl.n	8004f14 <__smakebuf_r+0x1c>
 8004f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	6123      	str	r3, [r4, #16]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	6163      	str	r3, [r4, #20]
 8004f10:	b002      	add	sp, #8
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	ab01      	add	r3, sp, #4
 8004f16:	466a      	mov	r2, sp
 8004f18:	f7ff ffc8 	bl	8004eac <__swhatbuf_r>
 8004f1c:	9900      	ldr	r1, [sp, #0]
 8004f1e:	4605      	mov	r5, r0
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 fac9 	bl	80054b8 <_malloc_r>
 8004f26:	b948      	cbnz	r0, 8004f3c <__smakebuf_r+0x44>
 8004f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d4ef      	bmi.n	8004f10 <__smakebuf_r+0x18>
 8004f30:	f023 0303 	bic.w	r3, r3, #3
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	e7e3      	b.n	8004f04 <__smakebuf_r+0xc>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	9b00      	ldr	r3, [sp, #0]
 8004f48:	6163      	str	r3, [r4, #20]
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	6120      	str	r0, [r4, #16]
 8004f4e:	b15b      	cbz	r3, 8004f68 <__smakebuf_r+0x70>
 8004f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f89b 	bl	8005090 <_isatty_r>
 8004f5a:	b128      	cbz	r0, 8004f68 <__smakebuf_r+0x70>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	431d      	orrs	r5, r3
 8004f6c:	81a5      	strh	r5, [r4, #12]
 8004f6e:	e7cf      	b.n	8004f10 <__smakebuf_r+0x18>

08004f70 <iprintf>:
 8004f70:	b40f      	push	{r0, r1, r2, r3}
 8004f72:	b507      	push	{r0, r1, r2, lr}
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <iprintf+0x20>)
 8004f76:	ab04      	add	r3, sp, #16
 8004f78:	6808      	ldr	r0, [r1, #0]
 8004f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7e:	6881      	ldr	r1, [r0, #8]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f000 f957 	bl	8005234 <_vfiprintf_r>
 8004f86:	b003      	add	sp, #12
 8004f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	2000009c 	.word	0x2000009c

08004f94 <putchar>:
 8004f94:	4b02      	ldr	r3, [pc, #8]	; (8004fa0 <putchar+0xc>)
 8004f96:	4601      	mov	r1, r0
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	6882      	ldr	r2, [r0, #8]
 8004f9c:	f000 be6c 	b.w	8005c78 <_putc_r>
 8004fa0:	2000009c 	.word	0x2000009c

08004fa4 <strtok>:
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <strtok+0x5c>)
 8004fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fa8:	681e      	ldr	r6, [r3, #0]
 8004faa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004fac:	4605      	mov	r5, r0
 8004fae:	b9fc      	cbnz	r4, 8004ff0 <strtok+0x4c>
 8004fb0:	2050      	movs	r0, #80	; 0x50
 8004fb2:	9101      	str	r1, [sp, #4]
 8004fb4:	f000 fa58 	bl	8005468 <malloc>
 8004fb8:	9901      	ldr	r1, [sp, #4]
 8004fba:	6470      	str	r0, [r6, #68]	; 0x44
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	b920      	cbnz	r0, 8004fca <strtok+0x26>
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <strtok+0x60>)
 8004fc2:	4811      	ldr	r0, [pc, #68]	; (8005008 <strtok+0x64>)
 8004fc4:	215b      	movs	r1, #91	; 0x5b
 8004fc6:	f000 f8a1 	bl	800510c <__assert_func>
 8004fca:	e9c0 4400 	strd	r4, r4, [r0]
 8004fce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004fd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004fd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004fda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004fde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004fe2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004fe6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004fea:	6184      	str	r4, [r0, #24]
 8004fec:	7704      	strb	r4, [r0, #28]
 8004fee:	6244      	str	r4, [r0, #36]	; 0x24
 8004ff0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	b002      	add	sp, #8
 8004ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ffc:	f000 b806 	b.w	800500c <__strtok_r>
 8005000:	2000009c 	.word	0x2000009c
 8005004:	080060dc 	.word	0x080060dc
 8005008:	080060f3 	.word	0x080060f3

0800500c <__strtok_r>:
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b908      	cbnz	r0, 8005014 <__strtok_r+0x8>
 8005010:	6810      	ldr	r0, [r2, #0]
 8005012:	b188      	cbz	r0, 8005038 <__strtok_r+0x2c>
 8005014:	4604      	mov	r4, r0
 8005016:	4620      	mov	r0, r4
 8005018:	f814 5b01 	ldrb.w	r5, [r4], #1
 800501c:	460f      	mov	r7, r1
 800501e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005022:	b91e      	cbnz	r6, 800502c <__strtok_r+0x20>
 8005024:	b965      	cbnz	r5, 8005040 <__strtok_r+0x34>
 8005026:	6015      	str	r5, [r2, #0]
 8005028:	4628      	mov	r0, r5
 800502a:	e005      	b.n	8005038 <__strtok_r+0x2c>
 800502c:	42b5      	cmp	r5, r6
 800502e:	d1f6      	bne.n	800501e <__strtok_r+0x12>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <__strtok_r+0xa>
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	7003      	strb	r3, [r0, #0]
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	461c      	mov	r4, r3
 800503c:	e00c      	b.n	8005058 <__strtok_r+0x4c>
 800503e:	b915      	cbnz	r5, 8005046 <__strtok_r+0x3a>
 8005040:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005044:	460e      	mov	r6, r1
 8005046:	f816 5b01 	ldrb.w	r5, [r6], #1
 800504a:	42ab      	cmp	r3, r5
 800504c:	d1f7      	bne.n	800503e <__strtok_r+0x32>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f3      	beq.n	800503a <__strtok_r+0x2e>
 8005052:	2300      	movs	r3, #0
 8005054:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005058:	6014      	str	r4, [r2, #0]
 800505a:	e7ed      	b.n	8005038 <__strtok_r+0x2c>

0800505c <memset>:
 800505c:	4402      	add	r2, r0
 800505e:	4603      	mov	r3, r0
 8005060:	4293      	cmp	r3, r2
 8005062:	d100      	bne.n	8005066 <memset+0xa>
 8005064:	4770      	bx	lr
 8005066:	f803 1b01 	strb.w	r1, [r3], #1
 800506a:	e7f9      	b.n	8005060 <memset+0x4>

0800506c <_fstat_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d07      	ldr	r5, [pc, #28]	; (800508c <_fstat_r+0x20>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	f7fc f815 	bl	80010a8 <_fstat>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d102      	bne.n	8005088 <_fstat_r+0x1c>
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	b103      	cbz	r3, 8005088 <_fstat_r+0x1c>
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	bf00      	nop
 800508c:	2000030c 	.word	0x2000030c

08005090 <_isatty_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	; (80050ac <_isatty_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb ff72 	bl	8000f84 <_isatty>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_isatty_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_isatty_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	2000030c 	.word	0x2000030c

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	2000009c 	.word	0x2000009c

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	; (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	; (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	; (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 ff46 	bl	8005f60 <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	080062c8 	.word	0x080062c8
 80050f8:	080062c8 	.word	0x080062c8
 80050fc:	080062c8 	.word	0x080062c8
 8005100:	080062cc 	.word	0x080062cc

08005104 <__retarget_lock_init_recursive>:
 8005104:	4770      	bx	lr

08005106 <__retarget_lock_acquire_recursive>:
 8005106:	4770      	bx	lr

08005108 <__retarget_lock_release_recursive>:
 8005108:	4770      	bx	lr
	...

0800510c <__assert_func>:
 800510c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800510e:	4614      	mov	r4, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <__assert_func+0x2c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4605      	mov	r5, r0
 8005118:	68d8      	ldr	r0, [r3, #12]
 800511a:	b14c      	cbz	r4, 8005130 <__assert_func+0x24>
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <__assert_func+0x30>)
 800511e:	9100      	str	r1, [sp, #0]
 8005120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005124:	4906      	ldr	r1, [pc, #24]	; (8005140 <__assert_func+0x34>)
 8005126:	462b      	mov	r3, r5
 8005128:	f000 fcd4 	bl	8005ad4 <fiprintf>
 800512c:	f000 fe46 	bl	8005dbc <abort>
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <__assert_func+0x38>)
 8005132:	461c      	mov	r4, r3
 8005134:	e7f3      	b.n	800511e <__assert_func+0x12>
 8005136:	bf00      	nop
 8005138:	2000009c 	.word	0x2000009c
 800513c:	0800624e 	.word	0x0800624e
 8005140:	0800625b 	.word	0x0800625b
 8005144:	08006289 	.word	0x08006289

08005148 <_free_r>:
 8005148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800514a:	2900      	cmp	r1, #0
 800514c:	d044      	beq.n	80051d8 <_free_r+0x90>
 800514e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005152:	9001      	str	r0, [sp, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f1a1 0404 	sub.w	r4, r1, #4
 800515a:	bfb8      	it	lt
 800515c:	18e4      	addlt	r4, r4, r3
 800515e:	f000 fc69 	bl	8005a34 <__malloc_lock>
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <_free_r+0x94>)
 8005164:	9801      	ldr	r0, [sp, #4]
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	b933      	cbnz	r3, 8005178 <_free_r+0x30>
 800516a:	6063      	str	r3, [r4, #4]
 800516c:	6014      	str	r4, [r2, #0]
 800516e:	b003      	add	sp, #12
 8005170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005174:	f000 bc64 	b.w	8005a40 <__malloc_unlock>
 8005178:	42a3      	cmp	r3, r4
 800517a:	d908      	bls.n	800518e <_free_r+0x46>
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	1961      	adds	r1, r4, r5
 8005180:	428b      	cmp	r3, r1
 8005182:	bf01      	itttt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	1949      	addeq	r1, r1, r5
 800518a:	6021      	streq	r1, [r4, #0]
 800518c:	e7ed      	b.n	800516a <_free_r+0x22>
 800518e:	461a      	mov	r2, r3
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b10b      	cbz	r3, 8005198 <_free_r+0x50>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d9fa      	bls.n	800518e <_free_r+0x46>
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	1855      	adds	r5, r2, r1
 800519c:	42a5      	cmp	r5, r4
 800519e:	d10b      	bne.n	80051b8 <_free_r+0x70>
 80051a0:	6824      	ldr	r4, [r4, #0]
 80051a2:	4421      	add	r1, r4
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	6011      	str	r1, [r2, #0]
 80051aa:	d1e0      	bne.n	800516e <_free_r+0x26>
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6053      	str	r3, [r2, #4]
 80051b2:	440c      	add	r4, r1
 80051b4:	6014      	str	r4, [r2, #0]
 80051b6:	e7da      	b.n	800516e <_free_r+0x26>
 80051b8:	d902      	bls.n	80051c0 <_free_r+0x78>
 80051ba:	230c      	movs	r3, #12
 80051bc:	6003      	str	r3, [r0, #0]
 80051be:	e7d6      	b.n	800516e <_free_r+0x26>
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf04      	itt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	bf04      	itt	eq
 80051d0:	1949      	addeq	r1, r1, r5
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	6054      	str	r4, [r2, #4]
 80051d6:	e7ca      	b.n	800516e <_free_r+0x26>
 80051d8:	b003      	add	sp, #12
 80051da:	bd30      	pop	{r4, r5, pc}
 80051dc:	20000304 	.word	0x20000304

080051e0 <__sfputc_r>:
 80051e0:	6893      	ldr	r3, [r2, #8]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	b410      	push	{r4}
 80051e8:	6093      	str	r3, [r2, #8]
 80051ea:	da08      	bge.n	80051fe <__sfputc_r+0x1e>
 80051ec:	6994      	ldr	r4, [r2, #24]
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	db01      	blt.n	80051f6 <__sfputc_r+0x16>
 80051f2:	290a      	cmp	r1, #10
 80051f4:	d103      	bne.n	80051fe <__sfputc_r+0x1e>
 80051f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051fa:	f000 bca8 	b.w	8005b4e <__swbuf_r>
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	1c58      	adds	r0, r3, #1
 8005202:	6010      	str	r0, [r2, #0]
 8005204:	7019      	strb	r1, [r3, #0]
 8005206:	4608      	mov	r0, r1
 8005208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800520c:	4770      	bx	lr

0800520e <__sfputs_r>:
 800520e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005210:	4606      	mov	r6, r0
 8005212:	460f      	mov	r7, r1
 8005214:	4614      	mov	r4, r2
 8005216:	18d5      	adds	r5, r2, r3
 8005218:	42ac      	cmp	r4, r5
 800521a:	d101      	bne.n	8005220 <__sfputs_r+0x12>
 800521c:	2000      	movs	r0, #0
 800521e:	e007      	b.n	8005230 <__sfputs_r+0x22>
 8005220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005224:	463a      	mov	r2, r7
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff ffda 	bl	80051e0 <__sfputc_r>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d1f3      	bne.n	8005218 <__sfputs_r+0xa>
 8005230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005234 <_vfiprintf_r>:
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	460d      	mov	r5, r1
 800523a:	b09d      	sub	sp, #116	; 0x74
 800523c:	4614      	mov	r4, r2
 800523e:	4698      	mov	r8, r3
 8005240:	4606      	mov	r6, r0
 8005242:	b118      	cbz	r0, 800524c <_vfiprintf_r+0x18>
 8005244:	6a03      	ldr	r3, [r0, #32]
 8005246:	b90b      	cbnz	r3, 800524c <_vfiprintf_r+0x18>
 8005248:	f7ff fd66 	bl	8004d18 <__sinit>
 800524c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800524e:	07d9      	lsls	r1, r3, #31
 8005250:	d405      	bmi.n	800525e <_vfiprintf_r+0x2a>
 8005252:	89ab      	ldrh	r3, [r5, #12]
 8005254:	059a      	lsls	r2, r3, #22
 8005256:	d402      	bmi.n	800525e <_vfiprintf_r+0x2a>
 8005258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800525a:	f7ff ff54 	bl	8005106 <__retarget_lock_acquire_recursive>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	d501      	bpl.n	8005268 <_vfiprintf_r+0x34>
 8005264:	692b      	ldr	r3, [r5, #16]
 8005266:	b99b      	cbnz	r3, 8005290 <_vfiprintf_r+0x5c>
 8005268:	4629      	mov	r1, r5
 800526a:	4630      	mov	r0, r6
 800526c:	f000 fcac 	bl	8005bc8 <__swsetup_r>
 8005270:	b170      	cbz	r0, 8005290 <_vfiprintf_r+0x5c>
 8005272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005274:	07dc      	lsls	r4, r3, #31
 8005276:	d504      	bpl.n	8005282 <_vfiprintf_r+0x4e>
 8005278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800527c:	b01d      	add	sp, #116	; 0x74
 800527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	0598      	lsls	r0, r3, #22
 8005286:	d4f7      	bmi.n	8005278 <_vfiprintf_r+0x44>
 8005288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800528a:	f7ff ff3d 	bl	8005108 <__retarget_lock_release_recursive>
 800528e:	e7f3      	b.n	8005278 <_vfiprintf_r+0x44>
 8005290:	2300      	movs	r3, #0
 8005292:	9309      	str	r3, [sp, #36]	; 0x24
 8005294:	2320      	movs	r3, #32
 8005296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800529a:	f8cd 800c 	str.w	r8, [sp, #12]
 800529e:	2330      	movs	r3, #48	; 0x30
 80052a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005454 <_vfiprintf_r+0x220>
 80052a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052a8:	f04f 0901 	mov.w	r9, #1
 80052ac:	4623      	mov	r3, r4
 80052ae:	469a      	mov	sl, r3
 80052b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b4:	b10a      	cbz	r2, 80052ba <_vfiprintf_r+0x86>
 80052b6:	2a25      	cmp	r2, #37	; 0x25
 80052b8:	d1f9      	bne.n	80052ae <_vfiprintf_r+0x7a>
 80052ba:	ebba 0b04 	subs.w	fp, sl, r4
 80052be:	d00b      	beq.n	80052d8 <_vfiprintf_r+0xa4>
 80052c0:	465b      	mov	r3, fp
 80052c2:	4622      	mov	r2, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ffa1 	bl	800520e <__sfputs_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	f000 80a9 	beq.w	8005424 <_vfiprintf_r+0x1f0>
 80052d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d4:	445a      	add	r2, fp
 80052d6:	9209      	str	r2, [sp, #36]	; 0x24
 80052d8:	f89a 3000 	ldrb.w	r3, [sl]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a1 	beq.w	8005424 <_vfiprintf_r+0x1f0>
 80052e2:	2300      	movs	r3, #0
 80052e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ec:	f10a 0a01 	add.w	sl, sl, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	9307      	str	r3, [sp, #28]
 80052f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052f8:	931a      	str	r3, [sp, #104]	; 0x68
 80052fa:	4654      	mov	r4, sl
 80052fc:	2205      	movs	r2, #5
 80052fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_vfiprintf_r+0x220>)
 8005304:	f7fa ff74 	bl	80001f0 <memchr>
 8005308:	9a04      	ldr	r2, [sp, #16]
 800530a:	b9d8      	cbnz	r0, 8005344 <_vfiprintf_r+0x110>
 800530c:	06d1      	lsls	r1, r2, #27
 800530e:	bf44      	itt	mi
 8005310:	2320      	movmi	r3, #32
 8005312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005316:	0713      	lsls	r3, r2, #28
 8005318:	bf44      	itt	mi
 800531a:	232b      	movmi	r3, #43	; 0x2b
 800531c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005320:	f89a 3000 	ldrb.w	r3, [sl]
 8005324:	2b2a      	cmp	r3, #42	; 0x2a
 8005326:	d015      	beq.n	8005354 <_vfiprintf_r+0x120>
 8005328:	9a07      	ldr	r2, [sp, #28]
 800532a:	4654      	mov	r4, sl
 800532c:	2000      	movs	r0, #0
 800532e:	f04f 0c0a 	mov.w	ip, #10
 8005332:	4621      	mov	r1, r4
 8005334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005338:	3b30      	subs	r3, #48	; 0x30
 800533a:	2b09      	cmp	r3, #9
 800533c:	d94d      	bls.n	80053da <_vfiprintf_r+0x1a6>
 800533e:	b1b0      	cbz	r0, 800536e <_vfiprintf_r+0x13a>
 8005340:	9207      	str	r2, [sp, #28]
 8005342:	e014      	b.n	800536e <_vfiprintf_r+0x13a>
 8005344:	eba0 0308 	sub.w	r3, r0, r8
 8005348:	fa09 f303 	lsl.w	r3, r9, r3
 800534c:	4313      	orrs	r3, r2
 800534e:	9304      	str	r3, [sp, #16]
 8005350:	46a2      	mov	sl, r4
 8005352:	e7d2      	b.n	80052fa <_vfiprintf_r+0xc6>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	1d19      	adds	r1, r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	9103      	str	r1, [sp, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfbb      	ittet	lt
 8005360:	425b      	neglt	r3, r3
 8005362:	f042 0202 	orrlt.w	r2, r2, #2
 8005366:	9307      	strge	r3, [sp, #28]
 8005368:	9307      	strlt	r3, [sp, #28]
 800536a:	bfb8      	it	lt
 800536c:	9204      	strlt	r2, [sp, #16]
 800536e:	7823      	ldrb	r3, [r4, #0]
 8005370:	2b2e      	cmp	r3, #46	; 0x2e
 8005372:	d10c      	bne.n	800538e <_vfiprintf_r+0x15a>
 8005374:	7863      	ldrb	r3, [r4, #1]
 8005376:	2b2a      	cmp	r3, #42	; 0x2a
 8005378:	d134      	bne.n	80053e4 <_vfiprintf_r+0x1b0>
 800537a:	9b03      	ldr	r3, [sp, #12]
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	9203      	str	r2, [sp, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfb8      	it	lt
 8005386:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800538a:	3402      	adds	r4, #2
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005464 <_vfiprintf_r+0x230>
 8005392:	7821      	ldrb	r1, [r4, #0]
 8005394:	2203      	movs	r2, #3
 8005396:	4650      	mov	r0, sl
 8005398:	f7fa ff2a 	bl	80001f0 <memchr>
 800539c:	b138      	cbz	r0, 80053ae <_vfiprintf_r+0x17a>
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	eba0 000a 	sub.w	r0, r0, sl
 80053a4:	2240      	movs	r2, #64	; 0x40
 80053a6:	4082      	lsls	r2, r0
 80053a8:	4313      	orrs	r3, r2
 80053aa:	3401      	adds	r4, #1
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b2:	4829      	ldr	r0, [pc, #164]	; (8005458 <_vfiprintf_r+0x224>)
 80053b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053b8:	2206      	movs	r2, #6
 80053ba:	f7fa ff19 	bl	80001f0 <memchr>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d03f      	beq.n	8005442 <_vfiprintf_r+0x20e>
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <_vfiprintf_r+0x228>)
 80053c4:	bb1b      	cbnz	r3, 800540e <_vfiprintf_r+0x1da>
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	3307      	adds	r3, #7
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	3308      	adds	r3, #8
 80053d0:	9303      	str	r3, [sp, #12]
 80053d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d4:	443b      	add	r3, r7
 80053d6:	9309      	str	r3, [sp, #36]	; 0x24
 80053d8:	e768      	b.n	80052ac <_vfiprintf_r+0x78>
 80053da:	fb0c 3202 	mla	r2, ip, r2, r3
 80053de:	460c      	mov	r4, r1
 80053e0:	2001      	movs	r0, #1
 80053e2:	e7a6      	b.n	8005332 <_vfiprintf_r+0xfe>
 80053e4:	2300      	movs	r3, #0
 80053e6:	3401      	adds	r4, #1
 80053e8:	9305      	str	r3, [sp, #20]
 80053ea:	4619      	mov	r1, r3
 80053ec:	f04f 0c0a 	mov.w	ip, #10
 80053f0:	4620      	mov	r0, r4
 80053f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053f6:	3a30      	subs	r2, #48	; 0x30
 80053f8:	2a09      	cmp	r2, #9
 80053fa:	d903      	bls.n	8005404 <_vfiprintf_r+0x1d0>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0c6      	beq.n	800538e <_vfiprintf_r+0x15a>
 8005400:	9105      	str	r1, [sp, #20]
 8005402:	e7c4      	b.n	800538e <_vfiprintf_r+0x15a>
 8005404:	fb0c 2101 	mla	r1, ip, r1, r2
 8005408:	4604      	mov	r4, r0
 800540a:	2301      	movs	r3, #1
 800540c:	e7f0      	b.n	80053f0 <_vfiprintf_r+0x1bc>
 800540e:	ab03      	add	r3, sp, #12
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	462a      	mov	r2, r5
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <_vfiprintf_r+0x22c>)
 8005416:	a904      	add	r1, sp, #16
 8005418:	4630      	mov	r0, r6
 800541a:	f3af 8000 	nop.w
 800541e:	4607      	mov	r7, r0
 8005420:	1c78      	adds	r0, r7, #1
 8005422:	d1d6      	bne.n	80053d2 <_vfiprintf_r+0x19e>
 8005424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005426:	07d9      	lsls	r1, r3, #31
 8005428:	d405      	bmi.n	8005436 <_vfiprintf_r+0x202>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	059a      	lsls	r2, r3, #22
 800542e:	d402      	bmi.n	8005436 <_vfiprintf_r+0x202>
 8005430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005432:	f7ff fe69 	bl	8005108 <__retarget_lock_release_recursive>
 8005436:	89ab      	ldrh	r3, [r5, #12]
 8005438:	065b      	lsls	r3, r3, #25
 800543a:	f53f af1d 	bmi.w	8005278 <_vfiprintf_r+0x44>
 800543e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005440:	e71c      	b.n	800527c <_vfiprintf_r+0x48>
 8005442:	ab03      	add	r3, sp, #12
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	462a      	mov	r2, r5
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <_vfiprintf_r+0x22c>)
 800544a:	a904      	add	r1, sp, #16
 800544c:	4630      	mov	r0, r6
 800544e:	f000 f921 	bl	8005694 <_printf_i>
 8005452:	e7e4      	b.n	800541e <_vfiprintf_r+0x1ea>
 8005454:	0800628a 	.word	0x0800628a
 8005458:	08006294 	.word	0x08006294
 800545c:	00000000 	.word	0x00000000
 8005460:	0800520f 	.word	0x0800520f
 8005464:	08006290 	.word	0x08006290

08005468 <malloc>:
 8005468:	4b02      	ldr	r3, [pc, #8]	; (8005474 <malloc+0xc>)
 800546a:	4601      	mov	r1, r0
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f000 b823 	b.w	80054b8 <_malloc_r>
 8005472:	bf00      	nop
 8005474:	2000009c 	.word	0x2000009c

08005478 <sbrk_aligned>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4e0e      	ldr	r6, [pc, #56]	; (80054b4 <sbrk_aligned+0x3c>)
 800547c:	460c      	mov	r4, r1
 800547e:	6831      	ldr	r1, [r6, #0]
 8005480:	4605      	mov	r5, r0
 8005482:	b911      	cbnz	r1, 800548a <sbrk_aligned+0x12>
 8005484:	f000 fc78 	bl	8005d78 <_sbrk_r>
 8005488:	6030      	str	r0, [r6, #0]
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f000 fc73 	bl	8005d78 <_sbrk_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d00a      	beq.n	80054ac <sbrk_aligned+0x34>
 8005496:	1cc4      	adds	r4, r0, #3
 8005498:	f024 0403 	bic.w	r4, r4, #3
 800549c:	42a0      	cmp	r0, r4
 800549e:	d007      	beq.n	80054b0 <sbrk_aligned+0x38>
 80054a0:	1a21      	subs	r1, r4, r0
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fc68 	bl	8005d78 <_sbrk_r>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d101      	bne.n	80054b0 <sbrk_aligned+0x38>
 80054ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054b0:	4620      	mov	r0, r4
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	20000308 	.word	0x20000308

080054b8 <_malloc_r>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	1ccd      	adds	r5, r1, #3
 80054be:	f025 0503 	bic.w	r5, r5, #3
 80054c2:	3508      	adds	r5, #8
 80054c4:	2d0c      	cmp	r5, #12
 80054c6:	bf38      	it	cc
 80054c8:	250c      	movcc	r5, #12
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	4607      	mov	r7, r0
 80054ce:	db01      	blt.n	80054d4 <_malloc_r+0x1c>
 80054d0:	42a9      	cmp	r1, r5
 80054d2:	d905      	bls.n	80054e0 <_malloc_r+0x28>
 80054d4:	230c      	movs	r3, #12
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	2600      	movs	r6, #0
 80054da:	4630      	mov	r0, r6
 80054dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055b4 <_malloc_r+0xfc>
 80054e4:	f000 faa6 	bl	8005a34 <__malloc_lock>
 80054e8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ec:	461c      	mov	r4, r3
 80054ee:	bb5c      	cbnz	r4, 8005548 <_malloc_r+0x90>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4638      	mov	r0, r7
 80054f4:	f7ff ffc0 	bl	8005478 <sbrk_aligned>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	4604      	mov	r4, r0
 80054fc:	d155      	bne.n	80055aa <_malloc_r+0xf2>
 80054fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005502:	4626      	mov	r6, r4
 8005504:	2e00      	cmp	r6, #0
 8005506:	d145      	bne.n	8005594 <_malloc_r+0xdc>
 8005508:	2c00      	cmp	r4, #0
 800550a:	d048      	beq.n	800559e <_malloc_r+0xe6>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	4631      	mov	r1, r6
 8005510:	4638      	mov	r0, r7
 8005512:	eb04 0903 	add.w	r9, r4, r3
 8005516:	f000 fc2f 	bl	8005d78 <_sbrk_r>
 800551a:	4581      	cmp	r9, r0
 800551c:	d13f      	bne.n	800559e <_malloc_r+0xe6>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	1a6d      	subs	r5, r5, r1
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ffa7 	bl	8005478 <sbrk_aligned>
 800552a:	3001      	adds	r0, #1
 800552c:	d037      	beq.n	800559e <_malloc_r+0xe6>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	442b      	add	r3, r5
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	f8d8 3000 	ldr.w	r3, [r8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d038      	beq.n	80055ae <_malloc_r+0xf6>
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	42a2      	cmp	r2, r4
 8005540:	d12b      	bne.n	800559a <_malloc_r+0xe2>
 8005542:	2200      	movs	r2, #0
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e00f      	b.n	8005568 <_malloc_r+0xb0>
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	1b52      	subs	r2, r2, r5
 800554c:	d41f      	bmi.n	800558e <_malloc_r+0xd6>
 800554e:	2a0b      	cmp	r2, #11
 8005550:	d917      	bls.n	8005582 <_malloc_r+0xca>
 8005552:	1961      	adds	r1, r4, r5
 8005554:	42a3      	cmp	r3, r4
 8005556:	6025      	str	r5, [r4, #0]
 8005558:	bf18      	it	ne
 800555a:	6059      	strne	r1, [r3, #4]
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	bf08      	it	eq
 8005560:	f8c8 1000 	streq.w	r1, [r8]
 8005564:	5162      	str	r2, [r4, r5]
 8005566:	604b      	str	r3, [r1, #4]
 8005568:	4638      	mov	r0, r7
 800556a:	f104 060b 	add.w	r6, r4, #11
 800556e:	f000 fa67 	bl	8005a40 <__malloc_unlock>
 8005572:	f026 0607 	bic.w	r6, r6, #7
 8005576:	1d23      	adds	r3, r4, #4
 8005578:	1af2      	subs	r2, r6, r3
 800557a:	d0ae      	beq.n	80054da <_malloc_r+0x22>
 800557c:	1b9b      	subs	r3, r3, r6
 800557e:	50a3      	str	r3, [r4, r2]
 8005580:	e7ab      	b.n	80054da <_malloc_r+0x22>
 8005582:	42a3      	cmp	r3, r4
 8005584:	6862      	ldr	r2, [r4, #4]
 8005586:	d1dd      	bne.n	8005544 <_malloc_r+0x8c>
 8005588:	f8c8 2000 	str.w	r2, [r8]
 800558c:	e7ec      	b.n	8005568 <_malloc_r+0xb0>
 800558e:	4623      	mov	r3, r4
 8005590:	6864      	ldr	r4, [r4, #4]
 8005592:	e7ac      	b.n	80054ee <_malloc_r+0x36>
 8005594:	4634      	mov	r4, r6
 8005596:	6876      	ldr	r6, [r6, #4]
 8005598:	e7b4      	b.n	8005504 <_malloc_r+0x4c>
 800559a:	4613      	mov	r3, r2
 800559c:	e7cc      	b.n	8005538 <_malloc_r+0x80>
 800559e:	230c      	movs	r3, #12
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4638      	mov	r0, r7
 80055a4:	f000 fa4c 	bl	8005a40 <__malloc_unlock>
 80055a8:	e797      	b.n	80054da <_malloc_r+0x22>
 80055aa:	6025      	str	r5, [r4, #0]
 80055ac:	e7dc      	b.n	8005568 <_malloc_r+0xb0>
 80055ae:	605b      	str	r3, [r3, #4]
 80055b0:	deff      	udf	#255	; 0xff
 80055b2:	bf00      	nop
 80055b4:	20000304 	.word	0x20000304

080055b8 <_printf_common>:
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	4616      	mov	r6, r2
 80055be:	4699      	mov	r9, r3
 80055c0:	688a      	ldr	r2, [r1, #8]
 80055c2:	690b      	ldr	r3, [r1, #16]
 80055c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bfb8      	it	lt
 80055cc:	4613      	movlt	r3, r2
 80055ce:	6033      	str	r3, [r6, #0]
 80055d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055d4:	4607      	mov	r7, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	b10a      	cbz	r2, 80055de <_printf_common+0x26>
 80055da:	3301      	adds	r3, #1
 80055dc:	6033      	str	r3, [r6, #0]
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	0699      	lsls	r1, r3, #26
 80055e2:	bf42      	ittt	mi
 80055e4:	6833      	ldrmi	r3, [r6, #0]
 80055e6:	3302      	addmi	r3, #2
 80055e8:	6033      	strmi	r3, [r6, #0]
 80055ea:	6825      	ldr	r5, [r4, #0]
 80055ec:	f015 0506 	ands.w	r5, r5, #6
 80055f0:	d106      	bne.n	8005600 <_printf_common+0x48>
 80055f2:	f104 0a19 	add.w	sl, r4, #25
 80055f6:	68e3      	ldr	r3, [r4, #12]
 80055f8:	6832      	ldr	r2, [r6, #0]
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	42ab      	cmp	r3, r5
 80055fe:	dc26      	bgt.n	800564e <_printf_common+0x96>
 8005600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005604:	1e13      	subs	r3, r2, #0
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	bf18      	it	ne
 800560a:	2301      	movne	r3, #1
 800560c:	0692      	lsls	r2, r2, #26
 800560e:	d42b      	bmi.n	8005668 <_printf_common+0xb0>
 8005610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005614:	4649      	mov	r1, r9
 8005616:	4638      	mov	r0, r7
 8005618:	47c0      	blx	r8
 800561a:	3001      	adds	r0, #1
 800561c:	d01e      	beq.n	800565c <_printf_common+0xa4>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	f003 0306 	and.w	r3, r3, #6
 8005626:	2b04      	cmp	r3, #4
 8005628:	bf02      	ittt	eq
 800562a:	68e5      	ldreq	r5, [r4, #12]
 800562c:	6833      	ldreq	r3, [r6, #0]
 800562e:	1aed      	subeq	r5, r5, r3
 8005630:	68a3      	ldr	r3, [r4, #8]
 8005632:	bf0c      	ite	eq
 8005634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005638:	2500      	movne	r5, #0
 800563a:	4293      	cmp	r3, r2
 800563c:	bfc4      	itt	gt
 800563e:	1a9b      	subgt	r3, r3, r2
 8005640:	18ed      	addgt	r5, r5, r3
 8005642:	2600      	movs	r6, #0
 8005644:	341a      	adds	r4, #26
 8005646:	42b5      	cmp	r5, r6
 8005648:	d11a      	bne.n	8005680 <_printf_common+0xc8>
 800564a:	2000      	movs	r0, #0
 800564c:	e008      	b.n	8005660 <_printf_common+0xa8>
 800564e:	2301      	movs	r3, #1
 8005650:	4652      	mov	r2, sl
 8005652:	4649      	mov	r1, r9
 8005654:	4638      	mov	r0, r7
 8005656:	47c0      	blx	r8
 8005658:	3001      	adds	r0, #1
 800565a:	d103      	bne.n	8005664 <_printf_common+0xac>
 800565c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005664:	3501      	adds	r5, #1
 8005666:	e7c6      	b.n	80055f6 <_printf_common+0x3e>
 8005668:	18e1      	adds	r1, r4, r3
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	2030      	movs	r0, #48	; 0x30
 800566e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005672:	4422      	add	r2, r4
 8005674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800567c:	3302      	adds	r3, #2
 800567e:	e7c7      	b.n	8005610 <_printf_common+0x58>
 8005680:	2301      	movs	r3, #1
 8005682:	4622      	mov	r2, r4
 8005684:	4649      	mov	r1, r9
 8005686:	4638      	mov	r0, r7
 8005688:	47c0      	blx	r8
 800568a:	3001      	adds	r0, #1
 800568c:	d0e6      	beq.n	800565c <_printf_common+0xa4>
 800568e:	3601      	adds	r6, #1
 8005690:	e7d9      	b.n	8005646 <_printf_common+0x8e>
	...

08005694 <_printf_i>:
 8005694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	7e0f      	ldrb	r7, [r1, #24]
 800569a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800569c:	2f78      	cmp	r7, #120	; 0x78
 800569e:	4691      	mov	r9, r2
 80056a0:	4680      	mov	r8, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	469a      	mov	sl, r3
 80056a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056aa:	d807      	bhi.n	80056bc <_printf_i+0x28>
 80056ac:	2f62      	cmp	r7, #98	; 0x62
 80056ae:	d80a      	bhi.n	80056c6 <_printf_i+0x32>
 80056b0:	2f00      	cmp	r7, #0
 80056b2:	f000 80d4 	beq.w	800585e <_printf_i+0x1ca>
 80056b6:	2f58      	cmp	r7, #88	; 0x58
 80056b8:	f000 80c0 	beq.w	800583c <_printf_i+0x1a8>
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056c4:	e03a      	b.n	800573c <_printf_i+0xa8>
 80056c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ca:	2b15      	cmp	r3, #21
 80056cc:	d8f6      	bhi.n	80056bc <_printf_i+0x28>
 80056ce:	a101      	add	r1, pc, #4	; (adr r1, 80056d4 <_printf_i+0x40>)
 80056d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056d4:	0800572d 	.word	0x0800572d
 80056d8:	08005741 	.word	0x08005741
 80056dc:	080056bd 	.word	0x080056bd
 80056e0:	080056bd 	.word	0x080056bd
 80056e4:	080056bd 	.word	0x080056bd
 80056e8:	080056bd 	.word	0x080056bd
 80056ec:	08005741 	.word	0x08005741
 80056f0:	080056bd 	.word	0x080056bd
 80056f4:	080056bd 	.word	0x080056bd
 80056f8:	080056bd 	.word	0x080056bd
 80056fc:	080056bd 	.word	0x080056bd
 8005700:	08005845 	.word	0x08005845
 8005704:	0800576d 	.word	0x0800576d
 8005708:	080057ff 	.word	0x080057ff
 800570c:	080056bd 	.word	0x080056bd
 8005710:	080056bd 	.word	0x080056bd
 8005714:	08005867 	.word	0x08005867
 8005718:	080056bd 	.word	0x080056bd
 800571c:	0800576d 	.word	0x0800576d
 8005720:	080056bd 	.word	0x080056bd
 8005724:	080056bd 	.word	0x080056bd
 8005728:	08005807 	.word	0x08005807
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	602a      	str	r2, [r5, #0]
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800573c:	2301      	movs	r3, #1
 800573e:	e09f      	b.n	8005880 <_printf_i+0x1ec>
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	0607      	lsls	r7, r0, #24
 8005746:	f103 0104 	add.w	r1, r3, #4
 800574a:	6029      	str	r1, [r5, #0]
 800574c:	d501      	bpl.n	8005752 <_printf_i+0xbe>
 800574e:	681e      	ldr	r6, [r3, #0]
 8005750:	e003      	b.n	800575a <_printf_i+0xc6>
 8005752:	0646      	lsls	r6, r0, #25
 8005754:	d5fb      	bpl.n	800574e <_printf_i+0xba>
 8005756:	f9b3 6000 	ldrsh.w	r6, [r3]
 800575a:	2e00      	cmp	r6, #0
 800575c:	da03      	bge.n	8005766 <_printf_i+0xd2>
 800575e:	232d      	movs	r3, #45	; 0x2d
 8005760:	4276      	negs	r6, r6
 8005762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005766:	485a      	ldr	r0, [pc, #360]	; (80058d0 <_printf_i+0x23c>)
 8005768:	230a      	movs	r3, #10
 800576a:	e012      	b.n	8005792 <_printf_i+0xfe>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	6029      	str	r1, [r5, #0]
 8005774:	0605      	lsls	r5, r0, #24
 8005776:	d501      	bpl.n	800577c <_printf_i+0xe8>
 8005778:	681e      	ldr	r6, [r3, #0]
 800577a:	e002      	b.n	8005782 <_printf_i+0xee>
 800577c:	0641      	lsls	r1, r0, #25
 800577e:	d5fb      	bpl.n	8005778 <_printf_i+0xe4>
 8005780:	881e      	ldrh	r6, [r3, #0]
 8005782:	4853      	ldr	r0, [pc, #332]	; (80058d0 <_printf_i+0x23c>)
 8005784:	2f6f      	cmp	r7, #111	; 0x6f
 8005786:	bf0c      	ite	eq
 8005788:	2308      	moveq	r3, #8
 800578a:	230a      	movne	r3, #10
 800578c:	2100      	movs	r1, #0
 800578e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005792:	6865      	ldr	r5, [r4, #4]
 8005794:	60a5      	str	r5, [r4, #8]
 8005796:	2d00      	cmp	r5, #0
 8005798:	bfa2      	ittt	ge
 800579a:	6821      	ldrge	r1, [r4, #0]
 800579c:	f021 0104 	bicge.w	r1, r1, #4
 80057a0:	6021      	strge	r1, [r4, #0]
 80057a2:	b90e      	cbnz	r6, 80057a8 <_printf_i+0x114>
 80057a4:	2d00      	cmp	r5, #0
 80057a6:	d04b      	beq.n	8005840 <_printf_i+0x1ac>
 80057a8:	4615      	mov	r5, r2
 80057aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ae:	fb03 6711 	mls	r7, r3, r1, r6
 80057b2:	5dc7      	ldrb	r7, [r0, r7]
 80057b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b8:	4637      	mov	r7, r6
 80057ba:	42bb      	cmp	r3, r7
 80057bc:	460e      	mov	r6, r1
 80057be:	d9f4      	bls.n	80057aa <_printf_i+0x116>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d10b      	bne.n	80057dc <_printf_i+0x148>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	07de      	lsls	r6, r3, #31
 80057c8:	d508      	bpl.n	80057dc <_printf_i+0x148>
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	6861      	ldr	r1, [r4, #4]
 80057ce:	4299      	cmp	r1, r3
 80057d0:	bfde      	ittt	le
 80057d2:	2330      	movle	r3, #48	; 0x30
 80057d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057dc:	1b52      	subs	r2, r2, r5
 80057de:	6122      	str	r2, [r4, #16]
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	464b      	mov	r3, r9
 80057e6:	aa03      	add	r2, sp, #12
 80057e8:	4621      	mov	r1, r4
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7ff fee4 	bl	80055b8 <_printf_common>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d14a      	bne.n	800588a <_printf_i+0x1f6>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f8:	b004      	add	sp, #16
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f043 0320 	orr.w	r3, r3, #32
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	4833      	ldr	r0, [pc, #204]	; (80058d4 <_printf_i+0x240>)
 8005808:	2778      	movs	r7, #120	; 0x78
 800580a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	6829      	ldr	r1, [r5, #0]
 8005812:	061f      	lsls	r7, r3, #24
 8005814:	f851 6b04 	ldr.w	r6, [r1], #4
 8005818:	d402      	bmi.n	8005820 <_printf_i+0x18c>
 800581a:	065f      	lsls	r7, r3, #25
 800581c:	bf48      	it	mi
 800581e:	b2b6      	uxthmi	r6, r6
 8005820:	07df      	lsls	r7, r3, #31
 8005822:	bf48      	it	mi
 8005824:	f043 0320 	orrmi.w	r3, r3, #32
 8005828:	6029      	str	r1, [r5, #0]
 800582a:	bf48      	it	mi
 800582c:	6023      	strmi	r3, [r4, #0]
 800582e:	b91e      	cbnz	r6, 8005838 <_printf_i+0x1a4>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	2310      	movs	r3, #16
 800583a:	e7a7      	b.n	800578c <_printf_i+0xf8>
 800583c:	4824      	ldr	r0, [pc, #144]	; (80058d0 <_printf_i+0x23c>)
 800583e:	e7e4      	b.n	800580a <_printf_i+0x176>
 8005840:	4615      	mov	r5, r2
 8005842:	e7bd      	b.n	80057c0 <_printf_i+0x12c>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	6826      	ldr	r6, [r4, #0]
 8005848:	6961      	ldr	r1, [r4, #20]
 800584a:	1d18      	adds	r0, r3, #4
 800584c:	6028      	str	r0, [r5, #0]
 800584e:	0635      	lsls	r5, r6, #24
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	d501      	bpl.n	8005858 <_printf_i+0x1c4>
 8005854:	6019      	str	r1, [r3, #0]
 8005856:	e002      	b.n	800585e <_printf_i+0x1ca>
 8005858:	0670      	lsls	r0, r6, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0x1c0>
 800585c:	8019      	strh	r1, [r3, #0]
 800585e:	2300      	movs	r3, #0
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	4615      	mov	r5, r2
 8005864:	e7bc      	b.n	80057e0 <_printf_i+0x14c>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	2100      	movs	r1, #0
 8005872:	4628      	mov	r0, r5
 8005874:	f7fa fcbc 	bl	80001f0 <memchr>
 8005878:	b108      	cbz	r0, 800587e <_printf_i+0x1ea>
 800587a:	1b40      	subs	r0, r0, r5
 800587c:	6060      	str	r0, [r4, #4]
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	2300      	movs	r3, #0
 8005884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005888:	e7aa      	b.n	80057e0 <_printf_i+0x14c>
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	462a      	mov	r2, r5
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	47d0      	blx	sl
 8005894:	3001      	adds	r0, #1
 8005896:	d0ad      	beq.n	80057f4 <_printf_i+0x160>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	079b      	lsls	r3, r3, #30
 800589c:	d413      	bmi.n	80058c6 <_printf_i+0x232>
 800589e:	68e0      	ldr	r0, [r4, #12]
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	4298      	cmp	r0, r3
 80058a4:	bfb8      	it	lt
 80058a6:	4618      	movlt	r0, r3
 80058a8:	e7a6      	b.n	80057f8 <_printf_i+0x164>
 80058aa:	2301      	movs	r3, #1
 80058ac:	4632      	mov	r2, r6
 80058ae:	4649      	mov	r1, r9
 80058b0:	4640      	mov	r0, r8
 80058b2:	47d0      	blx	sl
 80058b4:	3001      	adds	r0, #1
 80058b6:	d09d      	beq.n	80057f4 <_printf_i+0x160>
 80058b8:	3501      	adds	r5, #1
 80058ba:	68e3      	ldr	r3, [r4, #12]
 80058bc:	9903      	ldr	r1, [sp, #12]
 80058be:	1a5b      	subs	r3, r3, r1
 80058c0:	42ab      	cmp	r3, r5
 80058c2:	dcf2      	bgt.n	80058aa <_printf_i+0x216>
 80058c4:	e7eb      	b.n	800589e <_printf_i+0x20a>
 80058c6:	2500      	movs	r5, #0
 80058c8:	f104 0619 	add.w	r6, r4, #25
 80058cc:	e7f5      	b.n	80058ba <_printf_i+0x226>
 80058ce:	bf00      	nop
 80058d0:	0800629b 	.word	0x0800629b
 80058d4:	080062ac 	.word	0x080062ac

080058d8 <__sflush_r>:
 80058d8:	898a      	ldrh	r2, [r1, #12]
 80058da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	0710      	lsls	r0, r2, #28
 80058e2:	460c      	mov	r4, r1
 80058e4:	d458      	bmi.n	8005998 <__sflush_r+0xc0>
 80058e6:	684b      	ldr	r3, [r1, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc05      	bgt.n	80058f8 <__sflush_r+0x20>
 80058ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dc02      	bgt.n	80058f8 <__sflush_r+0x20>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d0f9      	beq.n	80058f2 <__sflush_r+0x1a>
 80058fe:	2300      	movs	r3, #0
 8005900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005904:	682f      	ldr	r7, [r5, #0]
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	d032      	beq.n	8005972 <__sflush_r+0x9a>
 800590c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	075a      	lsls	r2, r3, #29
 8005912:	d505      	bpl.n	8005920 <__sflush_r+0x48>
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	1ac0      	subs	r0, r0, r3
 8005918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800591a:	b10b      	cbz	r3, 8005920 <__sflush_r+0x48>
 800591c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800591e:	1ac0      	subs	r0, r0, r3
 8005920:	2300      	movs	r3, #0
 8005922:	4602      	mov	r2, r0
 8005924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005926:	6a21      	ldr	r1, [r4, #32]
 8005928:	4628      	mov	r0, r5
 800592a:	47b0      	blx	r6
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	d106      	bne.n	8005940 <__sflush_r+0x68>
 8005932:	6829      	ldr	r1, [r5, #0]
 8005934:	291d      	cmp	r1, #29
 8005936:	d82b      	bhi.n	8005990 <__sflush_r+0xb8>
 8005938:	4a29      	ldr	r2, [pc, #164]	; (80059e0 <__sflush_r+0x108>)
 800593a:	410a      	asrs	r2, r1
 800593c:	07d6      	lsls	r6, r2, #31
 800593e:	d427      	bmi.n	8005990 <__sflush_r+0xb8>
 8005940:	2200      	movs	r2, #0
 8005942:	6062      	str	r2, [r4, #4]
 8005944:	04d9      	lsls	r1, r3, #19
 8005946:	6922      	ldr	r2, [r4, #16]
 8005948:	6022      	str	r2, [r4, #0]
 800594a:	d504      	bpl.n	8005956 <__sflush_r+0x7e>
 800594c:	1c42      	adds	r2, r0, #1
 800594e:	d101      	bne.n	8005954 <__sflush_r+0x7c>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b903      	cbnz	r3, 8005956 <__sflush_r+0x7e>
 8005954:	6560      	str	r0, [r4, #84]	; 0x54
 8005956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005958:	602f      	str	r7, [r5, #0]
 800595a:	2900      	cmp	r1, #0
 800595c:	d0c9      	beq.n	80058f2 <__sflush_r+0x1a>
 800595e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005962:	4299      	cmp	r1, r3
 8005964:	d002      	beq.n	800596c <__sflush_r+0x94>
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff fbee 	bl	8005148 <_free_r>
 800596c:	2000      	movs	r0, #0
 800596e:	6360      	str	r0, [r4, #52]	; 0x34
 8005970:	e7c0      	b.n	80058f4 <__sflush_r+0x1c>
 8005972:	2301      	movs	r3, #1
 8005974:	4628      	mov	r0, r5
 8005976:	47b0      	blx	r6
 8005978:	1c41      	adds	r1, r0, #1
 800597a:	d1c8      	bne.n	800590e <__sflush_r+0x36>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0c5      	beq.n	800590e <__sflush_r+0x36>
 8005982:	2b1d      	cmp	r3, #29
 8005984:	d001      	beq.n	800598a <__sflush_r+0xb2>
 8005986:	2b16      	cmp	r3, #22
 8005988:	d101      	bne.n	800598e <__sflush_r+0xb6>
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	e7b1      	b.n	80058f2 <__sflush_r+0x1a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	e7ad      	b.n	80058f4 <__sflush_r+0x1c>
 8005998:	690f      	ldr	r7, [r1, #16]
 800599a:	2f00      	cmp	r7, #0
 800599c:	d0a9      	beq.n	80058f2 <__sflush_r+0x1a>
 800599e:	0793      	lsls	r3, r2, #30
 80059a0:	680e      	ldr	r6, [r1, #0]
 80059a2:	bf08      	it	eq
 80059a4:	694b      	ldreq	r3, [r1, #20]
 80059a6:	600f      	str	r7, [r1, #0]
 80059a8:	bf18      	it	ne
 80059aa:	2300      	movne	r3, #0
 80059ac:	eba6 0807 	sub.w	r8, r6, r7
 80059b0:	608b      	str	r3, [r1, #8]
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	dd9c      	ble.n	80058f2 <__sflush_r+0x1a>
 80059b8:	6a21      	ldr	r1, [r4, #32]
 80059ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059bc:	4643      	mov	r3, r8
 80059be:	463a      	mov	r2, r7
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b0      	blx	r6
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dc06      	bgt.n	80059d6 <__sflush_r+0xfe>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d4:	e78e      	b.n	80058f4 <__sflush_r+0x1c>
 80059d6:	4407      	add	r7, r0
 80059d8:	eba8 0800 	sub.w	r8, r8, r0
 80059dc:	e7e9      	b.n	80059b2 <__sflush_r+0xda>
 80059de:	bf00      	nop
 80059e0:	dfbffffe 	.word	0xdfbffffe

080059e4 <_fflush_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	690b      	ldr	r3, [r1, #16]
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b913      	cbnz	r3, 80059f4 <_fflush_r+0x10>
 80059ee:	2500      	movs	r5, #0
 80059f0:	4628      	mov	r0, r5
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	b118      	cbz	r0, 80059fe <_fflush_r+0x1a>
 80059f6:	6a03      	ldr	r3, [r0, #32]
 80059f8:	b90b      	cbnz	r3, 80059fe <_fflush_r+0x1a>
 80059fa:	f7ff f98d 	bl	8004d18 <__sinit>
 80059fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f3      	beq.n	80059ee <_fflush_r+0xa>
 8005a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a08:	07d0      	lsls	r0, r2, #31
 8005a0a:	d404      	bmi.n	8005a16 <_fflush_r+0x32>
 8005a0c:	0599      	lsls	r1, r3, #22
 8005a0e:	d402      	bmi.n	8005a16 <_fflush_r+0x32>
 8005a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a12:	f7ff fb78 	bl	8005106 <__retarget_lock_acquire_recursive>
 8005a16:	4628      	mov	r0, r5
 8005a18:	4621      	mov	r1, r4
 8005a1a:	f7ff ff5d 	bl	80058d8 <__sflush_r>
 8005a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a20:	07da      	lsls	r2, r3, #31
 8005a22:	4605      	mov	r5, r0
 8005a24:	d4e4      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	059b      	lsls	r3, r3, #22
 8005a2a:	d4e1      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2e:	f7ff fb6b 	bl	8005108 <__retarget_lock_release_recursive>
 8005a32:	e7dd      	b.n	80059f0 <_fflush_r+0xc>

08005a34 <__malloc_lock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__malloc_lock+0x8>)
 8005a36:	f7ff bb66 	b.w	8005106 <__retarget_lock_acquire_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	20000300 	.word	0x20000300

08005a40 <__malloc_unlock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_unlock+0x8>)
 8005a42:	f7ff bb61 	b.w	8005108 <__retarget_lock_release_recursive>
 8005a46:	bf00      	nop
 8005a48:	20000300 	.word	0x20000300

08005a4c <__sread>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	460c      	mov	r4, r1
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	f000 f97e 	bl	8005d54 <_read_r>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	bfab      	itete	ge
 8005a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a60:	181b      	addge	r3, r3, r0
 8005a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a66:	bfac      	ite	ge
 8005a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a6a:	81a3      	strhlt	r3, [r4, #12]
 8005a6c:	bd10      	pop	{r4, pc}

08005a6e <__swrite>:
 8005a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	461f      	mov	r7, r3
 8005a74:	898b      	ldrh	r3, [r1, #12]
 8005a76:	05db      	lsls	r3, r3, #23
 8005a78:	4605      	mov	r5, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	d505      	bpl.n	8005a8c <__swrite+0x1e>
 8005a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a84:	2302      	movs	r3, #2
 8005a86:	2200      	movs	r2, #0
 8005a88:	f000 f952 	bl	8005d30 <_lseek_r>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	4632      	mov	r2, r6
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa2:	f000 b979 	b.w	8005d98 <_write_r>

08005aa6 <__sseek>:
 8005aa6:	b510      	push	{r4, lr}
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aae:	f000 f93f 	bl	8005d30 <_lseek_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	bf15      	itete	ne
 8005ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ac2:	81a3      	strheq	r3, [r4, #12]
 8005ac4:	bf18      	it	ne
 8005ac6:	81a3      	strhne	r3, [r4, #12]
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <__sclose>:
 8005aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ace:	f000 b91f 	b.w	8005d10 <_close_r>
	...

08005ad4 <fiprintf>:
 8005ad4:	b40e      	push	{r1, r2, r3}
 8005ad6:	b503      	push	{r0, r1, lr}
 8005ad8:	4601      	mov	r1, r0
 8005ada:	ab03      	add	r3, sp, #12
 8005adc:	4805      	ldr	r0, [pc, #20]	; (8005af4 <fiprintf+0x20>)
 8005ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae2:	6800      	ldr	r0, [r0, #0]
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	f7ff fba5 	bl	8005234 <_vfiprintf_r>
 8005aea:	b002      	add	sp, #8
 8005aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af0:	b003      	add	sp, #12
 8005af2:	4770      	bx	lr
 8005af4:	2000009c 	.word	0x2000009c

08005af8 <_getc_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	460c      	mov	r4, r1
 8005afc:	4605      	mov	r5, r0
 8005afe:	b118      	cbz	r0, 8005b08 <_getc_r+0x10>
 8005b00:	6a03      	ldr	r3, [r0, #32]
 8005b02:	b90b      	cbnz	r3, 8005b08 <_getc_r+0x10>
 8005b04:	f7ff f908 	bl	8004d18 <__sinit>
 8005b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0a:	07d8      	lsls	r0, r3, #31
 8005b0c:	d405      	bmi.n	8005b1a <_getc_r+0x22>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	0599      	lsls	r1, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_getc_r+0x22>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f7ff faf6 	bl	8005106 <__retarget_lock_acquire_recursive>
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	da0f      	bge.n	8005b44 <_getc_r+0x4c>
 8005b24:	4628      	mov	r0, r5
 8005b26:	4621      	mov	r1, r4
 8005b28:	f000 f8da 	bl	8005ce0 <__srget_r>
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b30:	07da      	lsls	r2, r3, #31
 8005b32:	d405      	bmi.n	8005b40 <_getc_r+0x48>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	059b      	lsls	r3, r3, #22
 8005b38:	d402      	bmi.n	8005b40 <_getc_r+0x48>
 8005b3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b3c:	f7ff fae4 	bl	8005108 <__retarget_lock_release_recursive>
 8005b40:	4628      	mov	r0, r5
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	6022      	str	r2, [r4, #0]
 8005b4a:	781d      	ldrb	r5, [r3, #0]
 8005b4c:	e7ef      	b.n	8005b2e <_getc_r+0x36>

08005b4e <__swbuf_r>:
 8005b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b50:	460e      	mov	r6, r1
 8005b52:	4614      	mov	r4, r2
 8005b54:	4605      	mov	r5, r0
 8005b56:	b118      	cbz	r0, 8005b60 <__swbuf_r+0x12>
 8005b58:	6a03      	ldr	r3, [r0, #32]
 8005b5a:	b90b      	cbnz	r3, 8005b60 <__swbuf_r+0x12>
 8005b5c:	f7ff f8dc 	bl	8004d18 <__sinit>
 8005b60:	69a3      	ldr	r3, [r4, #24]
 8005b62:	60a3      	str	r3, [r4, #8]
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	071a      	lsls	r2, r3, #28
 8005b68:	d525      	bpl.n	8005bb6 <__swbuf_r+0x68>
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	b31b      	cbz	r3, 8005bb6 <__swbuf_r+0x68>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	6922      	ldr	r2, [r4, #16]
 8005b72:	1a98      	subs	r0, r3, r2
 8005b74:	6963      	ldr	r3, [r4, #20]
 8005b76:	b2f6      	uxtb	r6, r6
 8005b78:	4283      	cmp	r3, r0
 8005b7a:	4637      	mov	r7, r6
 8005b7c:	dc04      	bgt.n	8005b88 <__swbuf_r+0x3a>
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff ff2f 	bl	80059e4 <_fflush_r>
 8005b86:	b9e0      	cbnz	r0, 8005bc2 <__swbuf_r+0x74>
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	701e      	strb	r6, [r3, #0]
 8005b96:	6962      	ldr	r2, [r4, #20]
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d004      	beq.n	8005ba8 <__swbuf_r+0x5a>
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	07db      	lsls	r3, r3, #31
 8005ba2:	d506      	bpl.n	8005bb2 <__swbuf_r+0x64>
 8005ba4:	2e0a      	cmp	r6, #10
 8005ba6:	d104      	bne.n	8005bb2 <__swbuf_r+0x64>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff ff1a 	bl	80059e4 <_fflush_r>
 8005bb0:	b938      	cbnz	r0, 8005bc2 <__swbuf_r+0x74>
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 f805 	bl	8005bc8 <__swsetup_r>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d0d5      	beq.n	8005b6e <__swbuf_r+0x20>
 8005bc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bc6:	e7f4      	b.n	8005bb2 <__swbuf_r+0x64>

08005bc8 <__swsetup_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <__swsetup_r+0xac>)
 8005bcc:	4605      	mov	r5, r0
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	b118      	cbz	r0, 8005bdc <__swsetup_r+0x14>
 8005bd4:	6a03      	ldr	r3, [r0, #32]
 8005bd6:	b90b      	cbnz	r3, 8005bdc <__swsetup_r+0x14>
 8005bd8:	f7ff f89e 	bl	8004d18 <__sinit>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be2:	0718      	lsls	r0, r3, #28
 8005be4:	d422      	bmi.n	8005c2c <__swsetup_r+0x64>
 8005be6:	06d9      	lsls	r1, r3, #27
 8005be8:	d407      	bmi.n	8005bfa <__swsetup_r+0x32>
 8005bea:	2309      	movs	r3, #9
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf8:	e034      	b.n	8005c64 <__swsetup_r+0x9c>
 8005bfa:	0758      	lsls	r0, r3, #29
 8005bfc:	d512      	bpl.n	8005c24 <__swsetup_r+0x5c>
 8005bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c00:	b141      	cbz	r1, 8005c14 <__swsetup_r+0x4c>
 8005c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c06:	4299      	cmp	r1, r3
 8005c08:	d002      	beq.n	8005c10 <__swsetup_r+0x48>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7ff fa9c 	bl	8005148 <_free_r>
 8005c10:	2300      	movs	r3, #0
 8005c12:	6363      	str	r3, [r4, #52]	; 0x34
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6063      	str	r3, [r4, #4]
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f043 0308 	orr.w	r3, r3, #8
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	b94b      	cbnz	r3, 8005c44 <__swsetup_r+0x7c>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3a:	d003      	beq.n	8005c44 <__swsetup_r+0x7c>
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f7ff f95a 	bl	8004ef8 <__smakebuf_r>
 8005c44:	89a0      	ldrh	r0, [r4, #12]
 8005c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c4a:	f010 0301 	ands.w	r3, r0, #1
 8005c4e:	d00a      	beq.n	8005c66 <__swsetup_r+0x9e>
 8005c50:	2300      	movs	r3, #0
 8005c52:	60a3      	str	r3, [r4, #8]
 8005c54:	6963      	ldr	r3, [r4, #20]
 8005c56:	425b      	negs	r3, r3
 8005c58:	61a3      	str	r3, [r4, #24]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	b943      	cbnz	r3, 8005c70 <__swsetup_r+0xa8>
 8005c5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c62:	d1c4      	bne.n	8005bee <__swsetup_r+0x26>
 8005c64:	bd38      	pop	{r3, r4, r5, pc}
 8005c66:	0781      	lsls	r1, r0, #30
 8005c68:	bf58      	it	pl
 8005c6a:	6963      	ldrpl	r3, [r4, #20]
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	e7f4      	b.n	8005c5a <__swsetup_r+0x92>
 8005c70:	2000      	movs	r0, #0
 8005c72:	e7f7      	b.n	8005c64 <__swsetup_r+0x9c>
 8005c74:	2000009c 	.word	0x2000009c

08005c78 <_putc_r>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b118      	cbz	r0, 8005c8a <_putc_r+0x12>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <_putc_r+0x12>
 8005c86:	f7ff f847 	bl	8004d18 <__sinit>
 8005c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c8c:	07d8      	lsls	r0, r3, #31
 8005c8e:	d405      	bmi.n	8005c9c <_putc_r+0x24>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	0599      	lsls	r1, r3, #22
 8005c94:	d402      	bmi.n	8005c9c <_putc_r+0x24>
 8005c96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c98:	f7ff fa35 	bl	8005106 <__retarget_lock_acquire_recursive>
 8005c9c:	68a3      	ldr	r3, [r4, #8]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	60a3      	str	r3, [r4, #8]
 8005ca4:	da05      	bge.n	8005cb2 <_putc_r+0x3a>
 8005ca6:	69a2      	ldr	r2, [r4, #24]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	db12      	blt.n	8005cd2 <_putc_r+0x5a>
 8005cac:	b2eb      	uxtb	r3, r5
 8005cae:	2b0a      	cmp	r3, #10
 8005cb0:	d00f      	beq.n	8005cd2 <_putc_r+0x5a>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	6022      	str	r2, [r4, #0]
 8005cb8:	701d      	strb	r5, [r3, #0]
 8005cba:	b2ed      	uxtb	r5, r5
 8005cbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cbe:	07da      	lsls	r2, r3, #31
 8005cc0:	d405      	bmi.n	8005cce <_putc_r+0x56>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	059b      	lsls	r3, r3, #22
 8005cc6:	d402      	bmi.n	8005cce <_putc_r+0x56>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cca:	f7ff fa1d 	bl	8005108 <__retarget_lock_release_recursive>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f7ff ff39 	bl	8005b4e <__swbuf_r>
 8005cdc:	4605      	mov	r5, r0
 8005cde:	e7ed      	b.n	8005cbc <_putc_r+0x44>

08005ce0 <__srget_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	b118      	cbz	r0, 8005cf0 <__srget_r+0x10>
 8005ce8:	6a03      	ldr	r3, [r0, #32]
 8005cea:	b90b      	cbnz	r3, 8005cf0 <__srget_r+0x10>
 8005cec:	f7ff f814 	bl	8004d18 <__sinit>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f878 	bl	8005de8 <__srefill_r>
 8005cf8:	b938      	cbnz	r0, 8005d0a <__srget_r+0x2a>
 8005cfa:	6863      	ldr	r3, [r4, #4]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	6063      	str	r3, [r4, #4]
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	7818      	ldrb	r0, [r3, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0e:	e7fb      	b.n	8005d08 <__srget_r+0x28>

08005d10 <_close_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_close_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb f974 	bl	8001008 <_close>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_close_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_close_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	2000030c 	.word	0x2000030c

08005d30 <_lseek_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_lseek_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fb f979 	bl	8001036 <_lseek>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_lseek_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_lseek_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	2000030c 	.word	0x2000030c

08005d54 <_read_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_read_r+0x20>)
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fb f978 	bl	8001058 <_read>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_read_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_read_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	2000030c 	.word	0x2000030c

08005d78 <_sbrk_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_sbrk_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fafa 	bl	800137c <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_sbrk_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_sbrk_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	2000030c 	.word	0x2000030c

08005d98 <_write_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_write_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb f902 	bl	8000fb0 <_write>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_write_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_write_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	2000030c 	.word	0x2000030c

08005dbc <abort>:
 8005dbc:	b508      	push	{r3, lr}
 8005dbe:	2006      	movs	r0, #6
 8005dc0:	f000 f8b2 	bl	8005f28 <raise>
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f7fb facf 	bl	8001368 <_exit>
	...

08005dcc <lflush>:
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	f003 0309 	and.w	r3, r3, #9
 8005dd2:	2b09      	cmp	r3, #9
 8005dd4:	d103      	bne.n	8005dde <lflush+0x12>
 8005dd6:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <lflush+0x18>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f7ff be03 	b.w	80059e4 <_fflush_r>
 8005dde:	2000      	movs	r0, #0
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000009c 	.word	0x2000009c

08005de8 <__srefill_r>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	460c      	mov	r4, r1
 8005dec:	4605      	mov	r5, r0
 8005dee:	b118      	cbz	r0, 8005df8 <__srefill_r+0x10>
 8005df0:	6a03      	ldr	r3, [r0, #32]
 8005df2:	b90b      	cbnz	r3, 8005df8 <__srefill_r+0x10>
 8005df4:	f7fe ff90 	bl	8004d18 <__sinit>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e02:	069e      	lsls	r6, r3, #26
 8005e04:	d502      	bpl.n	8005e0c <__srefill_r+0x24>
 8005e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0a:	e05c      	b.n	8005ec6 <__srefill_r+0xde>
 8005e0c:	0758      	lsls	r0, r3, #29
 8005e0e:	d448      	bmi.n	8005ea2 <__srefill_r+0xba>
 8005e10:	06d9      	lsls	r1, r3, #27
 8005e12:	d405      	bmi.n	8005e20 <__srefill_r+0x38>
 8005e14:	2309      	movs	r3, #9
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	e7f2      	b.n	8005e06 <__srefill_r+0x1e>
 8005e20:	071a      	lsls	r2, r3, #28
 8005e22:	d50b      	bpl.n	8005e3c <__srefill_r+0x54>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	f7ff fddc 	bl	80059e4 <_fflush_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1ea      	bne.n	8005e06 <__srefill_r+0x1e>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	60a0      	str	r0, [r4, #8]
 8005e34:	f023 0308 	bic.w	r3, r3, #8
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	61a0      	str	r0, [r4, #24]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	b91b      	cbnz	r3, 8005e50 <__srefill_r+0x68>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7ff f854 	bl	8004ef8 <__smakebuf_r>
 8005e50:	89a6      	ldrh	r6, [r4, #12]
 8005e52:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005e56:	07b3      	lsls	r3, r6, #30
 8005e58:	d00f      	beq.n	8005e7a <__srefill_r+0x92>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <__srefill_r+0xe4>)
 8005e5e:	491c      	ldr	r1, [pc, #112]	; (8005ed0 <__srefill_r+0xe8>)
 8005e60:	481c      	ldr	r0, [pc, #112]	; (8005ed4 <__srefill_r+0xec>)
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f006 0609 	and.w	r6, r6, #9
 8005e68:	f7fe fffa 	bl	8004e60 <_fwalk_sglue>
 8005e6c:	2e09      	cmp	r6, #9
 8005e6e:	81a7      	strh	r7, [r4, #12]
 8005e70:	d103      	bne.n	8005e7a <__srefill_r+0x92>
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f7ff fd2f 	bl	80058d8 <__sflush_r>
 8005e7a:	6922      	ldr	r2, [r4, #16]
 8005e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	6a21      	ldr	r1, [r4, #32]
 8005e82:	6022      	str	r2, [r4, #0]
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b0      	blx	r6
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	6060      	str	r0, [r4, #4]
 8005e8c:	dc1c      	bgt.n	8005ec8 <__srefill_r+0xe0>
 8005e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e92:	bf17      	itett	ne
 8005e94:	2200      	movne	r2, #0
 8005e96:	f043 0320 	orreq.w	r3, r3, #32
 8005e9a:	6062      	strne	r2, [r4, #4]
 8005e9c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005ea0:	e7bc      	b.n	8005e1c <__srefill_r+0x34>
 8005ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d0cd      	beq.n	8005e44 <__srefill_r+0x5c>
 8005ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eac:	4299      	cmp	r1, r3
 8005eae:	d002      	beq.n	8005eb6 <__srefill_r+0xce>
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f7ff f949 	bl	8005148 <_free_r>
 8005eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0c0      	beq.n	8005e44 <__srefill_r+0x5c>
 8005ec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7fc      	b.n	8005ec6 <__srefill_r+0xde>
 8005ecc:	20000044 	.word	0x20000044
 8005ed0:	08005dcd 	.word	0x08005dcd
 8005ed4:	20000050 	.word	0x20000050

08005ed8 <_raise_r>:
 8005ed8:	291f      	cmp	r1, #31
 8005eda:	b538      	push	{r3, r4, r5, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	d904      	bls.n	8005eec <_raise_r+0x14>
 8005ee2:	2316      	movs	r3, #22
 8005ee4:	6003      	str	r3, [r0, #0]
 8005ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005eee:	b112      	cbz	r2, 8005ef6 <_raise_r+0x1e>
 8005ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef4:	b94b      	cbnz	r3, 8005f0a <_raise_r+0x32>
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 f830 	bl	8005f5c <_getpid_r>
 8005efc:	462a      	mov	r2, r5
 8005efe:	4601      	mov	r1, r0
 8005f00:	4620      	mov	r0, r4
 8005f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f06:	f000 b817 	b.w	8005f38 <_kill_r>
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d00a      	beq.n	8005f24 <_raise_r+0x4c>
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	d103      	bne.n	8005f1a <_raise_r+0x42>
 8005f12:	2316      	movs	r3, #22
 8005f14:	6003      	str	r3, [r0, #0]
 8005f16:	2001      	movs	r0, #1
 8005f18:	e7e7      	b.n	8005eea <_raise_r+0x12>
 8005f1a:	2400      	movs	r4, #0
 8005f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f20:	4628      	mov	r0, r5
 8005f22:	4798      	blx	r3
 8005f24:	2000      	movs	r0, #0
 8005f26:	e7e0      	b.n	8005eea <_raise_r+0x12>

08005f28 <raise>:
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <raise+0xc>)
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f7ff bfd3 	b.w	8005ed8 <_raise_r>
 8005f32:	bf00      	nop
 8005f34:	2000009c 	.word	0x2000009c

08005f38 <_kill_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	; (8005f58 <_kill_r+0x20>)
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	f7fb f9ff 	bl	8001348 <_kill>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	d102      	bne.n	8005f54 <_kill_r+0x1c>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	b103      	cbz	r3, 8005f54 <_kill_r+0x1c>
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
 8005f56:	bf00      	nop
 8005f58:	2000030c 	.word	0x2000030c

08005f5c <_getpid_r>:
 8005f5c:	f7fb b9ec 	b.w	8001338 <_getpid>

08005f60 <_init>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr

08005f6c <_fini>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr
