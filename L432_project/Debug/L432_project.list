
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800895c  0800895c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008964  08008964  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800896c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000a8  08008a14  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008a14  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab94  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398c  00000000  00000000  0003acaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001212  00000000  00000000  0003fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ef5  00000000  00000000  00040fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bdc4  00000000  00000000  00066ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4309  00000000  00000000  00082c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006efc  00000000  00000000  00166f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008600 	.word	0x08008600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008600 	.word	0x08008600

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f004 f9d5 	bl	800494c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f004 f8eb 	bl	8004786 <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f006 ff18 	bl	80073f0 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f006 ff10 	bl	80073f0 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f006 ff0d 	bl	80073f0 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	20000134 	.word	0x20000134
 80005e8:	08008618 	.word	0x08008618
 80005ec:	08008628 	.word	0x08008628
 80005f0:	08008638 	.word	0x08008638

080005f4 <help_command>:
	{"tsl237",tsl237_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f006 fef7 	bl	80073f0 <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f006 fef4 	bl	80073f0 <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f006 fef1 	bl	80073f0 <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f006 feee 	bl	80073f0 <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f006 feeb 	bl	80073f0 <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08008668 	.word	0x08008668
 8000628:	08008680 	.word	0x08008680
 800062c:	08008688 	.word	0x08008688
 8000630:	08008690 	.word	0x08008690
 8000634:	08008698 	.word	0x08008698

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lof_command+0x1c>)
 8000646:	f002 fdbd 	bl	80031c4 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lon_command+0x1c>)
 8000666:	f002 fdad 	bl	80031c4 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <test_command+0x40>)
 8000682:	f006 feb5 	bl	80073f0 <iprintf>
	if (arguments) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <test_command+0x44>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f006 ffc2 	bl	8007618 <strtok>
 8000694:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000696:	e008      	b.n	80006aa <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <test_command+0x48>)
 800069c:	f006 fea8 	bl	80073f0 <iprintf>
			pt = strtok (NULL, ",");
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <test_command+0x44>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f006 ffb8 	bl	8007618 <strtok>
 80006a8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <test_command+0x20>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	080086a0 	.word	0x080086a0
 80006bc:	080086b0 	.word	0x080086b0
 80006c0:	080086b4 	.word	0x080086b4

080006c4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01f      	beq.n	8000712 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006d2:	492a      	ldr	r1, [pc, #168]	; (800077c <ts_command+0xb8>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f006 ff9f 	bl	8007618 <strtok>
 80006da:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e0:	e014      	b.n	800070c <ts_command+0x48>
			if (pt != NULL) {
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <ts_command+0x42>
				t[i] = atoi(pt);
 80006e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ea:	f006 fd26 	bl	800713a <atoi>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	3330      	adds	r3, #48	; 0x30
 80006f6:	443b      	add	r3, r7
 80006f8:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <ts_command+0xb8>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f006 ff8a 	bl	8007618 <strtok>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	3301      	adds	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	2b02      	cmp	r3, #2
 8000710:	dde7      	ble.n	80006e2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ts_command+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db26      	blt.n	800076c <ts_command+0xa8>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b17      	cmp	r3, #23
 8000722:	dc23      	bgt.n	800076c <ts_command+0xa8>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <ts_command+0xa8>
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db1d      	blt.n	800076c <ts_command+0xa8>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b3b      	cmp	r3, #59	; 0x3b
 8000734:	dc1a      	bgt.n	800076c <ts_command+0xa8>
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d017      	beq.n	800076c <ts_command+0xa8>
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	db14      	blt.n	800076c <ts_command+0xa8>
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	dc11      	bgt.n	800076c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ts_command+0xbc>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <ts_command+0xc0>)
 8000766:	f003 ff71 	bl	800464c <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800076a:	e003      	b.n	8000774 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <ts_command+0xc4>)
 800076e:	f006 fe3f 	bl	80073f0 <iprintf>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	080086b0 	.word	0x080086b0
 8000780:	200000c4 	.word	0x200000c4
 8000784:	20000134 	.word	0x20000134
 8000788:	080086bc 	.word	0x080086bc

0800078c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800079a:	4924      	ldr	r1, [pc, #144]	; (800082c <ds_command+0xa0>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f006 ff3b 	bl	8007618 <strtok>
 80007a2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e014      	b.n	80007d4 <ds_command+0x48>
			if (pt != NULL) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <ds_command+0x42>
				d[i] = atoi(pt);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f006 fcc2 	bl	800713a <atoi>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007c4:	4919      	ldr	r1, [pc, #100]	; (800082c <ds_command+0xa0>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f006 ff26 	bl	8007618 <strtok>
 80007cc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dde7      	ble.n	80007aa <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01d      	beq.n	800081c <ds_command+0x90>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd1a      	ble.n	800081c <ds_command+0x90>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	dc17      	bgt.n	800081c <ds_command+0x90>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d014      	beq.n	800081c <ds_command+0x90>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d011      	beq.n	800081c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ds_command+0xa4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <ds_command+0xa8>)
 8000816:	f004 f812 	bl	800483e <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800081a:	e003      	b.n	8000824 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <ds_command+0xac>)
 800081e:	f006 fde7 	bl	80073f0 <iprintf>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080086b0 	.word	0x080086b0
 8000830:	200000c4 	.word	0x200000c4
 8000834:	20000134 	.word	0x20000134
 8000838:	080086bc 	.word	0x080086bc

0800083c <tsl237_command>:

void __attribute__((weak)) tsl237_command(char *arguments) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  printf("Period %d\n\r", period);
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <tsl237_command+0x1c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <tsl237_command+0x20>)
 800084c:	f006 fdd0 	bl	80073f0 <iprintf>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000026c 	.word	0x2000026c
 800085c:	080086c4 	.word	0x080086c4

08000860 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 800086c:	482e      	ldr	r0, [pc, #184]	; (8000928 <get_commands+0xc8>)
 800086e:	f000 fc55 	bl	800111c <dequeue>
 8000872:	4603      	mov	r3, r0
 8000874:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 8000876:	e03a      	b.n	80008ee <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	2b0a      	cmp	r3, #10
 800087c:	d027      	beq.n	80008ce <get_commands+0x6e>
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b0d      	cmp	r3, #13
 8000882:	d024      	beq.n	80008ce <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2b7f      	cmp	r3, #127	; 0x7f
 8000888:	d10c      	bne.n	80008a4 <get_commands+0x44>
        if (counter > 0) {
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <get_commands+0xcc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d021      	beq.n	80008d6 <get_commands+0x76>
            printf("\b \b");
 8000892:	4827      	ldr	r0, [pc, #156]	; (8000930 <get_commands+0xd0>)
 8000894:	f006 fdac 	bl	80073f0 <iprintf>
            counter--;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <get_commands+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <get_commands+0xcc>)
 80008a0:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80008a2:	e018      	b.n	80008d6 <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fdb4 	bl	8007414 <putchar>
        command_buf[counter++]=ch;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <get_commands+0xcc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	491e      	ldr	r1, [pc, #120]	; (800092c <get_commands+0xcc>)
 80008b4:	600a      	str	r2, [r1, #0]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <get_commands+0xcc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b1d      	cmp	r3, #29
 80008c4:	d907      	bls.n	80008d6 <get_commands+0x76>
          mode=COMPLETE;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <get_commands+0xd4>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
          break;
 80008cc:	e012      	b.n	80008f4 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <get_commands+0xd4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
      break;
 80008d4:	e00e      	b.n	80008f4 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80008d6:	bf00      	nop
    }
    mask = disable();
 80008d8:	f000 f8b8 	bl	8000a4c <disable>
 80008dc:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <get_commands+0xc8>)
 80008e0:	f000 fc1c 	bl	800111c <dequeue>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f000 f8c2 	bl	8000a72 <restore>
  while (ch!=0) {
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1c1      	bne.n	8000878 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <get_commands+0xd4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d110      	bne.n	800091e <get_commands+0xbe>
    command_buf[counter] = 0;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <get_commands+0xcc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	4413      	add	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <get_commands+0xd8>)
 800090a:	f006 fd71 	bl	80073f0 <iprintf>
    counter = 0;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <get_commands+0xcc>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <get_commands+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
    return(1);
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <get_commands+0xc0>
  }
  else {
    return(0);
 800091e:	2300      	movs	r3, #0
  }
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000022c 	.word	0x2000022c
 800092c:	200000c8 	.word	0x200000c8
 8000930:	080086d0 	.word	0x080086d0
 8000934:	200000cc 	.word	0x200000cc
 8000938:	080086d4 	.word	0x080086d4

0800093c <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <parse_command+0x1e>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <parse_command+0x1e>
     (!command) ||
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <parse_command+0x24>
     (!args)) {
    return (-1);
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	e01e      	b.n	800099e <parse_command+0x62>
  }
  *command = line;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
  p = line;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 800096a:	e00b      	b.n	8000984 <parse_command+0x48>
    if (!*p) {
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <parse_command+0x42>
      *args = '\0';
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
      return(0);
 800097a:	2300      	movs	r3, #0
 800097c:	e00f      	b.n	800099e <parse_command+0x62>
    }
    p++;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b2c      	cmp	r3, #44	; 0x2c
 800098a:	d1ef      	bne.n	800096c <parse_command+0x30>
  }
  *p++ = '\0';
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	617a      	str	r2, [r7, #20]
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	601a      	str	r2, [r3, #0]
  return (0);
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <execute_command+0x98>)
 80009b6:	617b      	str	r3, [r7, #20]
  int success = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]

  if (!line) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <execute_command+0x1c>
    return (-1);
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e038      	b.n	8000a3a <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 80009c8:	f107 0208 	add.w	r2, r7, #8
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffb2 	bl	800093c <parse_command>
 80009d8:	4603      	mov	r3, r0
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009de:	d121      	bne.n	8000a24 <execute_command+0x78>
    printf("Error with parse command\n\r");
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <execute_command+0x9c>)
 80009e2:	f006 fd05 	bl	80073f0 <iprintf>
    return (-1);
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e026      	b.n	8000a3a <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbeb 	bl	80001d0 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10e      	bne.n	8000a1e <execute_command+0x72>
      if (!p->cmd_function) {
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <execute_command+0x62>
        return (-1);
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	e015      	b.n	8000a3a <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4610      	mov	r0, r2
 8000a16:	4798      	blx	r3
      success = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
      break;
 8000a1c:	e006      	b.n	8000a2c <execute_command+0x80>
    }
    p++;
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3308      	adds	r3, #8
 8000a22:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1df      	bne.n	80009ec <execute_command+0x40>
  }
  if (success) {
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <execute_command+0x8a>
    return (0);
 8000a32:	2300      	movs	r3, #0
 8000a34:	e001      	b.n	8000a3a <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	080086d8 	.word	0x080086d8

08000a4c <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a56:	f3ef 8310 	mrs	r3, PRIMASK
 8000a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8000a5c:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000a5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <restore>:

void restore(uint32_t priority_mask) {
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f383 8810 	msr	PRIMASK, r3
}
 8000a84:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b089      	sub	sp, #36	; 0x24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	e853 3f00 	ldrex	r3, [r3]
 8000aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	61ba      	str	r2, [r7, #24]
 8000ab4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ab6:	6979      	ldr	r1, [r7, #20]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	e841 2300 	strex	r3, r2, [r1]
 8000abe:	613b      	str	r3, [r7, #16]
   return(result);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1e9      	bne.n	8000a9a <LL_USART_EnableIT_RXNE+0x8>
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3724      	adds	r7, #36	; 0x24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  static uint32_t last = 0;
  uint32_t current;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7f1b      	ldrb	r3, [r3, #28]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d11c      	bne.n	8000b1e <HAL_TIM_IC_CaptureCallback+0x4a>
    current = htim->Instance->CCR1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	60fb      	str	r3, [r7, #12]
    if (last <= current) {
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d306      	bcc.n	8000b04 <HAL_TIM_IC_CaptureCallback+0x30>
      period = current - last;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e009      	b.n	8000b18 <HAL_TIM_IC_CaptureCallback+0x44>
    }
    else {
      period = TIM2->ARR - last + current;
 8000b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1ad2      	subs	r2, r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b16:	6013      	str	r3, [r2, #0]
    }
    last = current;
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6013      	str	r3, [r2, #0]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000270 	.word	0x20000270
 8000b30:	2000026c 	.word	0x2000026c

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  volatile float tsl237_clock_period;
  volatile float tsl237_clock_frequency;
  init_queue(&buf);
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <main+0xc0>)
 8000b3c:	f000 faa1 	bl	8001082 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 fe43 	bl	80017ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f86c 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 fa4c 	bl	8000fe4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 fa1a 	bl	8000f84 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000b50:	f000 f92e 	bl	8000db0 <MX_RTC_Init>
  MX_TIM2_Init();
 8000b54:	f000 f9be 	bl	8000ed4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b58:	f000 f8c6 	bl	8000ce8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000b5c:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <main+0xc4>)
 8000b5e:	f000 fb07 	bl	8001170 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000b62:	4826      	ldr	r0, [pc, #152]	; (8000bfc <main+0xc8>)
 8000b64:	f7ff ff95 	bl	8000a92 <LL_USART_EnableIT_RXNE>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000b68:	463a      	mov	r2, r7
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4824      	ldr	r0, [pc, #144]	; (8000c00 <main+0xcc>)
 8000b70:	f004 fb26 	bl	80051c0 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000b74:	4823      	ldr	r0, [pc, #140]	; (8000c04 <main+0xd0>)
 8000b76:	f006 fc3b 	bl	80073f0 <iprintf>

  prompt();
 8000b7a:	f7ff fd07 	bl	800058c <prompt>
  while (1)
  {
//	  printf("Period %d\n\r", period);

	  HAL_Delay(100);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f000 fe98 	bl	80018b4 <HAL_Delay>
	  if (get_commands(command)) {
 8000b84:	4820      	ldr	r0, [pc, #128]	; (8000c08 <main+0xd4>)
 8000b86:	f7ff fe6b 	bl	8000860 <get_commands>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01e      	beq.n	8000bce <main+0x9a>
		  command_length = 16;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <main+0xd8>)
 8000b92:	2210      	movs	r2, #16
 8000b94:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <main+0xd8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d011      	beq.n	8000bc4 <main+0x90>
			  if(execute_command(command)) {
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <main+0xd4>)
 8000ba2:	f7ff ff03 	bl	80009ac <execute_command>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <main+0x84>
				  printf("NOK\n\r");
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <main+0xdc>)
 8000bae:	f006 fc1f 	bl	80073f0 <iprintf>
				  prompt();
 8000bb2:	f7ff fceb 	bl	800058c <prompt>
 8000bb6:	e00a      	b.n	8000bce <main+0x9a>
			  }
			  else {
				  printf("OK\n\r");
 8000bb8:	4816      	ldr	r0, [pc, #88]	; (8000c14 <main+0xe0>)
 8000bba:	f006 fc19 	bl	80073f0 <iprintf>
				  prompt();
 8000bbe:	f7ff fce5 	bl	800058c <prompt>
 8000bc2:	e004      	b.n	8000bce <main+0x9a>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000bc4:	4812      	ldr	r0, [pc, #72]	; (8000c10 <main+0xdc>)
 8000bc6:	f006 fc13 	bl	80073f0 <iprintf>
			  prompt();
 8000bca:	f7ff fcdf 	bl	800058c <prompt>
		  }

	  }

	  if (alarm) {
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <main+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0d3      	beq.n	8000b7e <main+0x4a>
		  printf("alarm_triggered\n\r");
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <main+0xe8>)
 8000bd8:	f006 fc0a 	bl	80073f0 <iprintf>
		  lon_command();
 8000bdc:	f7ff fd3c 	bl	8000658 <lon_command>
		  HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 fe67 	bl	80018b4 <HAL_Delay>
		  lof_command();
 8000be6:	f7ff fd27 	bl	8000638 <lof_command>
		  alarm = 0;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <main+0xe4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8000bf0:	e7c5      	b.n	8000b7e <main+0x4a>
 8000bf2:	bf00      	nop
 8000bf4:	2000022c 	.word	0x2000022c
 8000bf8:	200001a4 	.word	0x200001a4
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	20000158 	.word	0x20000158
 8000c04:	080086f4 	.word	0x080086f4
 8000c08:	20000254 	.word	0x20000254
 8000c0c:	20000264 	.word	0x20000264
 8000c10:	0800870c 	.word	0x0800870c
 8000c14:	08008714 	.word	0x08008714
 8000c18:	20000268 	.word	0x20000268
 8000c1c:	0800871c 	.word	0x0800871c

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	; 0x58
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2244      	movs	r2, #68	; 0x44
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f006 fce9 	bl	8007606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c46:	f002 faf3 	bl	8003230 <HAL_PWREx_ControlVoltageScaling>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c50:	f000 fa12 	bl	8001078 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c54:	f002 face 	bl	80031f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <SystemClock_Config+0xc4>)
 8000c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c5e:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <SystemClock_Config+0xc4>)
 8000c60:	f023 0318 	bic.w	r3, r3, #24
 8000c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000c68:	231c      	movs	r3, #28
 8000c6a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c90:	2307      	movs	r3, #7
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fb1b 	bl	80032dc <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cac:	f000 f9e4 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 ff1b 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000cd4:	f000 f9d0 	bl	8001078 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cd8:	f003 fb2e 	bl	8004338 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cdc:	bf00      	nop
 8000cde:	3758      	adds	r7, #88	; 0x58
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <MX_ADC1_Init+0xc0>)
 8000d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d60:	f000 ff7e 	bl	8001c60 <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d6a:	f000 f985 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ADC1_Init+0xc4>)
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2306      	movs	r3, #6
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	237f      	movs	r3, #127	; 0x7f
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_ADC1_Init+0xbc>)
 8000d8c:	f001 fa7c 	bl	8002288 <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d96:	f000 f96f 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000d0 	.word	0x200000d0
 8000da8:	50040000 	.word	0x50040000
 8000dac:	c7520000 	.word	0xc7520000

08000db0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b092      	sub	sp, #72	; 0x48
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000db6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	222c      	movs	r2, #44	; 0x2c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fc18 	bl	8007606 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000dd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <MX_RTC_Init+0x11c>)
 8000dda:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000de4:	227f      	movs	r2, #127	; 0x7f
 8000de6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000e08:	f003 fb98 	bl	800453c <HAL_RTC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e12:	f000 f931 	bl	8001078 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000e3a:	f003 fc07 	bl	800464c <HAL_RTC_SetTime>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000e44:	f000 f918 	bl	8001078 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000e6a:	f003 fce8 	bl	800483e <HAL_RTC_SetDate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000e74:	f000 f900 	bl	8001078 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000e80:	2330      	movs	r3, #48	; 0x30
 8000e82:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_RTC_Init+0x120>)
 8000e92:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_RTC_Init+0x118>)
 8000eb0:	f003 fd9a 	bl	80049e8 <HAL_RTC_SetAlarm_IT>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000eba:	f000 f8dd 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3748      	adds	r7, #72	; 0x48
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	40002800 	.word	0x40002800
 8000ed0:	80808000 	.word	0x80808000

08000ed4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f1c:	f003 ffca 	bl	8004eb4 <HAL_TIM_IC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f26:	f000 f8a7 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f3a:	f004 ff43 	bl	8005dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f44:	f000 f898 	bl	8001078 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f60:	f004 fbe0 	bl	8005724 <HAL_TIM_IC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f6a:	f000 f885 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <MX_TIM2_Init+0xac>)
 8000f72:	f003 fff7 	bl	8004f64 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000158 	.word	0x20000158

08000f84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_USART2_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART2_UART_Init+0x58>)
 8000fc8:	f004 ff80 	bl	8005ecc <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f851 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001a4 	.word	0x200001a4
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_GPIO_Init+0x8c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_GPIO_Init+0x8c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_GPIO_Init+0x8c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <MX_GPIO_Init+0x90>)
 8001048:	f002 f8bc 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800104c:	2308      	movs	r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_GPIO_Init+0x90>)
 8001064:	f001 ff44 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	48000400 	.word	0x48000400

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>

08001082 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 800108a:	f7ff fcdf 	bl	8000a4c <disable>
 800108e:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  restore(mask);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fce8 	bl	8000a72 <restore>
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80010ba:	f7ff fcc7 	bl	8000a4c <disable>
 80010be:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	425a      	negs	r2, r3
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	f002 021f 	and.w	r2, r2, #31
 80010d0:	bf58      	it	pl
 80010d2:	4253      	negpl	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6852      	ldr	r2, [r2, #4]
 80010d8:	4293      	cmp	r3, r2
 80010da:	d014      	beq.n	8001106 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	78fa      	ldrb	r2, [r7, #3]
 80010e6:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	425a      	negs	r2, r3
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	bf58      	it	pl
 80010fa:	4253      	negpl	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
    return_val=0;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e002      	b.n	800110c <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f7ff fcb0 	bl	8000a72 <restore>
  return (return_val);
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <dequeue>:

uint8_t dequeue (queue_t *buf) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001128:	f7ff fc90 	bl	8000a4c <disable>
 800112c:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d011      	beq.n	800115e <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	425a      	negs	r2, r3
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	f002 021f 	and.w	r2, r2, #31
 8001156:	bf58      	it	pl
 8001158:	4253      	negpl	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 800115e:	68b8      	ldr	r0, [r7, #8]
 8001160:	f7ff fc87 	bl	8000a72 <restore>
  return(return_val);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <RetargetInit+0x28>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <RetargetInit+0x2c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6898      	ldr	r0, [r3, #8]
 8001184:	2300      	movs	r3, #0
 8001186:	2202      	movs	r2, #2
 8001188:	2100      	movs	r1, #0
 800118a:	f006 f94b 	bl	8007424 <setvbuf>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000274 	.word	0x20000274
 800119c:	200000a4 	.word	0x200000a4

080011a0 <_isatty>:

int _isatty(int fd) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db04      	blt.n	80011b8 <_isatty+0x18>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	dc01      	bgt.n	80011b8 <_isatty+0x18>
    return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e005      	b.n	80011c4 <_isatty+0x24>

  errno = EBADF;
 80011b8:	f006 fad0 	bl	800775c <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	2209      	movs	r2, #9
 80011c0:	601a      	str	r2, [r3, #0]
  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_write>:

int _write(int fd, char* ptr, int len) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <_write+0x18>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d111      	bne.n	8001208 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <_write+0x54>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	f004 feb9 	bl	8005f68 <HAL_UART_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <_write+0x38>
      return len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	e008      	b.n	8001216 <_write+0x4a>
    else
      return EIO;
 8001204:	2305      	movs	r3, #5
 8001206:	e006      	b.n	8001216 <_write+0x4a>
  }
  errno = EBADF;
 8001208:	f006 faa8 	bl	800775c <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	2209      	movs	r2, #9
 8001210:	601a      	str	r2, [r3, #0]
  return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000274 	.word	0x20000274

08001224 <_close>:

int _close(int fd) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db04      	blt.n	800123c <_close+0x18>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	dc01      	bgt.n	800123c <_close+0x18>
    return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e006      	b.n	800124a <_close+0x26>

  errno = EBADF;
 800123c:	f006 fa8e 	bl	800775c <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	2209      	movs	r2, #9
 8001244:	601a      	str	r2, [r3, #0]
  return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800125e:	f006 fa7d 	bl	800775c <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2209      	movs	r2, #9
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_read>:

int _read(int fd, char* ptr, int len) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d110      	bne.n	80012a8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <_read+0x4c>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	f004 fef3 	bl	800607c <HAL_UART_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <_read+0x30>
      return 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e008      	b.n	80012b6 <_read+0x42>
    else
      return EIO;
 80012a4:	2305      	movs	r3, #5
 80012a6:	e006      	b.n	80012b6 <_read+0x42>
  }
  errno = EBADF;
 80012a8:	f006 fa58 	bl	800775c <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2209      	movs	r2, #9
 80012b0:	601a      	str	r2, [r3, #0]
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000274 	.word	0x20000274

080012c4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db08      	blt.n	80012e6 <_fstat+0x22>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc05      	bgt.n	80012e6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e0:	605a      	str	r2, [r3, #4]
    return 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e005      	b.n	80012f2 <_fstat+0x2e>
  }

  errno = EBADF;
 80012e6:	f006 fa39 	bl	800775c <__errno>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2209      	movs	r2, #9
 80012ee:	601a      	str	r2, [r3, #0]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b098      	sub	sp, #96	; 0x60
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2254      	movs	r2, #84	; 0x54
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f006 f956 	bl	8007606 <memset>
  if(hadc->Instance==ADC1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_ADC_MspInit+0x90>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d132      	bne.n	80013ca <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001368:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800136a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800136e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001378:	2310      	movs	r3, #16
 800137a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800137c:	2307      	movs	r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fdda 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800139e:	f7ff fe6b 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_ADC_MspInit+0x94>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_ADC_MspInit+0x94>)
 80013a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_ADC_MspInit+0x94>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2012      	movs	r0, #18
 80013c0:	f001 fc51 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80013c4:	2012      	movs	r0, #18
 80013c6:	f001 fc6a 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3760      	adds	r7, #96	; 0x60
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50040000 	.word	0x50040000
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b098      	sub	sp, #96	; 0x60
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2254      	movs	r2, #84	; 0x54
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 f90a 	bl	8007606 <memset>
  if(hrtc->Instance==RTC)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <HAL_RTC_MspInit+0x68>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11f      	bne.n	800143c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001400:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fd9d 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001418:	f7ff fe2e 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_RTC_MspInit+0x6c>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RTC_MspInit+0x6c>)
 8001424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2029      	movs	r0, #41	; 0x29
 8001432:	f001 fc18 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001436:	2029      	movs	r0, #41	; 0x29
 8001438:	f001 fc31 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3760      	adds	r7, #96	; 0x60
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40002800 	.word	0x40002800
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d130      	bne.n	80014d0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_TIM_IC_MspInit+0x8c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800149e:	2320      	movs	r3, #32
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ae:	2301      	movs	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f001 fd18 	bl	8002ef0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	201c      	movs	r0, #28
 80014c6:	f001 fbce 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ca:	201c      	movs	r0, #28
 80014cc:	f001 fbe7 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09e      	sub	sp, #120	; 0x78
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2254      	movs	r2, #84	; 0x54
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f006 f882 	bl	8007606 <memset>
  if(huart->Instance==USART2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <HAL_UART_MspInit+0xdc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d150      	bne.n	80015ae <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fd17 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001524:	f7ff fda8 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_UART_MspInit+0xe0>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	4a23      	ldr	r2, [pc, #140]	; (80015bc <HAL_UART_MspInit+0xe0>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6593      	str	r3, [r2, #88]	; 0x58
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_UART_MspInit+0xe0>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_UART_MspInit+0xe0>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_UART_MspInit+0xe0>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_UART_MspInit+0xe0>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001558:	2304      	movs	r3, #4
 800155a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001568:	2307      	movs	r3, #7
 800156a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f001 fcbb 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800157a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800158c:	2303      	movs	r3, #3
 800158e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fca9 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f001 fb5f 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a8:	2026      	movs	r0, #38	; 0x26
 80015aa:	f001 fb78 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3778      	adds	r7, #120	; 0x78
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f932 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <ADC1_IRQHandler+0x10>)
 800161a:	f000 fc63 	bl	8001ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000d0 	.word	0x200000d0

08001628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM2_IRQHandler+0x10>)
 800162e:	f003 ff77 	bl	8005520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000158 	.word	0x20000158

0800163c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001640:	480e      	ldr	r0, [pc, #56]	; (800167c <USART2_IRQHandler+0x40>)
 8001642:	f004 fde5 	bl	8006210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001646:	f005 fecb 	bl	80073e0 <getchar>
 800164a:	4603      	mov	r3, r0
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <USART2_IRQHandler+0x44>)
 8001650:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <USART2_IRQHandler+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <USART2_IRQHandler+0x48>)
 800165a:	f7ff fd26 	bl	80010aa <enqueue>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <USART2_IRQHandler+0x48>)
 8001666:	f7ff fd59 	bl	800111c <dequeue>
      enqueue(&buf,ch);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <USART2_IRQHandler+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <USART2_IRQHandler+0x48>)
 8001672:	f7ff fd1a 	bl	80010aa <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001a4 	.word	0x200001a4
 8001680:	20000278 	.word	0x20000278
 8001684:	2000022c 	.word	0x2000022c

08001688 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <RTC_Alarm_IRQHandler+0x14>)
 800168e:	f003 fae7 	bl	8004c60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 8001692:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <RTC_Alarm_IRQHandler+0x18>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000134 	.word	0x20000134
 80016a0:	20000268 	.word	0x20000268

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_kill>:

int _kill(int pid, int sig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016be:	f006 f84d 	bl	800775c <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe7 	bl	80016b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	e7fe      	b.n	80016e6 <_exit+0x12>

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f006 f820 	bl	800775c <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20010000 	.word	0x20010000
 8001748:	00000400 	.word	0x00000400
 800174c:	2000027c 	.word	0x2000027c
 8001750:	200003d0 	.word	0x200003d0

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a6:	f005 ffdf 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017aa:	f7ff f9c3 	bl	8000b34 <main>

080017ae <LoopForever>:

LoopForever:
    b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80017bc:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 80017c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80017c4:	200003d0 	.word	0x200003d0

080017c8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <CAN1_RX0_IRQHandler>

080017ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f001 fa3b 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f80e 	bl	80017fc <HAL_InitTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ec:	f7ff fd86 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_InitTick+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_InitTick+0x70>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_InitTick+0x6c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fa47 	bl	8002cba <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d809      	bhi.n	800184c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f001 fa11 	bl	8002c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_InitTick+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e007      	b.n	800185c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e004      	b.n	800185c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e001      	b.n	800185c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000048 	.word	0x20000048
 800186c:	20000040 	.word	0x20000040
 8001870:	20000044 	.word	0x20000044

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000048 	.word	0x20000048
 8001898:	20000280 	.word	0x20000280

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000280 	.word	0x20000280

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000048 	.word	0x20000048

080018fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3360      	adds	r3, #96	; 0x60
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <LL_ADC_SetOffset+0x44>)
 8001986:	4013      	ands	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	4313      	orrs	r3, r2
 8001994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	03fff000 	.word	0x03fff000

080019ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3360      	adds	r3, #96	; 0x60
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3330      	adds	r3, #48	; 0x30
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	211f      	movs	r1, #31
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	f003 011f 	and.w	r1, r3, #31
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a80:	bf00      	nop
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0e5b      	lsrs	r3, r3, #25
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0d1b      	lsrs	r3, r3, #20
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2107      	movs	r1, #7
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0d1b      	lsrs	r3, r3, #20
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0318 	and.w	r3, r3, #24
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b2c:	40d9      	lsrs	r1, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	400b      	ands	r3, r1
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	431a      	orrs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	0007ffff 	.word	0x0007ffff

08001b50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6093      	str	r3, [r2, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b88:	d101      	bne.n	8001b8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <LL_ADC_IsEnabled+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_ADC_IsEnabled+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e126      	b.n	8001ec8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fb5b 	bl	8001344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff67 	bl	8001b74 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff4d 	bl	8001b50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff82 	bl	8001bc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff66 	bl	8001b9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd0:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_ADC_Init+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <HAL_ADC_Init+0x274>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f9      	bne.n	8001ce6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff64 	bl	8001bc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff75 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 8001d28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80bf 	bne.w	8001eb6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80bb 	bne.w	8001eb6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d48:	f043 0202 	orr.w	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff49 	bl	8001bec <LL_ADC_IsEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10b      	bne.n	8001d78 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d60:	485d      	ldr	r0, [pc, #372]	; (8001ed8 <HAL_ADC_Init+0x278>)
 8001d62:	f7ff ff43 	bl	8001bec <LL_ADC_IsEnabled>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4619      	mov	r1, r3
 8001d72:	485a      	ldr	r0, [pc, #360]	; (8001edc <HAL_ADC_Init+0x27c>)
 8001d74:	f7ff fdc2 	bl	80018fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e5b      	ldrb	r3, [r3, #25]
 8001d7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	045b      	lsls	r3, r3, #17
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_ADC_Init+0x280>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff25 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 8001dee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d13d      	bne.n	8001e72 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d13a      	bne.n	8001e72 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e00:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e08:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e18:	f023 0302 	bic.w	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d118      	bne.n	8001e62 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e52:	430a      	orrs	r2, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10c      	bne.n	8001e94 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f023 010f 	bic.w	r1, r3, #15
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
 8001e92:	e007      	b.n	8001ea4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 020f 	bic.w	r2, r2, #15
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f023 0303 	bic.w	r3, r3, #3
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8001eb4:	e007      	b.n	8001ec6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000040 	.word	0x20000040
 8001ed4:	053e2d63 	.word	0x053e2d63
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	50040300 	.word	0x50040300
 8001ee0:	fff0c007 	.word	0xfff0c007

08001ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d017      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x56>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fdb5 	bl	8002a9c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x6a>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05e      	beq.n	8002016 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d059      	beq.n	8002016 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd45 	bl	8001a0e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03e      	beq.n	8002008 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d135      	bne.n	8002008 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d12e      	bne.n	8002008 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe2f 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020c 	bic.w	r2, r2, #12
 8001fc8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
 8001fee:	e00b      	b.n	8002008 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f91f 	bl	800224c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	220c      	movs	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_ADC_IRQHandler+0x146>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002030:	2b00      	cmp	r3, #0
 8002032:	d072      	beq.n	800211a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d06d      	beq.n	800211a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fd16 	bl	8001a8c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002060:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fcd1 	bl	8001a0e <LL_ADC_REG_IsTriggerSourceSWStart>
 800206c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d047      	beq.n	800210c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_ADC_IRQHandler+0x1b2>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03f      	beq.n	800210c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d13a      	bne.n	800210c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d133      	bne.n	800210c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12e      	bne.n	800210c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fdc0 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11a      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d112      	bne.n	800210c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
 80020f2:	e00b      	b.n	800210c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fc9d 	bl	8002a4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2260      	movs	r2, #96	; 0x60
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d011      	beq.n	8002148 <HAL_ADC_IRQHandler+0x264>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f890 	bl	8002260 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <HAL_ADC_IRQHandler+0x294>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fc83 	bl	8002a74 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x2c4>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fc75 	bl	8002a88 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02a      	beq.n	8002208 <HAL_ADC_IRQHandler+0x324>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d025      	beq.n	8002208 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e008      	b.n	80021dc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10e      	bne.n	8002200 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f043 0202 	orr.w	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f83a 	bl	8002274 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d018      	beq.n	8002244 <HAL_ADC_IRQHandler+0x360>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f043 0208 	orr.w	r2, r3, #8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fc0e 	bl	8002a60 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0b6      	sub	sp, #216	; 0xd8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x22>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e3bb      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x79a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fcab 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 83a0 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d824      	bhi.n	800231e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	3b02      	subs	r3, #2
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d81b      	bhi.n	8002316 <HAL_ADC_ConfigChannel+0x8e>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <HAL_ADC_ConfigChannel+0x5c>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800230d 	.word	0x0800230d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022f4:	230c      	movs	r3, #12
 80022f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022fa:	e010      	b.n	800231e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022fc:	2312      	movs	r3, #18
 80022fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002302:	e00c      	b.n	800231e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002304:	2318      	movs	r3, #24
 8002306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800230a:	e008      	b.n	800231e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800230c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002316:	2306      	movs	r3, #6
 8002318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800231c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800232c:	f7ff fb82 	bl	8001a34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc6c 	bl	8001c12 <LL_ADC_REG_IsConversionOngoing>
 800233a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc78 	bl	8001c38 <LL_ADC_INJ_IsConversionOngoing>
 8002348:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800234c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 81a4 	bne.w	800269e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 819f 	bne.w	800269e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	461a      	mov	r2, r3
 800236e:	f7ff fba0 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d00a      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a4:	f7ff fade 	bl	8001964 <LL_ADC_SetOffset>
 80023a8:	e179      	b.n	800269e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fafb 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x14e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff faf0 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	e01e      	b.n	8002414 <HAL_ADC_ConfigChannel+0x18c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fae5 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80023f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80023fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e004      	b.n	8002412 <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1a4>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	e018      	b.n	800245e <HAL_ADC_ConfigChannel+0x1d6>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e004      	b.n	800245e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fab4 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fa98 	bl	80019ac <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x214>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fa8d 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	e01e      	b.n	80024da <HAL_ADC_ConfigChannel+0x252>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fa82 	bl	80019ac <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e004      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x26a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	e018      	b.n	8002524 <HAL_ADC_ConfigChannel+0x29c>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800250a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800250e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e004      	b.n	8002524 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800251a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002524:	429a      	cmp	r2, r3
 8002526:	d106      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	2101      	movs	r1, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa51 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fa35 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x2da>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2102      	movs	r1, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fa2a 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	0e9b      	lsrs	r3, r3, #26
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	e01e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x318>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2102      	movs	r1, #2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fa1f 	bl	80019ac <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e004      	b.n	800259e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x330>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	e014      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x35a>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80025c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80025cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e004      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d106      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f9f2 	bl	80019d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2103      	movs	r1, #3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f9d6 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x398>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2103      	movs	r1, #3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f9cb 	bl	80019ac <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	e017      	b.n	8002650 <HAL_ADC_ConfigChannel+0x3c8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2103      	movs	r1, #3
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f9c0 	bl	80019ac <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x3e0>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	e011      	b.n	800268c <HAL_ADC_ConfigChannel+0x404>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800267a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	2103      	movs	r1, #3
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f99d 	bl	80019d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff faa2 	bl	8001bec <LL_ADC_IsEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8140 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	461a      	mov	r2, r3
 80026be:	f7ff fa23 	bl	8001b08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4a8f      	ldr	r2, [pc, #572]	; (8002904 <HAL_ADC_ConfigChannel+0x67c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	f040 8131 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x46e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2b09      	cmp	r3, #9
 80026ec:	bf94      	ite	ls
 80026ee:	2301      	movls	r3, #1
 80026f0:	2300      	movhi	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	e019      	b.n	800272a <HAL_ADC_ConfigChannel+0x4a2>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2b09      	cmp	r3, #9
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272a:	2b00      	cmp	r3, #0
 800272c:	d079      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_ADC_ConfigChannel+0x4c2>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	3301      	adds	r3, #1
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002748:	e015      	b.n	8002776 <HAL_ADC_ConfigChannel+0x4ee>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	069b      	lsls	r3, r3, #26
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x50e>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	e017      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x53e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	ea42 0103 	orr.w	r1, r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x564>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	051b      	lsls	r3, r3, #20
 80027ea:	e018      	b.n	800281e <HAL_ADC_ConfigChannel+0x596>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e003      	b.n	8002810 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281e:	430b      	orrs	r3, r1
 8002820:	e081      	b.n	8002926 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <HAL_ADC_ConfigChannel+0x5b6>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	3301      	adds	r3, #1
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283c:	e015      	b.n	800286a <HAL_ADC_ConfigChannel+0x5e2>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3301      	adds	r3, #1
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_ADC_ConfigChannel+0x602>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	3301      	adds	r3, #1
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	e017      	b.n	80028ba <HAL_ADC_ConfigChannel+0x632>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	61bb      	str	r3, [r7, #24]
  return result;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	ea42 0103 	orr.w	r1, r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x65e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 021f 	and.w	r2, r3, #31
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	3b1e      	subs	r3, #30
 80028de:	051b      	lsls	r3, r3, #20
 80028e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e4:	e01e      	b.n	8002924 <HAL_ADC_ConfigChannel+0x69c>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	60fb      	str	r3, [r7, #12]
  return result;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028fe:	2320      	movs	r3, #32
 8002900:	e006      	b.n	8002910 <HAL_ADC_ConfigChannel+0x688>
 8002902:	bf00      	nop
 8002904:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f003 021f 	and.w	r2, r3, #31
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	3b1e      	subs	r3, #30
 800291e:	051b      	lsls	r3, r3, #20
 8002920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002924:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292a:	4619      	mov	r1, r3
 800292c:	f7ff f8c1 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_ADC_ConfigChannel+0x7a4>)
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d06c      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800293c:	483c      	ldr	r0, [pc, #240]	; (8002a30 <HAL_ADC_ConfigChannel+0x7a8>)
 800293e:	f7ff f803 	bl	8001948 <LL_ADC_GetCommonPathInternalCh>
 8002942:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_ADC_ConfigChannel+0x7ac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d127      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <HAL_ADC_ConfigChannel+0x7b0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d157      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296e:	4619      	mov	r1, r3
 8002970:	482f      	ldr	r0, [pc, #188]	; (8002a30 <HAL_ADC_ConfigChannel+0x7a8>)
 8002972:	f7fe ffd6 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_ADC_ConfigChannel+0x7b4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_ADC_ConfigChannel+0x7b8>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002990:	e002      	b.n	8002998 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3b01      	subs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800299e:	e03a      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_ADC_ConfigChannel+0x7bc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_ADC_ConfigChannel+0x7b0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d12a      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c8:	4619      	mov	r1, r3
 80029ca:	4819      	ldr	r0, [pc, #100]	; (8002a30 <HAL_ADC_ConfigChannel+0x7a8>)
 80029cc:	f7fe ffa9 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d0:	e021      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_ADC_ConfigChannel+0x7c0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d11c      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_ADC_ConfigChannel+0x7b0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fa:	4619      	mov	r1, r3
 80029fc:	480c      	ldr	r0, [pc, #48]	; (8002a30 <HAL_ADC_ConfigChannel+0x7a8>)
 80029fe:	f7fe ff90 	bl	8001922 <LL_ADC_SetCommonPathInternalCh>
 8002a02:	e008      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	37d8      	adds	r7, #216	; 0xd8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	80080000 	.word	0x80080000
 8002a30:	50040300 	.word	0x50040300
 8002a34:	c7520000 	.word	0xc7520000
 8002a38:	50040000 	.word	0x50040000
 8002a3c:	20000040 	.word	0x20000040
 8002a40:	053e2d63 	.word	0x053e2d63
 8002a44:	cb840000 	.word	0xcb840000
 8002a48:	80000001 	.word	0x80000001

08002a4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <__NVIC_EnableIRQ+0x38>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	; (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	; (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff29 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff3e 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff8e 	bl	8002ba4 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5d 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff31 	bl	8002b14 <__NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffa2 	bl	8002c0c <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Start_IT+0x20>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e04b      	b.n	8002d8a <HAL_DMA_Start_IT+0xb8>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d13a      	bne.n	8002d7c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f8b0 	bl	8002e90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 020e 	orr.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 020a 	orr.w	r2, r2, #10
 8002d68:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e005      	b.n	8002d88 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d008      	beq.n	8002dbc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e022      	b.n	8002e02 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020e 	bic.w	r2, r2, #14
 8002dca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 021c 	and.w	r2, r3, #28
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f202 	lsl.w	r2, r1, r2
 8002dee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d005      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e029      	b.n	8002e86 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020e 	bic.w	r2, r2, #14
 8002e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f003 021c 	and.w	r2, r3, #28
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
    }
  }
  return status;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 021c 	and.w	r2, r3, #28
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d108      	bne.n	8002ed4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ed2:	e007      	b.n	8002ee4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e148      	b.n	8003192 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 813a 	beq.w	800318c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d005      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d017      	beq.n	8002fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d123      	bne.n	8003022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8094 	beq.w	800318c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003064:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_GPIO_Init+0x2c0>)
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_GPIO_Init+0x2c0>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6613      	str	r3, [r2, #96]	; 0x60
 8003070:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_GPIO_Init+0x2c0>)
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800307c:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <HAL_GPIO_Init+0x2c4>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030a6:	d00d      	beq.n	80030c4 <HAL_GPIO_Init+0x1d4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a43      	ldr	r2, [pc, #268]	; (80031b8 <HAL_GPIO_Init+0x2c8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <HAL_GPIO_Init+0x1d0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_GPIO_Init+0x2cc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_GPIO_Init+0x1cc>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e004      	b.n	80030c6 <HAL_GPIO_Init+0x1d6>
 80030bc:	2307      	movs	r3, #7
 80030be:	e002      	b.n	80030c6 <HAL_GPIO_Init+0x1d6>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_GPIO_Init+0x1d6>
 80030c4:	2300      	movs	r3, #0
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	f002 0203 	and.w	r2, r2, #3
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	4093      	lsls	r3, r2
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d6:	4937      	ldr	r1, [pc, #220]	; (80031b4 <HAL_GPIO_Init+0x2c4>)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003108:	4a2d      	ldr	r2, [pc, #180]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003138:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315c:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003186:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f aeaf 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010000 	.word	0x40010000
 80031b8:	48000400 	.word	0x48000400
 80031bc:	48000800 	.word	0x48000800
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40007000 	.word	0x40007000

08003214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_PWREx_GetVoltageRange+0x18>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d130      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d038      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2232      	movs	r2, #50	; 0x32
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	e002      	b.n	800327c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d102      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f2      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d110      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e00f      	b.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	d007      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000
 80032d4:	20000040 	.word	0x20000040
 80032d8:	431bde83 	.word	0x431bde83

080032dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f000 bc02 	b.w	8003af4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f0:	4b96      	ldr	r3, [pc, #600]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fa:	4b94      	ldr	r3, [pc, #592]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80e4 	beq.w	80034da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_RCC_OscConfig+0x4c>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	f040 808b 	bne.w	8003436 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	f040 8087 	bne.w	8003436 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003328:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x64>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e3d9      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_RCC_OscConfig+0x7e>
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003358:	e005      	b.n	8003366 <HAL_RCC_OscConfig+0x8a>
 800335a:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003366:	4293      	cmp	r3, r2
 8003368:	d223      	bcs.n	80033b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fd8c 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e3ba      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337e:	4b73      	ldr	r3, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a72      	ldr	r2, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	496d      	ldr	r1, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339c:	4b6b      	ldr	r3, [pc, #428]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	4968      	ldr	r1, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	e025      	b.n	80033fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4960      	ldr	r1, [pc, #384]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d0:	4b5e      	ldr	r3, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	495b      	ldr	r1, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fd4c 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e37a      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fe:	f000 fc81 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4950      	ldr	r1, [pc, #320]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_RCC_OscConfig+0x278>)
 800341c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341e:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <HAL_RCC_OscConfig+0x27c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f9ea 	bl	80017fc <HAL_InitTick>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d052      	beq.n	80034d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	e35e      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d032      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a42      	ldr	r2, [pc, #264]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344a:	f7fe fa27 	bl	800189c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003452:	f7fe fa23 	bl	800189c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e347      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a35      	ldr	r2, [pc, #212]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003476:	f043 0308 	orr.w	r3, r3, #8
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4930      	ldr	r1, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	492b      	ldr	r1, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
 80034a2:	e01a      	b.n	80034da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b0:	f7fe f9f4 	bl	800189c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b8:	f7fe f9f0 	bl	800189c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e314      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1dc>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d073      	beq.n	80035ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x21c>
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d10e      	bne.n	8003510 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d063      	beq.n	80035cc <HAL_RCC_OscConfig+0x2f0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d15f      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e2f1      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x24c>
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0b      	ldr	r2, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e025      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d114      	bne.n	800355c <HAL_RCC_OscConfig+0x280>
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a02      	ldr	r2, [pc, #8]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e013      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 800354c:	40021000 	.word	0x40021000
 8003550:	08008730 	.word	0x08008730
 8003554:	20000040 	.word	0x20000040
 8003558:	20000044 	.word	0x20000044
 800355c:	4ba0      	ldr	r3, [pc, #640]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a9f      	ldr	r2, [pc, #636]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b9d      	ldr	r3, [pc, #628]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a9c      	ldr	r2, [pc, #624]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe f98e 	bl	800189c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe f98a 	bl	800189c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e2ae      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x2a8>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe f97a 	bl	800189c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe f976 	bl	800189c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e29a      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x2d0>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d060      	beq.n	800369c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x310>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d119      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x328>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e277      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4973      	ldr	r1, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	e040      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003622:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe f935 	bl	800189c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe f931 	bl	800189c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e255      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003648:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	495f      	ldr	r1, [pc, #380]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe f911 	bl	800189c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe f90d 	bl	800189c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e231      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	4a4a      	ldr	r2, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe f8ec 	bl	800189c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe f8e8 	bl	800189c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e20c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x3ec>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe f8cf 	bl	800189c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe f8cb 	bl	800189c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1ef      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a6 	beq.w	800387c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe f892 	bl	800189c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe f88e 	bl	800189c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1b2      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d8>
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b2:	e029      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d115      	bne.n	80037e8 <HAL_RCC_OscConfig+0x50c>
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	4b9a      	ldr	r3, [pc, #616]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a99      	ldr	r2, [pc, #612]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	4b96      	ldr	r3, [pc, #600]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a95      	ldr	r2, [pc, #596]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe f844 	bl	800189c <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe f840 	bl	800189c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e162      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b89      	ldr	r3, [pc, #548]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <HAL_RCC_OscConfig+0x53c>
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fe f82d 	bl	800189c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fe f829 	bl	800189c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e14b      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b7d      	ldr	r3, [pc, #500]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ed      	bne.n	8003846 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b78      	ldr	r3, [pc, #480]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03c      	beq.n	8003902 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003890:	4b70      	ldr	r3, [pc, #448]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003896:	4a6f      	ldr	r2, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fffc 	bl	800189c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a8:	f7fd fff8 	bl	800189c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e11c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ba:	4b66      	ldr	r3, [pc, #408]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x5cc>
 80038c8:	e01b      	b.n	8003902 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ca:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d0:	4a60      	ldr	r2, [pc, #384]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd ffdf 	bl	800189c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fd ffdb 	bl	800189c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0ff      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f4:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ef      	bne.n	80038e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80f3 	beq.w	8003af2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	2b02      	cmp	r3, #2
 8003912:	f040 80c9 	bne.w	8003aa8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003916:	4b4f      	ldr	r3, [pc, #316]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d12c      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	3b01      	subs	r3, #1
 8003936:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d123      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d11b      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d113      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	3b01      	subs	r3, #1
 800396a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d109      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d06b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d062      	beq.n	8003a50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ac      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2d      	ldr	r2, [pc, #180]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a6:	f7fd ff79 	bl	800189c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd ff75 	bl	800189c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e099      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCC_OscConfig+0x77c>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039dc:	3a01      	subs	r2, #1
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e6:	0212      	lsls	r2, r2, #8
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ee:	0852      	lsrs	r2, r2, #1
 80039f0:	3a01      	subs	r2, #1
 80039f2:	0552      	lsls	r2, r2, #21
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0652      	lsls	r2, r2, #25
 8003a00:	4311      	orrs	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a06:	06d2      	lsls	r2, r2, #27
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	4912      	ldr	r1, [pc, #72]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a28:	f7fd ff38 	bl	800189c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd ff34 	bl	800189c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e058      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4e:	e050      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04f      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
 8003a54:	40021000 	.word	0x40021000
 8003a58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d144      	bne.n	8003af2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a80:	f7fd ff0c 	bl	800189c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fd ff08 	bl	800189c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e02c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x7ac>
 8003aa6:	e024      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d01f      	beq.n	8003aee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd feef 	bl	800189c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd feeb 	bl	800189c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4905      	ldr	r1, [pc, #20]	; (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x824>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60cb      	str	r3, [r1, #12]
 8003aec:	e001      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	feeefffc 	.word	0xfeeefffc

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0e7      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4970      	ldr	r1, [pc, #448]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b6e      	ldr	r3, [pc, #440]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cf      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d908      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4960      	ldr	r1, [pc, #384]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04c      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0a6      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d115      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e09a      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bba:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e08e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e086      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4943      	ldr	r1, [pc, #268]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fe56 	bl	800189c <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fd fe52 	bl	800189c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	492b      	ldr	r1, [pc, #172]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d210      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4923      	ldr	r1, [pc, #140]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e036      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4918      	ldr	r1, [pc, #96]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4910      	ldr	r1, [pc, #64]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb8:	f000 f824 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1fc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd fd8d 	bl	80017fc <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08008730 	.word	0x08008730
 8003cfc:	20000040 	.word	0x20000040
 8003d00:	20000044 	.word	0x20000044

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d11e      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e005      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e004      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d134      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0xa6>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0xac>
 8003da8:	e005      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dac:	617b      	str	r3, [r7, #20]
      break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003db2:	617b      	str	r3, [r7, #20]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	617b      	str	r3, [r7, #20]
      break;
 8003dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	fb03 f202 	mul.w	r2, r3, r2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	0e5b      	lsrs	r3, r3, #25
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	3301      	adds	r3, #1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08008748 	.word	0x08008748
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000040 	.word	0x20000040

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4904      	ldr	r1, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08008740 	.word	0x08008740

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e64:	f7ff ffda 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0adb      	lsrs	r3, r3, #11
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08008740 	.word	0x08008740

08003e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea4:	f7ff f9b6 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003ea8:	6178      	str	r0, [r7, #20]
 8003eaa:	e014      	b.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec4:	f7ff f9a6 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d10b      	bne.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d919      	bls.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee8:	d902      	bls.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eea:	2302      	movs	r3, #2
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e013      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e010      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d902      	bls.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003efc:	2303      	movs	r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e00a      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d102      	bne.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f08:	2302      	movs	r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e004      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d101      	bne.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f14:	2301      	movs	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d031      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f70:	d01a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f76:	d814      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a5c      	ldr	r2, [pc, #368]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8e:	e00c      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f9de 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	4b51      	ldr	r3, [pc, #324]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	494e      	ldr	r1, [pc, #312]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fc6:	e001      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 809e 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fde:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	4a3f      	ldr	r2, [pc, #252]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400c:	2301      	movs	r3, #1
 800400e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004010:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a39      	ldr	r2, [pc, #228]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401c:	f7fd fc3e 	bl	800189c <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004024:	f7fd fc3a 	bl	800189c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	74fb      	strb	r3, [r7, #19]
        break;
 8004036:	e005      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004038:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d15a      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d019      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd fbfa 	bl	800189c <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	e00b      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fd fbf6 	bl	800189c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d902      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	74fb      	strb	r3, [r7, #19]
            break;
 80040c2:	e006      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ec      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d8:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004104:	7c7b      	ldrb	r3, [r7, #17]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4b8a      	ldr	r3, [pc, #552]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	4a89      	ldr	r2, [pc, #548]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004122:	4b84      	ldr	r3, [pc, #528]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4980      	ldr	r1, [pc, #512]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004144:	4b7b      	ldr	r3, [pc, #492]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 020c 	bic.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	4978      	ldr	r1, [pc, #480]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004166:	4b73      	ldr	r3, [pc, #460]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	496f      	ldr	r1, [pc, #444]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	4967      	ldr	r1, [pc, #412]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041aa:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	495e      	ldr	r1, [pc, #376]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4956      	ldr	r1, [pc, #344]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ee:	4b51      	ldr	r3, [pc, #324]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d028      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004210:	4b48      	ldr	r3, [pc, #288]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4945      	ldr	r1, [pc, #276]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422e:	d106      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423a:	60d3      	str	r3, [r2, #12]
 800423c:	e011      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004246:	d10c      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f882 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d028      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	492d      	ldr	r1, [pc, #180]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428c:	d106      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4a28      	ldr	r2, [pc, #160]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004298:	60d3      	str	r3, [r2, #12]
 800429a:	e011      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2101      	movs	r1, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f853 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f830 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004328:	7cbb      	ldrb	r3, [r7, #18]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000

08004358 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b74      	ldr	r3, [pc, #464]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004372:	4b71      	ldr	r3, [pc, #452]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d10d      	bne.n	800439e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
       ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438a:	4b6b      	ldr	r3, [pc, #428]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
       ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d047      	beq.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e044      	b.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d018      	beq.n	80043de <RCCEx_PLLSAI1_Config+0x86>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d825      	bhi.n	80043fc <RCCEx_PLLSAI1_Config+0xa4>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x62>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <RCCEx_PLLSAI1_Config+0x74>
 80043b8:	e020      	b.n	80043fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ba:	4b5f      	ldr	r3, [pc, #380]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ca:	e01a      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b5a      	ldr	r3, [pc, #360]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e013      	b.n	8004406 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043de:	4b56      	ldr	r3, [pc, #344]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ea:	4b53      	ldr	r3, [pc, #332]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e004      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440a:	bf00      	nop
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004412:	4b49      	ldr	r3, [pc, #292]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	430b      	orrs	r3, r1
 8004428:	4943      	ldr	r1, [pc, #268]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d17c      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004434:	4b40      	ldr	r3, [pc, #256]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fd fa2c 	bl	800189c <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004448:	f7fd fa28 	bl	800189c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ef      	bne.n	8004448 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d15f      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004474:	4b30      	ldr	r3, [pc, #192]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800447c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	0211      	lsls	r1, r2, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	06d2      	lsls	r2, r2, #27
 800448c:	430a      	orrs	r2, r1
 800448e:	492a      	ldr	r1, [pc, #168]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	610b      	str	r3, [r1, #16]
 8004494:	e027      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d112      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6912      	ldr	r2, [r2, #16]
 80044b2:	0852      	lsrs	r2, r2, #1
 80044b4:	3a01      	subs	r2, #1
 80044b6:	0552      	lsls	r2, r2, #21
 80044b8:	430a      	orrs	r2, r1
 80044ba:	491f      	ldr	r1, [pc, #124]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
 80044c0:	e011      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	0211      	lsls	r1, r2, #8
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6952      	ldr	r2, [r2, #20]
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	3a01      	subs	r2, #1
 80044dc:	0652      	lsls	r2, r2, #25
 80044de:	430a      	orrs	r2, r1
 80044e0:	4915      	ldr	r1, [pc, #84]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e6:	4b14      	ldr	r3, [pc, #80]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a13      	ldr	r2, [pc, #76]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fd f9d3 	bl	800189c <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f8:	e009      	b.n	800450e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fa:	f7fd f9cf 	bl	800189c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d902      	bls.n	800450e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	73fb      	strb	r3, [r7, #15]
          break;
 800450c:	e005      	b.n	800451a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ef      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d079      	beq.n	8004642 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc ff3a 	bl	80013dc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d058      	beq.n	8004630 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	22ca      	movs	r2, #202	; 0xca
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2253      	movs	r2, #83	; 0x53
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fbda 	bl	8004d48 <RTC_EnterInitMode>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d127      	bne.n	80045ee <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68d2      	ldr	r2, [r2, #12]
 80045d8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6919      	ldr	r1, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	041a      	lsls	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fbde 	bl	8004db0 <RTC_ExitInitMode>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0203 	bic.w	r2, r2, #3
 800460c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
 800462e:	e001      	b.n	8004634 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_RTC_SetTime+0x1a>
 8004662:	2302      	movs	r3, #2
 8004664:	e08b      	b.n	800477e <HAL_RTC_SetTime+0x132>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	22ca      	movs	r2, #202	; 0xca
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2253      	movs	r2, #83	; 0x53
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fb5e 	bl	8004d48 <RTC_EnterInitMode>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d163      	bne.n	800475e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d126      	bne.n	80046ea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2200      	movs	r2, #0
 80046ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fbb9 	bl	8004e2c <RTC_ByteToBcd2>
 80046ba:	4603      	mov	r3, r0
 80046bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fbb2 	bl	8004e2c <RTC_ByteToBcd2>
 80046c8:	4603      	mov	r3, r0
 80046ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	789b      	ldrb	r3, [r3, #2]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fbaa 	bl	8004e2c <RTC_ByteToBcd2>
 80046d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	e018      	b.n	800471c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800470a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004710:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004726:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800473a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6899      	ldr	r1, [r3, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	431a      	orrs	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fb2b 	bl	8004db0 <RTC_ExitInitMode>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	22ff      	movs	r2, #255	; 0xff
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
}
 800477e:	4618      	mov	r0, r3
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}

08004786 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	0d9b      	lsrs	r3, r3, #22
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11a      	bne.n	8004834 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb32 	bl	8004e6c <RTC_Bcd2ToByte>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb29 	bl	8004e6c <RTC_Bcd2ToByte>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	789b      	ldrb	r3, [r3, #2]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fb20 	bl	8004e6c <RTC_Bcd2ToByte>
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800483e:	b590      	push	{r4, r7, lr}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_RTC_SetDate+0x1a>
 8004854:	2302      	movs	r3, #2
 8004856:	e075      	b.n	8004944 <HAL_RTC_SetDate+0x106>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10e      	bne.n	800488c <HAL_RTC_SetDate+0x4e>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	b2db      	uxtb	r3, r3
 8004884:	330a      	adds	r3, #10
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11c      	bne.n	80048cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	78db      	ldrb	r3, [r3, #3]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fac8 	bl	8004e2c <RTC_ByteToBcd2>
 800489c:	4603      	mov	r3, r0
 800489e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fac1 	bl	8004e2c <RTC_ByteToBcd2>
 80048aa:	4603      	mov	r3, r0
 80048ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	789b      	ldrb	r3, [r3, #2]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fab9 	bl	8004e2c <RTC_ByteToBcd2>
 80048ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e00e      	b.n	80048ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	22ca      	movs	r2, #202	; 0xca
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2253      	movs	r2, #83	; 0x53
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa24 	bl	8004d48 <RTC_EnterInitMode>
 8004900:	4603      	mov	r3, r0
 8004902:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004918:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fa48 	bl	8004db0 <RTC_ExitInitMode>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}

0800494c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004966:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	0c1b      	lsrs	r3, r3, #16
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11a      	bne.n	80049dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	78db      	ldrb	r3, [r3, #3]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fa5e 	bl	8004e6c <RTC_Bcd2ToByte>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fa55 	bl	8004e6c <RTC_Bcd2ToByte>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa4c 	bl	8004e6c <RTC_Bcd2ToByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_RTC_SetAlarm_IT+0x1a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e127      	b.n	8004c52 <HAL_RTC_SetAlarm_IT+0x26a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d137      	bne.n	8004a88 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f9fb 	bl	8004e2c <RTC_ByteToBcd2>
 8004a36:	4603      	mov	r3, r0
 8004a38:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f9f4 	bl	8004e2c <RTC_ByteToBcd2>
 8004a44:	4603      	mov	r3, r0
 8004a46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a48:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	789b      	ldrb	r3, [r3, #2]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f9ec 	bl	8004e2c <RTC_ByteToBcd2>
 8004a54:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a56:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	78db      	ldrb	r3, [r3, #3]
 8004a5e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a60:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f9de 	bl	8004e2c <RTC_ByteToBcd2>
 8004a70:	4603      	mov	r3, r0
 8004a72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e023      	b.n	8004ad0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aa8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	78db      	ldrb	r3, [r3, #3]
 8004ab4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ab6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004abe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ac0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ac6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	22ca      	movs	r2, #202	; 0xca
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2253      	movs	r2, #83	; 0x53
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af4:	d14a      	bne.n	8004b8c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b04:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004b16:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004b18:	f7fc fec0 	bl	800189c <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b1e:	e015      	b.n	8004b4c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b20:	f7fc febc 	bl	800189c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b2e:	d90d      	bls.n	8004b4c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	22ff      	movs	r2, #255	; 0xff
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e082      	b.n	8004c52 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0e2      	beq.n	8004b20 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b78:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	e049      	b.n	8004c20 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b9a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004bac:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004bae:	f7fc fe75 	bl	800189c <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bb4:	e015      	b.n	8004be2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bb6:	f7fc fe71 	bl	800189c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc4:	d90d      	bls.n	8004be2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e037      	b.n	8004c52 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0e2      	beq.n	8004bb6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c36:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40010400 	.word	0x40010400

08004c60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004c6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c6e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004c9c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f824 	bl	8004cec <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004cd0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8e4 	bl	8004ea0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40010400 	.word	0x40010400

08004cec <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <HAL_RTC_WaitForSynchro+0x44>)
 8004d0e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004d10:	f7fc fdc4 	bl	800189c <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d16:	e009      	b.n	8004d2c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d18:	f7fc fdc0 	bl	800189c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d26:	d901      	bls.n	8004d2c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e007      	b.n	8004d3c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ee      	beq.n	8004d18 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	0003ff5f 	.word	0x0003ff5f

08004d48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d120      	bne.n	8004da4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d6c:	f7fc fd96 	bl	800189c <HAL_GetTick>
 8004d70:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d72:	e00d      	b.n	8004d90 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d74:	f7fc fd92 	bl	800189c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d82:	d905      	bls.n	8004d90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <RTC_EnterInitMode+0x5c>
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d1e7      	bne.n	8004d74 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004dc8:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10c      	bne.n	8004dee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff93 	bl	8004d00 <HAL_RTC_WaitForSynchro>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2203      	movs	r2, #3
 8004de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e017      	b.n	8004e1e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dee:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004df4:	f023 0320 	bic.w	r3, r3, #32
 8004df8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff80 	bl	8004d00 <HAL_RTC_WaitForSynchro>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <RTC_ExitInitMode+0x78>)
 8004e18:	f043 0320 	orr.w	r3, r3, #32
 8004e1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40002800 	.word	0x40002800

08004e2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004e3e:	e005      	b.n	8004e4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	3b0a      	subs	r3, #10
 8004e4a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	d8f6      	bhi.n	8004e40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	7afb      	ldrb	r3, [r7, #11]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	b2db      	uxtb	r3, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	4413      	add	r3, r2
 8004e92:	b2db      	uxtb	r3, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e049      	b.n	8004f5a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fab6 	bl	800144c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fdd0 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_IC_Start_IT+0x1e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e023      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x66>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_IC_Start_IT+0x2e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e01b      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x66>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IC_Start_IT+0x3e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x66>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_IC_Start_IT+0x4e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x66>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_IC_Start_IT+0x5e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_IC_Start_IT+0x66>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_IC_Start_IT+0x78>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e013      	b.n	8005004 <HAL_TIM_IC_Start_IT+0xa0>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d104      	bne.n	8004fec <HAL_TIM_IC_Start_IT+0x88>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e00b      	b.n	8005004 <HAL_TIM_IC_Start_IT+0xa0>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_IC_Start_IT+0x98>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e003      	b.n	8005004 <HAL_TIM_IC_Start_IT+0xa0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005002:	b2db      	uxtb	r3, r3
 8005004:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d102      	bne.n	8005012 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800500c:	7b7b      	ldrb	r3, [r7, #13]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0c9      	b.n	80051aa <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_TIM_IC_Start_IT+0xc2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005024:	e023      	b.n	800506e <HAL_TIM_IC_Start_IT+0x10a>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d104      	bne.n	8005036 <HAL_TIM_IC_Start_IT+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005034:	e01b      	b.n	800506e <HAL_TIM_IC_Start_IT+0x10a>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start_IT+0xe2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005044:	e013      	b.n	800506e <HAL_TIM_IC_Start_IT+0x10a>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d104      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0xf2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	e00b      	b.n	800506e <HAL_TIM_IC_Start_IT+0x10a>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d104      	bne.n	8005066 <HAL_TIM_IC_Start_IT+0x102>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005064:	e003      	b.n	800506e <HAL_TIM_IC_Start_IT+0x10a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <HAL_TIM_IC_Start_IT+0x11a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507c:	e013      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x142>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d104      	bne.n	800508e <HAL_TIM_IC_Start_IT+0x12a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800508c:	e00b      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x142>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d104      	bne.n	800509e <HAL_TIM_IC_Start_IT+0x13a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800509c:	e003      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x142>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d841      	bhi.n	8005130 <HAL_TIM_IC_Start_IT+0x1cc>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_TIM_IC_Start_IT+0x150>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	08005131 	.word	0x08005131
 80050bc:	08005131 	.word	0x08005131
 80050c0:	08005131 	.word	0x08005131
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	08005131 	.word	0x08005131
 80050cc:	08005131 	.word	0x08005131
 80050d0:	08005131 	.word	0x08005131
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005131 	.word	0x08005131
 80050e0:	08005131 	.word	0x08005131
 80050e4:	0800511f 	.word	0x0800511f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0202 	orr.w	r2, r2, #2
 80050f6:	60da      	str	r2, [r3, #12]
      break;
 80050f8:	e01d      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0204 	orr.w	r2, r2, #4
 8005108:	60da      	str	r2, [r3, #12]
      break;
 800510a:	e014      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	60da      	str	r2, [r3, #12]
      break;
 800511c:	e00b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0210 	orr.w	r2, r2, #16
 800512c:	60da      	str	r2, [r3, #12]
      break;
 800512e:	e002      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	bf00      	nop
  }

  if (status == HAL_OK)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d135      	bne.n	80051a8 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fe17 	bl	8005d78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_TIM_IC_Start_IT+0x250>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIM_IC_Start_IT+0x204>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d004      	beq.n	8005168 <HAL_TIM_IC_Start_IT+0x204>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_TIM_IC_Start_IT+0x254>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d115      	bne.n	8005194 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_TIM_IC_Start_IT+0x258>)
 8005170:	4013      	ands	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b06      	cmp	r3, #6
 8005178:	d015      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x242>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d011      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	e008      	b.n	80051a6 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	00010007 	.word	0x00010007

080051c0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start_DMA+0x22>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e023      	b.n	800522a <HAL_TIM_IC_Start_DMA+0x6a>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start_DMA+0x32>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e01b      	b.n	800522a <HAL_TIM_IC_Start_DMA+0x6a>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_DMA+0x42>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e013      	b.n	800522a <HAL_TIM_IC_Start_DMA+0x6a>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start_DMA+0x52>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e00b      	b.n	800522a <HAL_TIM_IC_Start_DMA+0x6a>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b10      	cmp	r3, #16
 8005216:	d104      	bne.n	8005222 <HAL_TIM_IC_Start_DMA+0x62>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e003      	b.n	800522a <HAL_TIM_IC_Start_DMA+0x6a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005228:	b2db      	uxtb	r3, r3
 800522a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <HAL_TIM_IC_Start_DMA+0x7c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e013      	b.n	8005264 <HAL_TIM_IC_Start_DMA+0xa4>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b04      	cmp	r3, #4
 8005240:	d104      	bne.n	800524c <HAL_TIM_IC_Start_DMA+0x8c>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e00b      	b.n	8005264 <HAL_TIM_IC_Start_DMA+0xa4>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b08      	cmp	r3, #8
 8005250:	d104      	bne.n	800525c <HAL_TIM_IC_Start_DMA+0x9c>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e003      	b.n	8005264 <HAL_TIM_IC_Start_DMA+0xa4>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005262:	b2db      	uxtb	r3, r3
 8005264:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005266:	7dbb      	ldrb	r3, [r7, #22]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d002      	beq.n	8005272 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800526c:	7d7b      	ldrb	r3, [r7, #21]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d101      	bne.n	8005276 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
 8005274:	e143      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005276:	7dbb      	ldrb	r3, [r7, #22]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d153      	bne.n	8005324 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800527c:	7d7b      	ldrb	r3, [r7, #21]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d150      	bne.n	8005324 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_TIM_IC_Start_DMA+0xce>
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e135      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_DMA+0xe2>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a0:	e023      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x12a>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_IC_Start_DMA+0xf2>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b0:	e01b      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x12a>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IC_Start_DMA+0x102>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c0:	e013      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x12a>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_DMA+0x112>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d0:	e00b      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x12a>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_IC_Start_DMA+0x122>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e0:	e003      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x12a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_DMA+0x13a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 80052f8:	e016      	b.n	8005328 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_DMA+0x14a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8005308:	e00e      	b.n	8005328 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_DMA+0x15a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8005318:	e006      	b.n	8005328 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 8005322:	e001      	b.n	8005328 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0ea      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fd21 	bl	8005d78 <TIM_CCxChannelCmd>

  switch (Channel)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	f200 80ad 	bhi.w	8005498 <HAL_TIM_IC_Start_DMA+0x2d8>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_TIM_IC_Start_DMA+0x184>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005379 	.word	0x08005379
 8005348:	08005499 	.word	0x08005499
 800534c:	08005499 	.word	0x08005499
 8005350:	08005499 	.word	0x08005499
 8005354:	080053c1 	.word	0x080053c1
 8005358:	08005499 	.word	0x08005499
 800535c:	08005499 	.word	0x08005499
 8005360:	08005499 	.word	0x08005499
 8005364:	08005409 	.word	0x08005409
 8005368:	08005499 	.word	0x08005499
 800536c:	08005499 	.word	0x08005499
 8005370:	08005499 	.word	0x08005499
 8005374:	08005451 	.word	0x08005451
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	4a62      	ldr	r2, [pc, #392]	; (8005508 <HAL_TIM_IC_Start_DMA+0x348>)
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	4a61      	ldr	r2, [pc, #388]	; (800550c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	4a60      	ldr	r2, [pc, #384]	; (8005510 <HAL_TIM_IC_Start_DMA+0x350>)
 800538e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3334      	adds	r3, #52	; 0x34
 800539a:	4619      	mov	r1, r3
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	f7fd fc97 	bl	8002cd2 <HAL_DMA_Start_IT>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0a7      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	60da      	str	r2, [r3, #12]
      break;
 80053be:	e06e      	b.n	800549e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	4a50      	ldr	r2, [pc, #320]	; (8005508 <HAL_TIM_IC_Start_DMA+0x348>)
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	4a4f      	ldr	r2, [pc, #316]	; (800550c <HAL_TIM_IC_Start_DMA+0x34c>)
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	4a4e      	ldr	r2, [pc, #312]	; (8005510 <HAL_TIM_IC_Start_DMA+0x350>)
 80053d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3338      	adds	r3, #56	; 0x38
 80053e2:	4619      	mov	r1, r3
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	f7fd fc73 	bl	8002cd2 <HAL_DMA_Start_IT>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e083      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005404:	60da      	str	r2, [r3, #12]
      break;
 8005406:	e04a      	b.n	800549e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a3e      	ldr	r2, [pc, #248]	; (8005508 <HAL_TIM_IC_Start_DMA+0x348>)
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	4a3d      	ldr	r2, [pc, #244]	; (800550c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a3c      	ldr	r2, [pc, #240]	; (8005510 <HAL_TIM_IC_Start_DMA+0x350>)
 800541e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	333c      	adds	r3, #60	; 0x3c
 800542a:	4619      	mov	r1, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	887b      	ldrh	r3, [r7, #2]
 8005430:	f7fd fc4f 	bl	8002cd2 <HAL_DMA_Start_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e05f      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	60da      	str	r2, [r3, #12]
      break;
 800544e:	e026      	b.n	800549e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <HAL_TIM_IC_Start_DMA+0x348>)
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4a2b      	ldr	r2, [pc, #172]	; (800550c <HAL_TIM_IC_Start_DMA+0x34c>)
 800545e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <HAL_TIM_IC_Start_DMA+0x350>)
 8005466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3340      	adds	r3, #64	; 0x40
 8005472:	4619      	mov	r1, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	f7fd fc2b 	bl	8002cd2 <HAL_DMA_Start_IT>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e03b      	b.n	80054fe <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005494:	60da      	str	r2, [r3, #12]
      break;
 8005496:	e002      	b.n	800549e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
      break;
 800549c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIM_IC_Start_DMA+0x354>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_TIM_IC_Start_DMA+0x2fc>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d004      	beq.n	80054bc <HAL_TIM_IC_Start_DMA+0x2fc>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIM_IC_Start_DMA+0x358>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d115      	bne.n	80054e8 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <HAL_TIM_IC_Start_DMA+0x35c>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d015      	beq.n	80054fa <HAL_TIM_IC_Start_DMA+0x33a>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d011      	beq.n	80054fa <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	e008      	b.n	80054fa <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e000      	b.n	80054fc <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	bf00      	nop
  }

  /* Return function status */
  return status;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08005967 	.word	0x08005967
 800550c:	08005a2f 	.word	0x08005a2f
 8005510:	080058d5 	.word	0x080058d5
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40014000 	.word	0x40014000
 800551c:	00010007 	.word	0x00010007

08005520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d020      	beq.n	8005584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0202 	mvn.w	r2, #2
 8005554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fab2 	bl	8000ad4 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f97c 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f98d 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d020      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01b      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0204 	mvn.w	r2, #4
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fa8c 	bl	8000ad4 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f956 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f967 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fb fa66 	bl	8000ad4 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f930 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f941 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d020      	beq.n	8005668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fb fa40 	bl	8000ad4 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f90a 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f91b 	bl	8005898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0201 	mvn.w	r2, #1
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8e8 	bl	800585c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fbfa 	bl	8005ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fbf2 	bl	8005eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8da 	bl	80058ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0220 	mvn.w	r2, #32
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbba 	bl	8005e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_TIM_IC_ConfigChannel+0x1e>
 800573e:	2302      	movs	r3, #2
 8005740:	e088      	b.n	8005854 <HAL_TIM_IC_ConfigChannel+0x130>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005760:	f000 f9fe 	bl	8005b60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 020c 	bic.w	r2, r2, #12
 8005772:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e060      	b.n	800584a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d11c      	bne.n	80057c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800579e:	f000 fa35 	bl	8005c0c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6999      	ldr	r1, [r3, #24]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	619a      	str	r2, [r3, #24]
 80057c6:	e040      	b.n	800584a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d11b      	bne.n	8005806 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057de:	f000 fa52 	bl	8005c86 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 020c 	bic.w	r2, r2, #12
 80057f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
 8005804:	e021      	b.n	800584a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b0c      	cmp	r3, #12
 800580a:	d11c      	bne.n	8005846 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800581c:	f000 fa6f 	bl	8005cfe <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69da      	ldr	r2, [r3, #28]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800582e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69d9      	ldr	r1, [r3, #28]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	e001      	b.n	800584a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d107      	bne.n	80058fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058fa:	e02a      	b.n	8005952 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d107      	bne.n	8005916 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005914:	e01d      	b.n	8005952 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2204      	movs	r2, #4
 8005924:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592e:	e010      	b.n	8005952 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	d107      	bne.n	800594a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2208      	movs	r2, #8
 800593e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005948:	e003      	b.n	8005952 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ffb4 	bl	80058c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	771a      	strb	r2, [r3, #28]
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d10f      	bne.n	800599e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d146      	bne.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599c:	e03d      	b.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d10f      	bne.n	80059c8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2202      	movs	r2, #2
 80059ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d131      	bne.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c6:	e028      	b.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d10f      	bne.n	80059f2 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2204      	movs	r2, #4
 80059d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11c      	bne.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f0:	e013      	b.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d10e      	bne.n	8005a1a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2208      	movs	r2, #8
 8005a00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d107      	bne.n	8005a1a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fb f85a 	bl	8000ad4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	771a      	strb	r2, [r3, #28]
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d103      	bne.n	8005a4e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	771a      	strb	r2, [r3, #28]
 8005a4c:	e019      	b.n	8005a82 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d103      	bne.n	8005a60 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	771a      	strb	r2, [r3, #28]
 8005a5e:	e010      	b.n	8005a82 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d103      	bne.n	8005a72 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	771a      	strb	r2, [r3, #28]
 8005a70:	e007      	b.n	8005a82 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d102      	bne.n	8005a82 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff fefe 	bl	8005884 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <TIM_Base_SetConfig+0xbc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x20>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab6:	d108      	bne.n	8005aca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <TIM_Base_SetConfig+0xbc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_Base_SetConfig+0x52>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d007      	beq.n	8005aea <TIM_Base_SetConfig+0x52>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <TIM_Base_SetConfig+0xc0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_Base_SetConfig+0x52>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	; (8005b5c <TIM_Base_SetConfig+0xc4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <TIM_Base_SetConfig+0xbc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0xa0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <TIM_Base_SetConfig+0xc0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <TIM_Base_SetConfig+0xc4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	615a      	str	r2, [r3, #20]
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400

08005b60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0201 	bic.w	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <TIM_TI1_SetConfig+0xa4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_TI1_SetConfig+0x3e>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d003      	beq.n	8005b9e <TIM_TI1_SetConfig+0x3e>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <TIM_TI1_SetConfig+0xa8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <TIM_TI1_SetConfig+0x42>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <TIM_TI1_SetConfig+0x44>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e003      	b.n	8005bc2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f023 030a 	bic.w	r3, r3, #10
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f003 030a 	and.w	r3, r3, #10
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40014000 	.word	0x40014000

08005c0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f023 0210 	bic.w	r2, r3, #16
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	031b      	lsls	r3, r3, #12
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b087      	sub	sp, #28
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	031b      	lsls	r3, r3, #12
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d50:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	031b      	lsls	r3, r3, #12
 8005d56:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	fa01 f303 	lsl.w	r3, r1, r3
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e04f      	b.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e44:	d004      	beq.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40014000 	.word	0x40014000

08005e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e040      	b.n	8005f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb faf4 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 feb2 	bl	8006c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc83 	bl	8006824 <UART_SetConfig>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e01b      	b.n	8005f60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff31 	bl	8006dc0 <UART_CheckIdleState>
 8005f5e:	4603      	mov	r3, r0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d178      	bne.n	8006072 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Transmit+0x24>
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e071      	b.n	8006074 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2221      	movs	r2, #33	; 0x21
 8005f9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9e:	f7fb fc7d 	bl	800189c <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d108      	bne.n	8005fd0 <HAL_UART_Transmit+0x68>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e003      	b.n	8005fd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fd8:	e030      	b.n	800603c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 ff93 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e03c      	b.n	8006074 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	881a      	ldrh	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600c:	b292      	uxth	r2, r2
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	3302      	adds	r3, #2
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e008      	b.n	800602a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	b292      	uxth	r2, r2
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1c8      	bne.n	8005fda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 ff5c 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e005      	b.n	8006074 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006092:	2b20      	cmp	r3, #32
 8006094:	f040 80b6 	bne.w	8006204 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_UART_Receive+0x28>
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0ae      	b.n	8006206 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060be:	f7fb fbed 	bl	800189c <HAL_GetTick>
 80060c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060dc:	d10e      	bne.n	80060fc <HAL_UART_Receive+0x80>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d105      	bne.n	80060f2 <HAL_UART_Receive+0x76>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f0:	e02d      	b.n	800614e <HAL_UART_Receive+0xd2>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060fa:	e028      	b.n	800614e <HAL_UART_Receive+0xd2>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10d      	bne.n	8006120 <HAL_UART_Receive+0xa4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_UART_Receive+0x9a>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006114:	e01b      	b.n	800614e <HAL_UART_Receive+0xd2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	227f      	movs	r2, #127	; 0x7f
 800611a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800611e:	e016      	b.n	800614e <HAL_UART_Receive+0xd2>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006128:	d10d      	bne.n	8006146 <HAL_UART_Receive+0xca>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_UART_Receive+0xc0>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	227f      	movs	r2, #127	; 0x7f
 8006136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800613a:	e008      	b.n	800614e <HAL_UART_Receive+0xd2>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	223f      	movs	r2, #63	; 0x3f
 8006140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006144:	e003      	b.n	800614e <HAL_UART_Receive+0xd2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006154:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d108      	bne.n	8006172 <HAL_UART_Receive+0xf6>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d104      	bne.n	8006172 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	e003      	b.n	800617a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800617a:	e037      	b.n	80061ec <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	2120      	movs	r1, #32
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fec2 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e033      	b.n	8006206 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	8a7b      	ldrh	r3, [r7, #18]
 80061ae:	4013      	ands	r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	3302      	adds	r3, #2
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e00d      	b.n	80061da <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4013      	ands	r3, r2
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1c1      	bne.n	800617c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b0ba      	sub	sp, #232	; 0xe8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800623a:	f640 030f 	movw	r3, #2063	; 0x80f
 800623e:	4013      	ands	r3, r2
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 82ae 	beq.w	80067ca <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
      }
      return;
 8006276:	e2a8      	b.n	80067ca <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8117 	beq.w	80064b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800628e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006292:	4b85      	ldr	r3, [pc, #532]	; (80064a8 <HAL_UART_IRQHandler+0x298>)
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 810a 	beq.w	80064b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d011      	beq.n	80062cc <HAL_UART_IRQHandler+0xbc>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <HAL_UART_IRQHandler+0xec>
 80062d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2202      	movs	r2, #2
 80062ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f2:	f043 0204 	orr.w	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d011      	beq.n	800632c <HAL_UART_IRQHandler+0x11c>
 8006308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2204      	movs	r2, #4
 800631a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006322:	f043 0202 	orr.w	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d017      	beq.n	8006368 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006348:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2208      	movs	r2, #8
 8006356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635e:	f043 0208 	orr.w	r2, r3, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006370:	2b00      	cmp	r3, #0
 8006372:	d012      	beq.n	800639a <HAL_UART_IRQHandler+0x18a>
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8214 	beq.w	80067ce <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00d      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04f      	beq.n	8006492 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fdf3 	bl	8006fde <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d141      	bne.n	800648a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800641c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800643e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800644a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d9      	bne.n	8006406 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <HAL_UART_IRQHandler+0x29c>)
 8006460:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006466:	4618      	mov	r0, r3
 8006468:	f7fc fcd1 	bl	8002e0e <HAL_DMA_Abort_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e00f      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9b8 	bl	80067f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e00b      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9b4 	bl	80067f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e007      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9b0 	bl	80067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80064a0:	e195      	b.n	80067ce <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	bf00      	nop
    return;
 80064a4:	e193      	b.n	80067ce <HAL_UART_IRQHandler+0x5be>
 80064a6:	bf00      	nop
 80064a8:	04000120 	.word	0x04000120
 80064ac:	080070a7 	.word	0x080070a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	f040 814e 	bne.w	8006756 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8147 	beq.w	8006756 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8140 	beq.w	8006756 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	f040 80b8 	bne.w	800665e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8167 	beq.w	80067d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800650a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800650e:	429a      	cmp	r2, r3
 8006510:	f080 815f 	bcs.w	80067d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800651a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 8086 	bne.w	800663c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800655e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1da      	bne.n	8006530 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800658a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800659e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e1      	bne.n	800657a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e3      	bne.n	80065b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	f023 0310 	bic.w	r3, r3, #16
 8006610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800661e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006620:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800662c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e4      	bne.n	80065fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc fbab 	bl	8002d92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664e:	b29b      	uxth	r3, r3
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8d8 	bl	800680c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800665c:	e0b9      	b.n	80067d2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800666a:	b29b      	uxth	r3, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80ab 	beq.w	80067d6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80a6 	beq.w	80067d6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
 80066ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e4      	bne.n	800668a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	623b      	str	r3, [r7, #32]
   return(result);
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066e4:	633a      	str	r2, [r7, #48]	; 0x30
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e3      	bne.n	80066c0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	60fb      	str	r3, [r7, #12]
   return(result);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 0310 	bic.w	r3, r3, #16
 8006720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	69b9      	ldr	r1, [r7, #24]
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	617b      	str	r3, [r7, #20]
   return(result);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e4      	bne.n	800670c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f85c 	bl	800680c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006754:	e03f      	b.n	80067d6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <HAL_UART_IRQHandler+0x570>
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fcd4 	bl	8007126 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800677e:	e02d      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00e      	beq.n	80067aa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01c      	beq.n	80067da <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
    }
    return;
 80067a8:	e017      	b.n	80067da <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <HAL_UART_IRQHandler+0x5cc>
 80067b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fc85 	bl	80070d2 <UART_EndTransmit_IT>
    return;
 80067c8:	e008      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80067ca:	bf00      	nop
 80067cc:	e006      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
    return;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_UART_IRQHandler+0x5cc>
    return;
 80067da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067dc:	37e8      	adds	r7, #232	; 0xe8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006828:	b08a      	sub	sp, #40	; 0x28
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	431a      	orrs	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	4313      	orrs	r3, r2
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4bb4      	ldr	r3, [pc, #720]	; (8006b24 <UART_SetConfig+0x300>)
 8006854:	4013      	ands	r3, r2
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800685c:	430b      	orrs	r3, r1
 800685e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4aa9      	ldr	r2, [pc, #676]	; (8006b28 <UART_SetConfig+0x304>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	4313      	orrs	r3, r2
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4aa0      	ldr	r2, [pc, #640]	; (8006b2c <UART_SetConfig+0x308>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d126      	bne.n	80068fc <UART_SetConfig+0xd8>
 80068ae:	4ba0      	ldr	r3, [pc, #640]	; (8006b30 <UART_SetConfig+0x30c>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d81b      	bhi.n	80068f4 <UART_SetConfig+0xd0>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0xa0>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e080      	b.n	80069de <UART_SetConfig+0x1ba>
 80068dc:	2302      	movs	r3, #2
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e2:	e07c      	b.n	80069de <UART_SetConfig+0x1ba>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ea:	e078      	b.n	80069de <UART_SetConfig+0x1ba>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e074      	b.n	80069de <UART_SetConfig+0x1ba>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e070      	b.n	80069de <UART_SetConfig+0x1ba>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a8c      	ldr	r2, [pc, #560]	; (8006b34 <UART_SetConfig+0x310>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d138      	bne.n	8006978 <UART_SetConfig+0x154>
 8006906:	4b8a      	ldr	r3, [pc, #552]	; (8006b30 <UART_SetConfig+0x30c>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f003 030c 	and.w	r3, r3, #12
 8006910:	2b0c      	cmp	r3, #12
 8006912:	d82d      	bhi.n	8006970 <UART_SetConfig+0x14c>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <UART_SetConfig+0xf8>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006951 	.word	0x08006951
 8006920:	08006971 	.word	0x08006971
 8006924:	08006971 	.word	0x08006971
 8006928:	08006971 	.word	0x08006971
 800692c:	08006961 	.word	0x08006961
 8006930:	08006971 	.word	0x08006971
 8006934:	08006971 	.word	0x08006971
 8006938:	08006971 	.word	0x08006971
 800693c:	08006959 	.word	0x08006959
 8006940:	08006971 	.word	0x08006971
 8006944:	08006971 	.word	0x08006971
 8006948:	08006971 	.word	0x08006971
 800694c:	08006969 	.word	0x08006969
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e042      	b.n	80069de <UART_SetConfig+0x1ba>
 8006958:	2302      	movs	r3, #2
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e03e      	b.n	80069de <UART_SetConfig+0x1ba>
 8006960:	2304      	movs	r3, #4
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006966:	e03a      	b.n	80069de <UART_SetConfig+0x1ba>
 8006968:	2308      	movs	r3, #8
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696e:	e036      	b.n	80069de <UART_SetConfig+0x1ba>
 8006970:	2310      	movs	r3, #16
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006976:	e032      	b.n	80069de <UART_SetConfig+0x1ba>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6a      	ldr	r2, [pc, #424]	; (8006b28 <UART_SetConfig+0x304>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d12a      	bne.n	80069d8 <UART_SetConfig+0x1b4>
 8006982:	4b6b      	ldr	r3, [pc, #428]	; (8006b30 <UART_SetConfig+0x30c>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800698c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006990:	d01a      	beq.n	80069c8 <UART_SetConfig+0x1a4>
 8006992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006996:	d81b      	bhi.n	80069d0 <UART_SetConfig+0x1ac>
 8006998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800699c:	d00c      	beq.n	80069b8 <UART_SetConfig+0x194>
 800699e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a2:	d815      	bhi.n	80069d0 <UART_SetConfig+0x1ac>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <UART_SetConfig+0x18c>
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ac:	d008      	beq.n	80069c0 <UART_SetConfig+0x19c>
 80069ae:	e00f      	b.n	80069d0 <UART_SetConfig+0x1ac>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e012      	b.n	80069de <UART_SetConfig+0x1ba>
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e00e      	b.n	80069de <UART_SetConfig+0x1ba>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e00a      	b.n	80069de <UART_SetConfig+0x1ba>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e006      	b.n	80069de <UART_SetConfig+0x1ba>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e002      	b.n	80069de <UART_SetConfig+0x1ba>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a51      	ldr	r2, [pc, #324]	; (8006b28 <UART_SetConfig+0x304>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d17a      	bne.n	8006ade <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d824      	bhi.n	8006a3a <UART_SetConfig+0x216>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x1d4>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a2b 	.word	0x08006a2b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a3b 	.word	0x08006a3b
 8006a18:	08006a33 	.word	0x08006a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fd fa0a 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
        break;
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b44      	ldr	r3, [pc, #272]	; (8006b38 <UART_SetConfig+0x314>)
 8006a26:	61fb      	str	r3, [r7, #28]
        break;
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2a:	f7fd f96b 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8006a2e:	61f8      	str	r0, [r7, #28]
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8107 	beq.w	8006c5c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	4413      	add	r3, r2
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d305      	bcc.n	8006a6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d903      	bls.n	8006a72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a70:	e0f4      	b.n	8006c5c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2200      	movs	r2, #0
 8006a76:	461c      	mov	r4, r3
 8006a78:	4615      	mov	r5, r2
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	022b      	lsls	r3, r5, #8
 8006a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a88:	0222      	lsls	r2, r4, #8
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	6849      	ldr	r1, [r1, #4]
 8006a8e:	0849      	lsrs	r1, r1, #1
 8006a90:	2000      	movs	r0, #0
 8006a92:	4688      	mov	r8, r1
 8006a94:	4681      	mov	r9, r0
 8006a96:	eb12 0a08 	adds.w	sl, r2, r8
 8006a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	f7f9 fbee 	bl	8000290 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac2:	d308      	bcc.n	8006ad6 <UART_SetConfig+0x2b2>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	d204      	bcs.n	8006ad6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e0c2      	b.n	8006c5c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006adc:	e0be      	b.n	8006c5c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae6:	d16a      	bne.n	8006bbe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d834      	bhi.n	8006b5a <UART_SetConfig+0x336>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x2d4>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	08006b5b 	.word	0x08006b5b
 8006b08:	08006b4b 	.word	0x08006b4b
 8006b0c:	08006b5b 	.word	0x08006b5b
 8006b10:	08006b5b 	.word	0x08006b5b
 8006b14:	08006b5b 	.word	0x08006b5b
 8006b18:	08006b53 	.word	0x08006b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fd f98a 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006b20:	61f8      	str	r0, [r7, #28]
        break;
 8006b22:	e020      	b.n	8006b66 <UART_SetConfig+0x342>
 8006b24:	efff69f3 	.word	0xefff69f3
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	40013800 	.word	0x40013800
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40004400 	.word	0x40004400
 8006b38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7fd f990 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8006b40:	61f8      	str	r0, [r7, #28]
        break;
 8006b42:	e010      	b.n	8006b66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <UART_SetConfig+0x454>)
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e00d      	b.n	8006b66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4a:	f7fd f8db 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8006b4e:	61f8      	str	r0, [r7, #28]
        break;
 8006b50:	e009      	b.n	8006b66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b56:	61fb      	str	r3, [r7, #28]
        break;
 8006b58:	e005      	b.n	8006b66 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d077      	beq.n	8006c5c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	005a      	lsls	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	441a      	add	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d916      	bls.n	8006bb6 <UART_SetConfig+0x392>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8e:	d212      	bcs.n	8006bb6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f023 030f 	bic.w	r3, r3, #15
 8006b98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	8afa      	ldrh	r2, [r7, #22]
 8006bb2:	60da      	str	r2, [r3, #12]
 8006bb4:	e052      	b.n	8006c5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bbc:	e04e      	b.n	8006c5c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d827      	bhi.n	8006c16 <UART_SetConfig+0x3f2>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x3a8>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	08006c17 	.word	0x08006c17
 8006bdc:	08006c07 	.word	0x08006c07
 8006be0:	08006c17 	.word	0x08006c17
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	08006c0f 	.word	0x08006c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7fd f920 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
        break;
 8006bf6:	e014      	b.n	8006c22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fd f932 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	61f8      	str	r0, [r7, #28]
        break;
 8006bfe:	e010      	b.n	8006c22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <UART_SetConfig+0x454>)
 8006c02:	61fb      	str	r3, [r7, #28]
        break;
 8006c04:	e00d      	b.n	8006c22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fd f87d 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8006c0a:	61f8      	str	r0, [r7, #28]
        break;
 8006c0c:	e009      	b.n	8006c22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e005      	b.n	8006c22 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c20:	bf00      	nop
    }

    if (pclk != 0U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d019      	beq.n	8006c5c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	085a      	lsrs	r2, r3, #1
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b0f      	cmp	r3, #15
 8006c40:	d909      	bls.n	8006c56 <UART_SetConfig+0x432>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c48:	d205      	bcs.n	8006c56 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
 8006c54:	e002      	b.n	8006c5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c76:	bf00      	nop
 8006c78:	00f42400 	.word	0x00f42400

08006c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d7a:	d10a      	bne.n	8006d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b098      	sub	sp, #96	; 0x60
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dd0:	f7fa fd64 	bl	800189c <HAL_GetTick>
 8006dd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d12e      	bne.n	8006e42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dec:	2200      	movs	r2, #0
 8006dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f88c 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d021      	beq.n	8006e42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e12:	653b      	str	r3, [r7, #80]	; 0x50
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e062      	b.n	8006f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d149      	bne.n	8006ee4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f856 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d03c      	beq.n	8006ee4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	623b      	str	r3, [r7, #32]
   return(result);
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ebc:	61fa      	str	r2, [r7, #28]
 8006ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	69b9      	ldr	r1, [r7, #24]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e011      	b.n	8006f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3758      	adds	r7, #88	; 0x58
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	e049      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d045      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2a:	f7fa fcb7 	bl	800189c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e048      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d031      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d110      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2208      	movs	r2, #8
 8006f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f838 	bl	8006fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2208      	movs	r2, #8
 8006f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e029      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f90:	d111      	bne.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f81e 	bl	8006fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e00f      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d0a6      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b095      	sub	sp, #84	; 0x54
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007004:	643b      	str	r3, [r7, #64]	; 0x40
 8007006:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800700a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	61fb      	str	r3, [r7, #28]
   return(result);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e5      	bne.n	8007018 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	2b01      	cmp	r3, #1
 8007052:	d118      	bne.n	8007086 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	60bb      	str	r3, [r7, #8]
   return(result);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f023 0310 	bic.w	r3, r3, #16
 8007068:	647b      	str	r3, [r7, #68]	; 0x44
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6979      	ldr	r1, [r7, #20]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	613b      	str	r3, [r7, #16]
   return(result);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e6      	bne.n	8007054 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	669a      	str	r2, [r3, #104]	; 0x68
}
 800709a:	bf00      	nop
 800709c:	3754      	adds	r7, #84	; 0x54
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fb97 	bl	80067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b088      	sub	sp, #32
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6979      	ldr	r1, [r7, #20]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e6      	bne.n	80070da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff fb63 	bl	80067e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711e:	bf00      	nop
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <atoi>:
 800713a:	220a      	movs	r2, #10
 800713c:	2100      	movs	r1, #0
 800713e:	f000 b883 	b.w	8007248 <strtol>
	...

08007144 <_strtol_l.constprop.0>:
 8007144:	2b01      	cmp	r3, #1
 8007146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714a:	d001      	beq.n	8007150 <_strtol_l.constprop.0+0xc>
 800714c:	2b24      	cmp	r3, #36	; 0x24
 800714e:	d906      	bls.n	800715e <_strtol_l.constprop.0+0x1a>
 8007150:	f000 fb04 	bl	800775c <__errno>
 8007154:	2316      	movs	r3, #22
 8007156:	6003      	str	r3, [r0, #0]
 8007158:	2000      	movs	r0, #0
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007244 <_strtol_l.constprop.0+0x100>
 8007162:	460d      	mov	r5, r1
 8007164:	462e      	mov	r6, r5
 8007166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800716a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800716e:	f017 0708 	ands.w	r7, r7, #8
 8007172:	d1f7      	bne.n	8007164 <_strtol_l.constprop.0+0x20>
 8007174:	2c2d      	cmp	r4, #45	; 0x2d
 8007176:	d132      	bne.n	80071de <_strtol_l.constprop.0+0x9a>
 8007178:	782c      	ldrb	r4, [r5, #0]
 800717a:	2701      	movs	r7, #1
 800717c:	1cb5      	adds	r5, r6, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d05b      	beq.n	800723a <_strtol_l.constprop.0+0xf6>
 8007182:	2b10      	cmp	r3, #16
 8007184:	d109      	bne.n	800719a <_strtol_l.constprop.0+0x56>
 8007186:	2c30      	cmp	r4, #48	; 0x30
 8007188:	d107      	bne.n	800719a <_strtol_l.constprop.0+0x56>
 800718a:	782c      	ldrb	r4, [r5, #0]
 800718c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007190:	2c58      	cmp	r4, #88	; 0x58
 8007192:	d14d      	bne.n	8007230 <_strtol_l.constprop.0+0xec>
 8007194:	786c      	ldrb	r4, [r5, #1]
 8007196:	2310      	movs	r3, #16
 8007198:	3502      	adds	r5, #2
 800719a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800719e:	f108 38ff 	add.w	r8, r8, #4294967295
 80071a2:	f04f 0e00 	mov.w	lr, #0
 80071a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80071aa:	4676      	mov	r6, lr
 80071ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80071b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071b4:	f1bc 0f09 	cmp.w	ip, #9
 80071b8:	d816      	bhi.n	80071e8 <_strtol_l.constprop.0+0xa4>
 80071ba:	4664      	mov	r4, ip
 80071bc:	42a3      	cmp	r3, r4
 80071be:	dd24      	ble.n	800720a <_strtol_l.constprop.0+0xc6>
 80071c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80071c4:	d008      	beq.n	80071d8 <_strtol_l.constprop.0+0x94>
 80071c6:	45b1      	cmp	r9, r6
 80071c8:	d31c      	bcc.n	8007204 <_strtol_l.constprop.0+0xc0>
 80071ca:	d101      	bne.n	80071d0 <_strtol_l.constprop.0+0x8c>
 80071cc:	45a2      	cmp	sl, r4
 80071ce:	db19      	blt.n	8007204 <_strtol_l.constprop.0+0xc0>
 80071d0:	fb06 4603 	mla	r6, r6, r3, r4
 80071d4:	f04f 0e01 	mov.w	lr, #1
 80071d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071dc:	e7e8      	b.n	80071b0 <_strtol_l.constprop.0+0x6c>
 80071de:	2c2b      	cmp	r4, #43	; 0x2b
 80071e0:	bf04      	itt	eq
 80071e2:	782c      	ldrbeq	r4, [r5, #0]
 80071e4:	1cb5      	addeq	r5, r6, #2
 80071e6:	e7ca      	b.n	800717e <_strtol_l.constprop.0+0x3a>
 80071e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80071ec:	f1bc 0f19 	cmp.w	ip, #25
 80071f0:	d801      	bhi.n	80071f6 <_strtol_l.constprop.0+0xb2>
 80071f2:	3c37      	subs	r4, #55	; 0x37
 80071f4:	e7e2      	b.n	80071bc <_strtol_l.constprop.0+0x78>
 80071f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80071fa:	f1bc 0f19 	cmp.w	ip, #25
 80071fe:	d804      	bhi.n	800720a <_strtol_l.constprop.0+0xc6>
 8007200:	3c57      	subs	r4, #87	; 0x57
 8007202:	e7db      	b.n	80071bc <_strtol_l.constprop.0+0x78>
 8007204:	f04f 3eff 	mov.w	lr, #4294967295
 8007208:	e7e6      	b.n	80071d8 <_strtol_l.constprop.0+0x94>
 800720a:	f1be 3fff 	cmp.w	lr, #4294967295
 800720e:	d105      	bne.n	800721c <_strtol_l.constprop.0+0xd8>
 8007210:	2322      	movs	r3, #34	; 0x22
 8007212:	6003      	str	r3, [r0, #0]
 8007214:	4646      	mov	r6, r8
 8007216:	b942      	cbnz	r2, 800722a <_strtol_l.constprop.0+0xe6>
 8007218:	4630      	mov	r0, r6
 800721a:	e79e      	b.n	800715a <_strtol_l.constprop.0+0x16>
 800721c:	b107      	cbz	r7, 8007220 <_strtol_l.constprop.0+0xdc>
 800721e:	4276      	negs	r6, r6
 8007220:	2a00      	cmp	r2, #0
 8007222:	d0f9      	beq.n	8007218 <_strtol_l.constprop.0+0xd4>
 8007224:	f1be 0f00 	cmp.w	lr, #0
 8007228:	d000      	beq.n	800722c <_strtol_l.constprop.0+0xe8>
 800722a:	1e69      	subs	r1, r5, #1
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	e7f3      	b.n	8007218 <_strtol_l.constprop.0+0xd4>
 8007230:	2430      	movs	r4, #48	; 0x30
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1b1      	bne.n	800719a <_strtol_l.constprop.0+0x56>
 8007236:	2308      	movs	r3, #8
 8007238:	e7af      	b.n	800719a <_strtol_l.constprop.0+0x56>
 800723a:	2c30      	cmp	r4, #48	; 0x30
 800723c:	d0a5      	beq.n	800718a <_strtol_l.constprop.0+0x46>
 800723e:	230a      	movs	r3, #10
 8007240:	e7ab      	b.n	800719a <_strtol_l.constprop.0+0x56>
 8007242:	bf00      	nop
 8007244:	08008779 	.word	0x08008779

08007248 <strtol>:
 8007248:	4613      	mov	r3, r2
 800724a:	460a      	mov	r2, r1
 800724c:	4601      	mov	r1, r0
 800724e:	4802      	ldr	r0, [pc, #8]	; (8007258 <strtol+0x10>)
 8007250:	6800      	ldr	r0, [r0, #0]
 8007252:	f7ff bf77 	b.w	8007144 <_strtol_l.constprop.0>
 8007256:	bf00      	nop
 8007258:	200000a4 	.word	0x200000a4

0800725c <std>:
 800725c:	2300      	movs	r3, #0
 800725e:	b510      	push	{r4, lr}
 8007260:	4604      	mov	r4, r0
 8007262:	e9c0 3300 	strd	r3, r3, [r0]
 8007266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800726a:	6083      	str	r3, [r0, #8]
 800726c:	8181      	strh	r1, [r0, #12]
 800726e:	6643      	str	r3, [r0, #100]	; 0x64
 8007270:	81c2      	strh	r2, [r0, #14]
 8007272:	6183      	str	r3, [r0, #24]
 8007274:	4619      	mov	r1, r3
 8007276:	2208      	movs	r2, #8
 8007278:	305c      	adds	r0, #92	; 0x5c
 800727a:	f000 f9c4 	bl	8007606 <memset>
 800727e:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <std+0x58>)
 8007280:	6263      	str	r3, [r4, #36]	; 0x24
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <std+0x5c>)
 8007284:	62a3      	str	r3, [r4, #40]	; 0x28
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <std+0x60>)
 8007288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <std+0x64>)
 800728c:	6323      	str	r3, [r4, #48]	; 0x30
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <std+0x68>)
 8007290:	6224      	str	r4, [r4, #32]
 8007292:	429c      	cmp	r4, r3
 8007294:	d006      	beq.n	80072a4 <std+0x48>
 8007296:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800729a:	4294      	cmp	r4, r2
 800729c:	d002      	beq.n	80072a4 <std+0x48>
 800729e:	33d0      	adds	r3, #208	; 0xd0
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d105      	bne.n	80072b0 <std+0x54>
 80072a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f000 ba80 	b.w	80077b0 <__retarget_lock_init_recursive>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	08007581 	.word	0x08007581
 80072b8:	080075a3 	.word	0x080075a3
 80072bc:	080075db 	.word	0x080075db
 80072c0:	080075ff 	.word	0x080075ff
 80072c4:	20000284 	.word	0x20000284

080072c8 <stdio_exit_handler>:
 80072c8:	4a02      	ldr	r2, [pc, #8]	; (80072d4 <stdio_exit_handler+0xc>)
 80072ca:	4903      	ldr	r1, [pc, #12]	; (80072d8 <stdio_exit_handler+0x10>)
 80072cc:	4803      	ldr	r0, [pc, #12]	; (80072dc <stdio_exit_handler+0x14>)
 80072ce:	f000 b869 	b.w	80073a4 <_fwalk_sglue>
 80072d2:	bf00      	nop
 80072d4:	2000004c 	.word	0x2000004c
 80072d8:	080080a9 	.word	0x080080a9
 80072dc:	20000058 	.word	0x20000058

080072e0 <cleanup_stdio>:
 80072e0:	6841      	ldr	r1, [r0, #4]
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <cleanup_stdio+0x34>)
 80072e4:	4299      	cmp	r1, r3
 80072e6:	b510      	push	{r4, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	d001      	beq.n	80072f0 <cleanup_stdio+0x10>
 80072ec:	f000 fedc 	bl	80080a8 <_fflush_r>
 80072f0:	68a1      	ldr	r1, [r4, #8]
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <cleanup_stdio+0x38>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	d002      	beq.n	80072fe <cleanup_stdio+0x1e>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fed5 	bl	80080a8 <_fflush_r>
 80072fe:	68e1      	ldr	r1, [r4, #12]
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <cleanup_stdio+0x3c>)
 8007302:	4299      	cmp	r1, r3
 8007304:	d004      	beq.n	8007310 <cleanup_stdio+0x30>
 8007306:	4620      	mov	r0, r4
 8007308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730c:	f000 becc 	b.w	80080a8 <_fflush_r>
 8007310:	bd10      	pop	{r4, pc}
 8007312:	bf00      	nop
 8007314:	20000284 	.word	0x20000284
 8007318:	200002ec 	.word	0x200002ec
 800731c:	20000354 	.word	0x20000354

08007320 <global_stdio_init.part.0>:
 8007320:	b510      	push	{r4, lr}
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <global_stdio_init.part.0+0x30>)
 8007324:	4c0b      	ldr	r4, [pc, #44]	; (8007354 <global_stdio_init.part.0+0x34>)
 8007326:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <global_stdio_init.part.0+0x38>)
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	4620      	mov	r0, r4
 800732c:	2200      	movs	r2, #0
 800732e:	2104      	movs	r1, #4
 8007330:	f7ff ff94 	bl	800725c <std>
 8007334:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007338:	2201      	movs	r2, #1
 800733a:	2109      	movs	r1, #9
 800733c:	f7ff ff8e 	bl	800725c <std>
 8007340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007344:	2202      	movs	r2, #2
 8007346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734a:	2112      	movs	r1, #18
 800734c:	f7ff bf86 	b.w	800725c <std>
 8007350:	200003bc 	.word	0x200003bc
 8007354:	20000284 	.word	0x20000284
 8007358:	080072c9 	.word	0x080072c9

0800735c <__sfp_lock_acquire>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__sfp_lock_acquire+0x8>)
 800735e:	f000 ba28 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	200003c5 	.word	0x200003c5

08007368 <__sfp_lock_release>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__sfp_lock_release+0x8>)
 800736a:	f000 ba23 	b.w	80077b4 <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	200003c5 	.word	0x200003c5

08007374 <__sinit>:
 8007374:	b510      	push	{r4, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	f7ff fff0 	bl	800735c <__sfp_lock_acquire>
 800737c:	6a23      	ldr	r3, [r4, #32]
 800737e:	b11b      	cbz	r3, 8007388 <__sinit+0x14>
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	f7ff bff0 	b.w	8007368 <__sfp_lock_release>
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <__sinit+0x28>)
 800738a:	6223      	str	r3, [r4, #32]
 800738c:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <__sinit+0x2c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f5      	bne.n	8007380 <__sinit+0xc>
 8007394:	f7ff ffc4 	bl	8007320 <global_stdio_init.part.0>
 8007398:	e7f2      	b.n	8007380 <__sinit+0xc>
 800739a:	bf00      	nop
 800739c:	080072e1 	.word	0x080072e1
 80073a0:	200003bc 	.word	0x200003bc

080073a4 <_fwalk_sglue>:
 80073a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	4607      	mov	r7, r0
 80073aa:	4688      	mov	r8, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	2600      	movs	r6, #0
 80073b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073b4:	f1b9 0901 	subs.w	r9, r9, #1
 80073b8:	d505      	bpl.n	80073c6 <_fwalk_sglue+0x22>
 80073ba:	6824      	ldr	r4, [r4, #0]
 80073bc:	2c00      	cmp	r4, #0
 80073be:	d1f7      	bne.n	80073b0 <_fwalk_sglue+0xc>
 80073c0:	4630      	mov	r0, r6
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d907      	bls.n	80073dc <_fwalk_sglue+0x38>
 80073cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073d0:	3301      	adds	r3, #1
 80073d2:	d003      	beq.n	80073dc <_fwalk_sglue+0x38>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	4306      	orrs	r6, r0
 80073dc:	3568      	adds	r5, #104	; 0x68
 80073de:	e7e9      	b.n	80073b4 <_fwalk_sglue+0x10>

080073e0 <getchar>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <getchar+0xc>)
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	6841      	ldr	r1, [r0, #4]
 80073e6:	f000 be99 	b.w	800811c <_getc_r>
 80073ea:	bf00      	nop
 80073ec:	200000a4 	.word	0x200000a4

080073f0 <iprintf>:
 80073f0:	b40f      	push	{r0, r1, r2, r3}
 80073f2:	b507      	push	{r0, r1, r2, lr}
 80073f4:	4906      	ldr	r1, [pc, #24]	; (8007410 <iprintf+0x20>)
 80073f6:	ab04      	add	r3, sp, #16
 80073f8:	6808      	ldr	r0, [r1, #0]
 80073fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fe:	6881      	ldr	r1, [r0, #8]
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	f000 fb21 	bl	8007a48 <_vfiprintf_r>
 8007406:	b003      	add	sp, #12
 8007408:	f85d eb04 	ldr.w	lr, [sp], #4
 800740c:	b004      	add	sp, #16
 800740e:	4770      	bx	lr
 8007410:	200000a4 	.word	0x200000a4

08007414 <putchar>:
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <putchar+0xc>)
 8007416:	4601      	mov	r1, r0
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	6882      	ldr	r2, [r0, #8]
 800741c:	f000 bf0b 	b.w	8008236 <_putc_r>
 8007420:	200000a4 	.word	0x200000a4

08007424 <setvbuf>:
 8007424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007428:	461d      	mov	r5, r3
 800742a:	4b54      	ldr	r3, [pc, #336]	; (800757c <setvbuf+0x158>)
 800742c:	681f      	ldr	r7, [r3, #0]
 800742e:	4604      	mov	r4, r0
 8007430:	460e      	mov	r6, r1
 8007432:	4690      	mov	r8, r2
 8007434:	b127      	cbz	r7, 8007440 <setvbuf+0x1c>
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	b913      	cbnz	r3, 8007440 <setvbuf+0x1c>
 800743a:	4638      	mov	r0, r7
 800743c:	f7ff ff9a 	bl	8007374 <__sinit>
 8007440:	f1b8 0f02 	cmp.w	r8, #2
 8007444:	d006      	beq.n	8007454 <setvbuf+0x30>
 8007446:	f1b8 0f01 	cmp.w	r8, #1
 800744a:	f200 8094 	bhi.w	8007576 <setvbuf+0x152>
 800744e:	2d00      	cmp	r5, #0
 8007450:	f2c0 8091 	blt.w	8007576 <setvbuf+0x152>
 8007454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007456:	07da      	lsls	r2, r3, #31
 8007458:	d405      	bmi.n	8007466 <setvbuf+0x42>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	059b      	lsls	r3, r3, #22
 800745e:	d402      	bmi.n	8007466 <setvbuf+0x42>
 8007460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007462:	f000 f9a6 	bl	80077b2 <__retarget_lock_acquire_recursive>
 8007466:	4621      	mov	r1, r4
 8007468:	4638      	mov	r0, r7
 800746a:	f000 fe1d 	bl	80080a8 <_fflush_r>
 800746e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007470:	b141      	cbz	r1, 8007484 <setvbuf+0x60>
 8007472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007476:	4299      	cmp	r1, r3
 8007478:	d002      	beq.n	8007480 <setvbuf+0x5c>
 800747a:	4638      	mov	r0, r7
 800747c:	f000 f9ba 	bl	80077f4 <_free_r>
 8007480:	2300      	movs	r3, #0
 8007482:	6363      	str	r3, [r4, #52]	; 0x34
 8007484:	2300      	movs	r3, #0
 8007486:	61a3      	str	r3, [r4, #24]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	0618      	lsls	r0, r3, #24
 800748e:	d503      	bpl.n	8007498 <setvbuf+0x74>
 8007490:	6921      	ldr	r1, [r4, #16]
 8007492:	4638      	mov	r0, r7
 8007494:	f000 f9ae 	bl	80077f4 <_free_r>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	f1b8 0f02 	cmp.w	r8, #2
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	d05f      	beq.n	800756a <setvbuf+0x146>
 80074aa:	ab01      	add	r3, sp, #4
 80074ac:	466a      	mov	r2, sp
 80074ae:	4621      	mov	r1, r4
 80074b0:	4638      	mov	r0, r7
 80074b2:	f000 fe5e 	bl	8008172 <__swhatbuf_r>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	4318      	orrs	r0, r3
 80074ba:	81a0      	strh	r0, [r4, #12]
 80074bc:	bb2d      	cbnz	r5, 800750a <setvbuf+0xe6>
 80074be:	9d00      	ldr	r5, [sp, #0]
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 f9e3 	bl	800788c <malloc>
 80074c6:	4606      	mov	r6, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d150      	bne.n	800756e <setvbuf+0x14a>
 80074cc:	f8dd 9000 	ldr.w	r9, [sp]
 80074d0:	45a9      	cmp	r9, r5
 80074d2:	d13e      	bne.n	8007552 <setvbuf+0x12e>
 80074d4:	f04f 35ff 	mov.w	r5, #4294967295
 80074d8:	2200      	movs	r2, #0
 80074da:	60a2      	str	r2, [r4, #8]
 80074dc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	6122      	str	r2, [r4, #16]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ea:	6162      	str	r2, [r4, #20]
 80074ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	07d1      	lsls	r1, r2, #31
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	d404      	bmi.n	8007502 <setvbuf+0xde>
 80074f8:	059b      	lsls	r3, r3, #22
 80074fa:	d402      	bmi.n	8007502 <setvbuf+0xde>
 80074fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074fe:	f000 f959 	bl	80077b4 <__retarget_lock_release_recursive>
 8007502:	4628      	mov	r0, r5
 8007504:	b003      	add	sp, #12
 8007506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800750a:	2e00      	cmp	r6, #0
 800750c:	d0d8      	beq.n	80074c0 <setvbuf+0x9c>
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	b913      	cbnz	r3, 8007518 <setvbuf+0xf4>
 8007512:	4638      	mov	r0, r7
 8007514:	f7ff ff2e 	bl	8007374 <__sinit>
 8007518:	f1b8 0f01 	cmp.w	r8, #1
 800751c:	bf08      	it	eq
 800751e:	89a3      	ldrheq	r3, [r4, #12]
 8007520:	6026      	str	r6, [r4, #0]
 8007522:	bf04      	itt	eq
 8007524:	f043 0301 	orreq.w	r3, r3, #1
 8007528:	81a3      	strheq	r3, [r4, #12]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f013 0208 	ands.w	r2, r3, #8
 8007530:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007534:	d01d      	beq.n	8007572 <setvbuf+0x14e>
 8007536:	07da      	lsls	r2, r3, #31
 8007538:	bf41      	itttt	mi
 800753a:	2200      	movmi	r2, #0
 800753c:	426d      	negmi	r5, r5
 800753e:	60a2      	strmi	r2, [r4, #8]
 8007540:	61a5      	strmi	r5, [r4, #24]
 8007542:	bf58      	it	pl
 8007544:	60a5      	strpl	r5, [r4, #8]
 8007546:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007548:	f015 0501 	ands.w	r5, r5, #1
 800754c:	d0d4      	beq.n	80074f8 <setvbuf+0xd4>
 800754e:	2500      	movs	r5, #0
 8007550:	e7d7      	b.n	8007502 <setvbuf+0xde>
 8007552:	4648      	mov	r0, r9
 8007554:	f000 f99a 	bl	800788c <malloc>
 8007558:	4606      	mov	r6, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d0ba      	beq.n	80074d4 <setvbuf+0xb0>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	464d      	mov	r5, r9
 8007568:	e7d1      	b.n	800750e <setvbuf+0xea>
 800756a:	2500      	movs	r5, #0
 800756c:	e7b4      	b.n	80074d8 <setvbuf+0xb4>
 800756e:	46a9      	mov	r9, r5
 8007570:	e7f5      	b.n	800755e <setvbuf+0x13a>
 8007572:	60a2      	str	r2, [r4, #8]
 8007574:	e7e7      	b.n	8007546 <setvbuf+0x122>
 8007576:	f04f 35ff 	mov.w	r5, #4294967295
 800757a:	e7c2      	b.n	8007502 <setvbuf+0xde>
 800757c:	200000a4 	.word	0x200000a4

08007580 <__sread>:
 8007580:	b510      	push	{r4, lr}
 8007582:	460c      	mov	r4, r1
 8007584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007588:	f000 f8c4 	bl	8007714 <_read_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	bfab      	itete	ge
 8007590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007592:	89a3      	ldrhlt	r3, [r4, #12]
 8007594:	181b      	addge	r3, r3, r0
 8007596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800759a:	bfac      	ite	ge
 800759c:	6563      	strge	r3, [r4, #84]	; 0x54
 800759e:	81a3      	strhlt	r3, [r4, #12]
 80075a0:	bd10      	pop	{r4, pc}

080075a2 <__swrite>:
 80075a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a6:	461f      	mov	r7, r3
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	05db      	lsls	r3, r3, #23
 80075ac:	4605      	mov	r5, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	4616      	mov	r6, r2
 80075b2:	d505      	bpl.n	80075c0 <__swrite+0x1e>
 80075b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b8:	2302      	movs	r3, #2
 80075ba:	2200      	movs	r2, #0
 80075bc:	f000 f898 	bl	80076f0 <_lseek_r>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	4632      	mov	r2, r6
 80075ce:	463b      	mov	r3, r7
 80075d0:	4628      	mov	r0, r5
 80075d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	f000 b8af 	b.w	8007738 <_write_r>

080075da <__sseek>:
 80075da:	b510      	push	{r4, lr}
 80075dc:	460c      	mov	r4, r1
 80075de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e2:	f000 f885 	bl	80076f0 <_lseek_r>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	bf15      	itete	ne
 80075ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80075ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075f6:	81a3      	strheq	r3, [r4, #12]
 80075f8:	bf18      	it	ne
 80075fa:	81a3      	strhne	r3, [r4, #12]
 80075fc:	bd10      	pop	{r4, pc}

080075fe <__sclose>:
 80075fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007602:	f000 b865 	b.w	80076d0 <_close_r>

08007606 <memset>:
 8007606:	4402      	add	r2, r0
 8007608:	4603      	mov	r3, r0
 800760a:	4293      	cmp	r3, r2
 800760c:	d100      	bne.n	8007610 <memset+0xa>
 800760e:	4770      	bx	lr
 8007610:	f803 1b01 	strb.w	r1, [r3], #1
 8007614:	e7f9      	b.n	800760a <memset+0x4>
	...

08007618 <strtok>:
 8007618:	4b16      	ldr	r3, [pc, #88]	; (8007674 <strtok+0x5c>)
 800761a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800761c:	681e      	ldr	r6, [r3, #0]
 800761e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007620:	4605      	mov	r5, r0
 8007622:	b9fc      	cbnz	r4, 8007664 <strtok+0x4c>
 8007624:	2050      	movs	r0, #80	; 0x50
 8007626:	9101      	str	r1, [sp, #4]
 8007628:	f000 f930 	bl	800788c <malloc>
 800762c:	9901      	ldr	r1, [sp, #4]
 800762e:	6470      	str	r0, [r6, #68]	; 0x44
 8007630:	4602      	mov	r2, r0
 8007632:	b920      	cbnz	r0, 800763e <strtok+0x26>
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <strtok+0x60>)
 8007636:	4811      	ldr	r0, [pc, #68]	; (800767c <strtok+0x64>)
 8007638:	215b      	movs	r1, #91	; 0x5b
 800763a:	f000 f8bd 	bl	80077b8 <__assert_func>
 800763e:	e9c0 4400 	strd	r4, r4, [r0]
 8007642:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007646:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800764a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800764e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007652:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007656:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800765a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800765e:	6184      	str	r4, [r0, #24]
 8007660:	7704      	strb	r4, [r0, #28]
 8007662:	6244      	str	r4, [r0, #36]	; 0x24
 8007664:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	b002      	add	sp, #8
 800766c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007670:	f000 b806 	b.w	8007680 <__strtok_r>
 8007674:	200000a4 	.word	0x200000a4
 8007678:	08008879 	.word	0x08008879
 800767c:	08008890 	.word	0x08008890

08007680 <__strtok_r>:
 8007680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007682:	b908      	cbnz	r0, 8007688 <__strtok_r+0x8>
 8007684:	6810      	ldr	r0, [r2, #0]
 8007686:	b188      	cbz	r0, 80076ac <__strtok_r+0x2c>
 8007688:	4604      	mov	r4, r0
 800768a:	4620      	mov	r0, r4
 800768c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007690:	460f      	mov	r7, r1
 8007692:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007696:	b91e      	cbnz	r6, 80076a0 <__strtok_r+0x20>
 8007698:	b965      	cbnz	r5, 80076b4 <__strtok_r+0x34>
 800769a:	6015      	str	r5, [r2, #0]
 800769c:	4628      	mov	r0, r5
 800769e:	e005      	b.n	80076ac <__strtok_r+0x2c>
 80076a0:	42b5      	cmp	r5, r6
 80076a2:	d1f6      	bne.n	8007692 <__strtok_r+0x12>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <__strtok_r+0xa>
 80076a8:	6014      	str	r4, [r2, #0]
 80076aa:	7003      	strb	r3, [r0, #0]
 80076ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ae:	461c      	mov	r4, r3
 80076b0:	e00c      	b.n	80076cc <__strtok_r+0x4c>
 80076b2:	b915      	cbnz	r5, 80076ba <__strtok_r+0x3a>
 80076b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076b8:	460e      	mov	r6, r1
 80076ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80076be:	42ab      	cmp	r3, r5
 80076c0:	d1f7      	bne.n	80076b2 <__strtok_r+0x32>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f3      	beq.n	80076ae <__strtok_r+0x2e>
 80076c6:	2300      	movs	r3, #0
 80076c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80076cc:	6014      	str	r4, [r2, #0]
 80076ce:	e7ed      	b.n	80076ac <__strtok_r+0x2c>

080076d0 <_close_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d06      	ldr	r5, [pc, #24]	; (80076ec <_close_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7f9 fda2 	bl	8001224 <_close>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_close_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_close_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	200003c0 	.word	0x200003c0

080076f0 <_lseek_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	; (8007710 <_lseek_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7f9 fda7 	bl	8001252 <_lseek>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_lseek_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_lseek_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	200003c0 	.word	0x200003c0

08007714 <_read_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	; (8007734 <_read_r+0x20>)
 8007718:	4604      	mov	r4, r0
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	2200      	movs	r2, #0
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7f9 fda6 	bl	8001274 <_read>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_read_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_read_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	200003c0 	.word	0x200003c0

08007738 <_write_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	; (8007758 <_write_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7f9 fd40 	bl	80011cc <_write>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_write_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_write_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200003c0 	.word	0x200003c0

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	200000a4 	.word	0x200000a4

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f000 ff40 	bl	8008600 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	08008964 	.word	0x08008964
 80077a4:	08008964 	.word	0x08008964
 80077a8:	08008964 	.word	0x08008964
 80077ac:	08008968 	.word	0x08008968

080077b0 <__retarget_lock_init_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_acquire_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__retarget_lock_release_recursive>:
 80077b4:	4770      	bx	lr
	...

080077b8 <__assert_func>:
 80077b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ba:	4614      	mov	r4, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <__assert_func+0x2c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4605      	mov	r5, r0
 80077c4:	68d8      	ldr	r0, [r3, #12]
 80077c6:	b14c      	cbz	r4, 80077dc <__assert_func+0x24>
 80077c8:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <__assert_func+0x30>)
 80077ca:	9100      	str	r1, [sp, #0]
 80077cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077d0:	4906      	ldr	r1, [pc, #24]	; (80077ec <__assert_func+0x34>)
 80077d2:	462b      	mov	r3, r5
 80077d4:	f000 fc90 	bl	80080f8 <fiprintf>
 80077d8:	f000 fe40 	bl	800845c <abort>
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <__assert_func+0x38>)
 80077de:	461c      	mov	r4, r3
 80077e0:	e7f3      	b.n	80077ca <__assert_func+0x12>
 80077e2:	bf00      	nop
 80077e4:	200000a4 	.word	0x200000a4
 80077e8:	080088ea 	.word	0x080088ea
 80077ec:	080088f7 	.word	0x080088f7
 80077f0:	08008925 	.word	0x08008925

080077f4 <_free_r>:
 80077f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d044      	beq.n	8007884 <_free_r+0x90>
 80077fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fe:	9001      	str	r0, [sp, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f1a1 0404 	sub.w	r4, r1, #4
 8007806:	bfb8      	it	lt
 8007808:	18e4      	addlt	r4, r4, r3
 800780a:	f000 f8e7 	bl	80079dc <__malloc_lock>
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <_free_r+0x94>)
 8007810:	9801      	ldr	r0, [sp, #4]
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	b933      	cbnz	r3, 8007824 <_free_r+0x30>
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	6014      	str	r4, [r2, #0]
 800781a:	b003      	add	sp, #12
 800781c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007820:	f000 b8e2 	b.w	80079e8 <__malloc_unlock>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d908      	bls.n	800783a <_free_r+0x46>
 8007828:	6825      	ldr	r5, [r4, #0]
 800782a:	1961      	adds	r1, r4, r5
 800782c:	428b      	cmp	r3, r1
 800782e:	bf01      	itttt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	1949      	addeq	r1, r1, r5
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	e7ed      	b.n	8007816 <_free_r+0x22>
 800783a:	461a      	mov	r2, r3
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b10b      	cbz	r3, 8007844 <_free_r+0x50>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d9fa      	bls.n	800783a <_free_r+0x46>
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	1855      	adds	r5, r2, r1
 8007848:	42a5      	cmp	r5, r4
 800784a:	d10b      	bne.n	8007864 <_free_r+0x70>
 800784c:	6824      	ldr	r4, [r4, #0]
 800784e:	4421      	add	r1, r4
 8007850:	1854      	adds	r4, r2, r1
 8007852:	42a3      	cmp	r3, r4
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	d1e0      	bne.n	800781a <_free_r+0x26>
 8007858:	681c      	ldr	r4, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	440c      	add	r4, r1
 8007860:	6014      	str	r4, [r2, #0]
 8007862:	e7da      	b.n	800781a <_free_r+0x26>
 8007864:	d902      	bls.n	800786c <_free_r+0x78>
 8007866:	230c      	movs	r3, #12
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	e7d6      	b.n	800781a <_free_r+0x26>
 800786c:	6825      	ldr	r5, [r4, #0]
 800786e:	1961      	adds	r1, r4, r5
 8007870:	428b      	cmp	r3, r1
 8007872:	bf04      	itt	eq
 8007874:	6819      	ldreq	r1, [r3, #0]
 8007876:	685b      	ldreq	r3, [r3, #4]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	bf04      	itt	eq
 800787c:	1949      	addeq	r1, r1, r5
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	6054      	str	r4, [r2, #4]
 8007882:	e7ca      	b.n	800781a <_free_r+0x26>
 8007884:	b003      	add	sp, #12
 8007886:	bd30      	pop	{r4, r5, pc}
 8007888:	200003c8 	.word	0x200003c8

0800788c <malloc>:
 800788c:	4b02      	ldr	r3, [pc, #8]	; (8007898 <malloc+0xc>)
 800788e:	4601      	mov	r1, r0
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	f000 b823 	b.w	80078dc <_malloc_r>
 8007896:	bf00      	nop
 8007898:	200000a4 	.word	0x200000a4

0800789c <sbrk_aligned>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4e0e      	ldr	r6, [pc, #56]	; (80078d8 <sbrk_aligned+0x3c>)
 80078a0:	460c      	mov	r4, r1
 80078a2:	6831      	ldr	r1, [r6, #0]
 80078a4:	4605      	mov	r5, r0
 80078a6:	b911      	cbnz	r1, 80078ae <sbrk_aligned+0x12>
 80078a8:	f000 fdc8 	bl	800843c <_sbrk_r>
 80078ac:	6030      	str	r0, [r6, #0]
 80078ae:	4621      	mov	r1, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f000 fdc3 	bl	800843c <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d00a      	beq.n	80078d0 <sbrk_aligned+0x34>
 80078ba:	1cc4      	adds	r4, r0, #3
 80078bc:	f024 0403 	bic.w	r4, r4, #3
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d007      	beq.n	80078d4 <sbrk_aligned+0x38>
 80078c4:	1a21      	subs	r1, r4, r0
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fdb8 	bl	800843c <_sbrk_r>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d101      	bne.n	80078d4 <sbrk_aligned+0x38>
 80078d0:	f04f 34ff 	mov.w	r4, #4294967295
 80078d4:	4620      	mov	r0, r4
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	200003cc 	.word	0x200003cc

080078dc <_malloc_r>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	1ccd      	adds	r5, r1, #3
 80078e2:	f025 0503 	bic.w	r5, r5, #3
 80078e6:	3508      	adds	r5, #8
 80078e8:	2d0c      	cmp	r5, #12
 80078ea:	bf38      	it	cc
 80078ec:	250c      	movcc	r5, #12
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	4607      	mov	r7, r0
 80078f2:	db01      	blt.n	80078f8 <_malloc_r+0x1c>
 80078f4:	42a9      	cmp	r1, r5
 80078f6:	d905      	bls.n	8007904 <_malloc_r+0x28>
 80078f8:	230c      	movs	r3, #12
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	2600      	movs	r6, #0
 80078fe:	4630      	mov	r0, r6
 8007900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079d8 <_malloc_r+0xfc>
 8007908:	f000 f868 	bl	80079dc <__malloc_lock>
 800790c:	f8d8 3000 	ldr.w	r3, [r8]
 8007910:	461c      	mov	r4, r3
 8007912:	bb5c      	cbnz	r4, 800796c <_malloc_r+0x90>
 8007914:	4629      	mov	r1, r5
 8007916:	4638      	mov	r0, r7
 8007918:	f7ff ffc0 	bl	800789c <sbrk_aligned>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	4604      	mov	r4, r0
 8007920:	d155      	bne.n	80079ce <_malloc_r+0xf2>
 8007922:	f8d8 4000 	ldr.w	r4, [r8]
 8007926:	4626      	mov	r6, r4
 8007928:	2e00      	cmp	r6, #0
 800792a:	d145      	bne.n	80079b8 <_malloc_r+0xdc>
 800792c:	2c00      	cmp	r4, #0
 800792e:	d048      	beq.n	80079c2 <_malloc_r+0xe6>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	4631      	mov	r1, r6
 8007934:	4638      	mov	r0, r7
 8007936:	eb04 0903 	add.w	r9, r4, r3
 800793a:	f000 fd7f 	bl	800843c <_sbrk_r>
 800793e:	4581      	cmp	r9, r0
 8007940:	d13f      	bne.n	80079c2 <_malloc_r+0xe6>
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	1a6d      	subs	r5, r5, r1
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ffa7 	bl	800789c <sbrk_aligned>
 800794e:	3001      	adds	r0, #1
 8007950:	d037      	beq.n	80079c2 <_malloc_r+0xe6>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	442b      	add	r3, r5
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	f8d8 3000 	ldr.w	r3, [r8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d038      	beq.n	80079d2 <_malloc_r+0xf6>
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	42a2      	cmp	r2, r4
 8007964:	d12b      	bne.n	80079be <_malloc_r+0xe2>
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	e00f      	b.n	800798c <_malloc_r+0xb0>
 800796c:	6822      	ldr	r2, [r4, #0]
 800796e:	1b52      	subs	r2, r2, r5
 8007970:	d41f      	bmi.n	80079b2 <_malloc_r+0xd6>
 8007972:	2a0b      	cmp	r2, #11
 8007974:	d917      	bls.n	80079a6 <_malloc_r+0xca>
 8007976:	1961      	adds	r1, r4, r5
 8007978:	42a3      	cmp	r3, r4
 800797a:	6025      	str	r5, [r4, #0]
 800797c:	bf18      	it	ne
 800797e:	6059      	strne	r1, [r3, #4]
 8007980:	6863      	ldr	r3, [r4, #4]
 8007982:	bf08      	it	eq
 8007984:	f8c8 1000 	streq.w	r1, [r8]
 8007988:	5162      	str	r2, [r4, r5]
 800798a:	604b      	str	r3, [r1, #4]
 800798c:	4638      	mov	r0, r7
 800798e:	f104 060b 	add.w	r6, r4, #11
 8007992:	f000 f829 	bl	80079e8 <__malloc_unlock>
 8007996:	f026 0607 	bic.w	r6, r6, #7
 800799a:	1d23      	adds	r3, r4, #4
 800799c:	1af2      	subs	r2, r6, r3
 800799e:	d0ae      	beq.n	80078fe <_malloc_r+0x22>
 80079a0:	1b9b      	subs	r3, r3, r6
 80079a2:	50a3      	str	r3, [r4, r2]
 80079a4:	e7ab      	b.n	80078fe <_malloc_r+0x22>
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	6862      	ldr	r2, [r4, #4]
 80079aa:	d1dd      	bne.n	8007968 <_malloc_r+0x8c>
 80079ac:	f8c8 2000 	str.w	r2, [r8]
 80079b0:	e7ec      	b.n	800798c <_malloc_r+0xb0>
 80079b2:	4623      	mov	r3, r4
 80079b4:	6864      	ldr	r4, [r4, #4]
 80079b6:	e7ac      	b.n	8007912 <_malloc_r+0x36>
 80079b8:	4634      	mov	r4, r6
 80079ba:	6876      	ldr	r6, [r6, #4]
 80079bc:	e7b4      	b.n	8007928 <_malloc_r+0x4c>
 80079be:	4613      	mov	r3, r2
 80079c0:	e7cc      	b.n	800795c <_malloc_r+0x80>
 80079c2:	230c      	movs	r3, #12
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4638      	mov	r0, r7
 80079c8:	f000 f80e 	bl	80079e8 <__malloc_unlock>
 80079cc:	e797      	b.n	80078fe <_malloc_r+0x22>
 80079ce:	6025      	str	r5, [r4, #0]
 80079d0:	e7dc      	b.n	800798c <_malloc_r+0xb0>
 80079d2:	605b      	str	r3, [r3, #4]
 80079d4:	deff      	udf	#255	; 0xff
 80079d6:	bf00      	nop
 80079d8:	200003c8 	.word	0x200003c8

080079dc <__malloc_lock>:
 80079dc:	4801      	ldr	r0, [pc, #4]	; (80079e4 <__malloc_lock+0x8>)
 80079de:	f7ff bee8 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 80079e2:	bf00      	nop
 80079e4:	200003c4 	.word	0x200003c4

080079e8 <__malloc_unlock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__malloc_unlock+0x8>)
 80079ea:	f7ff bee3 	b.w	80077b4 <__retarget_lock_release_recursive>
 80079ee:	bf00      	nop
 80079f0:	200003c4 	.word	0x200003c4

080079f4 <__sfputc_r>:
 80079f4:	6893      	ldr	r3, [r2, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	b410      	push	{r4}
 80079fc:	6093      	str	r3, [r2, #8]
 80079fe:	da08      	bge.n	8007a12 <__sfputc_r+0x1e>
 8007a00:	6994      	ldr	r4, [r2, #24]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	db01      	blt.n	8007a0a <__sfputc_r+0x16>
 8007a06:	290a      	cmp	r1, #10
 8007a08:	d103      	bne.n	8007a12 <__sfputc_r+0x1e>
 8007a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0e:	f000 bc5e 	b.w	80082ce <__swbuf_r>
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	1c58      	adds	r0, r3, #1
 8007a16:	6010      	str	r0, [r2, #0]
 8007a18:	7019      	strb	r1, [r3, #0]
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <__sfputs_r>:
 8007a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	18d5      	adds	r5, r2, r3
 8007a2c:	42ac      	cmp	r4, r5
 8007a2e:	d101      	bne.n	8007a34 <__sfputs_r+0x12>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e007      	b.n	8007a44 <__sfputs_r+0x22>
 8007a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffda 	bl	80079f4 <__sfputc_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d1f3      	bne.n	8007a2c <__sfputs_r+0xa>
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a48 <_vfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	b09d      	sub	sp, #116	; 0x74
 8007a50:	4614      	mov	r4, r2
 8007a52:	4698      	mov	r8, r3
 8007a54:	4606      	mov	r6, r0
 8007a56:	b118      	cbz	r0, 8007a60 <_vfiprintf_r+0x18>
 8007a58:	6a03      	ldr	r3, [r0, #32]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x18>
 8007a5c:	f7ff fc8a 	bl	8007374 <__sinit>
 8007a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d405      	bmi.n	8007a72 <_vfiprintf_r+0x2a>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d402      	bmi.n	8007a72 <_vfiprintf_r+0x2a>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6e:	f7ff fea0 	bl	80077b2 <__retarget_lock_acquire_recursive>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	071b      	lsls	r3, r3, #28
 8007a76:	d501      	bpl.n	8007a7c <_vfiprintf_r+0x34>
 8007a78:	692b      	ldr	r3, [r5, #16]
 8007a7a:	b99b      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x5c>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f000 fc62 	bl	8008348 <__swsetup_r>
 8007a84:	b170      	cbz	r0, 8007aa4 <_vfiprintf_r+0x5c>
 8007a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a88:	07dc      	lsls	r4, r3, #31
 8007a8a:	d504      	bpl.n	8007a96 <_vfiprintf_r+0x4e>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	b01d      	add	sp, #116	; 0x74
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	0598      	lsls	r0, r3, #22
 8007a9a:	d4f7      	bmi.n	8007a8c <_vfiprintf_r+0x44>
 8007a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9e:	f7ff fe89 	bl	80077b4 <__retarget_lock_release_recursive>
 8007aa2:	e7f3      	b.n	8007a8c <_vfiprintf_r+0x44>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab2:	2330      	movs	r3, #48	; 0x30
 8007ab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c68 <_vfiprintf_r+0x220>
 8007ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007abc:	f04f 0901 	mov.w	r9, #1
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	469a      	mov	sl, r3
 8007ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac8:	b10a      	cbz	r2, 8007ace <_vfiprintf_r+0x86>
 8007aca:	2a25      	cmp	r2, #37	; 0x25
 8007acc:	d1f9      	bne.n	8007ac2 <_vfiprintf_r+0x7a>
 8007ace:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad2:	d00b      	beq.n	8007aec <_vfiprintf_r+0xa4>
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffa1 	bl	8007a22 <__sfputs_r>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f000 80a9 	beq.w	8007c38 <_vfiprintf_r+0x1f0>
 8007ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae8:	445a      	add	r2, fp
 8007aea:	9209      	str	r2, [sp, #36]	; 0x24
 8007aec:	f89a 3000 	ldrb.w	r3, [sl]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80a1 	beq.w	8007c38 <_vfiprintf_r+0x1f0>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b00:	f10a 0a01 	add.w	sl, sl, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0e:	4654      	mov	r4, sl
 8007b10:	2205      	movs	r2, #5
 8007b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b16:	4854      	ldr	r0, [pc, #336]	; (8007c68 <_vfiprintf_r+0x220>)
 8007b18:	f7f8 fb6a 	bl	80001f0 <memchr>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	b9d8      	cbnz	r0, 8007b58 <_vfiprintf_r+0x110>
 8007b20:	06d1      	lsls	r1, r2, #27
 8007b22:	bf44      	itt	mi
 8007b24:	2320      	movmi	r3, #32
 8007b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2a:	0713      	lsls	r3, r2, #28
 8007b2c:	bf44      	itt	mi
 8007b2e:	232b      	movmi	r3, #43	; 0x2b
 8007b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3a:	d015      	beq.n	8007b68 <_vfiprintf_r+0x120>
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4654      	mov	r4, sl
 8007b40:	2000      	movs	r0, #0
 8007b42:	f04f 0c0a 	mov.w	ip, #10
 8007b46:	4621      	mov	r1, r4
 8007b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b4c:	3b30      	subs	r3, #48	; 0x30
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d94d      	bls.n	8007bee <_vfiprintf_r+0x1a6>
 8007b52:	b1b0      	cbz	r0, 8007b82 <_vfiprintf_r+0x13a>
 8007b54:	9207      	str	r2, [sp, #28]
 8007b56:	e014      	b.n	8007b82 <_vfiprintf_r+0x13a>
 8007b58:	eba0 0308 	sub.w	r3, r0, r8
 8007b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	46a2      	mov	sl, r4
 8007b66:	e7d2      	b.n	8007b0e <_vfiprintf_r+0xc6>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d19      	adds	r1, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9103      	str	r1, [sp, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfbb      	ittet	lt
 8007b74:	425b      	neglt	r3, r3
 8007b76:	f042 0202 	orrlt.w	r2, r2, #2
 8007b7a:	9307      	strge	r3, [sp, #28]
 8007b7c:	9307      	strlt	r3, [sp, #28]
 8007b7e:	bfb8      	it	lt
 8007b80:	9204      	strlt	r2, [sp, #16]
 8007b82:	7823      	ldrb	r3, [r4, #0]
 8007b84:	2b2e      	cmp	r3, #46	; 0x2e
 8007b86:	d10c      	bne.n	8007ba2 <_vfiprintf_r+0x15a>
 8007b88:	7863      	ldrb	r3, [r4, #1]
 8007b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8c:	d134      	bne.n	8007bf8 <_vfiprintf_r+0x1b0>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d1a      	adds	r2, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9203      	str	r2, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9e:	3402      	adds	r4, #2
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c78 <_vfiprintf_r+0x230>
 8007ba6:	7821      	ldrb	r1, [r4, #0]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb20 	bl	80001f0 <memchr>
 8007bb0:	b138      	cbz	r0, 8007bc2 <_vfiprintf_r+0x17a>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	eba0 000a 	sub.w	r0, r0, sl
 8007bb8:	2240      	movs	r2, #64	; 0x40
 8007bba:	4082      	lsls	r2, r0
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc6:	4829      	ldr	r0, [pc, #164]	; (8007c6c <_vfiprintf_r+0x224>)
 8007bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bcc:	2206      	movs	r2, #6
 8007bce:	f7f8 fb0f 	bl	80001f0 <memchr>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d03f      	beq.n	8007c56 <_vfiprintf_r+0x20e>
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <_vfiprintf_r+0x228>)
 8007bd8:	bb1b      	cbnz	r3, 8007c22 <_vfiprintf_r+0x1da>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	3307      	adds	r3, #7
 8007bde:	f023 0307 	bic.w	r3, r3, #7
 8007be2:	3308      	adds	r3, #8
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be8:	443b      	add	r3, r7
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	e768      	b.n	8007ac0 <_vfiprintf_r+0x78>
 8007bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7a6      	b.n	8007b46 <_vfiprintf_r+0xfe>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	3401      	adds	r4, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4620      	mov	r0, r4
 8007c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0a:	3a30      	subs	r2, #48	; 0x30
 8007c0c:	2a09      	cmp	r2, #9
 8007c0e:	d903      	bls.n	8007c18 <_vfiprintf_r+0x1d0>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0c6      	beq.n	8007ba2 <_vfiprintf_r+0x15a>
 8007c14:	9105      	str	r1, [sp, #20]
 8007c16:	e7c4      	b.n	8007ba2 <_vfiprintf_r+0x15a>
 8007c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f0      	b.n	8007c04 <_vfiprintf_r+0x1bc>
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <_vfiprintf_r+0x22c>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f3af 8000 	nop.w
 8007c32:	4607      	mov	r7, r0
 8007c34:	1c78      	adds	r0, r7, #1
 8007c36:	d1d6      	bne.n	8007be6 <_vfiprintf_r+0x19e>
 8007c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_vfiprintf_r+0x202>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_vfiprintf_r+0x202>
 8007c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c46:	f7ff fdb5 	bl	80077b4 <__retarget_lock_release_recursive>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	065b      	lsls	r3, r3, #25
 8007c4e:	f53f af1d 	bmi.w	8007a8c <_vfiprintf_r+0x44>
 8007c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c54:	e71c      	b.n	8007a90 <_vfiprintf_r+0x48>
 8007c56:	ab03      	add	r3, sp, #12
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <_vfiprintf_r+0x22c>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f879 	bl	8007d58 <_printf_i>
 8007c66:	e7e4      	b.n	8007c32 <_vfiprintf_r+0x1ea>
 8007c68:	08008926 	.word	0x08008926
 8007c6c:	08008930 	.word	0x08008930
 8007c70:	00000000 	.word	0x00000000
 8007c74:	08007a23 	.word	0x08007a23
 8007c78:	0800892c 	.word	0x0800892c

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4699      	mov	r9, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc8:	1e13      	subs	r3, r2, #0
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf02      	ittt	eq
 8007cee:	68e5      	ldreq	r5, [r4, #12]
 8007cf0:	6833      	ldreq	r3, [r6, #0]
 8007cf2:	1aed      	subeq	r5, r5, r3
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4649      	mov	r1, r9
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c0      	blx	r8
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	; 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d60:	2f78      	cmp	r7, #120	; 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	; 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d4 	beq.w	8007f22 <_printf_i+0x1ca>
 8007d7a:	2f58      	cmp	r7, #88	; 0x58
 8007d7c:	f000 80c0 	beq.w	8007f00 <_printf_i+0x1a8>
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	; (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f09 	.word	0x08007f09
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007ec3 	.word	0x08007ec3
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f2b 	.word	0x08007f2b
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007ecb 	.word	0x08007ecb
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09f      	b.n	8007f44 <_printf_i+0x1ec>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	0607      	lsls	r7, r0, #24
 8007e0a:	f103 0104 	add.w	r1, r3, #4
 8007e0e:	6029      	str	r1, [r5, #0]
 8007e10:	d501      	bpl.n	8007e16 <_printf_i+0xbe>
 8007e12:	681e      	ldr	r6, [r3, #0]
 8007e14:	e003      	b.n	8007e1e <_printf_i+0xc6>
 8007e16:	0646      	lsls	r6, r0, #25
 8007e18:	d5fb      	bpl.n	8007e12 <_printf_i+0xba>
 8007e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	da03      	bge.n	8007e2a <_printf_i+0xd2>
 8007e22:	232d      	movs	r3, #45	; 0x2d
 8007e24:	4276      	negs	r6, r6
 8007e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2a:	485a      	ldr	r0, [pc, #360]	; (8007f94 <_printf_i+0x23c>)
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	e012      	b.n	8007e56 <_printf_i+0xfe>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	6029      	str	r1, [r5, #0]
 8007e38:	0605      	lsls	r5, r0, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0xe8>
 8007e3c:	681e      	ldr	r6, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <_printf_i+0xee>
 8007e40:	0641      	lsls	r1, r0, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0xe4>
 8007e44:	881e      	ldrh	r6, [r3, #0]
 8007e46:	4853      	ldr	r0, [pc, #332]	; (8007f94 <_printf_i+0x23c>)
 8007e48:	2f6f      	cmp	r7, #111	; 0x6f
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2308      	moveq	r3, #8
 8007e4e:	230a      	movne	r3, #10
 8007e50:	2100      	movs	r1, #0
 8007e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e56:	6865      	ldr	r5, [r4, #4]
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	bfa2      	ittt	ge
 8007e5e:	6821      	ldrge	r1, [r4, #0]
 8007e60:	f021 0104 	bicge.w	r1, r1, #4
 8007e64:	6021      	strge	r1, [r4, #0]
 8007e66:	b90e      	cbnz	r6, 8007e6c <_printf_i+0x114>
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	d04b      	beq.n	8007f04 <_printf_i+0x1ac>
 8007e6c:	4615      	mov	r5, r2
 8007e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e72:	fb03 6711 	mls	r7, r3, r1, r6
 8007e76:	5dc7      	ldrb	r7, [r0, r7]
 8007e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e7c:	4637      	mov	r7, r6
 8007e7e:	42bb      	cmp	r3, r7
 8007e80:	460e      	mov	r6, r1
 8007e82:	d9f4      	bls.n	8007e6e <_printf_i+0x116>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d10b      	bne.n	8007ea0 <_printf_i+0x148>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07de      	lsls	r6, r3, #31
 8007e8c:	d508      	bpl.n	8007ea0 <_printf_i+0x148>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bfde      	ittt	le
 8007e96:	2330      	movle	r3, #48	; 0x30
 8007e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea0:	1b52      	subs	r2, r2, r5
 8007ea2:	6122      	str	r2, [r4, #16]
 8007ea4:	f8cd a000 	str.w	sl, [sp]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	aa03      	add	r2, sp, #12
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fee4 	bl	8007c7c <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d14a      	bne.n	8007f4e <_printf_i+0x1f6>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	b004      	add	sp, #16
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	4833      	ldr	r0, [pc, #204]	; (8007f98 <_printf_i+0x240>)
 8007ecc:	2778      	movs	r7, #120	; 0x78
 8007ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6829      	ldr	r1, [r5, #0]
 8007ed6:	061f      	lsls	r7, r3, #24
 8007ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007edc:	d402      	bmi.n	8007ee4 <_printf_i+0x18c>
 8007ede:	065f      	lsls	r7, r3, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b2b6      	uxthmi	r6, r6
 8007ee4:	07df      	lsls	r7, r3, #31
 8007ee6:	bf48      	it	mi
 8007ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8007eec:	6029      	str	r1, [r5, #0]
 8007eee:	bf48      	it	mi
 8007ef0:	6023      	strmi	r3, [r4, #0]
 8007ef2:	b91e      	cbnz	r6, 8007efc <_printf_i+0x1a4>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f023 0320 	bic.w	r3, r3, #32
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	2310      	movs	r3, #16
 8007efe:	e7a7      	b.n	8007e50 <_printf_i+0xf8>
 8007f00:	4824      	ldr	r0, [pc, #144]	; (8007f94 <_printf_i+0x23c>)
 8007f02:	e7e4      	b.n	8007ece <_printf_i+0x176>
 8007f04:	4615      	mov	r5, r2
 8007f06:	e7bd      	b.n	8007e84 <_printf_i+0x12c>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	6826      	ldr	r6, [r4, #0]
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6028      	str	r0, [r5, #0]
 8007f12:	0635      	lsls	r5, r6, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0x1c4>
 8007f18:	6019      	str	r1, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0x1ca>
 8007f1c:	0670      	lsls	r0, r6, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0x1c0>
 8007f20:	8019      	strh	r1, [r3, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	4615      	mov	r5, r2
 8007f28:	e7bc      	b.n	8007ea4 <_printf_i+0x14c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	602a      	str	r2, [r5, #0]
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 f95a 	bl	80001f0 <memchr>
 8007f3c:	b108      	cbz	r0, 8007f42 <_printf_i+0x1ea>
 8007f3e:	1b40      	subs	r0, r0, r5
 8007f40:	6060      	str	r0, [r4, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2300      	movs	r3, #0
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	e7aa      	b.n	8007ea4 <_printf_i+0x14c>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	462a      	mov	r2, r5
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d0ad      	beq.n	8007eb8 <_printf_i+0x160>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	d413      	bmi.n	8007f8a <_printf_i+0x232>
 8007f62:	68e0      	ldr	r0, [r4, #12]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	4298      	cmp	r0, r3
 8007f68:	bfb8      	it	lt
 8007f6a:	4618      	movlt	r0, r3
 8007f6c:	e7a6      	b.n	8007ebc <_printf_i+0x164>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d09d      	beq.n	8007eb8 <_printf_i+0x160>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	1a5b      	subs	r3, r3, r1
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dcf2      	bgt.n	8007f6e <_printf_i+0x216>
 8007f88:	e7eb      	b.n	8007f62 <_printf_i+0x20a>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	f104 0619 	add.w	r6, r4, #25
 8007f90:	e7f5      	b.n	8007f7e <_printf_i+0x226>
 8007f92:	bf00      	nop
 8007f94:	08008937 	.word	0x08008937
 8007f98:	08008948 	.word	0x08008948

08007f9c <__sflush_r>:
 8007f9c:	898a      	ldrh	r2, [r1, #12]
 8007f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	0710      	lsls	r0, r2, #28
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	d458      	bmi.n	800805c <__sflush_r+0xc0>
 8007faa:	684b      	ldr	r3, [r1, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc05      	bgt.n	8007fbc <__sflush_r+0x20>
 8007fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc02      	bgt.n	8007fbc <__sflush_r+0x20>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d0f9      	beq.n	8007fb6 <__sflush_r+0x1a>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fc8:	682f      	ldr	r7, [r5, #0]
 8007fca:	6a21      	ldr	r1, [r4, #32]
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	d032      	beq.n	8008036 <__sflush_r+0x9a>
 8007fd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	075a      	lsls	r2, r3, #29
 8007fd6:	d505      	bpl.n	8007fe4 <__sflush_r+0x48>
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	1ac0      	subs	r0, r0, r3
 8007fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fde:	b10b      	cbz	r3, 8007fe4 <__sflush_r+0x48>
 8007fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fe2:	1ac0      	subs	r0, r0, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fea:	6a21      	ldr	r1, [r4, #32]
 8007fec:	4628      	mov	r0, r5
 8007fee:	47b0      	blx	r6
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	d106      	bne.n	8008004 <__sflush_r+0x68>
 8007ff6:	6829      	ldr	r1, [r5, #0]
 8007ff8:	291d      	cmp	r1, #29
 8007ffa:	d82b      	bhi.n	8008054 <__sflush_r+0xb8>
 8007ffc:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <__sflush_r+0x108>)
 8007ffe:	410a      	asrs	r2, r1
 8008000:	07d6      	lsls	r6, r2, #31
 8008002:	d427      	bmi.n	8008054 <__sflush_r+0xb8>
 8008004:	2200      	movs	r2, #0
 8008006:	6062      	str	r2, [r4, #4]
 8008008:	04d9      	lsls	r1, r3, #19
 800800a:	6922      	ldr	r2, [r4, #16]
 800800c:	6022      	str	r2, [r4, #0]
 800800e:	d504      	bpl.n	800801a <__sflush_r+0x7e>
 8008010:	1c42      	adds	r2, r0, #1
 8008012:	d101      	bne.n	8008018 <__sflush_r+0x7c>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b903      	cbnz	r3, 800801a <__sflush_r+0x7e>
 8008018:	6560      	str	r0, [r4, #84]	; 0x54
 800801a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801c:	602f      	str	r7, [r5, #0]
 800801e:	2900      	cmp	r1, #0
 8008020:	d0c9      	beq.n	8007fb6 <__sflush_r+0x1a>
 8008022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008026:	4299      	cmp	r1, r3
 8008028:	d002      	beq.n	8008030 <__sflush_r+0x94>
 800802a:	4628      	mov	r0, r5
 800802c:	f7ff fbe2 	bl	80077f4 <_free_r>
 8008030:	2000      	movs	r0, #0
 8008032:	6360      	str	r0, [r4, #52]	; 0x34
 8008034:	e7c0      	b.n	8007fb8 <__sflush_r+0x1c>
 8008036:	2301      	movs	r3, #1
 8008038:	4628      	mov	r0, r5
 800803a:	47b0      	blx	r6
 800803c:	1c41      	adds	r1, r0, #1
 800803e:	d1c8      	bne.n	8007fd2 <__sflush_r+0x36>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0c5      	beq.n	8007fd2 <__sflush_r+0x36>
 8008046:	2b1d      	cmp	r3, #29
 8008048:	d001      	beq.n	800804e <__sflush_r+0xb2>
 800804a:	2b16      	cmp	r3, #22
 800804c:	d101      	bne.n	8008052 <__sflush_r+0xb6>
 800804e:	602f      	str	r7, [r5, #0]
 8008050:	e7b1      	b.n	8007fb6 <__sflush_r+0x1a>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	e7ad      	b.n	8007fb8 <__sflush_r+0x1c>
 800805c:	690f      	ldr	r7, [r1, #16]
 800805e:	2f00      	cmp	r7, #0
 8008060:	d0a9      	beq.n	8007fb6 <__sflush_r+0x1a>
 8008062:	0793      	lsls	r3, r2, #30
 8008064:	680e      	ldr	r6, [r1, #0]
 8008066:	bf08      	it	eq
 8008068:	694b      	ldreq	r3, [r1, #20]
 800806a:	600f      	str	r7, [r1, #0]
 800806c:	bf18      	it	ne
 800806e:	2300      	movne	r3, #0
 8008070:	eba6 0807 	sub.w	r8, r6, r7
 8008074:	608b      	str	r3, [r1, #8]
 8008076:	f1b8 0f00 	cmp.w	r8, #0
 800807a:	dd9c      	ble.n	8007fb6 <__sflush_r+0x1a>
 800807c:	6a21      	ldr	r1, [r4, #32]
 800807e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008080:	4643      	mov	r3, r8
 8008082:	463a      	mov	r2, r7
 8008084:	4628      	mov	r0, r5
 8008086:	47b0      	blx	r6
 8008088:	2800      	cmp	r0, #0
 800808a:	dc06      	bgt.n	800809a <__sflush_r+0xfe>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e78e      	b.n	8007fb8 <__sflush_r+0x1c>
 800809a:	4407      	add	r7, r0
 800809c:	eba8 0800 	sub.w	r8, r8, r0
 80080a0:	e7e9      	b.n	8008076 <__sflush_r+0xda>
 80080a2:	bf00      	nop
 80080a4:	dfbffffe 	.word	0xdfbffffe

080080a8 <_fflush_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b913      	cbnz	r3, 80080b8 <_fflush_r+0x10>
 80080b2:	2500      	movs	r5, #0
 80080b4:	4628      	mov	r0, r5
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	b118      	cbz	r0, 80080c2 <_fflush_r+0x1a>
 80080ba:	6a03      	ldr	r3, [r0, #32]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_fflush_r+0x1a>
 80080be:	f7ff f959 	bl	8007374 <__sinit>
 80080c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f3      	beq.n	80080b2 <_fflush_r+0xa>
 80080ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080cc:	07d0      	lsls	r0, r2, #31
 80080ce:	d404      	bmi.n	80080da <_fflush_r+0x32>
 80080d0:	0599      	lsls	r1, r3, #22
 80080d2:	d402      	bmi.n	80080da <_fflush_r+0x32>
 80080d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d6:	f7ff fb6c 	bl	80077b2 <__retarget_lock_acquire_recursive>
 80080da:	4628      	mov	r0, r5
 80080dc:	4621      	mov	r1, r4
 80080de:	f7ff ff5d 	bl	8007f9c <__sflush_r>
 80080e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080e4:	07da      	lsls	r2, r3, #31
 80080e6:	4605      	mov	r5, r0
 80080e8:	d4e4      	bmi.n	80080b4 <_fflush_r+0xc>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	059b      	lsls	r3, r3, #22
 80080ee:	d4e1      	bmi.n	80080b4 <_fflush_r+0xc>
 80080f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f2:	f7ff fb5f 	bl	80077b4 <__retarget_lock_release_recursive>
 80080f6:	e7dd      	b.n	80080b4 <_fflush_r+0xc>

080080f8 <fiprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b503      	push	{r0, r1, lr}
 80080fc:	4601      	mov	r1, r0
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <fiprintf+0x20>)
 8008102:	f853 2b04 	ldr.w	r2, [r3], #4
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f7ff fc9d 	bl	8007a48 <_vfiprintf_r>
 800810e:	b002      	add	sp, #8
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b003      	add	sp, #12
 8008116:	4770      	bx	lr
 8008118:	200000a4 	.word	0x200000a4

0800811c <_getc_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	4605      	mov	r5, r0
 8008122:	b118      	cbz	r0, 800812c <_getc_r+0x10>
 8008124:	6a03      	ldr	r3, [r0, #32]
 8008126:	b90b      	cbnz	r3, 800812c <_getc_r+0x10>
 8008128:	f7ff f924 	bl	8007374 <__sinit>
 800812c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800812e:	07d8      	lsls	r0, r3, #31
 8008130:	d405      	bmi.n	800813e <_getc_r+0x22>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	0599      	lsls	r1, r3, #22
 8008136:	d402      	bmi.n	800813e <_getc_r+0x22>
 8008138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800813a:	f7ff fb3a 	bl	80077b2 <__retarget_lock_acquire_recursive>
 800813e:	6863      	ldr	r3, [r4, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	da0f      	bge.n	8008168 <_getc_r+0x4c>
 8008148:	4628      	mov	r0, r5
 800814a:	4621      	mov	r1, r4
 800814c:	f000 f8a7 	bl	800829e <__srget_r>
 8008150:	4605      	mov	r5, r0
 8008152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008154:	07da      	lsls	r2, r3, #31
 8008156:	d405      	bmi.n	8008164 <_getc_r+0x48>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	059b      	lsls	r3, r3, #22
 800815c:	d402      	bmi.n	8008164 <_getc_r+0x48>
 800815e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008160:	f7ff fb28 	bl	80077b4 <__retarget_lock_release_recursive>
 8008164:	4628      	mov	r0, r5
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	781d      	ldrb	r5, [r3, #0]
 8008170:	e7ef      	b.n	8008152 <_getc_r+0x36>

08008172 <__swhatbuf_r>:
 8008172:	b570      	push	{r4, r5, r6, lr}
 8008174:	460c      	mov	r4, r1
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	2900      	cmp	r1, #0
 800817c:	b096      	sub	sp, #88	; 0x58
 800817e:	4615      	mov	r5, r2
 8008180:	461e      	mov	r6, r3
 8008182:	da0d      	bge.n	80081a0 <__swhatbuf_r+0x2e>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f013 0f80 	tst.w	r3, #128	; 0x80
 800818a:	f04f 0100 	mov.w	r1, #0
 800818e:	bf0c      	ite	eq
 8008190:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008194:	2340      	movne	r3, #64	; 0x40
 8008196:	2000      	movs	r0, #0
 8008198:	6031      	str	r1, [r6, #0]
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	b016      	add	sp, #88	; 0x58
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	466a      	mov	r2, sp
 80081a2:	f000 f929 	bl	80083f8 <_fstat_r>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	dbec      	blt.n	8008184 <__swhatbuf_r+0x12>
 80081aa:	9901      	ldr	r1, [sp, #4]
 80081ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081b4:	4259      	negs	r1, r3
 80081b6:	4159      	adcs	r1, r3
 80081b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081bc:	e7eb      	b.n	8008196 <__swhatbuf_r+0x24>

080081be <__smakebuf_r>:
 80081be:	898b      	ldrh	r3, [r1, #12]
 80081c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081c2:	079d      	lsls	r5, r3, #30
 80081c4:	4606      	mov	r6, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	d507      	bpl.n	80081da <__smakebuf_r+0x1c>
 80081ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	6123      	str	r3, [r4, #16]
 80081d2:	2301      	movs	r3, #1
 80081d4:	6163      	str	r3, [r4, #20]
 80081d6:	b002      	add	sp, #8
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	ab01      	add	r3, sp, #4
 80081dc:	466a      	mov	r2, sp
 80081de:	f7ff ffc8 	bl	8008172 <__swhatbuf_r>
 80081e2:	9900      	ldr	r1, [sp, #0]
 80081e4:	4605      	mov	r5, r0
 80081e6:	4630      	mov	r0, r6
 80081e8:	f7ff fb78 	bl	80078dc <_malloc_r>
 80081ec:	b948      	cbnz	r0, 8008202 <__smakebuf_r+0x44>
 80081ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f2:	059a      	lsls	r2, r3, #22
 80081f4:	d4ef      	bmi.n	80081d6 <__smakebuf_r+0x18>
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	f043 0302 	orr.w	r3, r3, #2
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	e7e3      	b.n	80081ca <__smakebuf_r+0xc>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	6020      	str	r0, [r4, #0]
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	9b01      	ldr	r3, [sp, #4]
 8008212:	6120      	str	r0, [r4, #16]
 8008214:	b15b      	cbz	r3, 800822e <__smakebuf_r+0x70>
 8008216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f8fe 	bl	800841c <_isatty_r>
 8008220:	b128      	cbz	r0, 800822e <__smakebuf_r+0x70>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	431d      	orrs	r5, r3
 8008232:	81a5      	strh	r5, [r4, #12]
 8008234:	e7cf      	b.n	80081d6 <__smakebuf_r+0x18>

08008236 <_putc_r>:
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	460d      	mov	r5, r1
 800823a:	4614      	mov	r4, r2
 800823c:	4606      	mov	r6, r0
 800823e:	b118      	cbz	r0, 8008248 <_putc_r+0x12>
 8008240:	6a03      	ldr	r3, [r0, #32]
 8008242:	b90b      	cbnz	r3, 8008248 <_putc_r+0x12>
 8008244:	f7ff f896 	bl	8007374 <__sinit>
 8008248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800824a:	07d8      	lsls	r0, r3, #31
 800824c:	d405      	bmi.n	800825a <_putc_r+0x24>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	0599      	lsls	r1, r3, #22
 8008252:	d402      	bmi.n	800825a <_putc_r+0x24>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f7ff faac 	bl	80077b2 <__retarget_lock_acquire_recursive>
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	3b01      	subs	r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	60a3      	str	r3, [r4, #8]
 8008262:	da05      	bge.n	8008270 <_putc_r+0x3a>
 8008264:	69a2      	ldr	r2, [r4, #24]
 8008266:	4293      	cmp	r3, r2
 8008268:	db12      	blt.n	8008290 <_putc_r+0x5a>
 800826a:	b2eb      	uxtb	r3, r5
 800826c:	2b0a      	cmp	r3, #10
 800826e:	d00f      	beq.n	8008290 <_putc_r+0x5a>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	701d      	strb	r5, [r3, #0]
 8008278:	b2ed      	uxtb	r5, r5
 800827a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800827c:	07da      	lsls	r2, r3, #31
 800827e:	d405      	bmi.n	800828c <_putc_r+0x56>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	059b      	lsls	r3, r3, #22
 8008284:	d402      	bmi.n	800828c <_putc_r+0x56>
 8008286:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008288:	f7ff fa94 	bl	80077b4 <__retarget_lock_release_recursive>
 800828c:	4628      	mov	r0, r5
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	4629      	mov	r1, r5
 8008292:	4622      	mov	r2, r4
 8008294:	4630      	mov	r0, r6
 8008296:	f000 f81a 	bl	80082ce <__swbuf_r>
 800829a:	4605      	mov	r5, r0
 800829c:	e7ed      	b.n	800827a <_putc_r+0x44>

0800829e <__srget_r>:
 800829e:	b538      	push	{r3, r4, r5, lr}
 80082a0:	460c      	mov	r4, r1
 80082a2:	4605      	mov	r5, r0
 80082a4:	b118      	cbz	r0, 80082ae <__srget_r+0x10>
 80082a6:	6a03      	ldr	r3, [r0, #32]
 80082a8:	b90b      	cbnz	r3, 80082ae <__srget_r+0x10>
 80082aa:	f7ff f863 	bl	8007374 <__sinit>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f8e9 	bl	8008488 <__srefill_r>
 80082b6:	b938      	cbnz	r0, 80082c8 <__srget_r+0x2a>
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	7818      	ldrb	r0, [r3, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	e7fb      	b.n	80082c6 <__srget_r+0x28>

080082ce <__swbuf_r>:
 80082ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d0:	460e      	mov	r6, r1
 80082d2:	4614      	mov	r4, r2
 80082d4:	4605      	mov	r5, r0
 80082d6:	b118      	cbz	r0, 80082e0 <__swbuf_r+0x12>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <__swbuf_r+0x12>
 80082dc:	f7ff f84a 	bl	8007374 <__sinit>
 80082e0:	69a3      	ldr	r3, [r4, #24]
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	071a      	lsls	r2, r3, #28
 80082e8:	d525      	bpl.n	8008336 <__swbuf_r+0x68>
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	b31b      	cbz	r3, 8008336 <__swbuf_r+0x68>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	1a98      	subs	r0, r3, r2
 80082f4:	6963      	ldr	r3, [r4, #20]
 80082f6:	b2f6      	uxtb	r6, r6
 80082f8:	4283      	cmp	r3, r0
 80082fa:	4637      	mov	r7, r6
 80082fc:	dc04      	bgt.n	8008308 <__swbuf_r+0x3a>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f7ff fed1 	bl	80080a8 <_fflush_r>
 8008306:	b9e0      	cbnz	r0, 8008342 <__swbuf_r+0x74>
 8008308:	68a3      	ldr	r3, [r4, #8]
 800830a:	3b01      	subs	r3, #1
 800830c:	60a3      	str	r3, [r4, #8]
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	701e      	strb	r6, [r3, #0]
 8008316:	6962      	ldr	r2, [r4, #20]
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	429a      	cmp	r2, r3
 800831c:	d004      	beq.n	8008328 <__swbuf_r+0x5a>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	07db      	lsls	r3, r3, #31
 8008322:	d506      	bpl.n	8008332 <__swbuf_r+0x64>
 8008324:	2e0a      	cmp	r6, #10
 8008326:	d104      	bne.n	8008332 <__swbuf_r+0x64>
 8008328:	4621      	mov	r1, r4
 800832a:	4628      	mov	r0, r5
 800832c:	f7ff febc 	bl	80080a8 <_fflush_r>
 8008330:	b938      	cbnz	r0, 8008342 <__swbuf_r+0x74>
 8008332:	4638      	mov	r0, r7
 8008334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008336:	4621      	mov	r1, r4
 8008338:	4628      	mov	r0, r5
 800833a:	f000 f805 	bl	8008348 <__swsetup_r>
 800833e:	2800      	cmp	r0, #0
 8008340:	d0d5      	beq.n	80082ee <__swbuf_r+0x20>
 8008342:	f04f 37ff 	mov.w	r7, #4294967295
 8008346:	e7f4      	b.n	8008332 <__swbuf_r+0x64>

08008348 <__swsetup_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <__swsetup_r+0xac>)
 800834c:	4605      	mov	r5, r0
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	460c      	mov	r4, r1
 8008352:	b118      	cbz	r0, 800835c <__swsetup_r+0x14>
 8008354:	6a03      	ldr	r3, [r0, #32]
 8008356:	b90b      	cbnz	r3, 800835c <__swsetup_r+0x14>
 8008358:	f7ff f80c 	bl	8007374 <__sinit>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008362:	0718      	lsls	r0, r3, #28
 8008364:	d422      	bmi.n	80083ac <__swsetup_r+0x64>
 8008366:	06d9      	lsls	r1, r3, #27
 8008368:	d407      	bmi.n	800837a <__swsetup_r+0x32>
 800836a:	2309      	movs	r3, #9
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	e034      	b.n	80083e4 <__swsetup_r+0x9c>
 800837a:	0758      	lsls	r0, r3, #29
 800837c:	d512      	bpl.n	80083a4 <__swsetup_r+0x5c>
 800837e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008380:	b141      	cbz	r1, 8008394 <__swsetup_r+0x4c>
 8008382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008386:	4299      	cmp	r1, r3
 8008388:	d002      	beq.n	8008390 <__swsetup_r+0x48>
 800838a:	4628      	mov	r0, r5
 800838c:	f7ff fa32 	bl	80077f4 <_free_r>
 8008390:	2300      	movs	r3, #0
 8008392:	6363      	str	r3, [r4, #52]	; 0x34
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	2300      	movs	r3, #0
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	6023      	str	r3, [r4, #0]
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f043 0308 	orr.w	r3, r3, #8
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	b94b      	cbnz	r3, 80083c4 <__swsetup_r+0x7c>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ba:	d003      	beq.n	80083c4 <__swsetup_r+0x7c>
 80083bc:	4621      	mov	r1, r4
 80083be:	4628      	mov	r0, r5
 80083c0:	f7ff fefd 	bl	80081be <__smakebuf_r>
 80083c4:	89a0      	ldrh	r0, [r4, #12]
 80083c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ca:	f010 0301 	ands.w	r3, r0, #1
 80083ce:	d00a      	beq.n	80083e6 <__swsetup_r+0x9e>
 80083d0:	2300      	movs	r3, #0
 80083d2:	60a3      	str	r3, [r4, #8]
 80083d4:	6963      	ldr	r3, [r4, #20]
 80083d6:	425b      	negs	r3, r3
 80083d8:	61a3      	str	r3, [r4, #24]
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	b943      	cbnz	r3, 80083f0 <__swsetup_r+0xa8>
 80083de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083e2:	d1c4      	bne.n	800836e <__swsetup_r+0x26>
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	0781      	lsls	r1, r0, #30
 80083e8:	bf58      	it	pl
 80083ea:	6963      	ldrpl	r3, [r4, #20]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	e7f4      	b.n	80083da <__swsetup_r+0x92>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e7f7      	b.n	80083e4 <__swsetup_r+0x9c>
 80083f4:	200000a4 	.word	0x200000a4

080083f8 <_fstat_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_fstat_r+0x20>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f7f8 ff5d 	bl	80012c4 <_fstat>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d102      	bne.n	8008414 <_fstat_r+0x1c>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b103      	cbz	r3, 8008414 <_fstat_r+0x1c>
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	200003c0 	.word	0x200003c0

0800841c <_isatty_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d06      	ldr	r5, [pc, #24]	; (8008438 <_isatty_r+0x1c>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f8 feba 	bl	80011a0 <_isatty>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_isatty_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_isatty_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200003c0 	.word	0x200003c0

0800843c <_sbrk_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_sbrk_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f9 f94e 	bl	80016e8 <_sbrk>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_sbrk_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_sbrk_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	200003c0 	.word	0x200003c0

0800845c <abort>:
 800845c:	b508      	push	{r3, lr}
 800845e:	2006      	movs	r0, #6
 8008460:	f000 f8b2 	bl	80085c8 <raise>
 8008464:	2001      	movs	r0, #1
 8008466:	f7f9 f935 	bl	80016d4 <_exit>
	...

0800846c <lflush>:
 800846c:	898b      	ldrh	r3, [r1, #12]
 800846e:	f003 0309 	and.w	r3, r3, #9
 8008472:	2b09      	cmp	r3, #9
 8008474:	d103      	bne.n	800847e <lflush+0x12>
 8008476:	4b03      	ldr	r3, [pc, #12]	; (8008484 <lflush+0x18>)
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f7ff be15 	b.w	80080a8 <_fflush_r>
 800847e:	2000      	movs	r0, #0
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200000a4 	.word	0x200000a4

08008488 <__srefill_r>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	460c      	mov	r4, r1
 800848c:	4605      	mov	r5, r0
 800848e:	b118      	cbz	r0, 8008498 <__srefill_r+0x10>
 8008490:	6a03      	ldr	r3, [r0, #32]
 8008492:	b90b      	cbnz	r3, 8008498 <__srefill_r+0x10>
 8008494:	f7fe ff6e 	bl	8007374 <__sinit>
 8008498:	2300      	movs	r3, #0
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084a2:	069e      	lsls	r6, r3, #26
 80084a4:	d502      	bpl.n	80084ac <__srefill_r+0x24>
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	e05c      	b.n	8008566 <__srefill_r+0xde>
 80084ac:	0758      	lsls	r0, r3, #29
 80084ae:	d448      	bmi.n	8008542 <__srefill_r+0xba>
 80084b0:	06d9      	lsls	r1, r3, #27
 80084b2:	d405      	bmi.n	80084c0 <__srefill_r+0x38>
 80084b4:	2309      	movs	r3, #9
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	e7f2      	b.n	80084a6 <__srefill_r+0x1e>
 80084c0:	071a      	lsls	r2, r3, #28
 80084c2:	d50b      	bpl.n	80084dc <__srefill_r+0x54>
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7ff fdee 	bl	80080a8 <_fflush_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d1ea      	bne.n	80084a6 <__srefill_r+0x1e>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	60a0      	str	r0, [r4, #8]
 80084d4:	f023 0308 	bic.w	r3, r3, #8
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	61a0      	str	r0, [r4, #24]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f043 0304 	orr.w	r3, r3, #4
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	b91b      	cbnz	r3, 80084f0 <__srefill_r+0x68>
 80084e8:	4621      	mov	r1, r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f7ff fe67 	bl	80081be <__smakebuf_r>
 80084f0:	89a6      	ldrh	r6, [r4, #12]
 80084f2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80084f6:	07b3      	lsls	r3, r6, #30
 80084f8:	d00f      	beq.n	800851a <__srefill_r+0x92>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4a1b      	ldr	r2, [pc, #108]	; (800856c <__srefill_r+0xe4>)
 80084fe:	491c      	ldr	r1, [pc, #112]	; (8008570 <__srefill_r+0xe8>)
 8008500:	481c      	ldr	r0, [pc, #112]	; (8008574 <__srefill_r+0xec>)
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	f006 0609 	and.w	r6, r6, #9
 8008508:	f7fe ff4c 	bl	80073a4 <_fwalk_sglue>
 800850c:	2e09      	cmp	r6, #9
 800850e:	81a7      	strh	r7, [r4, #12]
 8008510:	d103      	bne.n	800851a <__srefill_r+0x92>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f7ff fd41 	bl	8007f9c <__sflush_r>
 800851a:	6922      	ldr	r2, [r4, #16]
 800851c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800851e:	6963      	ldr	r3, [r4, #20]
 8008520:	6a21      	ldr	r1, [r4, #32]
 8008522:	6022      	str	r2, [r4, #0]
 8008524:	4628      	mov	r0, r5
 8008526:	47b0      	blx	r6
 8008528:	2800      	cmp	r0, #0
 800852a:	6060      	str	r0, [r4, #4]
 800852c:	dc1c      	bgt.n	8008568 <__srefill_r+0xe0>
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	bf17      	itett	ne
 8008534:	2200      	movne	r2, #0
 8008536:	f043 0320 	orreq.w	r3, r3, #32
 800853a:	6062      	strne	r2, [r4, #4]
 800853c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008540:	e7bc      	b.n	80084bc <__srefill_r+0x34>
 8008542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008544:	2900      	cmp	r1, #0
 8008546:	d0cd      	beq.n	80084e4 <__srefill_r+0x5c>
 8008548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800854c:	4299      	cmp	r1, r3
 800854e:	d002      	beq.n	8008556 <__srefill_r+0xce>
 8008550:	4628      	mov	r0, r5
 8008552:	f7ff f94f 	bl	80077f4 <_free_r>
 8008556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	2000      	movs	r0, #0
 800855c:	6360      	str	r0, [r4, #52]	; 0x34
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0c0      	beq.n	80084e4 <__srefill_r+0x5c>
 8008562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008568:	2000      	movs	r0, #0
 800856a:	e7fc      	b.n	8008566 <__srefill_r+0xde>
 800856c:	2000004c 	.word	0x2000004c
 8008570:	0800846d 	.word	0x0800846d
 8008574:	20000058 	.word	0x20000058

08008578 <_raise_r>:
 8008578:	291f      	cmp	r1, #31
 800857a:	b538      	push	{r3, r4, r5, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	d904      	bls.n	800858c <_raise_r+0x14>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800858e:	b112      	cbz	r2, 8008596 <_raise_r+0x1e>
 8008590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008594:	b94b      	cbnz	r3, 80085aa <_raise_r+0x32>
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f830 	bl	80085fc <_getpid_r>
 800859c:	462a      	mov	r2, r5
 800859e:	4601      	mov	r1, r0
 80085a0:	4620      	mov	r0, r4
 80085a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a6:	f000 b817 	b.w	80085d8 <_kill_r>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d00a      	beq.n	80085c4 <_raise_r+0x4c>
 80085ae:	1c59      	adds	r1, r3, #1
 80085b0:	d103      	bne.n	80085ba <_raise_r+0x42>
 80085b2:	2316      	movs	r3, #22
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7e7      	b.n	800858a <_raise_r+0x12>
 80085ba:	2400      	movs	r4, #0
 80085bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c0:	4628      	mov	r0, r5
 80085c2:	4798      	blx	r3
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7e0      	b.n	800858a <_raise_r+0x12>

080085c8 <raise>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <raise+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f7ff bfd3 	b.w	8008578 <_raise_r>
 80085d2:	bf00      	nop
 80085d4:	200000a4 	.word	0x200000a4

080085d8 <_kill_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	; (80085f8 <_kill_r+0x20>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	f7f9 f865 	bl	80016b4 <_kill>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d102      	bne.n	80085f4 <_kill_r+0x1c>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b103      	cbz	r3, 80085f4 <_kill_r+0x1c>
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	200003c0 	.word	0x200003c0

080085fc <_getpid_r>:
 80085fc:	f7f9 b852 	b.w	80016a4 <_getpid>

08008600 <_init>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

0800860c <_fini>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr
