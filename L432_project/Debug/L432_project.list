
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d00  08009d00  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d08  08009d08  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d0c  08009d0c  00019d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08009d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200000e0  08009df0  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08009df0  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3d1  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000413a  00000000  00000000  0003c524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  00040660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001341  00000000  00000000  00041f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002662e  00000000  00000000  00043291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2de  00000000  00000000  000698bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4bfc  00000000  00000000  00087b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000751c  00000000  00000000  0016c79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00173cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800991c 	.word	0x0800991c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	0800991c 	.word	0x0800991c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f005 fb63 	bl	8005c68 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f005 fa79 	bl	8005aa2 <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f008 f8a6 	bl	800870c <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f008 f89e 	bl	800870c <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f008 f89b 	bl	800870c <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	08009934 	.word	0x08009934
 80005ec:	08009944 	.word	0x08009944
 80005f0:	08009954 	.word	0x08009954

080005f4 <help_command>:
	{"sample",sample_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <help_command+0x54>)
 80005fe:	f008 f885 	bl	800870c <iprintf>
	printf("help\n\r");
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <help_command+0x58>)
 8000604:	f008 f882 	bl	800870c <iprintf>
	printf("lof\n\r");
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <help_command+0x5c>)
 800060a:	f008 f87f 	bl	800870c <iprintf>
	printf("lon\n\r");
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <help_command+0x60>)
 8000610:	f008 f87c 	bl	800870c <iprintf>
	printf("test\n\r");
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <help_command+0x64>)
 8000616:	f008 f879 	bl	800870c <iprintf>
	printf("ts\n\r");
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <help_command+0x68>)
 800061c:	f008 f876 	bl	800870c <iprintf>
	printf("ds\n\r");
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <help_command+0x6c>)
 8000622:	f008 f873 	bl	800870c <iprintf>
	printf("tsl237\n\r");
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <help_command+0x70>)
 8000628:	f008 f870 	bl	800870c <iprintf>
	printf("temp\n\r");
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <help_command+0x74>)
 800062e:	f008 f86d 	bl	800870c <iprintf>
	printf("battery\n\r");
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <help_command+0x78>)
 8000634:	f008 f86a 	bl	800870c <iprintf>
	printf("sample\n\r");
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <help_command+0x7c>)
 800063a:	f008 f867 	bl	800870c <iprintf>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	0800999c 	.word	0x0800999c
 800064c:	080099b4 	.word	0x080099b4
 8000650:	080099bc 	.word	0x080099bc
 8000654:	080099c4 	.word	0x080099c4
 8000658:	080099cc 	.word	0x080099cc
 800065c:	080099d4 	.word	0x080099d4
 8000660:	080099dc 	.word	0x080099dc
 8000664:	080099e4 	.word	0x080099e4
 8000668:	080099f0 	.word	0x080099f0
 800066c:	080099f8 	.word	0x080099f8
 8000670:	08009a04 	.word	0x08009a04

08000674 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2108      	movs	r1, #8
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <lof_command+0x1c>)
 8000682:	f003 ff2d 	bl	80044e0 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	48000400 	.word	0x48000400

08000694 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2108      	movs	r1, #8
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <lon_command+0x1c>)
 80006a2:	f003 ff1d 	bl	80044e0 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400

080006b4 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <test_command+0x40>)
 80006be:	f008 f825 	bl	800870c <iprintf>
	if (arguments) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d011      	beq.n	80006ec <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 80006c8:	490b      	ldr	r1, [pc, #44]	; (80006f8 <test_command+0x44>)
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f008 f932 	bl	8008934 <strtok>
 80006d0:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006d2:	e008      	b.n	80006e6 <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <test_command+0x48>)
 80006d8:	f008 f818 	bl	800870c <iprintf>
			pt = strtok (NULL, ",");
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <test_command+0x44>)
 80006de:	2000      	movs	r0, #0
 80006e0:	f008 f928 	bl	8008934 <strtok>
 80006e4:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f3      	bne.n	80006d4 <test_command+0x20>
		}
	}
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08009a10 	.word	0x08009a10
 80006f8:	08009a20 	.word	0x08009a20
 80006fc:	08009a24 	.word	0x08009a24

08000700 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800070e:	492a      	ldr	r1, [pc, #168]	; (80007b8 <ts_command+0xb8>)
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f008 f90f 	bl	8008934 <strtok>
 8000716:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	e014      	b.n	8000748 <ts_command+0x48>
			if (pt != NULL) {
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00e      	beq.n	8000742 <ts_command+0x42>
				t[i] = atoi(pt);
 8000724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000726:	f007 fe96 	bl	8008456 <atoi>
 800072a:	4602      	mov	r2, r0
 800072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	443b      	add	r3, r7
 8000734:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000738:	491f      	ldr	r1, [pc, #124]	; (80007b8 <ts_command+0xb8>)
 800073a:	2000      	movs	r0, #0
 800073c:	f008 f8fa 	bl	8008934 <strtok>
 8000740:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	3301      	adds	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	2b02      	cmp	r3, #2
 800074c:	dde7      	ble.n	800071e <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d029      	beq.n	80007a8 <ts_command+0xa8>
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db26      	blt.n	80007a8 <ts_command+0xa8>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b17      	cmp	r3, #23
 800075e:	dc23      	bgt.n	80007a8 <ts_command+0xa8>
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d020      	beq.n	80007a8 <ts_command+0xa8>
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db1d      	blt.n	80007a8 <ts_command+0xa8>
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	2b3b      	cmp	r3, #59	; 0x3b
 8000770:	dc1a      	bgt.n	80007a8 <ts_command+0xa8>
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	2b00      	cmp	r3, #0
 8000776:	d017      	beq.n	80007a8 <ts_command+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	2b00      	cmp	r3, #0
 800077c:	db14      	blt.n	80007a8 <ts_command+0xa8>
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	2b3b      	cmp	r3, #59	; 0x3b
 8000782:	dc11      	bgt.n	80007a8 <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <ts_command+0xbc>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <ts_command+0xc0>)
 80007a2:	f005 f8e1 	bl	8005968 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 80007a6:	e003      	b.n	80007b0 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ts_command+0xc4>)
 80007aa:	f007 ffaf 	bl	800870c <iprintf>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08009a20 	.word	0x08009a20
 80007bc:	200000fc 	.word	0x200000fc
 80007c0:	2000017c 	.word	0x2000017c
 80007c4:	08009a2c 	.word	0x08009a2c

080007c8 <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01f      	beq.n	8000816 <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80007d6:	4924      	ldr	r1, [pc, #144]	; (8000868 <ds_command+0xa0>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f008 f8ab 	bl	8008934 <strtok>
 80007de:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	e014      	b.n	8000810 <ds_command+0x48>
			if (pt != NULL) {
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <ds_command+0x42>
				d[i] = atoi(pt);
 80007ec:	69f8      	ldr	r0, [r7, #28]
 80007ee:	f007 fe32 	bl	8008456 <atoi>
 80007f2:	4602      	mov	r2, r0
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	3320      	adds	r3, #32
 80007fa:	443b      	add	r3, r7
 80007fc:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000800:	4919      	ldr	r1, [pc, #100]	; (8000868 <ds_command+0xa0>)
 8000802:	2000      	movs	r0, #0
 8000804:	f008 f896 	bl	8008934 <strtok>
 8000808:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	3301      	adds	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2b02      	cmp	r3, #2
 8000814:	dde7      	ble.n	80007e6 <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d01d      	beq.n	8000858 <ds_command+0x90>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd1a      	ble.n	8000858 <ds_command+0x90>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b0c      	cmp	r3, #12
 8000826:	dc17      	bgt.n	8000858 <ds_command+0x90>
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d014      	beq.n	8000858 <ds_command+0x90>
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d011      	beq.n	8000858 <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <ds_command+0xa4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <ds_command+0xa8>)
 8000852:	f005 f982 	bl	8005b5a <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000856:	e003      	b.n	8000860 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <ds_command+0xac>)
 800085a:	f007 ff57 	bl	800870c <iprintf>
	}
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08009a20 	.word	0x08009a20
 800086c:	200000fc 	.word	0x200000fc
 8000870:	2000017c 	.word	0x2000017c
 8000874:	08009a2c 	.word	0x08009a2c

08000878 <tsl237_command>:

extern float tsl237_clock_frequency;

void __attribute__((weak)) tsl237_command(char *arguments) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  int freqInt = tsl237_clock_frequency * 1000;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <tsl237_command+0x5c>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008d8 <tsl237_command+0x60>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000892:	ee17 3a90 	vmov	r3, s15
 8000896:	617b      	str	r3, [r7, #20]
  int freqFirst = freqInt / 1000;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <tsl237_command+0x64>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1192      	asrs	r2, r2, #6
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	613b      	str	r3, [r7, #16]
  int freqSecond = freqInt % 1000;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <tsl237_command+0x64>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1191      	asrs	r1, r2, #6
 80008b2:	17da      	asrs	r2, r3, #31
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ba:	fb01 f202 	mul.w	r2, r1, r2
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  printf("%d.%d hz\n\r", freqFirst, freqSecond);
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	6939      	ldr	r1, [r7, #16]
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <tsl237_command+0x68>)
 80008c8:	f007 ff20 	bl	800870c <iprintf>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200002bc 	.word	0x200002bc
 80008d8:	447a0000 	.word	0x447a0000
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	08009a34 	.word	0x08009a34

080008e4 <temp_command>:

extern sensorval_t mySensors;

void __attribute__((weak)) temp_command(char *arguments) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	printf("%ld C\n\r", mySensors.temperature);
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <temp_command+0x1c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <temp_command+0x20>)
 80008f4:	f007 ff0a 	bl	800870c <iprintf>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002c0 	.word	0x200002c0
 8000904:	08009a40 	.word	0x08009a40

08000908 <battery_command>:

void __attribute__((weak)) battery_command(char *arguments) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	int battInt = mySensors.vdda_value;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <battery_command+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	617b      	str	r3, [r7, #20]
	int battFirst = battInt / 1000;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <battery_command+0x50>)
 800091a:	fb82 1203 	smull	r1, r2, r2, r3
 800091e:	1192      	asrs	r2, r2, #6
 8000920:	17db      	asrs	r3, r3, #31
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	613b      	str	r3, [r7, #16]
	int battSecond = battInt % 1000;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <battery_command+0x50>)
 800092a:	fb82 1203 	smull	r1, r2, r2, r3
 800092e:	1191      	asrs	r1, r2, #6
 8000930:	17da      	asrs	r2, r3, #31
 8000932:	1a8a      	subs	r2, r1, r2
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	fb01 f202 	mul.w	r2, r1, r2
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  printf("%d.%d V\n\r", battFirst, battSecond);
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <battery_command+0x54>)
 8000946:	f007 fee1 	bl	800870c <iprintf>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002c0 	.word	0x200002c0
 8000958:	10624dd3 	.word	0x10624dd3
 800095c:	08009a48 	.word	0x08009a48

08000960 <sample_command>:

void __attribute__((weak)) sample_command(char *arguments) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <get_commands+0xc8>)
 8000982:	f000 ff0b 	bl	800179c <dequeue>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 800098a:	e03a      	b.n	8000a02 <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d027      	beq.n	80009e2 <get_commands+0x6e>
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b0d      	cmp	r3, #13
 8000996:	d024      	beq.n	80009e2 <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b7f      	cmp	r3, #127	; 0x7f
 800099c:	d10c      	bne.n	80009b8 <get_commands+0x44>
        if (counter > 0) {
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <get_commands+0xcc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d021      	beq.n	80009ea <get_commands+0x76>
            printf("\b \b");
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <get_commands+0xd0>)
 80009a8:	f007 feb0 	bl	800870c <iprintf>
            counter--;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <get_commands+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <get_commands+0xcc>)
 80009b4:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80009b6:	e018      	b.n	80009ea <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 feb8 	bl	8008730 <putchar>
        command_buf[counter++]=ch;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <get_commands+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	491e      	ldr	r1, [pc, #120]	; (8000a40 <get_commands+0xcc>)
 80009c8:	600a      	str	r2, [r1, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <get_commands+0xcc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b1d      	cmp	r3, #29
 80009d8:	d907      	bls.n	80009ea <get_commands+0x76>
          mode=COMPLETE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <get_commands+0xd4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
          break;
 80009e0:	e012      	b.n	8000a08 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <get_commands+0xd4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
      break;
 80009e8:	e00e      	b.n	8000a08 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80009ea:	bf00      	nop
    }
    mask = disable();
 80009ec:	f000 faa8 	bl	8000f40 <disable>
 80009f0:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <get_commands+0xc8>)
 80009f4:	f000 fed2 	bl	800179c <dequeue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f000 fab2 	bl	8000f66 <restore>
  while (ch!=0) {
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1c1      	bne.n	800098c <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <get_commands+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d110      	bne.n	8000a32 <get_commands+0xbe>
    command_buf[counter] = 0;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <get_commands+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <get_commands+0xd8>)
 8000a1e:	f007 fe75 	bl	800870c <iprintf>
    counter = 0;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <get_commands+0xcc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <get_commands+0xd4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
    return(1);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <get_commands+0xc0>
  }
  else {
    return(0);
 8000a32:	2300      	movs	r3, #0
  }
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000274 	.word	0x20000274
 8000a40:	20000100 	.word	0x20000100
 8000a44:	08009a54 	.word	0x08009a54
 8000a48:	20000104 	.word	0x20000104
 8000a4c:	08009a58 	.word	0x08009a58

08000a50 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <parse_command+0x1e>
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <parse_command+0x1e>
     (!command) ||
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <parse_command+0x24>
     (!args)) {
    return (-1);
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e01e      	b.n	8000ab2 <parse_command+0x62>
  }
  *command = line;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	601a      	str	r2, [r3, #0]
  p = line;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a7e:	e00b      	b.n	8000a98 <parse_command+0x48>
    if (!*p) {
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <parse_command+0x42>
      *args = '\0';
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
      return(0);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e00f      	b.n	8000ab2 <parse_command+0x62>
    }
    p++;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a9e:	d1ef      	bne.n	8000a80 <parse_command+0x30>
  }
  *p++ = '\0';
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	617a      	str	r2, [r7, #20]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	601a      	str	r2, [r3, #0]
  return (0);
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <execute_command+0x98>)
 8000aca:	617b      	str	r3, [r7, #20]
  int success = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <execute_command+0x1c>
    return (-1);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e038      	b.n	8000b4e <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000adc:	f107 0208 	add.w	r2, r7, #8
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb2 	bl	8000a50 <parse_command>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af2:	d121      	bne.n	8000b38 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <execute_command+0x9c>)
 8000af6:	f007 fe09 	bl	800870c <iprintf>
    return (-1);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e026      	b.n	8000b4e <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb61 	bl	80001d0 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10e      	bne.n	8000b32 <execute_command+0x72>
      if (!p->cmd_function) {
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <execute_command+0x62>
        return (-1);
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	e015      	b.n	8000b4e <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4798      	blx	r3
      success = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
      break;
 8000b30:	e006      	b.n	8000b40 <execute_command+0x80>
    }
    p++;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3308      	adds	r3, #8
 8000b36:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1df      	bne.n	8000b00 <execute_command+0x40>
  }
  if (success) {
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <execute_command+0x8a>
    return (0);
 8000b46:	2300      	movs	r3, #0
 8000b48:	e001      	b.n	8000b4e <execute_command+0x8e>
  }
  else {
    return (-1);
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	08009a5c 	.word	0x08009a5c

08000b60 <flash_erase>:
extern flash_status_t fs;

extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim2;

int flash_erase(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t PAGEError = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  /* __IO uint32_t data32 = 0 , MemoryProgramStatus = 0; */

  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t program_end = ((uint32_t )&__fini_array_end
                  + (uint32_t)&_edata
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <flash_erase+0xa4>)
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000b78:	4923      	ldr	r1, [pc, #140]	; (8000c08 <flash_erase+0xa8>)
                  - (uint32_t)&_sdata);
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <flash_erase+0xac>)
 8000b7c:	1acb      	subs	r3, r1, r3
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000b7e:	4413      	add	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
  uint32_t bottom  = (((uint32_t)program_end & ~0x7FF) + 0x800);
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b88:	f023 0307 	bic.w	r3, r3, #7
 8000b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000b90:	60fb      	str	r3, [r7, #12]
  uint32_t top = FLASH_END;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <flash_erase+0xb0>)
 8000b94:	60bb      	str	r3, [r7, #8]

  HAL_FLASH_Unlock();
 8000b96:	f003 f92d 	bl	8003df4 <HAL_FLASH_Unlock>
  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <flash_erase+0xb4>)
 8000b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba0:	611a      	str	r2, [r3, #16]
  /* Get the 1st page to erase */
  FirstPage = GetPage(bottom);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f83a 	bl	8000c1c <GetPage>
 8000ba8:	61f8      	str	r0, [r7, #28]
  /* Get the number of pages to erase from 1st page */
  NbOfPages = GetPage(top) - FirstPage + 1;
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f000 f836 	bl	8000c1c <GetPage>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  /* Get the bank */
  BankNumber = GetBank(bottom);
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f86e 	bl	8000c9c <GetBank>
 8000bc0:	6178      	str	r0, [r7, #20]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <flash_erase+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  EraseInitStruct.Banks       = BankNumber;
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <flash_erase+0xb8>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	6053      	str	r3, [r2, #4]
  EraseInitStruct.Page        = FirstPage;
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <flash_erase+0xb8>)
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbPages     = NbOfPages;
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <flash_erase+0xb8>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	60d3      	str	r3, [r2, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <flash_erase+0xb8>)
 8000be0:	f003 f9ee 	bl	8003fc0 <HAL_FLASHEx_Erase>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <flash_erase+0x94>
    HAL_FLASH_Lock();
 8000bea:	f003 f925 	bl	8003e38 <HAL_FLASH_Lock>
    return (-1);
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e002      	b.n	8000bfa <flash_erase+0x9a>
  }
  HAL_FLASH_Lock();
 8000bf4:	f003 f920 	bl	8003e38 <HAL_FLASH_Lock>
  return(0);
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000e0 	.word	0x200000e0
 8000c08:	08009d10 	.word	0x08009d10
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	0803fff0 	.word	0x0803fff0
 8000c14:	40022000 	.word	0x40022000
 8000c18:	20000108 	.word	0x20000108

08000c1c <GetPage>:

static uint32_t GetPage(uint32_t Addr) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <GetPage+0x74>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <GetPage+0x2a>
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <GetPage+0x74>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	029a      	lsls	r2, r3, #10
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <GetPage+0x78>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c44:	e000      	b.n	8000c48 <GetPage+0x2c>
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <GetPage+0x7c>)
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d905      	bls.n	8000c5a <GetPage+0x3e>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c54:	0adb      	lsrs	r3, r3, #11
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e013      	b.n	8000c82 <GetPage+0x66>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <GetPage+0x74>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <GetPage+0x5c>
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <GetPage+0x74>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	029a      	lsls	r2, r3, #10
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <GetPage+0x78>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c76:	e000      	b.n	8000c7a <GetPage+0x5e>
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <GetPage+0x7c>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	0adb      	lsrs	r3, r3, #11
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	1fff75e0 	.word	0x1fff75e0
 8000c94:	03fffc00 	.word	0x03fffc00
 8000c98:	08040000 	.word	0x08040000

08000c9c <GetBank>:

static uint32_t GetBank(uint32_t Addr) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <find_sentinel_bottom>:
	fs->next_record_number++;
	fs->total_records++;
	return (0);
}

uint64_t* find_sentinel_bottom(void) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	uint64_t *p = (uint64_t*) &__fini_array_end
			+ ((uint64_t*) &_edata - (uint64_t*) &_sdata);
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <find_sentinel_bottom+0x58>)
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <find_sentinel_bottom+0x5c>)
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	461a      	mov	r2, r3
	uint64_t *p = (uint64_t*) &__fini_array_end
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <find_sentinel_bottom+0x60>)
 8000cc4:	4413      	add	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
	p += 2;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3310      	adds	r3, #16
 8000ccc:	607b      	str	r3, [r7, #4]
	p = (uint64_t*) ((uintptr_t) p & ~(uintptr_t) 0xF);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f023 030f 	bic.w	r3, r3, #15
 8000cd4:	607b      	str	r3, [r7, #4]
	while (p <= ((uint64_t*) FLASH_END)) {
 8000cd6:	e00d      	b.n	8000cf4 <find_sentinel_bottom+0x40>
		if (*p == SENTINEL_MARK_BOTTOM) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <find_sentinel_bottom+0x64>)
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	bf08      	it	eq
 8000ce4:	f1b2 3fa5 	cmpeq.w	r2, #2779096485	; 0xa5a5a5a5
 8000ce8:	d101      	bne.n	8000cee <find_sentinel_bottom+0x3a>
			return (p);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	e007      	b.n	8000cfe <find_sentinel_bottom+0x4a>
		}
		p += 2;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3310      	adds	r3, #16
 8000cf2:	607b      	str	r3, [r7, #4]
	while (p <= ((uint64_t*) FLASH_END)) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <find_sentinel_bottom+0x68>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d9ed      	bls.n	8000cd8 <find_sentinel_bottom+0x24>
	}
	return (0);
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200000e0 	.word	0x200000e0
 8000d10:	20000000 	.word	0x20000000
 8000d14:	08009d10 	.word	0x08009d10
 8000d18:	deadbeef 	.word	0xdeadbeef
 8000d1c:	0803fff0 	.word	0x0803fff0

08000d20 <find_sentinel_top>:

uint64_t* find_sentinel_top(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	uint64_t *p = (uint64_t*) FLASH_END;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <find_sentinel_top+0x30>)
 8000d28:	607b      	str	r3, [r7, #4]
	if (*p == SENTINEL_MARK_TOP) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	4908      	ldr	r1, [pc, #32]	; (8000d54 <find_sentinel_top+0x34>)
 8000d32:	428b      	cmp	r3, r1
 8000d34:	bf08      	it	eq
 8000d36:	f1b2 3f5a 	cmpeq.w	r2, #1515870810	; 0x5a5a5a5a
 8000d3a:	d101      	bne.n	8000d40 <find_sentinel_top+0x20>
		return (p);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	e000      	b.n	8000d42 <find_sentinel_top+0x22>
	} else {
		return (0);
 8000d40:	2300      	movs	r3, #0
	}
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	0803fff0 	.word	0x0803fff0
 8000d54:	feedc0de 	.word	0xfeedc0de

08000d58 <write_sentinel>:

int write_sentinel(uint64_t *location, raw_t *sentinel) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	if ((!location) || (!sentinel)) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <write_sentinel+0x16>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <write_sentinel+0x1c>
		return (-1);
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e026      	b.n	8000dc2 <write_sentinel+0x6a>
	}
	HAL_FLASH_Unlock();
 8000d74:	f003 f83e 	bl	8003df4 <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (int) location++,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 0208 	add.w	r2, r3, #8
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	4619      	mov	r1, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f002 ffc7 	bl	8003d1c <HAL_FLASH_Program>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d004      	beq.n	8000d9e <write_sentinel+0x46>
			sentinel->data0)) {
		HAL_FLASH_Lock();
 8000d94:	f003 f850 	bl	8003e38 <HAL_FLASH_Lock>
		return (-1);
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	e011      	b.n	8000dc2 <write_sentinel+0x6a>
	}
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (int) location,
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000da6:	2000      	movs	r0, #0
 8000da8:	f002 ffb8 	bl	8003d1c <HAL_FLASH_Program>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <write_sentinel+0x64>
			sentinel->data1)) {
		HAL_FLASH_Lock();
 8000db2:	f003 f841 	bl	8003e38 <HAL_FLASH_Lock>
		return (-1);
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e002      	b.n	8000dc2 <write_sentinel+0x6a>
	}
	HAL_FLASH_Lock();
 8000dbc:	f003 f83c 	bl	8003e38 <HAL_FLASH_Lock>
	return (0);
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	0000      	movs	r0, r0
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <flash_write_init>:

int flash_write_init(flash_status_t *fs) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	; 0x48
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	sensordata_t *sd = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t record_counter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	raw_t sentinel_top = { SENTINEL_MARK_TOP, 0 };
 8000de2:	a353      	add	r3, pc, #332	; (adr r3, 8000f30 <flash_write_init+0x160>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	raw_t sentinel_bottom = { SENTINEL_MARK_BOTTOM, 0 };
 8000df8:	a34f      	add	r3, pc, #316	; (adr r3, 8000f38 <flash_write_init+0x168>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	f04f 0300 	mov.w	r3, #0
 8000e0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
			+ (uint32_t) &_edata - (uint32_t) &_sdata);
 8000e0e:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <flash_write_init+0x150>)
	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
 8000e10:	4944      	ldr	r1, [pc, #272]	; (8000f24 <flash_write_init+0x154>)
			+ (uint32_t) &_edata - (uint32_t) &_sdata);
 8000e12:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <flash_write_init+0x158>)
 8000e14:	1acb      	subs	r3, r1, r3
 8000e16:	4413      	add	r3, r2
	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint64_t *top = (uint64_t*) FLASH_END;
 8000e1a:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <flash_write_init+0x15c>)
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	uint64_t *bottom = (uint64_t*) (((uint32_t) program_end & ~0x7FF) + 0x800);
 8000e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e24:	f023 0307 	bic.w	r3, r3, #7
 8000e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34

	uint64_t *pt = find_sentinel_top();
 8000e2e:	f7ff ff77 	bl	8000d20 <find_sentinel_top>
 8000e32:	6338      	str	r0, [r7, #48]	; 0x30

	uint64_t *pb = find_sentinel_bottom();
 8000e34:	f7ff ff3e 	bl	8000cb4 <find_sentinel_bottom>
 8000e38:	62f8      	str	r0, [r7, #44]	; 0x2c

	if ((!pt) && (!pb)) {
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d11a      	bne.n	8000e76 <flash_write_init+0xa6>
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d117      	bne.n	8000e76 <flash_write_init+0xa6>
		if (write_sentinel(top, &sentinel_top)) {
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e4e:	f7ff ff83 	bl	8000d58 <write_sentinel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <flash_write_init+0x8e>
			return (-1);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	e059      	b.n	8000f12 <flash_write_init+0x142>
		}
		if (write_sentinel(bottom, &sentinel_bottom)) {
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e66:	f7ff ff77 	bl	8000d58 <write_sentinel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d026      	beq.n	8000ebe <flash_write_init+0xee>
			return (-1);
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	e04d      	b.n	8000f12 <flash_write_init+0x142>
		}
	} else if ((pt) && (!pb)) {
 8000e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00e      	beq.n	8000e9a <flash_write_init+0xca>
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <flash_write_init+0xca>
		if (write_sentinel(bottom, &sentinel_bottom)) {
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e8a:	f7ff ff65 	bl	8000d58 <write_sentinel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d014      	beq.n	8000ebe <flash_write_init+0xee>
			return (-1);
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	e03b      	b.n	8000f12 <flash_write_init+0x142>
		}
	} else if ((!pt) && (pb)) {
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d105      	bne.n	8000eac <flash_write_init+0xdc>
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <flash_write_init+0xdc>
		return (-1);
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e032      	b.n	8000f12 <flash_write_init+0x142>
	} else if ((pt) && (pb)) {
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <flash_write_init+0xe8>
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <flash_write_init+0xee>
		if (pb != bottom) {

		}
	} else {
		return (-1);
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	e029      	b.n	8000f12 <flash_write_init+0x142>
	}

	fs->data_start = top - 2;
 8000ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec0:	f1a3 0210 	sub.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
	fs->max_possible_records = (((uint32_t) top - (uint32_t) bottom) >> 4) - 1;
 8000ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
	sd = (sensordata_t*) top;
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
	sd--;
 8000eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000edc:	3b10      	subs	r3, #16
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
	while ((sd->watermark != 0xFF)) {
 8000ee0:	e007      	b.n	8000ef2 <flash_write_init+0x122>
		record_counter++;
 8000ee2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		sd--;
 8000eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eee:	3b10      	subs	r3, #16
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
	while ((sd->watermark != 0xFF)) {
 8000ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d1f3      	bne.n	8000ee2 <flash_write_init+0x112>
	}
	fs->next_record_number = record_counter;
 8000efa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	611a      	str	r2, [r3, #16]
	fs->total_records = record_counter;
 8000f02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
	fs->next_address = (uint64_t*) sd;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f0e:	60da      	str	r2, [r3, #12]

	return (0);
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3748      	adds	r7, #72	; 0x48
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	200000e0 	.word	0x200000e0
 8000f24:	08009d10 	.word	0x08009d10
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	0803fff0 	.word	0x0803fff0
 8000f30:	5a5a5a5a 	.word	0x5a5a5a5a
 8000f34:	feedc0de 	.word	0xfeedc0de
 8000f38:	a5a5a5a5 	.word	0xa5a5a5a5
 8000f3c:	deadbeef 	.word	0xdeadbeef

08000f40 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8000f50:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000f52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <restore>:

void restore(uint32_t priority_mask) {
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f383 8810 	msr	PRIMASK, r3
}
 8000f78:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b089      	sub	sp, #36	; 0x24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e853 3f00 	ldrex	r3, [r3]
 8000f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	61ba      	str	r2, [r7, #24]
 8000fa8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000faa:	6979      	ldr	r1, [r7, #20]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	e841 2300 	strex	r3, r2, [r1]
 8000fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e9      	bne.n	8000f8e <LL_USART_EnableIT_RXNE+0x8>
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3724      	adds	r7, #36	; 0x24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <readsensor>:
/* USER CODE BEGIN 0 */
//typedef struct sensorval {
//  uint32_t vdda_value;
//  uint32_t temperature;
//} sensorval_t;
uint32_t readsensor(sensorval_t *sensors) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	uint32_t temp_raw;
	uint32_t vrefint_raw;

	if (!sensors) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <readsensor+0x14>
		return (-1);
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e04d      	b.n	8001078 <readsensor+0xb0>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fdc:	217f      	movs	r1, #127	; 0x7f
 8000fde:	4828      	ldr	r0, [pc, #160]	; (8001080 <readsensor+0xb8>)
 8000fe0:	f002 fbea 	bl	80037b8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <readsensor+0xb8>)
 8000fe6:	f001 fb33 	bl	8002650 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fea:	f04f 31ff 	mov.w	r1, #4294967295
 8000fee:	4824      	ldr	r0, [pc, #144]	; (8001080 <readsensor+0xb8>)
 8000ff0:	f001 fbc4 	bl	800277c <HAL_ADC_PollForConversion>
	temp_raw = HAL_ADC_GetValue(&hadc1);
 8000ff4:	4822      	ldr	r0, [pc, #136]	; (8001080 <readsensor+0xb8>)
 8000ff6:	f001 fc50 	bl	800289a <HAL_ADC_GetValue>
 8000ffa:	60f8      	str	r0, [r7, #12]
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <readsensor+0xb8>)
 8001002:	f001 fbbb 	bl	800277c <HAL_ADC_PollForConversion>
	vrefint_raw = HAL_ADC_GetValue(&hadc1);
 8001006:	481e      	ldr	r0, [pc, #120]	; (8001080 <readsensor+0xb8>)
 8001008:	f001 fc47 	bl	800289a <HAL_ADC_GetValue>
 800100c:	60b8      	str	r0, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <readsensor+0xb8>)
 8001010:	f001 fb81 	bl	8002716 <HAL_ADC_Stop>
	sensors->vdda_value = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw,
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <readsensor+0xbc>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800101e:	fb03 f202 	mul.w	r2, r3, r2
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	fbb2 f2f3 	udiv	r2, r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
			ADC_RESOLUTION_12B);
	sensors->temperature = __HAL_ADC_CALC_TEMPERATURE(sensors->vdda_value,
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <readsensor+0xc0>)
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <readsensor+0xc4>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d01a      	beq.n	800106e <readsensor+0xa6>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <readsensor+0xc8>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	099b      	lsrs	r3, r3, #6
 800104a:	461a      	mov	r2, r3
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <readsensor+0xc4>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2264      	movs	r2, #100	; 0x64
 8001054:	fb03 f202 	mul.w	r2, r3, r2
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <readsensor+0xc0>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <readsensor+0xc4>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	1acb      	subs	r3, r1, r3
 8001064:	fb92 f3f3 	sdiv	r3, r2, r3
 8001068:	331e      	adds	r3, #30
 800106a:	461a      	mov	r2, r3
 800106c:	e001      	b.n	8001072 <readsensor+0xaa>
 800106e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	605a      	str	r2, [r3, #4]
			temp_raw, ADC_RESOLUTION_12B);

	return (0);
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000118 	.word	0x20000118
 8001084:	1fff75aa 	.word	0x1fff75aa
 8001088:	1fff75ca 	.word	0x1fff75ca
 800108c:	1fff75a8 	.word	0x1fff75a8
 8001090:	057619f1 	.word	0x057619f1

08001094 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	static uint32_t last = 0;
	uint32_t current;
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7f1b      	ldrb	r3, [r3, #28]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d11c      	bne.n	80010de <HAL_TIM_IC_CaptureCallback+0x4a>
		current = htim->Instance->CCR1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	60fb      	str	r3, [r7, #12]
		if (last <= current) {
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x58>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d306      	bcc.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x30>
			period = current - last;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x58>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e009      	b.n	80010d8 <HAL_TIM_IC_CaptureCallback+0x44>
		} else {
			period = TIM2->ARR - last + current;
 80010c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x58>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80010d6:	6013      	str	r3, [r2, #0]
		}
		last = current;
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x58>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6013      	str	r3, [r2, #0]
	}
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200002dc 	.word	0x200002dc
 80010f0:	200002b4 	.word	0x200002b4

080010f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08f      	sub	sp, #60	; 0x3c
 80010f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	init_queue(&buf);
 80010fa:	484e      	ldr	r0, [pc, #312]	; (8001234 <main+0x140>)
 80010fc:	f000 fb01 	bl	8001702 <init_queue>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001100:	f000 fea3 	bl	8001e4a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001104:	f000 f8bc 	bl	8001280 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001108:	f000 faac 	bl	8001664 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800110c:	f000 fa7a 	bl	8001604 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8001110:	f000 f98e 	bl	8001430 <MX_RTC_Init>
	MX_TIM2_Init();
 8001114:	f000 fa1e 	bl	8001554 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001118:	f000 f916 	bl	8001348 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 800111c:	4846      	ldr	r0, [pc, #280]	; (8001238 <main+0x144>)
 800111e:	f000 fb67 	bl	80017f0 <RetargetInit>
	LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8001122:	4846      	ldr	r0, [pc, #280]	; (800123c <main+0x148>)
 8001124:	f7ff ff2f 	bl	8000f86 <LL_USART_EnableIT_RXNE>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8001128:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800112c:	2302      	movs	r3, #2
 800112e:	2100      	movs	r1, #0
 8001130:	4843      	ldr	r0, [pc, #268]	; (8001240 <main+0x14c>)
 8001132:	f005 f9d3 	bl	80064dc <HAL_TIM_IC_Start_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	flash_erase();
 8001136:	f7ff fd13 	bl	8000b60 <flash_erase>
  flash_write_init(&fs);
 800113a:	4842      	ldr	r0, [pc, #264]	; (8001244 <main+0x150>)
 800113c:	f7ff fe48 	bl	8000dd0 <flash_write_init>
	printf("System Up and Running\n\r");
 8001140:	4841      	ldr	r0, [pc, #260]	; (8001248 <main+0x154>)
 8001142:	f007 fae3 	bl	800870c <iprintf>

	sensordata_t sensor_data = { .watermark = 0x01, .status = 0x01,
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <main+0x158>)
 8001148:	f107 0420 	add.w	r4, r7, #32
 800114c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.record_number = 4, .timestamp = 0x1234567, .battery_voltage = 33,
			.temperature = 25, .sensor_period = 100 };

	logdata_t log_data = { .watermark = 0x01, .status = 0x02, .record_number = 2,
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <main+0x15c>)
 8001154:	f107 0410 	add.w	r4, r7, #16
 8001158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.timestamp = 0x87654321, .msg = "Hello!" };

	raw_t raw_data = { .data0 = *(uint64_t*) &sensor_data, .data1 =
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	e9c7 2300 	strd	r2, r3, [r7]
			*(uint64_t*) &log_data };
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
	raw_t raw_data = { .data0 = *(uint64_t*) &sensor_data, .data1 =
 8001172:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	write_record(&fs,&raw_data);


//	printf("Data: %d\n\r", ((sensordata_t*) (0x0803FFF8))->record_number);

	prompt();
 8001176:	f7ff fa09 	bl	800058c <prompt>
	while (1) {
		HAL_Delay(100);
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	f000 feda 	bl	8001f34 <HAL_Delay>
		readsensor(&mySensors);
 8001180:	4834      	ldr	r0, [pc, #208]	; (8001254 <main+0x160>)
 8001182:	f7ff ff21 	bl	8000fc8 <readsensor>
		tsl237_clock_period = (1 / (float) SystemCoreClock) * (float) period;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <main+0x164>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <main+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <main+0x16c>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
		tsl237_clock_frequency = 1 / tsl237_clock_period;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <main+0x16c>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <main+0x170>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]

		if (get_commands(command)) {
 80011c4:	4828      	ldr	r0, [pc, #160]	; (8001268 <main+0x174>)
 80011c6:	f7ff fbd5 	bl	8000974 <get_commands>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01e      	beq.n	800120e <main+0x11a>
			command_length = 16;
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <main+0x178>)
 80011d2:	2210      	movs	r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
			if (command_length != -1) {
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <main+0x178>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	d011      	beq.n	8001204 <main+0x110>
				if (execute_command(command)) {
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <main+0x174>)
 80011e2:	f7ff fc6d 	bl	8000ac0 <execute_command>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <main+0x104>
					printf("NOK\n\r");
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <main+0x17c>)
 80011ee:	f007 fa8d 	bl	800870c <iprintf>
					prompt();
 80011f2:	f7ff f9cb 	bl	800058c <prompt>
 80011f6:	e00a      	b.n	800120e <main+0x11a>
				} else {
					printf("OK\n\r");
 80011f8:	481e      	ldr	r0, [pc, #120]	; (8001274 <main+0x180>)
 80011fa:	f007 fa87 	bl	800870c <iprintf>
					prompt();
 80011fe:	f7ff f9c5 	bl	800058c <prompt>
 8001202:	e004      	b.n	800120e <main+0x11a>
				}
			} else {
				printf("NOK\n\r");
 8001204:	481a      	ldr	r0, [pc, #104]	; (8001270 <main+0x17c>)
 8001206:	f007 fa81 	bl	800870c <iprintf>
				prompt();
 800120a:	f7ff f9bf 	bl	800058c <prompt>
			}

		}

		if (alarm) {
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <main+0x184>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0b1      	beq.n	800117a <main+0x86>
			printf("alarm_triggered\n\r");
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <main+0x188>)
 8001218:	f007 fa78 	bl	800870c <iprintf>
			lon_command();
 800121c:	f7ff fa3a 	bl	8000694 <lon_command>
			HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	; 0x64
 8001222:	f000 fe87 	bl	8001f34 <HAL_Delay>
			lof_command();
 8001226:	f7ff fa25 	bl	8000674 <lof_command>
			alarm = 0;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <main+0x184>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8001230:	e7a3      	b.n	800117a <main+0x86>
 8001232:	bf00      	nop
 8001234:	20000274 	.word	0x20000274
 8001238:	200001ec 	.word	0x200001ec
 800123c:	40004400 	.word	0x40004400
 8001240:	200001a0 	.word	0x200001a0
 8001244:	200002c8 	.word	0x200002c8
 8001248:	08009a78 	.word	0x08009a78
 800124c:	08009ab4 	.word	0x08009ab4
 8001250:	08009ac4 	.word	0x08009ac4
 8001254:	200002c0 	.word	0x200002c0
 8001258:	20000058 	.word	0x20000058
 800125c:	200002b4 	.word	0x200002b4
 8001260:	200002b8 	.word	0x200002b8
 8001264:	200002bc 	.word	0x200002bc
 8001268:	2000029c 	.word	0x2000029c
 800126c:	200002ac 	.word	0x200002ac
 8001270:	08009a90 	.word	0x08009a90
 8001274:	08009a98 	.word	0x08009a98
 8001278:	200002b0 	.word	0x200002b0
 800127c:	08009aa0 	.word	0x08009aa0

08001280 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2244      	movs	r2, #68	; 0x44
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f007 fb47 	bl	8008922 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80012a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012a6:	f003 f951 	bl	800454c <HAL_PWREx_ControlVoltageScaling>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x34>
		Error_Handler();
 80012b0:	f000 fa22 	bl	80016f8 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80012b4:	f003 f92c 	bl	8004510 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SystemClock_Config+0xc4>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <SystemClock_Config+0xc4>)
 80012c0:	f023 0318 	bic.w	r3, r3, #24
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80012c8:	231c      	movs	r3, #28
 80012ca:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012dc:	2360      	movs	r3, #96	; 0x60
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012e4:	2301      	movs	r3, #1
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012f0:	2307      	movs	r3, #7
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4618      	mov	r0, r3
 8001302:	f003 f979 	bl	80045f8 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x90>
		Error_Handler();
 800130c:	f000 f9f4 	bl	80016f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2303      	movs	r3, #3
 8001316:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001324:	463b      	mov	r3, r7
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fd79 	bl	8004e20 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xb8>
		Error_Handler();
 8001334:	f000 f9e0 	bl	80016f8 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001338:	f004 f98c 	bl	8005654 <HAL_RCCEx_EnableMSIPLLMode>
}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000

08001348 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001360:	4a30      	ldr	r2, [pc, #192]	; (8001424 <MX_ADC1_Init+0xdc>)
 8001362:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_ADC1_Init+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001378:	2201      	movs	r2, #1
 800137a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_ADC1_Init+0xd8>)
 800137e:	2204      	movs	r2, #4
 8001380:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_ADC1_Init+0xd8>)
 800138a:	2200      	movs	r2, #0
 800138c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 2;
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001390:	2202      	movs	r2, #2
 8001392:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_ADC1_Init+0xd8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013c0:	f001 f804 	bl	80023cc <HAL_ADC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x86>
		Error_Handler();
 80013ca:	f000 f995 	bl	80016f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_ADC1_Init+0xe0>)
 80013d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013d6:	2307      	movs	r3, #7
 80013d8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013da:	237f      	movs	r3, #127	; 0x7f
 80013dc:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013de:	2304      	movs	r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_ADC1_Init+0xd8>)
 80013ec:	f001 fc34 	bl	8002c58 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0xb2>
		Error_Handler();
 80013f6:	f000 f97f 	bl	80016f8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_ADC1_Init+0xe4>)
 80013fc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80013fe:	230c      	movs	r3, #12
 8001400:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_ADC1_Init+0xd8>)
 8001408:	f001 fc26 	bl	8002c58 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0xce>
		Error_Handler();
 8001412:	f000 f971 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000118 	.word	0x20000118
 8001424:	50040000 	.word	0x50040000
 8001428:	c7520000 	.word	0xc7520000
 800142c:	80000001 	.word	0x80000001

08001430 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001436:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = { 0 };
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	222c      	movs	r2, #44	; 0x2c
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fa66 	bl	8008922 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <MX_RTC_Init+0x118>)
 8001458:	4a3c      	ldr	r2, [pc, #240]	; (800154c <MX_RTC_Init+0x11c>)
 800145a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_RTC_Init+0x118>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <MX_RTC_Init+0x118>)
 8001464:	227f      	movs	r2, #127	; 0x7f
 8001466:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_RTC_Init+0x118>)
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <MX_RTC_Init+0x118>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <MX_RTC_Init+0x118>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <MX_RTC_Init+0x118>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MX_RTC_Init+0x118>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001486:	4830      	ldr	r0, [pc, #192]	; (8001548 <MX_RTC_Init+0x118>)
 8001488:	f004 f9e6 	bl	8005858 <HAL_RTC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_RTC_Init+0x66>
		Error_Handler();
 8001492:	f000 f931 	bl	80016f8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80014b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	4823      	ldr	r0, [pc, #140]	; (8001548 <MX_RTC_Init+0x118>)
 80014ba:	f004 fa55 	bl	8005968 <HAL_RTC_SetTime>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_RTC_Init+0x98>
		Error_Handler();
 80014c4:	f000 f918 	bl	80016f8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80014e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	4817      	ldr	r0, [pc, #92]	; (8001548 <MX_RTC_Init+0x118>)
 80014ea:	f004 fb36 	bl	8005b5a <HAL_RTC_SetDate>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_RTC_Init+0xc8>
		Error_Handler();
 80014f4:	f000 f900 	bl	80016f8 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x30;
 8001500:	2330      	movs	r3, #48	; 0x30
 8001502:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_RTC_Init+0x120>)
 8001512:	61bb      	str	r3, [r7, #24]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_RTC_Init+0x118>)
 8001530:	f004 fbe8 	bl	8005d04 <HAL_RTC_SetAlarm_IT>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_RTC_Init+0x10e>
		Error_Handler();
 800153a:	f000 f8dd 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3748      	adds	r7, #72	; 0x48
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000017c 	.word	0x2000017c
 800154c:	40002800 	.word	0x40002800
 8001550:	80808000 	.word	0x80808000

08001554 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <MX_TIM2_Init+0xac>)
 8001574:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001578:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_TIM2_Init+0xac>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_TIM2_Init+0xac>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM2_Init+0xac>)
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_TIM2_Init+0xac>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM2_Init+0xac>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800159a:	4819      	ldr	r0, [pc, #100]	; (8001600 <MX_TIM2_Init+0xac>)
 800159c:	f004 fe18 	bl	80061d0 <HAL_TIM_IC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x56>
		Error_Handler();
 80015a6:	f000 f8a7 	bl	80016f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <MX_TIM2_Init+0xac>)
 80015ba:	f005 fd91 	bl	80070e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x74>
		Error_Handler();
 80015c4:	f000 f898 	bl	80016f8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <MX_TIM2_Init+0xac>)
 80015e0:	f005 fa2e 	bl	8006a40 <HAL_TIM_IC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x9a>
		Error_Handler();
 80015ea:	f000 f885 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015ee:	2100      	movs	r1, #0
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM2_Init+0xac>)
 80015f2:	f004 fe45 	bl	8006280 <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001a0 	.word	0x200001a0

08001604 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_USART2_UART_Init+0x58>)
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <MX_USART2_UART_Init+0x5c>)
 800160c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_USART2_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_USART2_UART_Init+0x58>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_USART2_UART_Init+0x58>)
 8001648:	f005 fdce 	bl	80071e8 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001652:	f000 f851 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001ec 	.word	0x200001ec
 8001660:	40004400 	.word	0x40004400

08001664 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_GPIO_Init+0x8c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_GPIO_Init+0x8c>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_GPIO_Init+0x8c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_GPIO_Init+0x8c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <MX_GPIO_Init+0x8c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_GPIO_Init+0x8c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_GPIO_Init+0x8c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <MX_GPIO_Init+0x8c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_GPIO_Init+0x8c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <MX_GPIO_Init+0x90>)
 80016c8:	f002 ff0a 	bl	80044e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80016cc:	2308      	movs	r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_GPIO_Init+0x90>)
 80016e4:	f002 fd92 	bl	800420c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000400 	.word	0x48000400

080016f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>

08001702 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 800170a:	f7ff fc19 	bl	8000f40 <disable>
 800170e:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  restore(mask);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fc22 	bl	8000f66 <restore>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 800173a:	f7ff fc01 	bl	8000f40 <disable>
 800173e:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	425a      	negs	r2, r3
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	bf58      	it	pl
 8001752:	4253      	negpl	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6852      	ldr	r2, [r2, #4]
 8001758:	4293      	cmp	r3, r2
 800175a:	d014      	beq.n	8001786 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	425a      	negs	r2, r3
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	f002 021f 	and.w	r2, r2, #31
 8001778:	bf58      	it	pl
 800177a:	4253      	negpl	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6013      	str	r3, [r2, #0]
    return_val=0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e002      	b.n	800178c <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f7ff fbea 	bl	8000f66 <restore>
  return (return_val);
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <dequeue>:

uint8_t dequeue (queue_t *buf) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  int return_val=0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80017a8:	f7ff fbca 	bl	8000f40 <disable>
 80017ac:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d011      	beq.n	80017de <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	7a1b      	ldrb	r3, [r3, #8]
 80017c4:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	425a      	negs	r2, r3
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	f002 021f 	and.w	r2, r2, #31
 80017d6:	bf58      	it	pl
 80017d8:	4253      	negpl	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f7ff fbc1 	bl	8000f66 <restore>
  return(return_val);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	b2db      	uxtb	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <RetargetInit+0x28>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <RetargetInit+0x2c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6898      	ldr	r0, [r3, #8]
 8001804:	2300      	movs	r3, #0
 8001806:	2202      	movs	r2, #2
 8001808:	2100      	movs	r1, #0
 800180a:	f006 ff99 	bl	8008740 <setvbuf>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200002e0 	.word	0x200002e0
 800181c:	200000dc 	.word	0x200000dc

08001820 <_isatty>:

int _isatty(int fd) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db04      	blt.n	8001838 <_isatty+0x18>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	dc01      	bgt.n	8001838 <_isatty+0x18>
    return 1;
 8001834:	2301      	movs	r3, #1
 8001836:	e005      	b.n	8001844 <_isatty+0x24>

  errno = EBADF;
 8001838:	f007 f91e 	bl	8008a78 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	2209      	movs	r2, #9
 8001840:	601a      	str	r2, [r3, #0]
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_write>:

int _write(int fd, char* ptr, int len) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d002      	beq.n	8001864 <_write+0x18>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d111      	bne.n	8001888 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <_write+0x54>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	b29a      	uxth	r2, r3
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	f005 fd07 	bl	8007284 <HAL_UART_Transmit>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <_write+0x38>
      return len;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	e008      	b.n	8001896 <_write+0x4a>
    else
      return EIO;
 8001884:	2305      	movs	r3, #5
 8001886:	e006      	b.n	8001896 <_write+0x4a>
  }
  errno = EBADF;
 8001888:	f007 f8f6 	bl	8008a78 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	2209      	movs	r2, #9
 8001890:	601a      	str	r2, [r3, #0]
  return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002e0 	.word	0x200002e0

080018a4 <_close>:

int _close(int fd) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db04      	blt.n	80018bc <_close+0x18>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	dc01      	bgt.n	80018bc <_close+0x18>
    return 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e006      	b.n	80018ca <_close+0x26>

  errno = EBADF;
 80018bc:	f007 f8dc 	bl	8008a78 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2209      	movs	r2, #9
 80018c4:	601a      	str	r2, [r3, #0]
  return -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80018de:	f007 f8cb 	bl	8008a78 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2209      	movs	r2, #9
 80018e6:	601a      	str	r2, [r3, #0]
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_read>:

int _read(int fd, char* ptr, int len) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d110      	bne.n	8001928 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <_read+0x4c>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	2201      	movs	r2, #1
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	f005 fd41 	bl	8007398 <HAL_UART_Receive>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <_read+0x30>
      return 1;
 8001920:	2301      	movs	r3, #1
 8001922:	e008      	b.n	8001936 <_read+0x42>
    else
      return EIO;
 8001924:	2305      	movs	r3, #5
 8001926:	e006      	b.n	8001936 <_read+0x42>
  }
  errno = EBADF;
 8001928:	f007 f8a6 	bl	8008a78 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	2209      	movs	r2, #9
 8001930:	601a      	str	r2, [r3, #0]
  return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002e0 	.word	0x200002e0

08001944 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db08      	blt.n	8001966 <_fstat+0x22>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	dc05      	bgt.n	8001966 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001960:	605a      	str	r2, [r3, #4]
    return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e005      	b.n	8001972 <_fstat+0x2e>
  }

  errno = EBADF;
 8001966:	f007 f887 	bl	8008a78 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2209      	movs	r2, #9
 800196e:	601a      	str	r2, [r3, #0]
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b098      	sub	sp, #96	; 0x60
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2254      	movs	r2, #84	; 0x54
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f006 ffa4 	bl	8008922 <memset>
  if(hadc->Instance==ADC1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_ADC_MspInit+0x90>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d132      	bne.n	8001a4a <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019ee:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019f0:	2301      	movs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019f8:	2310      	movs	r3, #16
 80019fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019fc:	2307      	movs	r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fc28 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8001a1e:	f7ff fe6b 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_ADC_MspInit+0x94>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_ADC_MspInit+0x94>)
 8001a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_ADC_MspInit+0x94>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2012      	movs	r0, #18
 8001a40:	f002 f827 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001a44:	2012      	movs	r0, #18
 8001a46:	f002 f840 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3760      	adds	r7, #96	; 0x60
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	50040000 	.word	0x50040000
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b098      	sub	sp, #96	; 0x60
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2254      	movs	r2, #84	; 0x54
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 ff58 	bl	8008922 <memset>
  if(hrtc->Instance==RTC)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_RTC_MspInit+0x68>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d11f      	bne.n	8001abc <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fbeb 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a98:	f7ff fe2e 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RTC_MspInit+0x6c>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RTC_MspInit+0x6c>)
 8001aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2029      	movs	r0, #41	; 0x29
 8001ab2:	f001 ffee 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ab6:	2029      	movs	r0, #41	; 0x29
 8001ab8:	f002 f807 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3760      	adds	r7, #96	; 0x60
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40002800 	.word	0x40002800
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d130      	bne.n	8001b50 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_TIM_IC_MspInit+0x8c>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f002 fb66 	bl	800420c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	201c      	movs	r0, #28
 8001b46:	f001 ffa4 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f001 ffbd 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09e      	sub	sp, #120	; 0x78
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2254      	movs	r2, #84	; 0x54
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 fed0 	bl	8008922 <memset>
  if(huart->Instance==USART2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2c      	ldr	r2, [pc, #176]	; (8001c38 <HAL_UART_MspInit+0xdc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d150      	bne.n	8001c2e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fb65 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba4:	f7ff fda8 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_UART_MspInit+0xe0>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be8:	2307      	movs	r3, #7
 8001bea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f002 fb09 	bl	800420c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f002 faf7 	bl	800420c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2026      	movs	r0, #38	; 0x26
 8001c24:	f001 ff35 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c28:	2026      	movs	r0, #38	; 0x26
 8001c2a:	f001 ff4e 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3778      	adds	r7, #120	; 0x78
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40004400 	.word	0x40004400
 8001c3c:	40021000 	.word	0x40021000

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f932 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <ADC1_IRQHandler+0x10>)
 8001c9a:	f000 fe0b 	bl	80028b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM2_IRQHandler+0x10>)
 8001cae:	f004 fdc5 	bl	800683c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001a0 	.word	0x200001a0

08001cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <USART2_IRQHandler+0x40>)
 8001cc2:	f005 fc33 	bl	800752c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001cc6:	f006 fd19 	bl	80086fc <getchar>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <USART2_IRQHandler+0x44>)
 8001cd0:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <USART2_IRQHandler+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <USART2_IRQHandler+0x48>)
 8001cda:	f7ff fd26 	bl	800172a <enqueue>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <USART2_IRQHandler+0x48>)
 8001ce6:	f7ff fd59 	bl	800179c <dequeue>
      enqueue(&buf,ch);
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <USART2_IRQHandler+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <USART2_IRQHandler+0x48>)
 8001cf2:	f7ff fd1a 	bl	800172a <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200001ec 	.word	0x200001ec
 8001d00:	200002e4 	.word	0x200002e4
 8001d04:	20000274 	.word	0x20000274

08001d08 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <RTC_Alarm_IRQHandler+0x14>)
 8001d0e:	f004 f935 	bl	8005f7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <RTC_Alarm_IRQHandler+0x18>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000017c 	.word	0x2000017c
 8001d20:	200002b0 	.word	0x200002b0

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_kill>:

int _kill(int pid, int sig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3e:	f006 fe9b 	bl	8008a78 <__errno>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2216      	movs	r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
  return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_exit>:

void _exit (int status)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe7 	bl	8001d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d66:	e7fe      	b.n	8001d66 <_exit+0x12>

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f006 fe6e 	bl	8008a78 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20010000 	.word	0x20010000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200002e8 	.word	0x200002e8
 8001dd0:	20000440 	.word	0x20000440

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfc:	f7ff ffea 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f006 fe2d 	bl	8008a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2a:	f7ff f963 	bl	80010f4 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001e3c:	08009d10 	.word	0x08009d10
  ldr r2, =_sbss
 8001e40:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001e44:	2000043c 	.word	0x2000043c

08001e48 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <CAN1_RX0_IRQHandler>

08001e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f001 fe11 	bl	8003a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f80e 	bl	8001e7c <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	e001      	b.n	8001e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6c:	f7ff fd86 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d023      	beq.n	8001ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_InitTick+0x70>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fe1d 	bl	8003ae6 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d809      	bhi.n	8001ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f001 fde7 	bl	8003a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_InitTick+0x74>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e007      	b.n	8001edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e001      	b.n	8001edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000060 	.word	0x20000060
 8001eec:	20000058 	.word	0x20000058
 8001ef0:	2000005c 	.word	0x2000005c

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000060 	.word	0x20000060
 8001f18:	200002ec 	.word	0x200002ec

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200002ec 	.word	0x200002ec

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000060 	.word	0x20000060

08001f7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3360      	adds	r3, #96	; 0x60
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <LL_ADC_SetOffset+0x44>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	4313      	orrs	r3, r2
 8002014:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	03fff000 	.word	0x03fff000

0800202c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3360      	adds	r3, #96	; 0x60
 800203a:	461a      	mov	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3330      	adds	r3, #48	; 0x30
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	4413      	add	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	211f      	movs	r1, #31
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	f003 011f 	and.w	r1, r3, #31
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	431a      	orrs	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3314      	adds	r3, #20
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0e5b      	lsrs	r3, r3, #25
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	0d1b      	lsrs	r3, r3, #20
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2107      	movs	r1, #7
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	0d1b      	lsrs	r3, r3, #20
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0318 	and.w	r3, r3, #24
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80021ac:	40d9      	lsrs	r1, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	400b      	ands	r3, r1
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	0007ffff 	.word	0x0007ffff

080021d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002208:	d101      	bne.n	800220e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800222c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002258:	d101      	bne.n	800225e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f043 0202 	orr.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d101      	bne.n	80022fa <LL_ADC_IsDisableOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_IsDisableOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d101      	bne.n	8002370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d101      	bne.n	80023be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e126      	b.n	8002634 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fae5 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fef1 	bl	80021f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fed7 	bl	80021d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff0c 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fef0 	bl	800221c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243c:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_ADC_Init+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4a7f      	ldr	r2, [pc, #508]	; (8002640 <HAL_ADC_Init+0x274>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002450:	e002      	b.n	8002458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3b01      	subs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff feee 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff62 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80bf 	bne.w	8002622 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80bb 	bne.w	8002622 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024b4:	f043 0202 	orr.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fefb 	bl	80022bc <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024cc:	485d      	ldr	r0, [pc, #372]	; (8002644 <HAL_ADC_Init+0x278>)
 80024ce:	f7ff fef5 	bl	80022bc <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4619      	mov	r1, r3
 80024de:	485a      	ldr	r0, [pc, #360]	; (8002648 <HAL_ADC_Init+0x27c>)
 80024e0:	f7ff fd4c 	bl	8001f7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e5b      	ldrb	r3, [r3, #25]
 80024e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d106      	bne.n	8002520 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	3b01      	subs	r3, #1
 8002518:	045b      	lsls	r3, r3, #17
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_ADC_Init+0x280>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff26 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 800255a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13d      	bne.n	80025de <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13a      	bne.n	80025de <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800256c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002574:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002584:	f023 0302 	bic.w	r3, r3, #2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	430b      	orrs	r3, r1
 8002590:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002598:	2b01      	cmp	r3, #1
 800259a:	d118      	bne.n	80025ce <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025be:	430a      	orrs	r2, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	e007      	b.n	80025de <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10c      	bne.n	8002600 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f023 010f 	bic.w	r1, r3, #15
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
 80025fe:	e007      	b.n	8002610 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 020f 	bic.w	r2, r2, #15
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002632:	7ffb      	ldrb	r3, [r7, #31]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000058 	.word	0x20000058
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	50040000 	.word	0x50040000
 8002648:	50040300 	.word	0x50040300
 800264c:	fff0c007 	.word	0xfff0c007

08002650 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fe7b 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d14f      	bne.n	8002708 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADC_Start+0x26>
 8002672:	2302      	movs	r3, #2
 8002674:	e04b      	b.n	800270e <HAL_ADC_Start+0xbe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ff88 	bl	8003594 <ADC_Enable>
 8002684:	4603      	mov	r3, r0
 8002686:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d137      	bne.n	80026fe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	d106      	bne.n	80026be <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f023 0206 	bic.w	r2, r3, #6
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	221c      	movs	r2, #28
 80026ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fe06 	bl	8002308 <LL_ADC_REG_StartConversion>
 80026fc:	e006      	b.n	800270c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002706:	e001      	b.n	800270c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002708:	2302      	movs	r3, #2
 800270a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_Stop+0x16>
 8002728:	2302      	movs	r3, #2
 800272a:	e023      	b.n	8002774 <HAL_ADC_Stop+0x5e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002734:	2103      	movs	r1, #3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fe70 	bl	800341c <ADC_ConversionStop>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d111      	bne.n	800276a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 ffaa 	bl	80036a0 <ADC_Disable>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b08      	cmp	r3, #8
 800278c:	d102      	bne.n	8002794 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800278e:	2308      	movs	r3, #8
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e010      	b.n	80027b6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06f      	b.n	8002892 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80027b2:	2304      	movs	r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027b6:	f7ff fbb1 	bl	8001f1c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027bc:	e021      	b.n	8002802 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d01d      	beq.n	8002802 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027c6:	f7ff fba9 	bl	8001f1c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <HAL_ADC_PollForConversion+0x60>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d112      	bne.n	8002802 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e047      	b.n	8002892 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0d6      	beq.n	80027be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fc34 	bl	800208e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7e5b      	ldrb	r3, [r3, #25]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d111      	bne.n	8002866 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d104      	bne.n	800287e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2208      	movs	r2, #8
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e008      	b.n	8002890 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	220c      	movs	r2, #12
 800288e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_ADC_IRQHandler+0x56>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 ffe3 	bl	80038c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_ADC_IRQHandler+0x6a>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05e      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d059      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb9d 	bl	800208e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03e      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d135      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d12e      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fcea 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11a      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 020c 	bic.w	r2, r2, #12
 8002998:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d112      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
 80029be:	e00b      	b.n	80029d8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f91f 	bl	8002c1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_IRQHandler+0x146>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d072      	beq.n	8002aea <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d06d      	beq.n	8002aea <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fb6e 	bl	800210c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a30:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fb29 	bl	800208e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a3c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d047      	beq.n	8002adc <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_IRQHandler+0x1b2>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03f      	beq.n	8002adc <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13a      	bne.n	8002adc <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d133      	bne.n	8002adc <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12e      	bne.n	8002adc <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc8f 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a9c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d112      	bne.n	8002adc <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
 8002ac2:	e00b      	b.n	8002adc <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fecb 	bl	8003878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2260      	movs	r2, #96	; 0x60
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d011      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x264>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f890 	bl	8002c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d012      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x294>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 feb1 	bl	80038a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x2c4>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fea3 	bl	80038b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02a      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x324>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d025      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	e008      	b.n	8002bac <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f83a 	bl	8002c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x360>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f043 0208 	orr.w	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fe3c 	bl	800388c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c14:	bf00      	nop
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0b6      	sub	sp, #216	; 0xd8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x22>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e3bb      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x79a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fb66 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 83a0 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d824      	bhi.n	8002cee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	3b02      	subs	r3, #2
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d81b      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x8e>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_ADC_ConfigChannel+0x5c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccd 	.word	0x08002ccd
 8002cbc:	08002cd5 	.word	0x08002cd5
 8002cc0:	08002cdd 	.word	0x08002cdd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002cca:	e010      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002cd2:	e00c      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002cd4:	2318      	movs	r3, #24
 8002cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002cda:	e008      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002cec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002cfc:	f7ff f9da 	bl	80020b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fb27 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb47 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 81a4 	bne.w	800306e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 819f 	bne.w	800306e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6819      	ldr	r1, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f7ff f9f8 	bl	8002132 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d00a      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6919      	ldr	r1, [r3, #16]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d74:	f7ff f936 	bl	8001fe4 <LL_ADC_SetOffset>
 8002d78:	e179      	b.n	800306e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f953 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x14e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f948 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	0e9b      	lsrs	r3, r3, #26
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	e01e      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x18c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff f93d 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e004      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1a4>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	e018      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1d6>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e004      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d106      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f90c 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f8f0 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x214>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f8e5 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	e01e      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x252>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f8da 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x26a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	e018      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x29c>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f8a9 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f88d 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x2da>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2102      	movs	r1, #2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f882 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x318>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f877 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e004      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x330>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	e014      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x35a>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e004      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f84a 	bl	8002058 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2103      	movs	r1, #3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f82e 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x398>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2103      	movs	r1, #3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f823 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	e017      	b.n	8003020 <HAL_ADC_ConfigChannel+0x3c8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f818 	bl	800202c <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x3e0>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	e011      	b.n	800305c <HAL_ADC_ConfigChannel+0x404>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003048:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800304a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fff5 	bl	8002058 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f922 	bl	80022bc <LL_ADC_IsEnabled>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8140 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	461a      	mov	r2, r3
 800308e:	f7ff f87b 	bl	8002188 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4a8f      	ldr	r2, [pc, #572]	; (80032d4 <HAL_ADC_ConfigChannel+0x67c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	f040 8131 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x46e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2b09      	cmp	r3, #9
 80030bc:	bf94      	ite	ls
 80030be:	2301      	movls	r3, #1
 80030c0:	2300      	movhi	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e019      	b.n	80030fa <HAL_ADC_ConfigChannel+0x4a2>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80030d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80030e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d079      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_ADC_ConfigChannel+0x4c2>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	3301      	adds	r3, #1
 8003112:	069b      	lsls	r3, r3, #26
 8003114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003118:	e015      	b.n	8003146 <HAL_ADC_ConfigChannel+0x4ee>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e003      	b.n	800313e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	069b      	lsls	r3, r3, #26
 8003142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x50e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	3301      	adds	r3, #1
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	e017      	b.n	8003196 <HAL_ADC_ConfigChannel+0x53e>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e003      	b.n	800318a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	ea42 0103 	orr.w	r1, r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x564>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	051b      	lsls	r3, r3, #20
 80031ba:	e018      	b.n	80031ee <HAL_ADC_ConfigChannel+0x596>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 021f 	and.w	r2, r3, #31
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ee:	430b      	orrs	r3, r1
 80031f0:	e081      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d107      	bne.n	800320e <HAL_ADC_ConfigChannel+0x5b6>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	3301      	adds	r3, #1
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320c:	e015      	b.n	800323a <HAL_ADC_ConfigChannel+0x5e2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e003      	b.n	8003232 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	069b      	lsls	r3, r3, #26
 8003236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_ADC_ConfigChannel+0x602>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	0e9b      	lsrs	r3, r3, #26
 800324c:	3301      	adds	r3, #1
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	e017      	b.n	800328a <HAL_ADC_ConfigChannel+0x632>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	61bb      	str	r3, [r7, #24]
  return result;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e003      	b.n	800327e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	ea42 0103 	orr.w	r1, r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x65e>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b4:	e01e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x69c>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	60fb      	str	r3, [r7, #12]
  return result;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e006      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x688>
 80032d2:	bf00      	nop
 80032d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	051b      	lsls	r3, r3, #20
 80032f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fe ff19 	bl	8002132 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_ADC_ConfigChannel+0x7a4>)
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d06c      	beq.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330c:	483c      	ldr	r0, [pc, #240]	; (8003400 <HAL_ADC_ConfigChannel+0x7a8>)
 800330e:	f7fe fe5b 	bl	8001fc8 <LL_ADC_GetCommonPathInternalCh>
 8003312:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_ADC_ConfigChannel+0x7ac>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d127      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d121      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a35      	ldr	r2, [pc, #212]	; (8003408 <HAL_ADC_ConfigChannel+0x7b0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d157      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800333a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333e:	4619      	mov	r1, r3
 8003340:	482f      	ldr	r0, [pc, #188]	; (8003400 <HAL_ADC_ConfigChannel+0x7a8>)
 8003342:	f7fe fe2e 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_ADC_ConfigChannel+0x7b4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	4a30      	ldr	r2, [pc, #192]	; (8003410 <HAL_ADC_ConfigChannel+0x7b8>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003360:	e002      	b.n	8003368 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3b01      	subs	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f9      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800336e:	e03a      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_ADC_ConfigChannel+0x7bc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d113      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800337a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_ADC_ConfigChannel+0x7b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d12a      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003398:	4619      	mov	r1, r3
 800339a:	4819      	ldr	r0, [pc, #100]	; (8003400 <HAL_ADC_ConfigChannel+0x7a8>)
 800339c:	f7fe fe01 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033a0:	e021      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_ADC_ConfigChannel+0x7c0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d11c      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a12      	ldr	r2, [pc, #72]	; (8003408 <HAL_ADC_ConfigChannel+0x7b0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ca:	4619      	mov	r1, r3
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <HAL_ADC_ConfigChannel+0x7a8>)
 80033ce:	f7fe fde8 	bl	8001fa2 <LL_ADC_SetCommonPathInternalCh>
 80033d2:	e008      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	37d8      	adds	r7, #216	; 0xd8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	80080000 	.word	0x80080000
 8003400:	50040300 	.word	0x50040300
 8003404:	c7520000 	.word	0xc7520000
 8003408:	50040000 	.word	0x50040000
 800340c:	20000058 	.word	0x20000058
 8003410:	053e2d63 	.word	0x053e2d63
 8003414:	cb840000 	.word	0xcb840000
 8003418:	80000001 	.word	0x80000001

0800341c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe ff90 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8003438:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe ffb1 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8003444:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8098 	beq.w	8003584 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02a      	beq.n	80034b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d126      	bne.n	80034b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7e1b      	ldrb	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d122      	bne.n	80034b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003472:	2301      	movs	r3, #1
 8003474:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003476:	e014      	b.n	80034a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4a45      	ldr	r2, [pc, #276]	; (8003590 <ADC_ConversionStop+0x174>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d90d      	bls.n	800349c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f043 0210 	orr.w	r2, r3, #16
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e074      	b.n	8003586 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d1e3      	bne.n	8003478 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d014      	beq.n	80034e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe ff48 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe ff05 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff24 	bl	8002330 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d014      	beq.n	8003518 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe ff57 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe feed 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ff33 	bl	800237e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d005      	beq.n	800352a <ADC_ConversionStop+0x10e>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d105      	bne.n	8003530 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003524:	230c      	movs	r3, #12
 8003526:	617b      	str	r3, [r7, #20]
        break;
 8003528:	e005      	b.n	8003536 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800352a:	2308      	movs	r3, #8
 800352c:	617b      	str	r3, [r7, #20]
        break;
 800352e:	e002      	b.n	8003536 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003530:	2304      	movs	r3, #4
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003536:	f7fe fcf1 	bl	8001f1c <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800353c:	e01b      	b.n	8003576 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800353e:	f7fe fced 	bl	8001f1c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b05      	cmp	r3, #5
 800354a:	d914      	bls.n	8003576 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1dc      	bne.n	800353e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	a33fffff 	.word	0xa33fffff

08003594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fe89 	bl	80022bc <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d169      	bne.n	8003684 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	4b36      	ldr	r3, [pc, #216]	; (8003690 <ADC_Enable+0xfc>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0210 	orr.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e055      	b.n	8003686 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fe44 	bl	800226c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035e4:	482b      	ldr	r0, [pc, #172]	; (8003694 <ADC_Enable+0x100>)
 80035e6:	f7fe fcef 	bl	8001fc8 <LL_ADC_GetCommonPathInternalCh>
 80035ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <ADC_Enable+0x104>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	4a28      	ldr	r2, [pc, #160]	; (800369c <ADC_Enable+0x108>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800360e:	e002      	b.n	8003616 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3b01      	subs	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800361c:	f7fe fc7e 	bl	8001f1c <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003622:	e028      	b.n	8003676 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fe47 	bl	80022bc <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fe17 	bl	800226c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800363e:	f7fe fc6d 	bl	8001f1c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d914      	bls.n	8003676 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d00d      	beq.n	8003676 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d1cf      	bne.n	8003624 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	8000003f 	.word	0x8000003f
 8003694:	50040300 	.word	0x50040300
 8003698:	20000058 	.word	0x20000058
 800369c:	053e2d63 	.word	0x053e2d63

080036a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fe18 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80036b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fdff 	bl	80022bc <LL_ADC_IsEnabled>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d047      	beq.n	8003754 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d144      	bne.n	8003754 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030d 	and.w	r3, r3, #13
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fdd9 	bl	8002294 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2203      	movs	r2, #3
 80036e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ea:	f7fe fc17 	bl	8001f1c <HAL_GetTick>
 80036ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036f0:	e029      	b.n	8003746 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e023      	b.n	8003756 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800370e:	f7fe fc05 	bl	8001f1c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d914      	bls.n	8003746 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1dc      	bne.n	800370e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <LL_ADC_StartCalibration>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_IsCalibrationOnGoing>:
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a4:	d101      	bne.n	80037aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e04d      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff5f 	bl	80036a0 <ADC_Disable>
 80037e2:	4603      	mov	r3, r0
 80037e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d136      	bne.n	800385a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037f4:	f023 0302 	bic.w	r3, r3, #2
 80037f8:	f043 0202 	orr.w	r2, r3, #2
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ffa9 	bl	800375e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800380c:	e014      	b.n	8003838 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800381a:	d30d      	bcc.n	8003838 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f023 0312 	bic.w	r3, r3, #18
 8003824:	f043 0210 	orr.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e01b      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ffa7 	bl	8003790 <LL_ADC_IsCalibrationOnGoing>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e2      	bne.n	800380e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f023 0303 	bic.w	r3, r3, #3
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
 8003858:	e005      	b.n	8003866 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390e:	4a04      	ldr	r2, [pc, #16]	; (8003920 <__NVIC_SetPriorityGrouping+0x44>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	60d3      	str	r3, [r2, #12]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <__NVIC_GetPriorityGrouping+0x18>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	f003 0307 	and.w	r3, r3, #7
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	2b00      	cmp	r3, #0
 8003950:	db0b      	blt.n	800396a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4907      	ldr	r1, [pc, #28]	; (8003978 <__NVIC_EnableIRQ+0x38>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2001      	movs	r0, #1
 8003962:	fa00 f202 	lsl.w	r2, r0, r2
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	; (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a48:	d301      	bcc.n	8003a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00f      	b.n	8003a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <SysTick_Config+0x40>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a56:	210f      	movs	r1, #15
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f7ff ff8e 	bl	800397c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <SysTick_Config+0x40>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <SysTick_Config+0x40>)
 8003a68:	2207      	movs	r2, #7
 8003a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ff29 	bl	80038dc <__NVIC_SetPriorityGrouping>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa4:	f7ff ff3e 	bl	8003924 <__NVIC_GetPriorityGrouping>
 8003aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7ff ff8e 	bl	80039d0 <NVIC_EncodePriority>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff5d 	bl	800397c <__NVIC_SetPriority>
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff31 	bl	8003940 <__NVIC_EnableIRQ>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ffa2 	bl	8003a38 <SysTick_Config>
 8003af4:	4603      	mov	r3, r0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_DMA_Start_IT+0x20>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e04b      	b.n	8003bb6 <HAL_DMA_Start_IT+0xb8>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d13a      	bne.n	8003ba8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f8b0 	bl	8003cbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 020e 	orr.w	r2, r2, #14
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e00f      	b.n	8003b96 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0204 	bic.w	r2, r2, #4
 8003b84:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 020a 	orr.w	r2, r2, #10
 8003b94:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e005      	b.n	8003bb4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d008      	beq.n	8003be8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e022      	b.n	8003c2e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 020e 	bic.w	r2, r2, #14
 8003bf6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f003 021c 	and.w	r2, r3, #28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d005      	beq.n	8003c5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e029      	b.n	8003cb2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020e 	bic.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f003 021c 	and.w	r2, r3, #28
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
    }
  }
  return status;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f003 021c 	and.w	r2, r3, #28
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d108      	bne.n	8003d00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cfe:	e007      	b.n	8003d10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_FLASH_Program+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e053      	b.n	8003de2 <HAL_FLASH_Program+0xc6>
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d44:	f000 f888 	bl	8003e58 <FLASH_WaitForLastOperation>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d143      	bne.n	8003dda <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_FLASH_Program+0xd4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_FLASH_Program+0xd4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_FLASH_Program+0xd4>)
 8003d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003d70:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003d72:	2202      	movs	r2, #2
 8003d74:	771a      	strb	r2, [r3, #28]
 8003d76:	e002      	b.n	8003d7e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003d78:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f000 f8bd 	bl	8003f08 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e010      	b.n	8003db6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d002      	beq.n	8003da0 <HAL_FLASH_Program+0x84>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d10a      	bne.n	8003db6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68b8      	ldr	r0, [r7, #8]
 8003da6:	f000 f8d5 	bl	8003f54 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d102      	bne.n	8003db6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003db6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dba:	f000 f84d 	bl	8003e58 <FLASH_WaitForLastOperation>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_FLASH_Program+0xd4>)
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	4907      	ldr	r1, [pc, #28]	; (8003df0 <HAL_FLASH_Program+0xd4>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003dd6:	f000 f9cf 	bl	8004178 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_FLASH_Program+0xd0>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]

  return status;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000064 	.word	0x20000064
 8003df0:	40022000 	.word	0x40022000

08003df4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_FLASH_Unlock+0x38>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da0b      	bge.n	8003e1e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_FLASH_Unlock+0x38>)
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_FLASH_Unlock+0x3c>)
 8003e0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_FLASH_Unlock+0x38>)
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_FLASH_Unlock+0x40>)
 8003e10:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_FLASH_Unlock+0x38>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da01      	bge.n	8003e1e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	45670123 	.word	0x45670123
 8003e34:	cdef89ab 	.word	0xcdef89ab

08003e38 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_FLASH_Lock+0x1c>)
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_FLASH_Lock+0x1c>)
 8003e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e46:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40022000 	.word	0x40022000

08003e58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7fe f85c 	bl	8001f1c <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003e66:	e00d      	b.n	8003e84 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d009      	beq.n	8003e84 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003e70:	f7fe f854 	bl	8001f1c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d801      	bhi.n	8003e84 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e036      	b.n	8003ef2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1eb      	bne.n	8003e68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <FLASH_WaitForLastOperation+0xa8>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <FLASH_WaitForLastOperation+0xac>)
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <FLASH_WaitForLastOperation+0xac>)
 8003eaa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <FLASH_WaitForLastOperation+0x6e>
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	618b      	str	r3, [r1, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <FLASH_WaitForLastOperation+0x82>
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ed8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e009      	b.n	8003ef2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <FLASH_WaitForLastOperation+0xa4>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40022000 	.word	0x40022000
 8003f00:	0002c3fa 	.word	0x0002c3fa
 8003f04:	20000064 	.word	0x20000064

08003f08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <FLASH_Program_DoubleWord+0x48>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <FLASH_Program_DoubleWord+0x48>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003f26:	f3bf 8f6f 	isb	sy
}
 8003f2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	000a      	movs	r2, r1
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	3104      	adds	r1, #4
 8003f40:	4613      	mov	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40022000 	.word	0x40022000

08003f54 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003f5e:	2340      	movs	r3, #64	; 0x40
 8003f60:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <FLASH_Program_Fast+0x68>)
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <FLASH_Program_Fast+0x68>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f76:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f7c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f80:	b672      	cpsid	i
}
 8003f82:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3304      	adds	r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
    row_index--;
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ef      	bne.n	8003f84 <FLASH_Program_Fast+0x30>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003fb0:	bf00      	nop
 8003fb2:	3724      	adds	r7, #36	; 0x24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40022000 	.word	0x40022000

08003fc0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fca:	4b48      	ldr	r3, [pc, #288]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_FLASHEx_Erase+0x16>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e085      	b.n	80040e2 <HAL_FLASHEx_Erase+0x122>
 8003fd6:	4b45      	ldr	r3, [pc, #276]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fe0:	f7ff ff3a 	bl	8003e58 <FLASH_WaitForLastOperation>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d175      	bne.n	80040da <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fee:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004000:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 8004012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004016:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004018:	4b34      	ldr	r3, [pc, #208]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 800401a:	2203      	movs	r2, #3
 800401c:	771a      	strb	r2, [r3, #28]
 800401e:	e016      	b.n	800404e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 8004022:	2201      	movs	r2, #1
 8004024:	771a      	strb	r2, [r3, #28]
 8004026:	e012      	b.n	800404e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004034:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 800403a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004040:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 8004042:	2202      	movs	r2, #2
 8004044:	771a      	strb	r2, [r3, #28]
 8004046:	e002      	b.n	800404e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 800404a:	2200      	movs	r2, #0
 800404c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d111      	bne.n	800407a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f84a 	bl	80040f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004060:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004064:	f7ff fef8 	bl	8003e58 <FLASH_WaitForLastOperation>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800406c:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 8004072:	f023 0304 	bic.w	r3, r3, #4
 8004076:	6153      	str	r3, [r2, #20]
 8004078:	e02d      	b.n	80040d6 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	e01d      	b.n	80040c6 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4619      	mov	r1, r3
 8004090:	68b8      	ldr	r0, [r7, #8]
 8004092:	f000 f84d 	bl	8004130 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409a:	f7ff fedd 	bl	8003e58 <FLASH_WaitForLastOperation>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <HAL_FLASHEx_Erase+0x130>)
 80040a8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80040ac:	f023 0302 	bic.w	r3, r3, #2
 80040b0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	601a      	str	r2, [r3, #0]
          break;
 80040be:	e00a      	b.n	80040d6 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3d9      	bcc.n	800408a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80040d6:	f000 f84f 	bl	8004178 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040da:	4b04      	ldr	r3, [pc, #16]	; (80040ec <HAL_FLASHEx_Erase+0x12c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]

  return status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000064 	.word	0x20000064
 80040f0:	40022000 	.word	0x40022000

080040f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <FLASH_MassErase+0x38>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <FLASH_MassErase+0x38>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <FLASH_MassErase+0x38>)
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <FLASH_MassErase+0x38>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6153      	str	r3, [r2, #20]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40022000 	.word	0x40022000

08004130 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <FLASH_PageErase+0x44>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <FLASH_PageErase+0x44>)
 800414c:	4313      	orrs	r3, r2
 800414e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <FLASH_PageErase+0x44>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <FLASH_PageErase+0x44>)
 8004156:	f043 0302 	orr.w	r3, r3, #2
 800415a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <FLASH_PageErase+0x44>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <FLASH_PageErase+0x44>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	6153      	str	r3, [r2, #20]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40022000 	.word	0x40022000

08004178 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <FLASH_FlushCaches+0x8c>)
 8004180:	7f1b      	ldrb	r3, [r3, #28]
 8004182:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d002      	beq.n	8004190 <FLASH_FlushCaches+0x18>
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d117      	bne.n	80041c0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <FLASH_FlushCaches+0x90>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <FLASH_FlushCaches+0x90>)
 8004196:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <FLASH_FlushCaches+0x90>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d002      	beq.n	80041cc <FLASH_FlushCaches+0x54>
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d111      	bne.n	80041f0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a07      	ldr	r2, [pc, #28]	; (8004208 <FLASH_FlushCaches+0x90>)
 80041ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ee:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <FLASH_FlushCaches+0x8c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000064 	.word	0x20000064
 8004208:	40022000 	.word	0x40022000

0800420c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421a:	e148      	b.n	80044ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 813a 	beq.w	80044a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d005      	beq.n	800424c <HAL_GPIO_Init+0x40>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d130      	bne.n	80042ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4013      	ands	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004282:	2201      	movs	r2, #1
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0201 	and.w	r2, r3, #1
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d017      	beq.n	80042ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d123      	bne.n	800433e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	08da      	lsrs	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3208      	adds	r2, #8
 8004338:	6939      	ldr	r1, [r7, #16]
 800433a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8094 	beq.w	80044a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <HAL_GPIO_Init+0x2c0>)
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	4a51      	ldr	r2, [pc, #324]	; (80044cc <HAL_GPIO_Init+0x2c0>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6613      	str	r3, [r2, #96]	; 0x60
 800438c:	4b4f      	ldr	r3, [pc, #316]	; (80044cc <HAL_GPIO_Init+0x2c0>)
 800438e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004398:	4a4d      	ldr	r2, [pc, #308]	; (80044d0 <HAL_GPIO_Init+0x2c4>)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	3302      	adds	r3, #2
 80043a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	220f      	movs	r2, #15
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043c2:	d00d      	beq.n	80043e0 <HAL_GPIO_Init+0x1d4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a43      	ldr	r2, [pc, #268]	; (80044d4 <HAL_GPIO_Init+0x2c8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <HAL_GPIO_Init+0x1d0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a42      	ldr	r2, [pc, #264]	; (80044d8 <HAL_GPIO_Init+0x2cc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_GPIO_Init+0x1cc>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e004      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043d8:	2307      	movs	r3, #7
 80043da:	e002      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043e0:	2300      	movs	r3, #0
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	f002 0203 	and.w	r2, r2, #3
 80043e8:	0092      	lsls	r2, r2, #2
 80043ea:	4093      	lsls	r3, r2
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043f2:	4937      	ldr	r1, [pc, #220]	; (80044d0 <HAL_GPIO_Init+0x2c4>)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	3302      	adds	r3, #2
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004424:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004478:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f aeaf 	bne.w	800421c <HAL_GPIO_Init+0x10>
  }
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40010000 	.word	0x40010000
 80044d4:	48000400 	.word	0x48000400
 80044d8:	48000800 	.word	0x48000800
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
 80044ec:	4613      	mov	r3, r2
 80044ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f0:	787b      	ldrb	r3, [r7, #1]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <HAL_PWREx_GetVoltageRange+0x18>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40007000 	.word	0x40007000

0800454c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455a:	d130      	bne.n	80045be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d038      	beq.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2232      	movs	r2, #50	; 0x32
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004590:	e002      	b.n	8004598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b01      	subs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d102      	bne.n	80045ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f2      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d110      	bne.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d007      	beq.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045d4:	4a05      	ldr	r2, [pc, #20]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40007000 	.word	0x40007000
 80045f0:	20000058 	.word	0x20000058
 80045f4:	431bde83 	.word	0x431bde83

080045f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f000 bc02 	b.w	8004e10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460c:	4b96      	ldr	r3, [pc, #600]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004616:	4b94      	ldr	r3, [pc, #592]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80e4 	beq.w	80047f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_RCC_OscConfig+0x4c>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	f040 808b 	bne.w	8004752 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 8087 	bne.w	8004752 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004644:	4b88      	ldr	r3, [pc, #544]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x64>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e3d9      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <HAL_RCC_OscConfig+0x7e>
 800466c:	4b7e      	ldr	r3, [pc, #504]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004674:	e005      	b.n	8004682 <HAL_RCC_OscConfig+0x8a>
 8004676:	4b7c      	ldr	r3, [pc, #496]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	4293      	cmp	r3, r2
 8004684:	d223      	bcs.n	80046ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd8c 	bl	80051a8 <RCC_SetFlashLatencyFromMSIRange>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e3ba      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800469a:	4b73      	ldr	r3, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a72      	ldr	r2, [pc, #456]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046a0:	f043 0308 	orr.w	r3, r3, #8
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b70      	ldr	r3, [pc, #448]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	496d      	ldr	r1, [pc, #436]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b8:	4b6b      	ldr	r3, [pc, #428]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	4968      	ldr	r1, [pc, #416]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	e025      	b.n	800471a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ce:	4b66      	ldr	r3, [pc, #408]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4960      	ldr	r1, [pc, #384]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	495b      	ldr	r1, [pc, #364]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd4c 	bl	80051a8 <RCC_SetFlashLatencyFromMSIRange>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e37a      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800471a:	f000 fc81 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b51      	ldr	r3, [pc, #324]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4950      	ldr	r1, [pc, #320]	; (800486c <HAL_RCC_OscConfig+0x274>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	fa22 f303 	lsr.w	r3, r2, r3
 8004736:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <HAL_RCC_OscConfig+0x278>)
 8004738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800473a:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <HAL_RCC_OscConfig+0x27c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fb9c 	bl	8001e7c <HAL_InitTick>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d052      	beq.n	80047f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	e35e      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d032      	beq.n	80047c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800475a:	4b43      	ldr	r3, [pc, #268]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a42      	ldr	r2, [pc, #264]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004766:	f7fd fbd9 	bl	8001f1c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800476e:	f7fd fbd5 	bl	8001f1c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e347      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a35      	ldr	r2, [pc, #212]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4930      	ldr	r1, [pc, #192]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047aa:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	492b      	ldr	r1, [pc, #172]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
 80047be:	e01a      	b.n	80047f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fba6 	bl	8001f1c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d4:	f7fd fba2 	bl	8001f1c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e314      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1dc>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d073      	beq.n	80048ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d005      	beq.n	8004814 <HAL_RCC_OscConfig+0x21c>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d10e      	bne.n	800482c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d10b      	bne.n	800482c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d063      	beq.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d15f      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e2f1      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d106      	bne.n	8004844 <HAL_RCC_OscConfig+0x24c>
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e025      	b.n	8004890 <HAL_RCC_OscConfig+0x298>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800484c:	d114      	bne.n	8004878 <HAL_RCC_OscConfig+0x280>
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a02      	ldr	r2, [pc, #8]	; (8004868 <HAL_RCC_OscConfig+0x270>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e013      	b.n	8004890 <HAL_RCC_OscConfig+0x298>
 8004868:	40021000 	.word	0x40021000
 800486c:	08009ad4 	.word	0x08009ad4
 8004870:	20000058 	.word	0x20000058
 8004874:	2000005c 	.word	0x2000005c
 8004878:	4ba0      	ldr	r3, [pc, #640]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a9f      	ldr	r2, [pc, #636]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 800487e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b9d      	ldr	r3, [pc, #628]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a9c      	ldr	r2, [pc, #624]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fb40 	bl	8001f1c <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd fb3c 	bl	8001f1c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e2ae      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	4b92      	ldr	r3, [pc, #584]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x2a8>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fd fb2c 	bl	8001f1c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fd fb28 	bl	8001f1c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e29a      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048da:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2d0>
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d060      	beq.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_OscConfig+0x310>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d119      	bne.n	8004936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d116      	bne.n	8004936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004908:	4b7c      	ldr	r3, [pc, #496]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_OscConfig+0x328>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e277      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	4973      	ldr	r1, [pc, #460]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004934:	e040      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d023      	beq.n	8004986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800493e:	4b6f      	ldr	r3, [pc, #444]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6e      	ldr	r2, [pc, #440]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fd fae7 	bl	8001f1c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fd fae3 	bl	8001f1c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e255      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004964:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b62      	ldr	r3, [pc, #392]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	495f      	ldr	r1, [pc, #380]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	e018      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5c      	ldr	r2, [pc, #368]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd fac3 	bl	8001f1c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fd fabf 	bl	8001f1c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e231      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	4a4a      	ldr	r2, [pc, #296]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fa9e 	bl	8001f1c <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fd fa9a 	bl	8001f1c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e20c      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ef      	beq.n	80049e4 <HAL_RCC_OscConfig+0x3ec>
 8004a04:	e01b      	b.n	8004a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a06:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0c:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd fa81 	bl	8001f1c <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fa7d 	bl	8001f1c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1ef      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a30:	4b32      	ldr	r3, [pc, #200]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80a6 	beq.w	8004b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a50:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a66:	6593      	str	r3, [r2, #88]	; 0x58
 8004a68:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a90:	f7fd fa44 	bl	8001f1c <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fd fa40 	bl	8001f1c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e1b2      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4d8>
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	4a0d      	ldr	r2, [pc, #52]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ace:	e029      	b.n	8004b24 <HAL_RCC_OscConfig+0x52c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d115      	bne.n	8004b04 <HAL_RCC_OscConfig+0x50c>
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	4a07      	ldr	r2, [pc, #28]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	4a03      	ldr	r2, [pc, #12]	; (8004afc <HAL_RCC_OscConfig+0x504>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af8:	e014      	b.n	8004b24 <HAL_RCC_OscConfig+0x52c>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	4b9a      	ldr	r3, [pc, #616]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	4a99      	ldr	r2, [pc, #612]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b14:	4b96      	ldr	r3, [pc, #600]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	4a95      	ldr	r2, [pc, #596]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b1c:	f023 0304 	bic.w	r3, r3, #4
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d016      	beq.n	8004b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd f9f6 	bl	8001f1c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fd f9f2 	bl	8001f1c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e162      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4a:	4b89      	ldr	r3, [pc, #548]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ed      	beq.n	8004b34 <HAL_RCC_OscConfig+0x53c>
 8004b58:	e015      	b.n	8004b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd f9df 	bl	8001f1c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd f9db 	bl	8001f1c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e14b      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b78:	4b7d      	ldr	r3, [pc, #500]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ed      	bne.n	8004b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b86:	7ffb      	ldrb	r3, [r7, #31]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	4a77      	ldr	r2, [pc, #476]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d03c      	beq.n	8004c1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01c      	beq.n	8004be6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bac:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb2:	4a6f      	ldr	r2, [pc, #444]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbc:	f7fd f9ae 	bl	8001f1c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc4:	f7fd f9aa 	bl	8001f1c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e11c      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ef      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x5cc>
 8004be4:	e01b      	b.n	8004c1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be6:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bec:	4a60      	ldr	r2, [pc, #384]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fd f991 	bl	8001f1c <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfe:	f7fd f98d 	bl	8001f1c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0ff      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c10:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ef      	bne.n	8004bfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80f3 	beq.w	8004e0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f040 80c9 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c32:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0203 	and.w	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d12c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	3b01      	subs	r3, #1
 8004c52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d123      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d11b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d113      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	3b01      	subs	r3, #1
 8004c86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d109      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d06b      	beq.n	8004d78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b0c      	cmp	r3, #12
 8004ca4:	d062      	beq.n	8004d6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ca6:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0ac      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2d      	ldr	r2, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cc2:	f7fd f92b 	bl	8001f1c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd f927 	bl	8001f1c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e099      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_RCC_OscConfig+0x77c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0112      	lsls	r2, r2, #4
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d02:	0212      	lsls	r2, r2, #8
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0552      	lsls	r2, r2, #21
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d16:	0852      	lsrs	r2, r2, #1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	0652      	lsls	r2, r2, #25
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d22:	06d2      	lsls	r2, r2, #27
 8004d24:	430a      	orrs	r2, r1
 8004d26:	4912      	ldr	r1, [pc, #72]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d44:	f7fd f8ea 	bl	8001f1c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd f8e6 	bl	8001f1c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e058      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <HAL_RCC_OscConfig+0x778>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d6a:	e050      	b.n	8004e0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04f      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d144      	bne.n	8004e0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d9c:	f7fd f8be 	bl	8001f1c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fd f8ba 	bl	8001f1c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e02c      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x7ac>
 8004dc2:	e024      	b.n	8004e0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d01f      	beq.n	8004e0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fd f8a1 	bl	8001f1c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fd f89d 	bl	8001f1c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e00f      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	4905      	ldr	r1, [pc, #20]	; (8004e18 <HAL_RCC_OscConfig+0x820>)
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_OscConfig+0x824>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
 8004e08:	e001      	b.n	8004e0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	feeefffc 	.word	0xfeeefffc

08004e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0e7      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e34:	4b75      	ldr	r3, [pc, #468]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d910      	bls.n	8004e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e42:	4b72      	ldr	r3, [pc, #456]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 0207 	bic.w	r2, r3, #7
 8004e4a:	4970      	ldr	r1, [pc, #448]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b6e      	ldr	r3, [pc, #440]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0cf      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	4b66      	ldr	r3, [pc, #408]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d908      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4960      	ldr	r1, [pc, #384]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04c      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea6:	4b5a      	ldr	r3, [pc, #360]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d121      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0a6      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d107      	bne.n	8004ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ebe:	4b54      	ldr	r3, [pc, #336]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d115      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e09a      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ed6:	4b4e      	ldr	r3, [pc, #312]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e08e      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e086      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b46      	ldr	r3, [pc, #280]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4943      	ldr	r1, [pc, #268]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f08:	f7fd f808 	bl	8001f1c <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fd f804 	bl	8001f1c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e06e      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d208      	bcs.n	8004f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	492b      	ldr	r1, [pc, #172]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d210      	bcs.n	8004f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	4923      	ldr	r1, [pc, #140]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCC_ClockConfig+0x1ec>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e036      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4918      	ldr	r1, [pc, #96]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4910      	ldr	r1, [pc, #64]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fd4:	f000 f824 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <HAL_RCC_ClockConfig+0x1f0>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	490b      	ldr	r1, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x1f4>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	4a09      	ldr	r2, [pc, #36]	; (8005018 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1fc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc ff3f 	bl	8001e7c <HAL_InitTick>
 8004ffe:	4603      	mov	r3, r0
 8005000:	72fb      	strb	r3, [r7, #11]

  return status;
 8005002:	7afb      	ldrb	r3, [r7, #11]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40022000 	.word	0x40022000
 8005010:	40021000 	.word	0x40021000
 8005014:	08009ad4 	.word	0x08009ad4
 8005018:	20000058 	.word	0x20000058
 800501c:	2000005c 	.word	0x2000005c

08005020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800502e:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005038:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x34>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d121      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d11e      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005054:	4b34      	ldr	r3, [pc, #208]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005060:	4b31      	ldr	r3, [pc, #196]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e005      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005070:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <HAL_RCC_GetSysClockFreq+0x10c>)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d102      	bne.n	800509e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <HAL_RCC_GetSysClockFreq+0x110>)
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	e004      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050a4:	4b23      	ldr	r3, [pc, #140]	; (8005134 <HAL_RCC_GetSysClockFreq+0x114>)
 80050a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d134      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d003      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0xac>
 80050c4:	e005      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCC_GetSysClockFreq+0x110>)
 80050c8:	617b      	str	r3, [r7, #20]
      break;
 80050ca:	e005      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <HAL_RCC_GetSysClockFreq+0x114>)
 80050ce:	617b      	str	r3, [r7, #20]
      break;
 80050d0:	e002      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	617b      	str	r3, [r7, #20]
      break;
 80050d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	3301      	adds	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	fb03 f202 	mul.w	r2, r3, r2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <HAL_RCC_GetSysClockFreq+0x108>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	0e5b      	lsrs	r3, r3, #25
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	3301      	adds	r3, #1
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005118:	69bb      	ldr	r3, [r7, #24]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	08009aec 	.word	0x08009aec
 8005130:	00f42400 	.word	0x00f42400
 8005134:	007a1200 	.word	0x007a1200

08005138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <HAL_RCC_GetHCLKFreq+0x14>)
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000058 	.word	0x20000058

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005154:	f7ff fff0 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4904      	ldr	r1, [pc, #16]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	08009ae4 	.word	0x08009ae4

0800517c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005180:	f7ff ffda 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0adb      	lsrs	r3, r3, #11
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4904      	ldr	r1, [pc, #16]	; (80051a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	08009ae4 	.word	0x08009ae4

080051a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051c0:	f7ff f9b6 	bl	8004530 <HAL_PWREx_GetVoltageRange>
 80051c4:	6178      	str	r0, [r7, #20]
 80051c6:	e014      	b.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	4a24      	ldr	r2, [pc, #144]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6593      	str	r3, [r2, #88]	; 0x58
 80051d4:	4b22      	ldr	r3, [pc, #136]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051e0:	f7ff f9a6 	bl	8004530 <HAL_PWREx_GetVoltageRange>
 80051e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d10b      	bne.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d919      	bls.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2ba0      	cmp	r3, #160	; 0xa0
 8005204:	d902      	bls.n	800520c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005206:	2302      	movs	r3, #2
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	e013      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800520c:	2301      	movs	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e010      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d902      	bls.n	800521e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005218:	2303      	movs	r3, #3
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e00a      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d102      	bne.n	800522a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005224:	2302      	movs	r3, #2
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e004      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d101      	bne.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005230:	2301      	movs	r3, #1
 8005232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f023 0207 	bic.w	r2, r3, #7
 800523c:	4909      	ldr	r1, [pc, #36]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005244:	4b07      	ldr	r3, [pc, #28]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	429a      	cmp	r2, r3
 8005250:	d001      	beq.n	8005256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	40022000 	.word	0x40022000

08005268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005270:	2300      	movs	r3, #0
 8005272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005274:	2300      	movs	r3, #0
 8005276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005280:	2b00      	cmp	r3, #0
 8005282:	d031      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800528c:	d01a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800528e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005292:	d814      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800529c:	d10f      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800529e:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4a5c      	ldr	r2, [pc, #368]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052aa:	e00c      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f9de 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052bc:	e003      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	74fb      	strb	r3, [r7, #19]
      break;
 80052c2:	e000      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80052c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052cc:	4b51      	ldr	r3, [pc, #324]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	494e      	ldr	r1, [pc, #312]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052e2:	e001      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 809e 	beq.w	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f6:	2300      	movs	r3, #0
 80052f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052fa:	4b46      	ldr	r3, [pc, #280]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00d      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a3f      	ldr	r2, [pc, #252]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
 800531c:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005328:	2301      	movs	r3, #1
 800532a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532c:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a39      	ldr	r2, [pc, #228]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005338:	f7fc fdf0 	bl	8001f1c <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fc fdec 	bl	8001f1c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d902      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	74fb      	strb	r3, [r7, #19]
        break;
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ef      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d15a      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005366:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01e      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	429a      	cmp	r2, r3
 8005380:	d019      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800538e:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800539e:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053ae:	4a19      	ldr	r2, [pc, #100]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d016      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fc fdac 	bl	8001f1c <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c6:	e00b      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fc fda8 	bl	8001f1c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d902      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	74fb      	strb	r3, [r7, #19]
            break;
 80053de:	e006      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ec      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	4904      	ldr	r1, [pc, #16]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800540a:	e009      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	74bb      	strb	r3, [r7, #18]
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005420:	7c7b      	ldrb	r3, [r7, #17]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b8a      	ldr	r3, [pc, #552]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	4a89      	ldr	r2, [pc, #548]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800543e:	4b84      	ldr	r3, [pc, #528]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f023 0203 	bic.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	4980      	ldr	r1, [pc, #512]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005460:	4b7b      	ldr	r3, [pc, #492]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 020c 	bic.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	4978      	ldr	r1, [pc, #480]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005482:	4b73      	ldr	r3, [pc, #460]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	496f      	ldr	r1, [pc, #444]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a4:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	4967      	ldr	r1, [pc, #412]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c6:	4b62      	ldr	r3, [pc, #392]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	495e      	ldr	r1, [pc, #376]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	4956      	ldr	r1, [pc, #344]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	494d      	ldr	r1, [pc, #308]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d028      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552c:	4b48      	ldr	r3, [pc, #288]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4945      	ldr	r1, [pc, #276]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b40      	ldr	r3, [pc, #256]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a3f      	ldr	r2, [pc, #252]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
 8005558:	e011      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005562:	d10c      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f882 	bl	8005674 <RCCEx_PLLSAI1_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d028      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800558a:	4b31      	ldr	r3, [pc, #196]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	492d      	ldr	r1, [pc, #180]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055aa:	4b29      	ldr	r3, [pc, #164]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b4:	60d3      	str	r3, [r2, #12]
 80055b6:	e011      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055c0:	d10c      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	2101      	movs	r1, #1
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f853 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01c      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f6:	4916      	ldr	r1, [pc, #88]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2102      	movs	r1, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f830 	bl	8005674 <RCCEx_PLLSAI1_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	4904      	ldr	r1, [pc, #16]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005644:	7cbb      	ldrb	r3, [r7, #18]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000

08005654 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a04      	ldr	r2, [pc, #16]	; (8005670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	6013      	str	r3, [r2, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000

08005674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005682:	4b74      	ldr	r3, [pc, #464]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800568e:	4b71      	ldr	r3, [pc, #452]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0203 	and.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
       ||
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056a6:	4b6b      	ldr	r3, [pc, #428]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
       ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d047      	beq.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e044      	b.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d018      	beq.n	80056fa <RCCEx_PLLSAI1_Config+0x86>
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d825      	bhi.n	8005718 <RCCEx_PLLSAI1_Config+0xa4>
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x62>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d009      	beq.n	80056e8 <RCCEx_PLLSAI1_Config+0x74>
 80056d4:	e020      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d6:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e6:	e01a      	b.n	800571e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e8:	4b5a      	ldr	r3, [pc, #360]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e013      	b.n	8005722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fa:	4b56      	ldr	r3, [pc, #344]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005706:	4b53      	ldr	r3, [pc, #332]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005716:	e006      	b.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e004      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005726:	bf00      	nop
    }

    if(status == HAL_OK)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572e:	4b49      	ldr	r3, [pc, #292]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	430b      	orrs	r3, r1
 8005744:	4943      	ldr	r1, [pc, #268]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d17c      	bne.n	800584a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005750:	4b40      	ldr	r3, [pc, #256]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a3f      	ldr	r2, [pc, #252]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800575a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575c:	f7fc fbde 	bl	8001f1c <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005762:	e009      	b.n	8005778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005764:	f7fc fbda 	bl	8001f1c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d902      	bls.n	8005778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	73fb      	strb	r3, [r7, #15]
        break;
 8005776:	e005      	b.n	8005784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ef      	bne.n	8005764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d15f      	bne.n	800584a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d110      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005790:	4b30      	ldr	r3, [pc, #192]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6892      	ldr	r2, [r2, #8]
 80057a0:	0211      	lsls	r1, r2, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	06d2      	lsls	r2, r2, #27
 80057a8:	430a      	orrs	r2, r1
 80057aa:	492a      	ldr	r1, [pc, #168]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
 80057b0:	e027      	b.n	8005802 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d112      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b8:	4b26      	ldr	r3, [pc, #152]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6912      	ldr	r2, [r2, #16]
 80057ce:	0852      	lsrs	r2, r2, #1
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0552      	lsls	r2, r2, #21
 80057d4:	430a      	orrs	r2, r1
 80057d6:	491f      	ldr	r1, [pc, #124]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	610b      	str	r3, [r1, #16]
 80057dc:	e011      	b.n	8005802 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	0211      	lsls	r1, r2, #8
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6952      	ldr	r2, [r2, #20]
 80057f4:	0852      	lsrs	r2, r2, #1
 80057f6:	3a01      	subs	r2, #1
 80057f8:	0652      	lsls	r2, r2, #25
 80057fa:	430a      	orrs	r2, r1
 80057fc:	4915      	ldr	r1, [pc, #84]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800580c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fc fb85 	bl	8001f1c <HAL_GetTick>
 8005812:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005814:	e009      	b.n	800582a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005816:	f7fc fb81 	bl	8001f1c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d902      	bls.n	800582a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	73fb      	strb	r3, [r7, #15]
          break;
 8005828:	e005      	b.n	8005836 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ef      	beq.n	8005816 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d079      	beq.n	800595e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc f8ec 	bl	8001a5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d058      	beq.n	800594c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	22ca      	movs	r2, #202	; 0xca
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2253      	movs	r2, #83	; 0x53
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fbda 	bl	8006064 <RTC_EnterInitMode>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d127      	bne.n	800590a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058cc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68d2      	ldr	r2, [r2, #12]
 80058f4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6919      	ldr	r1, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fbde 	bl	80060cc <RTC_ExitInitMode>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d113      	bne.n	8005942 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0203 	bic.w	r2, r2, #3
 8005928:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
 800594a:	e001      	b.n	8005950 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005968:	b590      	push	{r4, r7, lr}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_RTC_SetTime+0x1a>
 800597e:	2302      	movs	r3, #2
 8005980:	e08b      	b.n	8005a9a <HAL_RTC_SetTime+0x132>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	22ca      	movs	r2, #202	; 0xca
 8005998:	625a      	str	r2, [r3, #36]	; 0x24
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2253      	movs	r2, #83	; 0x53
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fb5e 	bl	8006064 <RTC_EnterInitMode>
 80059a8:	4603      	mov	r3, r0
 80059aa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d163      	bne.n	8005a7a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d126      	bne.n	8005a06 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fbb9 	bl	8006148 <RTC_ByteToBcd2>
 80059d6:	4603      	mov	r3, r0
 80059d8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fbb2 	bl	8006148 <RTC_ByteToBcd2>
 80059e4:	4603      	mov	r3, r0
 80059e6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059e8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fbaa 	bl	8006148 <RTC_ByteToBcd2>
 80059f4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059f6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e018      	b.n	8005a38 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2200      	movs	r2, #0
 8005a18:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a26:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a2c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6899      	ldr	r1, [r3, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fb2b 	bl	80060cc <RTC_ExitInitMode>
 8005a76:	4603      	mov	r3, r0
 8005a78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	22ff      	movs	r2, #255	; 0xff
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}

08005aa2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ad0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	0d9b      	lsrs	r3, r3, #22
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11a      	bne.n	8005b50 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fb32 	bl	8006188 <RTC_Bcd2ToByte>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb29 	bl	8006188 <RTC_Bcd2ToByte>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	789b      	ldrb	r3, [r3, #2]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb20 	bl	8006188 <RTC_Bcd2ToByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b5a:	b590      	push	{r4, r7, lr}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_RTC_SetDate+0x1a>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e075      	b.n	8005c60 <HAL_RTC_SetDate+0x106>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10e      	bne.n	8005ba8 <HAL_RTC_SetDate+0x4e>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	f023 0310 	bic.w	r3, r3, #16
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	330a      	adds	r3, #10
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11c      	bne.n	8005be8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	78db      	ldrb	r3, [r3, #3]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fac8 	bl	8006148 <RTC_ByteToBcd2>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fac1 	bl	8006148 <RTC_ByteToBcd2>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005bca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fab9 	bl	8006148 <RTC_ByteToBcd2>
 8005bd6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bd8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e00e      	b.n	8005c06 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005bf4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005bfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	22ca      	movs	r2, #202	; 0xca
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2253      	movs	r2, #83	; 0x53
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fa24 	bl	8006064 <RTC_EnterInitMode>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c20:	7cfb      	ldrb	r3, [r7, #19]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fa48 	bl	80060cc <RTC_ExitInitMode>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd90      	pop	{r4, r7, pc}

08005c68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	0b5b      	lsrs	r3, r3, #13
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11a      	bne.n	8005cf8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	78db      	ldrb	r3, [r3, #3]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fa5e 	bl	8006188 <RTC_Bcd2ToByte>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fa55 	bl	8006188 <RTC_Bcd2ToByte>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	789b      	ldrb	r3, [r3, #2]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fa4c 	bl	8006188 <RTC_Bcd2ToByte>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b089      	sub	sp, #36	; 0x24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_RTC_SetAlarm_IT+0x1a>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e127      	b.n	8005f6e <HAL_RTC_SetAlarm_IT+0x26a>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d137      	bne.n	8005da4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f9fb 	bl	8006148 <RTC_ByteToBcd2>
 8005d52:	4603      	mov	r3, r0
 8005d54:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f9f4 	bl	8006148 <RTC_ByteToBcd2>
 8005d60:	4603      	mov	r3, r0
 8005d62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d64:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	789b      	ldrb	r3, [r3, #2]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f9ec 	bl	8006148 <RTC_ByteToBcd2>
 8005d70:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d72:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	78db      	ldrb	r3, [r3, #3]
 8005d7a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d7c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f9de 	bl	8006148 <RTC_ByteToBcd2>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005d98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e023      	b.n	8005dec <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005dc4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005dca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	78db      	ldrb	r3, [r3, #3]
 8005dd0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005dd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dda:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ddc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005de2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	22ca      	movs	r2, #202	; 0xca
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2253      	movs	r2, #83	; 0x53
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e10:	d14a      	bne.n	8005ea8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e20:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005e32:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005e34:	f7fc f872 	bl	8001f1c <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e3a:	e015      	b.n	8005e68 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e3c:	f7fc f86e 	bl	8001f1c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4a:	d90d      	bls.n	8005e68 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	22ff      	movs	r2, #255	; 0xff
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2203      	movs	r2, #3
 8005e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e082      	b.n	8005f6e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0e2      	beq.n	8005e3c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e94:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	e049      	b.n	8005f3c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005eb6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005ec8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005eca:	f7fc f827 	bl	8001f1c <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ed0:	e015      	b.n	8005efe <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed2:	f7fc f823 	bl	8001f1c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee0:	d90d      	bls.n	8005efe <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2203      	movs	r2, #3
 8005eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e037      	b.n	8005f6e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0e2      	beq.n	8005ed2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_RTC_SetAlarm_IT+0x274>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <HAL_RTC_SetAlarm_IT+0x274>)
 8005f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f46:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RTC_SetAlarm_IT+0x274>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_RTC_SetAlarm_IT+0x274>)
 8005f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f52:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3724      	adds	r7, #36	; 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd90      	pop	{r4, r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40010400 	.word	0x40010400

08005f7c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005f86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005f8a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005fb8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f824 	bl	8006008 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005fec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8e4 	bl	80061bc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40010400 	.word	0x40010400

08006008 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0d      	ldr	r2, [pc, #52]	; (8006060 <HAL_RTC_WaitForSynchro+0x44>)
 800602a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800602c:	f7fb ff76 	bl	8001f1c <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006032:	e009      	b.n	8006048 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006034:	f7fb ff72 	bl	8001f1c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006042:	d901      	bls.n	8006048 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e007      	b.n	8006058 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0ee      	beq.n	8006034 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	0003ff5f 	.word	0x0003ff5f

08006064 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d120      	bne.n	80060c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006088:	f7fb ff48 	bl	8001f1c <HAL_GetTick>
 800608c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800608e:	e00d      	b.n	80060ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006090:	f7fb ff44 	bl	8001f1c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800609e:	d905      	bls.n	80060ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2203      	movs	r2, #3
 80060a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <RTC_EnterInitMode+0x5c>
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d1e7      	bne.n	8006090 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <RTC_ExitInitMode+0x78>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4a19      	ldr	r2, [pc, #100]	; (8006144 <RTC_ExitInitMode+0x78>)
 80060de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80060e4:	4b17      	ldr	r3, [pc, #92]	; (8006144 <RTC_ExitInitMode+0x78>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10c      	bne.n	800610a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff93 	bl	800601c <HAL_RTC_WaitForSynchro>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01e      	beq.n	800613a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2203      	movs	r2, #3
 8006100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	e017      	b.n	800613a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <RTC_ExitInitMode+0x78>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <RTC_ExitInitMode+0x78>)
 8006110:	f023 0320 	bic.w	r3, r3, #32
 8006114:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ff80 	bl	800601c <HAL_RTC_WaitForSynchro>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <RTC_ExitInitMode+0x78>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4a04      	ldr	r2, [pc, #16]	; (8006144 <RTC_ExitInitMode+0x78>)
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	6093      	str	r3, [r2, #8]
  }

  return status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40002800 	.word	0x40002800

08006148 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800615a:	e005      	b.n	8006168 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	3b0a      	subs	r3, #10
 8006166:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006168:	7afb      	ldrb	r3, [r7, #11]
 800616a:	2b09      	cmp	r3, #9
 800616c:	d8f6      	bhi.n	800615c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	b2da      	uxtb	r2, r3
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	4313      	orrs	r3, r2
 800617a:	b2db      	uxtb	r3, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	4413      	add	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	4413      	add	r3, r2
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e049      	b.n	8006276 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb fc68 	bl	8001acc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fdd0 	bl	8006db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_TIM_IC_Start_IT+0x1e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629a:	b2db      	uxtb	r3, r3
 800629c:	e023      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x66>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d104      	bne.n	80062ae <HAL_TIM_IC_Start_IT+0x2e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e01b      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x66>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d104      	bne.n	80062be <HAL_TIM_IC_Start_IT+0x3e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e013      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x66>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_IC_Start_IT+0x4e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	e00b      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x66>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d104      	bne.n	80062de <HAL_TIM_IC_Start_IT+0x5e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	e003      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x66>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_TIM_IC_Start_IT+0x78>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	e013      	b.n	8006320 <HAL_TIM_IC_Start_IT+0xa0>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d104      	bne.n	8006308 <HAL_TIM_IC_Start_IT+0x88>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e00b      	b.n	8006320 <HAL_TIM_IC_Start_IT+0xa0>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b08      	cmp	r3, #8
 800630c:	d104      	bne.n	8006318 <HAL_TIM_IC_Start_IT+0x98>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e003      	b.n	8006320 <HAL_TIM_IC_Start_IT+0xa0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800631e:	b2db      	uxtb	r3, r3
 8006320:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d102      	bne.n	800632e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006328:	7b7b      	ldrb	r3, [r7, #13]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d001      	beq.n	8006332 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e0c9      	b.n	80064c6 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <HAL_TIM_IC_Start_IT+0xc2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006340:	e023      	b.n	800638a <HAL_TIM_IC_Start_IT+0x10a>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b04      	cmp	r3, #4
 8006346:	d104      	bne.n	8006352 <HAL_TIM_IC_Start_IT+0xd2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006350:	e01b      	b.n	800638a <HAL_TIM_IC_Start_IT+0x10a>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d104      	bne.n	8006362 <HAL_TIM_IC_Start_IT+0xe2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006360:	e013      	b.n	800638a <HAL_TIM_IC_Start_IT+0x10a>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b0c      	cmp	r3, #12
 8006366:	d104      	bne.n	8006372 <HAL_TIM_IC_Start_IT+0xf2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006370:	e00b      	b.n	800638a <HAL_TIM_IC_Start_IT+0x10a>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b10      	cmp	r3, #16
 8006376:	d104      	bne.n	8006382 <HAL_TIM_IC_Start_IT+0x102>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006380:	e003      	b.n	800638a <HAL_TIM_IC_Start_IT+0x10a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_TIM_IC_Start_IT+0x11a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006398:	e013      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x142>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d104      	bne.n	80063aa <HAL_TIM_IC_Start_IT+0x12a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a8:	e00b      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x142>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_IC_Start_IT+0x13a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b8:	e003      	b.n	80063c2 <HAL_TIM_IC_Start_IT+0x142>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d841      	bhi.n	800644c <HAL_TIM_IC_Start_IT+0x1cc>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <HAL_TIM_IC_Start_IT+0x150>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	08006405 	.word	0x08006405
 80063d4:	0800644d 	.word	0x0800644d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800644d 	.word	0x0800644d
 80063e0:	08006417 	.word	0x08006417
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	0800644d 	.word	0x0800644d
 80063ec:	0800644d 	.word	0x0800644d
 80063f0:	08006429 	.word	0x08006429
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	0800644d 	.word	0x0800644d
 8006400:	0800643b 	.word	0x0800643b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0202 	orr.w	r2, r2, #2
 8006412:	60da      	str	r2, [r3, #12]
      break;
 8006414:	e01d      	b.n	8006452 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0204 	orr.w	r2, r2, #4
 8006424:	60da      	str	r2, [r3, #12]
      break;
 8006426:	e014      	b.n	8006452 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0208 	orr.w	r2, r2, #8
 8006436:	60da      	str	r2, [r3, #12]
      break;
 8006438:	e00b      	b.n	8006452 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0210 	orr.w	r2, r2, #16
 8006448:	60da      	str	r2, [r3, #12]
      break;
 800644a:	e002      	b.n	8006452 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	bf00      	nop
  }

  if (status == HAL_OK)
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d135      	bne.n	80064c4 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fe17 	bl	8007094 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_TIM_IC_Start_IT+0x250>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIM_IC_Start_IT+0x204>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006478:	d004      	beq.n	8006484 <HAL_TIM_IC_Start_IT+0x204>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_TIM_IC_Start_IT+0x254>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d115      	bne.n	80064b0 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <HAL_TIM_IC_Start_IT+0x258>)
 800648c:	4013      	ands	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d015      	beq.n	80064c2 <HAL_TIM_IC_Start_IT+0x242>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d011      	beq.n	80064c2 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	e008      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e000      	b.n	80064c4 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40014000 	.word	0x40014000
 80064d8:	00010007 	.word	0x00010007

080064dc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_IC_Start_DMA+0x22>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	e023      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x6a>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d104      	bne.n	800650e <HAL_TIM_IC_Start_DMA+0x32>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e01b      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x6a>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d104      	bne.n	800651e <HAL_TIM_IC_Start_DMA+0x42>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e013      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x6a>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b0c      	cmp	r3, #12
 8006522:	d104      	bne.n	800652e <HAL_TIM_IC_Start_DMA+0x52>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e00b      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x6a>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d104      	bne.n	800653e <HAL_TIM_IC_Start_DMA+0x62>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e003      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x6a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006544:	b2db      	uxtb	r3, r3
 8006546:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_TIM_IC_Start_DMA+0x7c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e013      	b.n	8006580 <HAL_TIM_IC_Start_DMA+0xa4>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b04      	cmp	r3, #4
 800655c:	d104      	bne.n	8006568 <HAL_TIM_IC_Start_DMA+0x8c>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e00b      	b.n	8006580 <HAL_TIM_IC_Start_DMA+0xa4>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b08      	cmp	r3, #8
 800656c:	d104      	bne.n	8006578 <HAL_TIM_IC_Start_DMA+0x9c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e003      	b.n	8006580 <HAL_TIM_IC_Start_DMA+0xa4>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800657e:	b2db      	uxtb	r3, r3
 8006580:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006582:	7dbb      	ldrb	r3, [r7, #22]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d002      	beq.n	800658e <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006588:	7d7b      	ldrb	r3, [r7, #21]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d101      	bne.n	8006592 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	e143      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006592:	7dbb      	ldrb	r3, [r7, #22]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d153      	bne.n	8006640 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006598:	7d7b      	ldrb	r3, [r7, #21]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d150      	bne.n	8006640 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_TIM_IC_Start_DMA+0xce>
 80065a4:	887b      	ldrh	r3, [r7, #2]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e135      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_TIM_IC_Start_DMA+0xe2>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065bc:	e023      	b.n	8006606 <HAL_TIM_IC_Start_DMA+0x12a>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_IC_Start_DMA+0xf2>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065cc:	e01b      	b.n	8006606 <HAL_TIM_IC_Start_DMA+0x12a>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d104      	bne.n	80065de <HAL_TIM_IC_Start_DMA+0x102>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065dc:	e013      	b.n	8006606 <HAL_TIM_IC_Start_DMA+0x12a>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_IC_Start_DMA+0x112>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_IC_Start_DMA+0x12a>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_IC_Start_DMA+0x122>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	e003      	b.n	8006606 <HAL_TIM_IC_Start_DMA+0x12a>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <HAL_TIM_IC_Start_DMA+0x13a>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8006614:	e016      	b.n	8006644 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d104      	bne.n	8006626 <HAL_TIM_IC_Start_DMA+0x14a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8006624:	e00e      	b.n	8006644 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d104      	bne.n	8006636 <HAL_TIM_IC_Start_DMA+0x15a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8006634:	e006      	b.n	8006644 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2202      	movs	r2, #2
 800663a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 800663e:	e001      	b.n	8006644 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0ea      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2201      	movs	r2, #1
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fd21 	bl	8007094 <TIM_CCxChannelCmd>

  switch (Channel)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b0c      	cmp	r3, #12
 8006656:	f200 80ad 	bhi.w	80067b4 <HAL_TIM_IC_Start_DMA+0x2d8>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <HAL_TIM_IC_Start_DMA+0x184>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006695 	.word	0x08006695
 8006664:	080067b5 	.word	0x080067b5
 8006668:	080067b5 	.word	0x080067b5
 800666c:	080067b5 	.word	0x080067b5
 8006670:	080066dd 	.word	0x080066dd
 8006674:	080067b5 	.word	0x080067b5
 8006678:	080067b5 	.word	0x080067b5
 800667c:	080067b5 	.word	0x080067b5
 8006680:	08006725 	.word	0x08006725
 8006684:	080067b5 	.word	0x080067b5
 8006688:	080067b5 	.word	0x080067b5
 800668c:	080067b5 	.word	0x080067b5
 8006690:	0800676d 	.word	0x0800676d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	4a62      	ldr	r2, [pc, #392]	; (8006824 <HAL_TIM_IC_Start_DMA+0x348>)
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	4a61      	ldr	r2, [pc, #388]	; (8006828 <HAL_TIM_IC_Start_DMA+0x34c>)
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	4a60      	ldr	r2, [pc, #384]	; (800682c <HAL_TIM_IC_Start_DMA+0x350>)
 80066aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3334      	adds	r3, #52	; 0x34
 80066b6:	4619      	mov	r1, r3
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	887b      	ldrh	r3, [r7, #2]
 80066bc:	f7fd fa1f 	bl	8003afe <HAL_DMA_Start_IT>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e0a7      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d8:	60da      	str	r2, [r3, #12]
      break;
 80066da:	e06e      	b.n	80067ba <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	4a50      	ldr	r2, [pc, #320]	; (8006824 <HAL_TIM_IC_Start_DMA+0x348>)
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	4a4f      	ldr	r2, [pc, #316]	; (8006828 <HAL_TIM_IC_Start_DMA+0x34c>)
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	4a4e      	ldr	r2, [pc, #312]	; (800682c <HAL_TIM_IC_Start_DMA+0x350>)
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	4619      	mov	r1, r3
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	f7fd f9fb 	bl	8003afe <HAL_DMA_Start_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e083      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006720:	60da      	str	r2, [r3, #12]
      break;
 8006722:	e04a      	b.n	80067ba <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <HAL_TIM_IC_Start_DMA+0x348>)
 800672a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <HAL_TIM_IC_Start_DMA+0x34c>)
 8006732:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4a3c      	ldr	r2, [pc, #240]	; (800682c <HAL_TIM_IC_Start_DMA+0x350>)
 800673a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	333c      	adds	r3, #60	; 0x3c
 8006746:	4619      	mov	r1, r3
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	887b      	ldrh	r3, [r7, #2]
 800674c:	f7fd f9d7 	bl	8003afe <HAL_DMA_Start_IT>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e05f      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006768:	60da      	str	r2, [r3, #12]
      break;
 800676a:	e026      	b.n	80067ba <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <HAL_TIM_IC_Start_DMA+0x348>)
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <HAL_TIM_IC_Start_DMA+0x34c>)
 800677a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_TIM_IC_Start_DMA+0x350>)
 8006782:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3340      	adds	r3, #64	; 0x40
 800678e:	4619      	mov	r1, r3
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	887b      	ldrh	r3, [r7, #2]
 8006794:	f7fd f9b3 	bl	8003afe <HAL_DMA_Start_IT>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e03b      	b.n	800681a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b0:	60da      	str	r2, [r3, #12]
      break;
 80067b2:	e002      	b.n	80067ba <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	75fb      	strb	r3, [r7, #23]
      break;
 80067b8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIM_IC_Start_DMA+0x354>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d009      	beq.n	80067d8 <HAL_TIM_IC_Start_DMA+0x2fc>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d004      	beq.n	80067d8 <HAL_TIM_IC_Start_DMA+0x2fc>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIM_IC_Start_DMA+0x358>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d115      	bne.n	8006804 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	4b16      	ldr	r3, [pc, #88]	; (8006838 <HAL_TIM_IC_Start_DMA+0x35c>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d015      	beq.n	8006816 <HAL_TIM_IC_Start_DMA+0x33a>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f0:	d011      	beq.n	8006816 <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	e008      	b.n	8006816 <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e000      	b.n	8006818 <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006816:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	08006c83 	.word	0x08006c83
 8006828:	08006d4b 	.word	0x08006d4b
 800682c:	08006bf1 	.word	0x08006bf1
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40014000 	.word	0x40014000
 8006838:	00010007 	.word	0x00010007

0800683c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0202 	mvn.w	r2, #2
 8006870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fa fc04 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f97c 	bl	8006b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f98d 	bl	8006bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0204 	mvn.w	r2, #4
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fa fbde 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f956 	bl	8006b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f967 	bl	8006bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0208 	mvn.w	r2, #8
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fa fbb8 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f930 	bl	8006b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f941 	bl	8006bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0210 	mvn.w	r2, #16
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2208      	movs	r2, #8
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fa fb92 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f90a 	bl	8006b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f91b 	bl	8006bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0201 	mvn.w	r2, #1
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8e8 	bl	8006b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fbfa 	bl	80071c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fbf2 	bl	80071d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f8da 	bl	8006bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0220 	mvn.w	r2, #32
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbba 	bl	80071ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e088      	b.n	8006b70 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a7c:	f000 f9fe 	bl	8006e7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 020c 	bic.w	r2, r2, #12
 8006a8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6999      	ldr	r1, [r3, #24]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	619a      	str	r2, [r3, #24]
 8006aa2:	e060      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d11c      	bne.n	8006ae4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006aba:	f000 fa35 	bl	8006f28 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006acc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6999      	ldr	r1, [r3, #24]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	021a      	lsls	r2, r3, #8
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
 8006ae2:	e040      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d11b      	bne.n	8006b22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006afa:	f000 fa52 	bl	8006fa2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 020c 	bic.w	r2, r2, #12
 8006b0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	61da      	str	r2, [r3, #28]
 8006b20:	e021      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	d11c      	bne.n	8006b62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b38:	f000 fa6f 	bl	800701a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69d9      	ldr	r1, [r3, #28]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	61da      	str	r2, [r3, #28]
 8006b60:	e001      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d107      	bne.n	8006c18 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c16:	e02a      	b.n	8006c6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d107      	bne.n	8006c32 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2202      	movs	r2, #2
 8006c26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	e01d      	b.n	8006c6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d107      	bne.n	8006c4c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c4a:	e010      	b.n	8006c6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d107      	bne.n	8006c66 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c64:	e003      	b.n	8006c6e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff ffb4 	bl	8006bdc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	771a      	strb	r2, [r3, #28]
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10f      	bne.n	8006cba <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d146      	bne.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb8:	e03d      	b.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d10f      	bne.n	8006ce4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d131      	bne.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ce2:	e028      	b.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d10f      	bne.n	8006d0e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d11c      	bne.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d0c:	e013      	b.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d10e      	bne.n	8006d36 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7fa f9ac 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	771a      	strb	r2, [r3, #28]
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d103      	bne.n	8006d6a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	771a      	strb	r2, [r3, #28]
 8006d68:	e019      	b.n	8006d9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d103      	bne.n	8006d7c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	771a      	strb	r2, [r3, #28]
 8006d7a:	e010      	b.n	8006d9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d103      	bne.n	8006d8e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	771a      	strb	r2, [r3, #28]
 8006d8c:	e007      	b.n	8006d9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d102      	bne.n	8006d9e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fefe 	bl	8006ba0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	771a      	strb	r2, [r3, #28]
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <TIM_Base_SetConfig+0xbc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_Base_SetConfig+0x20>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	d108      	bne.n	8006de6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <TIM_Base_SetConfig+0xbc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0x52>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0x52>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <TIM_Base_SetConfig+0xc0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0x52>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <TIM_Base_SetConfig+0xc4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <TIM_Base_SetConfig+0xbc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_Base_SetConfig+0xa0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0b      	ldr	r2, [pc, #44]	; (8006e74 <TIM_Base_SetConfig+0xc0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_Base_SetConfig+0xa0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <TIM_Base_SetConfig+0xc4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d103      	bne.n	8006e5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	615a      	str	r2, [r3, #20]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400

08006e7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f023 0201 	bic.w	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <TIM_TI1_SetConfig+0xa4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d007      	beq.n	8006eba <TIM_TI1_SetConfig+0x3e>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d003      	beq.n	8006eba <TIM_TI1_SetConfig+0x3e>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <TIM_TI1_SetConfig+0xa8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <TIM_TI1_SetConfig+0x42>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <TIM_TI1_SetConfig+0x44>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e003      	b.n	8006ede <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f023 030a 	bic.w	r3, r3, #10
 8006ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 030a 	and.w	r3, r3, #10
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40012c00 	.word	0x40012c00
 8006f24:	40014000 	.word	0x40014000

08006f28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f023 0210 	bic.w	r2, r3, #16
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	031b      	lsls	r3, r3, #12
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b087      	sub	sp, #28
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fde:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800701a:	b480      	push	{r7}
 800701c:	b087      	sub	sp, #28
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007058:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	031b      	lsls	r3, r3, #12
 800705e:	b29b      	uxth	r3, r3
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800706c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	621a      	str	r2, [r3, #32]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2201      	movs	r2, #1
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1a      	ldr	r2, [r3, #32]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	401a      	ands	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	fa01 f303 	lsl.w	r3, r1, r3
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e04f      	b.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d108      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007128:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a14      	ldr	r2, [pc, #80]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d004      	beq.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d10c      	bne.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40014000 	.word	0x40014000

080071ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e040      	b.n	800727c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fa fca6 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2224      	movs	r2, #36	; 0x24
 8007214:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 feb2 	bl	8007f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc83 	bl	8007b40 <UART_SetConfig>
 800723a:	4603      	mov	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e01b      	b.n	800727c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ff31 	bl	80080dc <UART_CheckIdleState>
 800727a:	4603      	mov	r3, r0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007298:	2b20      	cmp	r3, #32
 800729a:	d178      	bne.n	800738e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Transmit+0x24>
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e071      	b.n	8007390 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2221      	movs	r2, #33	; 0x21
 80072b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ba:	f7fa fe2f 	bl	8001f1c <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d8:	d108      	bne.n	80072ec <HAL_UART_Transmit+0x68>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e003      	b.n	80072f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072f4:	e030      	b.n	8007358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 ff93 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e03c      	b.n	8007390 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	881a      	ldrh	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007328:	b292      	uxth	r2, r2
 800732a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	3302      	adds	r3, #2
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e008      	b.n	8007346 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b292      	uxth	r2, r2
 800733e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3301      	adds	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1c8      	bne.n	80072f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	2140      	movs	r1, #64	; 0x40
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 ff5c 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e005      	b.n	8007390 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	e000      	b.n	8007390 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800738e:	2302      	movs	r3, #2
  }
}
 8007390:	4618      	mov	r0, r3
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	f040 80b6 	bne.w	8007520 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_UART_Receive+0x28>
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0ae      	b.n	8007522 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2222      	movs	r2, #34	; 0x22
 80073d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073da:	f7fa fd9f 	bl	8001f1c <HAL_GetTick>
 80073de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f8:	d10e      	bne.n	8007418 <HAL_UART_Receive+0x80>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d105      	bne.n	800740e <HAL_UART_Receive+0x76>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800740c:	e02d      	b.n	800746a <HAL_UART_Receive+0xd2>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	22ff      	movs	r2, #255	; 0xff
 8007412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007416:	e028      	b.n	800746a <HAL_UART_Receive+0xd2>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_UART_Receive+0xa4>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <HAL_UART_Receive+0x9a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007430:	e01b      	b.n	800746a <HAL_UART_Receive+0xd2>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	227f      	movs	r2, #127	; 0x7f
 8007436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800743a:	e016      	b.n	800746a <HAL_UART_Receive+0xd2>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007444:	d10d      	bne.n	8007462 <HAL_UART_Receive+0xca>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Receive+0xc0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	227f      	movs	r2, #127	; 0x7f
 8007452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007456:	e008      	b.n	800746a <HAL_UART_Receive+0xd2>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	223f      	movs	r2, #63	; 0x3f
 800745c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007460:	e003      	b.n	800746a <HAL_UART_Receive+0xd2>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007470:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	d108      	bne.n	800748e <HAL_UART_Receive+0xf6>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	e003      	b.n	8007496 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007496:	e037      	b.n	8007508 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2200      	movs	r2, #0
 80074a0:	2120      	movs	r1, #32
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fec2 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e033      	b.n	8007522 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10c      	bne.n	80074da <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	8a7b      	ldrh	r3, [r7, #18]
 80074ca:	4013      	ands	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	3302      	adds	r3, #2
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	e00d      	b.n	80074f6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	8a7b      	ldrh	r3, [r7, #18]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4013      	ands	r3, r2
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1c1      	bne.n	8007498 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e000      	b.n	8007522 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b0ba      	sub	sp, #232	; 0xe8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007552:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007556:	f640 030f 	movw	r3, #2063	; 0x80f
 800755a:	4013      	ands	r3, r2
 800755c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d115      	bne.n	8007594 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00f      	beq.n	8007594 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 82ae 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
      }
      return;
 8007592:	e2a8      	b.n	8007ae6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8117 	beq.w	80077cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800759e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075ae:	4b85      	ldr	r3, [pc, #532]	; (80077c4 <HAL_UART_IRQHandler+0x298>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 810a 	beq.w	80077cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d011      	beq.n	80075e8 <HAL_UART_IRQHandler+0xbc>
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2201      	movs	r2, #1
 80075d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075de:	f043 0201 	orr.w	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d011      	beq.n	8007618 <HAL_UART_IRQHandler+0xec>
 80075f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2202      	movs	r2, #2
 8007606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760e:	f043 0204 	orr.w	r2, r3, #4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d011      	beq.n	8007648 <HAL_UART_IRQHandler+0x11c>
 8007624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2204      	movs	r2, #4
 8007636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763e:	f043 0202 	orr.w	r2, r3, #2
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d017      	beq.n	8007684 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d105      	bne.n	800766c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007664:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2208      	movs	r2, #8
 8007672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767a:	f043 0208 	orr.w	r2, r3, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <HAL_UART_IRQHandler+0x18a>
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ac:	f043 0220 	orr.w	r2, r3, #32
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8214 	beq.w	8007aea <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00d      	beq.n	80076ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d005      	beq.n	800770e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007706:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800770a:	2b00      	cmp	r3, #0
 800770c:	d04f      	beq.n	80077ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fdf3 	bl	80082fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d141      	bne.n	80077a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800773c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800774e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800775a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1d9      	bne.n	8007722 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007772:	2b00      	cmp	r3, #0
 8007774:	d013      	beq.n	800779e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777a:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <HAL_UART_IRQHandler+0x29c>)
 800777c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc fa59 	bl	8003c3a <HAL_DMA_Abort_IT>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d017      	beq.n	80077be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	e00f      	b.n	80077be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9b8 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a4:	e00b      	b.n	80077be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9b4 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ac:	e007      	b.n	80077be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9b0 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80077bc:	e195      	b.n	8007aea <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077be:	bf00      	nop
    return;
 80077c0:	e193      	b.n	8007aea <HAL_UART_IRQHandler+0x5be>
 80077c2:	bf00      	nop
 80077c4:	04000120 	.word	0x04000120
 80077c8:	080083c3 	.word	0x080083c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f040 814e 	bne.w	8007a72 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8147 	beq.w	8007a72 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8140 	beq.w	8007a72 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2210      	movs	r2, #16
 80077f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	f040 80b8 	bne.w	800797a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007816:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8167 	beq.w	8007aee <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800782a:	429a      	cmp	r2, r3
 800782c:	f080 815f 	bcs.w	8007aee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007836:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 8086 	bne.w	8007958 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800787a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800788e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1da      	bne.n	800784c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e1      	bne.n	8007896 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e3      	bne.n	80078d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793a:	65bb      	str	r3, [r7, #88]	; 0x58
 800793c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e4      	bne.n	8007918 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc f933 	bl	8003bbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800796a:	b29b      	uxth	r3, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	b29b      	uxth	r3, r3
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8d8 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007978:	e0b9      	b.n	8007aee <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80ab 	beq.w	8007af2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800799c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80a6 	beq.w	8007af2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079c8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	623b      	str	r3, [r7, #32]
   return(result);
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a00:	633a      	str	r2, [r7, #48]	; 0x30
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e3      	bne.n	80079dc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	617b      	str	r3, [r7, #20]
   return(result);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e4      	bne.n	8007a28 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f85c 	bl	8007b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a70:	e03f      	b.n	8007af2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <HAL_UART_IRQHandler+0x570>
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fcd4 	bl	8008442 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a9a:	e02d      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01c      	beq.n	8007af6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
    }
    return;
 8007ac4:	e017      	b.n	8007af6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d012      	beq.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
 8007ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc85 	bl	80083ee <UART_EndTransmit_IT>
    return;
 8007ae4:	e008      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e006      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007aea:	bf00      	nop
 8007aec:	e004      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007af6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007af8:	37e8      	adds	r7, #232	; 0xe8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop

08007b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b44:	b08a      	sub	sp, #40	; 0x28
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4bb4      	ldr	r3, [pc, #720]	; (8007e40 <UART_SetConfig+0x300>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4aa9      	ldr	r2, [pc, #676]	; (8007e44 <UART_SetConfig+0x304>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d004      	beq.n	8007bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4aa0      	ldr	r2, [pc, #640]	; (8007e48 <UART_SetConfig+0x308>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d126      	bne.n	8007c18 <UART_SetConfig+0xd8>
 8007bca:	4ba0      	ldr	r3, [pc, #640]	; (8007e4c <UART_SetConfig+0x30c>)
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d81b      	bhi.n	8007c10 <UART_SetConfig+0xd0>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <UART_SetConfig+0xa0>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007c01 	.word	0x08007c01
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c09 	.word	0x08007c09
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bf6:	e080      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bfe:	e07c      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c06:	e078      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c0e:	e074      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c16:	e070      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a8c      	ldr	r2, [pc, #560]	; (8007e50 <UART_SetConfig+0x310>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d138      	bne.n	8007c94 <UART_SetConfig+0x154>
 8007c22:	4b8a      	ldr	r3, [pc, #552]	; (8007e4c <UART_SetConfig+0x30c>)
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	f003 030c 	and.w	r3, r3, #12
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d82d      	bhi.n	8007c8c <UART_SetConfig+0x14c>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0xf8>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c8d 	.word	0x08007c8d
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007c8d 	.word	0x08007c8d
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c8d 	.word	0x08007c8d
 8007c50:	08007c8d 	.word	0x08007c8d
 8007c54:	08007c8d 	.word	0x08007c8d
 8007c58:	08007c75 	.word	0x08007c75
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007c8d 	.word	0x08007c8d
 8007c64:	08007c8d 	.word	0x08007c8d
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c72:	e042      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c74:	2302      	movs	r3, #2
 8007c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7a:	e03e      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c82:	e03a      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c8a:	e036      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c92:	e032      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a6a      	ldr	r2, [pc, #424]	; (8007e44 <UART_SetConfig+0x304>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d12a      	bne.n	8007cf4 <UART_SetConfig+0x1b4>
 8007c9e:	4b6b      	ldr	r3, [pc, #428]	; (8007e4c <UART_SetConfig+0x30c>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cac:	d01a      	beq.n	8007ce4 <UART_SetConfig+0x1a4>
 8007cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb2:	d81b      	bhi.n	8007cec <UART_SetConfig+0x1ac>
 8007cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb8:	d00c      	beq.n	8007cd4 <UART_SetConfig+0x194>
 8007cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cbe:	d815      	bhi.n	8007cec <UART_SetConfig+0x1ac>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <UART_SetConfig+0x18c>
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc8:	d008      	beq.n	8007cdc <UART_SetConfig+0x19c>
 8007cca:	e00f      	b.n	8007cec <UART_SetConfig+0x1ac>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd2:	e012      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cda:	e00e      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce2:	e00a      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cea:	e006      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf2:	e002      	b.n	8007cfa <UART_SetConfig+0x1ba>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a51      	ldr	r2, [pc, #324]	; (8007e44 <UART_SetConfig+0x304>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d17a      	bne.n	8007dfa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d824      	bhi.n	8007d56 <UART_SetConfig+0x216>
 8007d0c:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <UART_SetConfig+0x1d4>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d57 	.word	0x08007d57
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d57 	.word	0x08007d57
 8007d24:	08007d47 	.word	0x08007d47
 8007d28:	08007d57 	.word	0x08007d57
 8007d2c:	08007d57 	.word	0x08007d57
 8007d30:	08007d57 	.word	0x08007d57
 8007d34:	08007d4f 	.word	0x08007d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d38:	f7fd fa0a 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8007d3c:	61f8      	str	r0, [r7, #28]
        break;
 8007d3e:	e010      	b.n	8007d62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d40:	4b44      	ldr	r3, [pc, #272]	; (8007e54 <UART_SetConfig+0x314>)
 8007d42:	61fb      	str	r3, [r7, #28]
        break;
 8007d44:	e00d      	b.n	8007d62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d46:	f7fd f96b 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007d4a:	61f8      	str	r0, [r7, #28]
        break;
 8007d4c:	e009      	b.n	8007d62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d52:	61fb      	str	r3, [r7, #28]
        break;
 8007d54:	e005      	b.n	8007d62 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8107 	beq.w	8007f78 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d305      	bcc.n	8007d86 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d903      	bls.n	8007d8e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d8c:	e0f4      	b.n	8007f78 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2200      	movs	r2, #0
 8007d92:	461c      	mov	r4, r3
 8007d94:	4615      	mov	r5, r2
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	022b      	lsls	r3, r5, #8
 8007da0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007da4:	0222      	lsls	r2, r4, #8
 8007da6:	68f9      	ldr	r1, [r7, #12]
 8007da8:	6849      	ldr	r1, [r1, #4]
 8007daa:	0849      	lsrs	r1, r1, #1
 8007dac:	2000      	movs	r0, #0
 8007dae:	4688      	mov	r8, r1
 8007db0:	4681      	mov	r9, r0
 8007db2:	eb12 0a08 	adds.w	sl, r2, r8
 8007db6:	eb43 0b09 	adc.w	fp, r3, r9
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	603b      	str	r3, [r7, #0]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	f7f8 fa60 	bl	8000290 <__aeabi_uldivmod>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dde:	d308      	bcc.n	8007df2 <UART_SetConfig+0x2b2>
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de6:	d204      	bcs.n	8007df2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	60da      	str	r2, [r3, #12]
 8007df0:	e0c2      	b.n	8007f78 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007df8:	e0be      	b.n	8007f78 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e02:	d16a      	bne.n	8007eda <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d834      	bhi.n	8007e76 <UART_SetConfig+0x336>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x2d4>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e61 	.word	0x08007e61
 8007e20:	08007e77 	.word	0x08007e77
 8007e24:	08007e67 	.word	0x08007e67
 8007e28:	08007e77 	.word	0x08007e77
 8007e2c:	08007e77 	.word	0x08007e77
 8007e30:	08007e77 	.word	0x08007e77
 8007e34:	08007e6f 	.word	0x08007e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fd f98a 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8007e3c:	61f8      	str	r0, [r7, #28]
        break;
 8007e3e:	e020      	b.n	8007e82 <UART_SetConfig+0x342>
 8007e40:	efff69f3 	.word	0xefff69f3
 8007e44:	40008000 	.word	0x40008000
 8007e48:	40013800 	.word	0x40013800
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	40004400 	.word	0x40004400
 8007e54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e58:	f7fd f990 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8007e5c:	61f8      	str	r0, [r7, #28]
        break;
 8007e5e:	e010      	b.n	8007e82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e60:	4b4c      	ldr	r3, [pc, #304]	; (8007f94 <UART_SetConfig+0x454>)
 8007e62:	61fb      	str	r3, [r7, #28]
        break;
 8007e64:	e00d      	b.n	8007e82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e66:	f7fd f8db 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007e6a:	61f8      	str	r0, [r7, #28]
        break;
 8007e6c:	e009      	b.n	8007e82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e72:	61fb      	str	r3, [r7, #28]
        break;
 8007e74:	e005      	b.n	8007e82 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d077      	beq.n	8007f78 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	005a      	lsls	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	441a      	add	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b0f      	cmp	r3, #15
 8007ea2:	d916      	bls.n	8007ed2 <UART_SetConfig+0x392>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eaa:	d212      	bcs.n	8007ed2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f023 030f 	bic.w	r3, r3, #15
 8007eb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	8afb      	ldrh	r3, [r7, #22]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	8afa      	ldrh	r2, [r7, #22]
 8007ece:	60da      	str	r2, [r3, #12]
 8007ed0:	e052      	b.n	8007f78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ed8:	e04e      	b.n	8007f78 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d827      	bhi.n	8007f32 <UART_SetConfig+0x3f2>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <UART_SetConfig+0x3a8>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f0d 	.word	0x08007f0d
 8007eec:	08007f15 	.word	0x08007f15
 8007ef0:	08007f1d 	.word	0x08007f1d
 8007ef4:	08007f33 	.word	0x08007f33
 8007ef8:	08007f23 	.word	0x08007f23
 8007efc:	08007f33 	.word	0x08007f33
 8007f00:	08007f33 	.word	0x08007f33
 8007f04:	08007f33 	.word	0x08007f33
 8007f08:	08007f2b 	.word	0x08007f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f7fd f920 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8007f10:	61f8      	str	r0, [r7, #28]
        break;
 8007f12:	e014      	b.n	8007f3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f14:	f7fd f932 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8007f18:	61f8      	str	r0, [r7, #28]
        break;
 8007f1a:	e010      	b.n	8007f3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f1c:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <UART_SetConfig+0x454>)
 8007f1e:	61fb      	str	r3, [r7, #28]
        break;
 8007f20:	e00d      	b.n	8007f3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f22:	f7fd f87d 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007f26:	61f8      	str	r0, [r7, #28]
        break;
 8007f28:	e009      	b.n	8007f3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2e:	61fb      	str	r3, [r7, #28]
        break;
 8007f30:	e005      	b.n	8007f3e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d019      	beq.n	8007f78 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	085a      	lsrs	r2, r3, #1
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d909      	bls.n	8007f72 <UART_SetConfig+0x432>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d205      	bcs.n	8007f72 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	e002      	b.n	8007f78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3728      	adds	r7, #40	; 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f92:	bf00      	nop
 8007f94:	00f42400 	.word	0x00f42400

08007f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01a      	beq.n	80080ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008096:	d10a      	bne.n	80080ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b098      	sub	sp, #96	; 0x60
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080ec:	f7f9 ff16 	bl	8001f1c <HAL_GetTick>
 80080f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d12e      	bne.n	800815e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f88c 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d021      	beq.n	800815e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812e:	653b      	str	r3, [r7, #80]	; 0x50
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008138:	647b      	str	r3, [r7, #68]	; 0x44
 800813a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800813e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e6      	bne.n	800811a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e062      	b.n	8008224 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d149      	bne.n	8008200 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800816c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008174:	2200      	movs	r2, #0
 8008176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f856 	bl	800822c <UART_WaitOnFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03c      	beq.n	8008200 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	623b      	str	r3, [r7, #32]
   return(result);
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800819a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a4:	633b      	str	r3, [r7, #48]	; 0x30
 80081a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081d8:	61fa      	str	r2, [r7, #28]
 80081da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	69b9      	ldr	r1, [r7, #24]
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	617b      	str	r3, [r7, #20]
   return(result);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e5      	bne.n	80081b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e011      	b.n	8008224 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3758      	adds	r7, #88	; 0x58
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823c:	e049      	b.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d045      	beq.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7f9 fe69 	bl	8001f1c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <UART_WaitOnFlagUntilTimeout+0x30>
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e048      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d031      	beq.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b08      	cmp	r3, #8
 800827a:	d110      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2208      	movs	r2, #8
 8008282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f838 	bl	80082fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2208      	movs	r2, #8
 800828e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e029      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ac:	d111      	bne.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f81e 	bl	80082fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e00f      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	429a      	cmp	r2, r3
 80082e0:	bf0c      	ite	eq
 80082e2:	2301      	moveq	r3, #1
 80082e4:	2300      	movne	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d0a6      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b095      	sub	sp, #84	; 0x54
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
 8008322:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e6      	bne.n	8008302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	61fb      	str	r3, [r7, #28]
   return(result);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f023 0301 	bic.w	r3, r3, #1
 800834a:	64bb      	str	r3, [r7, #72]	; 0x48
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800835a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e5      	bne.n	8008334 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	2b01      	cmp	r3, #1
 800836e:	d118      	bne.n	80083a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	60bb      	str	r3, [r7, #8]
   return(result);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f023 0310 	bic.w	r3, r3, #16
 8008384:	647b      	str	r3, [r7, #68]	; 0x44
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6979      	ldr	r1, [r7, #20]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	613b      	str	r3, [r7, #16]
   return(result);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e6      	bne.n	8008370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083b6:	bf00      	nop
 80083b8:	3754      	adds	r7, #84	; 0x54
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fb97 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b088      	sub	sp, #32
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	60bb      	str	r3, [r7, #8]
   return(result);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6979      	ldr	r1, [r7, #20]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e6      	bne.n	80083f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fb63 	bl	8007b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800843a:	bf00      	nop
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <atoi>:
 8008456:	220a      	movs	r2, #10
 8008458:	2100      	movs	r1, #0
 800845a:	f000 b883 	b.w	8008564 <strtol>
	...

08008460 <_strtol_l.constprop.0>:
 8008460:	2b01      	cmp	r3, #1
 8008462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008466:	d001      	beq.n	800846c <_strtol_l.constprop.0+0xc>
 8008468:	2b24      	cmp	r3, #36	; 0x24
 800846a:	d906      	bls.n	800847a <_strtol_l.constprop.0+0x1a>
 800846c:	f000 fb04 	bl	8008a78 <__errno>
 8008470:	2316      	movs	r3, #22
 8008472:	6003      	str	r3, [r0, #0]
 8008474:	2000      	movs	r0, #0
 8008476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008560 <_strtol_l.constprop.0+0x100>
 800847e:	460d      	mov	r5, r1
 8008480:	462e      	mov	r6, r5
 8008482:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008486:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800848a:	f017 0708 	ands.w	r7, r7, #8
 800848e:	d1f7      	bne.n	8008480 <_strtol_l.constprop.0+0x20>
 8008490:	2c2d      	cmp	r4, #45	; 0x2d
 8008492:	d132      	bne.n	80084fa <_strtol_l.constprop.0+0x9a>
 8008494:	782c      	ldrb	r4, [r5, #0]
 8008496:	2701      	movs	r7, #1
 8008498:	1cb5      	adds	r5, r6, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d05b      	beq.n	8008556 <_strtol_l.constprop.0+0xf6>
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d109      	bne.n	80084b6 <_strtol_l.constprop.0+0x56>
 80084a2:	2c30      	cmp	r4, #48	; 0x30
 80084a4:	d107      	bne.n	80084b6 <_strtol_l.constprop.0+0x56>
 80084a6:	782c      	ldrb	r4, [r5, #0]
 80084a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084ac:	2c58      	cmp	r4, #88	; 0x58
 80084ae:	d14d      	bne.n	800854c <_strtol_l.constprop.0+0xec>
 80084b0:	786c      	ldrb	r4, [r5, #1]
 80084b2:	2310      	movs	r3, #16
 80084b4:	3502      	adds	r5, #2
 80084b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80084be:	f04f 0e00 	mov.w	lr, #0
 80084c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80084c6:	4676      	mov	r6, lr
 80084c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80084cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80084d0:	f1bc 0f09 	cmp.w	ip, #9
 80084d4:	d816      	bhi.n	8008504 <_strtol_l.constprop.0+0xa4>
 80084d6:	4664      	mov	r4, ip
 80084d8:	42a3      	cmp	r3, r4
 80084da:	dd24      	ble.n	8008526 <_strtol_l.constprop.0+0xc6>
 80084dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80084e0:	d008      	beq.n	80084f4 <_strtol_l.constprop.0+0x94>
 80084e2:	45b1      	cmp	r9, r6
 80084e4:	d31c      	bcc.n	8008520 <_strtol_l.constprop.0+0xc0>
 80084e6:	d101      	bne.n	80084ec <_strtol_l.constprop.0+0x8c>
 80084e8:	45a2      	cmp	sl, r4
 80084ea:	db19      	blt.n	8008520 <_strtol_l.constprop.0+0xc0>
 80084ec:	fb06 4603 	mla	r6, r6, r3, r4
 80084f0:	f04f 0e01 	mov.w	lr, #1
 80084f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084f8:	e7e8      	b.n	80084cc <_strtol_l.constprop.0+0x6c>
 80084fa:	2c2b      	cmp	r4, #43	; 0x2b
 80084fc:	bf04      	itt	eq
 80084fe:	782c      	ldrbeq	r4, [r5, #0]
 8008500:	1cb5      	addeq	r5, r6, #2
 8008502:	e7ca      	b.n	800849a <_strtol_l.constprop.0+0x3a>
 8008504:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008508:	f1bc 0f19 	cmp.w	ip, #25
 800850c:	d801      	bhi.n	8008512 <_strtol_l.constprop.0+0xb2>
 800850e:	3c37      	subs	r4, #55	; 0x37
 8008510:	e7e2      	b.n	80084d8 <_strtol_l.constprop.0+0x78>
 8008512:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008516:	f1bc 0f19 	cmp.w	ip, #25
 800851a:	d804      	bhi.n	8008526 <_strtol_l.constprop.0+0xc6>
 800851c:	3c57      	subs	r4, #87	; 0x57
 800851e:	e7db      	b.n	80084d8 <_strtol_l.constprop.0+0x78>
 8008520:	f04f 3eff 	mov.w	lr, #4294967295
 8008524:	e7e6      	b.n	80084f4 <_strtol_l.constprop.0+0x94>
 8008526:	f1be 3fff 	cmp.w	lr, #4294967295
 800852a:	d105      	bne.n	8008538 <_strtol_l.constprop.0+0xd8>
 800852c:	2322      	movs	r3, #34	; 0x22
 800852e:	6003      	str	r3, [r0, #0]
 8008530:	4646      	mov	r6, r8
 8008532:	b942      	cbnz	r2, 8008546 <_strtol_l.constprop.0+0xe6>
 8008534:	4630      	mov	r0, r6
 8008536:	e79e      	b.n	8008476 <_strtol_l.constprop.0+0x16>
 8008538:	b107      	cbz	r7, 800853c <_strtol_l.constprop.0+0xdc>
 800853a:	4276      	negs	r6, r6
 800853c:	2a00      	cmp	r2, #0
 800853e:	d0f9      	beq.n	8008534 <_strtol_l.constprop.0+0xd4>
 8008540:	f1be 0f00 	cmp.w	lr, #0
 8008544:	d000      	beq.n	8008548 <_strtol_l.constprop.0+0xe8>
 8008546:	1e69      	subs	r1, r5, #1
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	e7f3      	b.n	8008534 <_strtol_l.constprop.0+0xd4>
 800854c:	2430      	movs	r4, #48	; 0x30
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1b1      	bne.n	80084b6 <_strtol_l.constprop.0+0x56>
 8008552:	2308      	movs	r3, #8
 8008554:	e7af      	b.n	80084b6 <_strtol_l.constprop.0+0x56>
 8008556:	2c30      	cmp	r4, #48	; 0x30
 8008558:	d0a5      	beq.n	80084a6 <_strtol_l.constprop.0+0x46>
 800855a:	230a      	movs	r3, #10
 800855c:	e7ab      	b.n	80084b6 <_strtol_l.constprop.0+0x56>
 800855e:	bf00      	nop
 8008560:	08009b1d 	.word	0x08009b1d

08008564 <strtol>:
 8008564:	4613      	mov	r3, r2
 8008566:	460a      	mov	r2, r1
 8008568:	4601      	mov	r1, r0
 800856a:	4802      	ldr	r0, [pc, #8]	; (8008574 <strtol+0x10>)
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f7ff bf77 	b.w	8008460 <_strtol_l.constprop.0>
 8008572:	bf00      	nop
 8008574:	200000dc 	.word	0x200000dc

08008578 <std>:
 8008578:	2300      	movs	r3, #0
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	e9c0 3300 	strd	r3, r3, [r0]
 8008582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008586:	6083      	str	r3, [r0, #8]
 8008588:	8181      	strh	r1, [r0, #12]
 800858a:	6643      	str	r3, [r0, #100]	; 0x64
 800858c:	81c2      	strh	r2, [r0, #14]
 800858e:	6183      	str	r3, [r0, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	2208      	movs	r2, #8
 8008594:	305c      	adds	r0, #92	; 0x5c
 8008596:	f000 f9c4 	bl	8008922 <memset>
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <std+0x58>)
 800859c:	6263      	str	r3, [r4, #36]	; 0x24
 800859e:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <std+0x5c>)
 80085a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a2:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <std+0x60>)
 80085a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085a6:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <std+0x64>)
 80085a8:	6323      	str	r3, [r4, #48]	; 0x30
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <std+0x68>)
 80085ac:	6224      	str	r4, [r4, #32]
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d006      	beq.n	80085c0 <std+0x48>
 80085b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80085b6:	4294      	cmp	r4, r2
 80085b8:	d002      	beq.n	80085c0 <std+0x48>
 80085ba:	33d0      	adds	r3, #208	; 0xd0
 80085bc:	429c      	cmp	r4, r3
 80085be:	d105      	bne.n	80085cc <std+0x54>
 80085c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c8:	f000 ba80 	b.w	8008acc <__retarget_lock_init_recursive>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	0800889d 	.word	0x0800889d
 80085d4:	080088bf 	.word	0x080088bf
 80085d8:	080088f7 	.word	0x080088f7
 80085dc:	0800891b 	.word	0x0800891b
 80085e0:	200002f0 	.word	0x200002f0

080085e4 <stdio_exit_handler>:
 80085e4:	4a02      	ldr	r2, [pc, #8]	; (80085f0 <stdio_exit_handler+0xc>)
 80085e6:	4903      	ldr	r1, [pc, #12]	; (80085f4 <stdio_exit_handler+0x10>)
 80085e8:	4803      	ldr	r0, [pc, #12]	; (80085f8 <stdio_exit_handler+0x14>)
 80085ea:	f000 b869 	b.w	80086c0 <_fwalk_sglue>
 80085ee:	bf00      	nop
 80085f0:	20000084 	.word	0x20000084
 80085f4:	080093c5 	.word	0x080093c5
 80085f8:	20000090 	.word	0x20000090

080085fc <cleanup_stdio>:
 80085fc:	6841      	ldr	r1, [r0, #4]
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <cleanup_stdio+0x34>)
 8008600:	4299      	cmp	r1, r3
 8008602:	b510      	push	{r4, lr}
 8008604:	4604      	mov	r4, r0
 8008606:	d001      	beq.n	800860c <cleanup_stdio+0x10>
 8008608:	f000 fedc 	bl	80093c4 <_fflush_r>
 800860c:	68a1      	ldr	r1, [r4, #8]
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <cleanup_stdio+0x38>)
 8008610:	4299      	cmp	r1, r3
 8008612:	d002      	beq.n	800861a <cleanup_stdio+0x1e>
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fed5 	bl	80093c4 <_fflush_r>
 800861a:	68e1      	ldr	r1, [r4, #12]
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <cleanup_stdio+0x3c>)
 800861e:	4299      	cmp	r1, r3
 8008620:	d004      	beq.n	800862c <cleanup_stdio+0x30>
 8008622:	4620      	mov	r0, r4
 8008624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008628:	f000 becc 	b.w	80093c4 <_fflush_r>
 800862c:	bd10      	pop	{r4, pc}
 800862e:	bf00      	nop
 8008630:	200002f0 	.word	0x200002f0
 8008634:	20000358 	.word	0x20000358
 8008638:	200003c0 	.word	0x200003c0

0800863c <global_stdio_init.part.0>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <global_stdio_init.part.0+0x30>)
 8008640:	4c0b      	ldr	r4, [pc, #44]	; (8008670 <global_stdio_init.part.0+0x34>)
 8008642:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <global_stdio_init.part.0+0x38>)
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	4620      	mov	r0, r4
 8008648:	2200      	movs	r2, #0
 800864a:	2104      	movs	r1, #4
 800864c:	f7ff ff94 	bl	8008578 <std>
 8008650:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008654:	2201      	movs	r2, #1
 8008656:	2109      	movs	r1, #9
 8008658:	f7ff ff8e 	bl	8008578 <std>
 800865c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008660:	2202      	movs	r2, #2
 8008662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008666:	2112      	movs	r1, #18
 8008668:	f7ff bf86 	b.w	8008578 <std>
 800866c:	20000428 	.word	0x20000428
 8008670:	200002f0 	.word	0x200002f0
 8008674:	080085e5 	.word	0x080085e5

08008678 <__sfp_lock_acquire>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sfp_lock_acquire+0x8>)
 800867a:	f000 ba28 	b.w	8008ace <__retarget_lock_acquire_recursive>
 800867e:	bf00      	nop
 8008680:	20000431 	.word	0x20000431

08008684 <__sfp_lock_release>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sfp_lock_release+0x8>)
 8008686:	f000 ba23 	b.w	8008ad0 <__retarget_lock_release_recursive>
 800868a:	bf00      	nop
 800868c:	20000431 	.word	0x20000431

08008690 <__sinit>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f7ff fff0 	bl	8008678 <__sfp_lock_acquire>
 8008698:	6a23      	ldr	r3, [r4, #32]
 800869a:	b11b      	cbz	r3, 80086a4 <__sinit+0x14>
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f7ff bff0 	b.w	8008684 <__sfp_lock_release>
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <__sinit+0x28>)
 80086a6:	6223      	str	r3, [r4, #32]
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <__sinit+0x2c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1f5      	bne.n	800869c <__sinit+0xc>
 80086b0:	f7ff ffc4 	bl	800863c <global_stdio_init.part.0>
 80086b4:	e7f2      	b.n	800869c <__sinit+0xc>
 80086b6:	bf00      	nop
 80086b8:	080085fd 	.word	0x080085fd
 80086bc:	20000428 	.word	0x20000428

080086c0 <_fwalk_sglue>:
 80086c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	4607      	mov	r7, r0
 80086c6:	4688      	mov	r8, r1
 80086c8:	4614      	mov	r4, r2
 80086ca:	2600      	movs	r6, #0
 80086cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086d0:	f1b9 0901 	subs.w	r9, r9, #1
 80086d4:	d505      	bpl.n	80086e2 <_fwalk_sglue+0x22>
 80086d6:	6824      	ldr	r4, [r4, #0]
 80086d8:	2c00      	cmp	r4, #0
 80086da:	d1f7      	bne.n	80086cc <_fwalk_sglue+0xc>
 80086dc:	4630      	mov	r0, r6
 80086de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d907      	bls.n	80086f8 <_fwalk_sglue+0x38>
 80086e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086ec:	3301      	adds	r3, #1
 80086ee:	d003      	beq.n	80086f8 <_fwalk_sglue+0x38>
 80086f0:	4629      	mov	r1, r5
 80086f2:	4638      	mov	r0, r7
 80086f4:	47c0      	blx	r8
 80086f6:	4306      	orrs	r6, r0
 80086f8:	3568      	adds	r5, #104	; 0x68
 80086fa:	e7e9      	b.n	80086d0 <_fwalk_sglue+0x10>

080086fc <getchar>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <getchar+0xc>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	6841      	ldr	r1, [r0, #4]
 8008702:	f000 be99 	b.w	8009438 <_getc_r>
 8008706:	bf00      	nop
 8008708:	200000dc 	.word	0x200000dc

0800870c <iprintf>:
 800870c:	b40f      	push	{r0, r1, r2, r3}
 800870e:	b507      	push	{r0, r1, r2, lr}
 8008710:	4906      	ldr	r1, [pc, #24]	; (800872c <iprintf+0x20>)
 8008712:	ab04      	add	r3, sp, #16
 8008714:	6808      	ldr	r0, [r1, #0]
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	6881      	ldr	r1, [r0, #8]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	f000 fb21 	bl	8008d64 <_vfiprintf_r>
 8008722:	b003      	add	sp, #12
 8008724:	f85d eb04 	ldr.w	lr, [sp], #4
 8008728:	b004      	add	sp, #16
 800872a:	4770      	bx	lr
 800872c:	200000dc 	.word	0x200000dc

08008730 <putchar>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <putchar+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	6882      	ldr	r2, [r0, #8]
 8008738:	f000 bf0b 	b.w	8009552 <_putc_r>
 800873c:	200000dc 	.word	0x200000dc

08008740 <setvbuf>:
 8008740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008744:	461d      	mov	r5, r3
 8008746:	4b54      	ldr	r3, [pc, #336]	; (8008898 <setvbuf+0x158>)
 8008748:	681f      	ldr	r7, [r3, #0]
 800874a:	4604      	mov	r4, r0
 800874c:	460e      	mov	r6, r1
 800874e:	4690      	mov	r8, r2
 8008750:	b127      	cbz	r7, 800875c <setvbuf+0x1c>
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	b913      	cbnz	r3, 800875c <setvbuf+0x1c>
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ff9a 	bl	8008690 <__sinit>
 800875c:	f1b8 0f02 	cmp.w	r8, #2
 8008760:	d006      	beq.n	8008770 <setvbuf+0x30>
 8008762:	f1b8 0f01 	cmp.w	r8, #1
 8008766:	f200 8094 	bhi.w	8008892 <setvbuf+0x152>
 800876a:	2d00      	cmp	r5, #0
 800876c:	f2c0 8091 	blt.w	8008892 <setvbuf+0x152>
 8008770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d405      	bmi.n	8008782 <setvbuf+0x42>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	059b      	lsls	r3, r3, #22
 800877a:	d402      	bmi.n	8008782 <setvbuf+0x42>
 800877c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877e:	f000 f9a6 	bl	8008ace <__retarget_lock_acquire_recursive>
 8008782:	4621      	mov	r1, r4
 8008784:	4638      	mov	r0, r7
 8008786:	f000 fe1d 	bl	80093c4 <_fflush_r>
 800878a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800878c:	b141      	cbz	r1, 80087a0 <setvbuf+0x60>
 800878e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008792:	4299      	cmp	r1, r3
 8008794:	d002      	beq.n	800879c <setvbuf+0x5c>
 8008796:	4638      	mov	r0, r7
 8008798:	f000 f9ba 	bl	8008b10 <_free_r>
 800879c:	2300      	movs	r3, #0
 800879e:	6363      	str	r3, [r4, #52]	; 0x34
 80087a0:	2300      	movs	r3, #0
 80087a2:	61a3      	str	r3, [r4, #24]
 80087a4:	6063      	str	r3, [r4, #4]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	0618      	lsls	r0, r3, #24
 80087aa:	d503      	bpl.n	80087b4 <setvbuf+0x74>
 80087ac:	6921      	ldr	r1, [r4, #16]
 80087ae:	4638      	mov	r0, r7
 80087b0:	f000 f9ae 	bl	8008b10 <_free_r>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	f1b8 0f02 	cmp.w	r8, #2
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	d05f      	beq.n	8008886 <setvbuf+0x146>
 80087c6:	ab01      	add	r3, sp, #4
 80087c8:	466a      	mov	r2, sp
 80087ca:	4621      	mov	r1, r4
 80087cc:	4638      	mov	r0, r7
 80087ce:	f000 fe5e 	bl	800948e <__swhatbuf_r>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	4318      	orrs	r0, r3
 80087d6:	81a0      	strh	r0, [r4, #12]
 80087d8:	bb2d      	cbnz	r5, 8008826 <setvbuf+0xe6>
 80087da:	9d00      	ldr	r5, [sp, #0]
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 f9e3 	bl	8008ba8 <malloc>
 80087e2:	4606      	mov	r6, r0
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d150      	bne.n	800888a <setvbuf+0x14a>
 80087e8:	f8dd 9000 	ldr.w	r9, [sp]
 80087ec:	45a9      	cmp	r9, r5
 80087ee:	d13e      	bne.n	800886e <setvbuf+0x12e>
 80087f0:	f04f 35ff 	mov.w	r5, #4294967295
 80087f4:	2200      	movs	r2, #0
 80087f6:	60a2      	str	r2, [r4, #8]
 80087f8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	6122      	str	r2, [r4, #16]
 8008800:	2201      	movs	r2, #1
 8008802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008806:	6162      	str	r2, [r4, #20]
 8008808:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800880a:	f043 0302 	orr.w	r3, r3, #2
 800880e:	07d1      	lsls	r1, r2, #31
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	d404      	bmi.n	800881e <setvbuf+0xde>
 8008814:	059b      	lsls	r3, r3, #22
 8008816:	d402      	bmi.n	800881e <setvbuf+0xde>
 8008818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800881a:	f000 f959 	bl	8008ad0 <__retarget_lock_release_recursive>
 800881e:	4628      	mov	r0, r5
 8008820:	b003      	add	sp, #12
 8008822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008826:	2e00      	cmp	r6, #0
 8008828:	d0d8      	beq.n	80087dc <setvbuf+0x9c>
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	b913      	cbnz	r3, 8008834 <setvbuf+0xf4>
 800882e:	4638      	mov	r0, r7
 8008830:	f7ff ff2e 	bl	8008690 <__sinit>
 8008834:	f1b8 0f01 	cmp.w	r8, #1
 8008838:	bf08      	it	eq
 800883a:	89a3      	ldrheq	r3, [r4, #12]
 800883c:	6026      	str	r6, [r4, #0]
 800883e:	bf04      	itt	eq
 8008840:	f043 0301 	orreq.w	r3, r3, #1
 8008844:	81a3      	strheq	r3, [r4, #12]
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	f013 0208 	ands.w	r2, r3, #8
 800884c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008850:	d01d      	beq.n	800888e <setvbuf+0x14e>
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	bf41      	itttt	mi
 8008856:	2200      	movmi	r2, #0
 8008858:	426d      	negmi	r5, r5
 800885a:	60a2      	strmi	r2, [r4, #8]
 800885c:	61a5      	strmi	r5, [r4, #24]
 800885e:	bf58      	it	pl
 8008860:	60a5      	strpl	r5, [r4, #8]
 8008862:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008864:	f015 0501 	ands.w	r5, r5, #1
 8008868:	d0d4      	beq.n	8008814 <setvbuf+0xd4>
 800886a:	2500      	movs	r5, #0
 800886c:	e7d7      	b.n	800881e <setvbuf+0xde>
 800886e:	4648      	mov	r0, r9
 8008870:	f000 f99a 	bl	8008ba8 <malloc>
 8008874:	4606      	mov	r6, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d0ba      	beq.n	80087f0 <setvbuf+0xb0>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	464d      	mov	r5, r9
 8008884:	e7d1      	b.n	800882a <setvbuf+0xea>
 8008886:	2500      	movs	r5, #0
 8008888:	e7b4      	b.n	80087f4 <setvbuf+0xb4>
 800888a:	46a9      	mov	r9, r5
 800888c:	e7f5      	b.n	800887a <setvbuf+0x13a>
 800888e:	60a2      	str	r2, [r4, #8]
 8008890:	e7e7      	b.n	8008862 <setvbuf+0x122>
 8008892:	f04f 35ff 	mov.w	r5, #4294967295
 8008896:	e7c2      	b.n	800881e <setvbuf+0xde>
 8008898:	200000dc 	.word	0x200000dc

0800889c <__sread>:
 800889c:	b510      	push	{r4, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a4:	f000 f8c4 	bl	8008a30 <_read_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	bfab      	itete	ge
 80088ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088ae:	89a3      	ldrhlt	r3, [r4, #12]
 80088b0:	181b      	addge	r3, r3, r0
 80088b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088b6:	bfac      	ite	ge
 80088b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ba:	81a3      	strhlt	r3, [r4, #12]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__swrite>:
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	461f      	mov	r7, r3
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	05db      	lsls	r3, r3, #23
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4616      	mov	r6, r2
 80088ce:	d505      	bpl.n	80088dc <__swrite+0x1e>
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	2302      	movs	r3, #2
 80088d6:	2200      	movs	r2, #0
 80088d8:	f000 f898 	bl	8008a0c <_lseek_r>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	f000 b8af 	b.w	8008a54 <_write_r>

080088f6 <__sseek>:
 80088f6:	b510      	push	{r4, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fe:	f000 f885 	bl	8008a0c <_lseek_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	bf15      	itete	ne
 8008908:	6560      	strne	r0, [r4, #84]	; 0x54
 800890a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800890e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008912:	81a3      	strheq	r3, [r4, #12]
 8008914:	bf18      	it	ne
 8008916:	81a3      	strhne	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__sclose>:
 800891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891e:	f000 b865 	b.w	80089ec <_close_r>

08008922 <memset>:
 8008922:	4402      	add	r2, r0
 8008924:	4603      	mov	r3, r0
 8008926:	4293      	cmp	r3, r2
 8008928:	d100      	bne.n	800892c <memset+0xa>
 800892a:	4770      	bx	lr
 800892c:	f803 1b01 	strb.w	r1, [r3], #1
 8008930:	e7f9      	b.n	8008926 <memset+0x4>
	...

08008934 <strtok>:
 8008934:	4b16      	ldr	r3, [pc, #88]	; (8008990 <strtok+0x5c>)
 8008936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800893c:	4605      	mov	r5, r0
 800893e:	b9fc      	cbnz	r4, 8008980 <strtok+0x4c>
 8008940:	2050      	movs	r0, #80	; 0x50
 8008942:	9101      	str	r1, [sp, #4]
 8008944:	f000 f930 	bl	8008ba8 <malloc>
 8008948:	9901      	ldr	r1, [sp, #4]
 800894a:	6470      	str	r0, [r6, #68]	; 0x44
 800894c:	4602      	mov	r2, r0
 800894e:	b920      	cbnz	r0, 800895a <strtok+0x26>
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <strtok+0x60>)
 8008952:	4811      	ldr	r0, [pc, #68]	; (8008998 <strtok+0x64>)
 8008954:	215b      	movs	r1, #91	; 0x5b
 8008956:	f000 f8bd 	bl	8008ad4 <__assert_func>
 800895a:	e9c0 4400 	strd	r4, r4, [r0]
 800895e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008962:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008966:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800896a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800896e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008972:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008976:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800897a:	6184      	str	r4, [r0, #24]
 800897c:	7704      	strb	r4, [r0, #28]
 800897e:	6244      	str	r4, [r0, #36]	; 0x24
 8008980:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008982:	2301      	movs	r3, #1
 8008984:	4628      	mov	r0, r5
 8008986:	b002      	add	sp, #8
 8008988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800898c:	f000 b806 	b.w	800899c <__strtok_r>
 8008990:	200000dc 	.word	0x200000dc
 8008994:	08009c1d 	.word	0x08009c1d
 8008998:	08009c34 	.word	0x08009c34

0800899c <__strtok_r>:
 800899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899e:	b908      	cbnz	r0, 80089a4 <__strtok_r+0x8>
 80089a0:	6810      	ldr	r0, [r2, #0]
 80089a2:	b188      	cbz	r0, 80089c8 <__strtok_r+0x2c>
 80089a4:	4604      	mov	r4, r0
 80089a6:	4620      	mov	r0, r4
 80089a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089ac:	460f      	mov	r7, r1
 80089ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089b2:	b91e      	cbnz	r6, 80089bc <__strtok_r+0x20>
 80089b4:	b965      	cbnz	r5, 80089d0 <__strtok_r+0x34>
 80089b6:	6015      	str	r5, [r2, #0]
 80089b8:	4628      	mov	r0, r5
 80089ba:	e005      	b.n	80089c8 <__strtok_r+0x2c>
 80089bc:	42b5      	cmp	r5, r6
 80089be:	d1f6      	bne.n	80089ae <__strtok_r+0x12>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <__strtok_r+0xa>
 80089c4:	6014      	str	r4, [r2, #0]
 80089c6:	7003      	strb	r3, [r0, #0]
 80089c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ca:	461c      	mov	r4, r3
 80089cc:	e00c      	b.n	80089e8 <__strtok_r+0x4c>
 80089ce:	b915      	cbnz	r5, 80089d6 <__strtok_r+0x3a>
 80089d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089d4:	460e      	mov	r6, r1
 80089d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089da:	42ab      	cmp	r3, r5
 80089dc:	d1f7      	bne.n	80089ce <__strtok_r+0x32>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f3      	beq.n	80089ca <__strtok_r+0x2e>
 80089e2:	2300      	movs	r3, #0
 80089e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089e8:	6014      	str	r4, [r2, #0]
 80089ea:	e7ed      	b.n	80089c8 <__strtok_r+0x2c>

080089ec <_close_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d06      	ldr	r5, [pc, #24]	; (8008a08 <_close_r+0x1c>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7f8 ff54 	bl	80018a4 <_close>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_close_r+0x1a>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_close_r+0x1a>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	2000042c 	.word	0x2000042c

08008a0c <_lseek_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d07      	ldr	r5, [pc, #28]	; (8008a2c <_lseek_r+0x20>)
 8008a10:	4604      	mov	r4, r0
 8008a12:	4608      	mov	r0, r1
 8008a14:	4611      	mov	r1, r2
 8008a16:	2200      	movs	r2, #0
 8008a18:	602a      	str	r2, [r5, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f7f8 ff59 	bl	80018d2 <_lseek>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_lseek_r+0x1e>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_lseek_r+0x1e>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	2000042c 	.word	0x2000042c

08008a30 <_read_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_read_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 ff58 	bl	80018f4 <_read>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_read_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_read_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	2000042c 	.word	0x2000042c

08008a54 <_write_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d07      	ldr	r5, [pc, #28]	; (8008a74 <_write_r+0x20>)
 8008a58:	4604      	mov	r4, r0
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	602a      	str	r2, [r5, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7f8 fef2 	bl	800184c <_write>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_write_r+0x1e>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_write_r+0x1e>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	2000042c 	.word	0x2000042c

08008a78 <__errno>:
 8008a78:	4b01      	ldr	r3, [pc, #4]	; (8008a80 <__errno+0x8>)
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	200000dc 	.word	0x200000dc

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4d0d      	ldr	r5, [pc, #52]	; (8008abc <__libc_init_array+0x38>)
 8008a88:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8a:	1b64      	subs	r4, r4, r5
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	2600      	movs	r6, #0
 8008a90:	42a6      	cmp	r6, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	4d0b      	ldr	r5, [pc, #44]	; (8008ac4 <__libc_init_array+0x40>)
 8008a96:	4c0c      	ldr	r4, [pc, #48]	; (8008ac8 <__libc_init_array+0x44>)
 8008a98:	f000 ff40 	bl	800991c <_init>
 8008a9c:	1b64      	subs	r4, r4, r5
 8008a9e:	10a4      	asrs	r4, r4, #2
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	42a6      	cmp	r6, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aac:	4798      	blx	r3
 8008aae:	3601      	adds	r6, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab6:	4798      	blx	r3
 8008ab8:	3601      	adds	r6, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	08009d08 	.word	0x08009d08
 8008ac0:	08009d08 	.word	0x08009d08
 8008ac4:	08009d08 	.word	0x08009d08
 8008ac8:	08009d0c 	.word	0x08009d0c

08008acc <__retarget_lock_init_recursive>:
 8008acc:	4770      	bx	lr

08008ace <__retarget_lock_acquire_recursive>:
 8008ace:	4770      	bx	lr

08008ad0 <__retarget_lock_release_recursive>:
 8008ad0:	4770      	bx	lr
	...

08008ad4 <__assert_func>:
 8008ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <__assert_func+0x2c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4605      	mov	r5, r0
 8008ae0:	68d8      	ldr	r0, [r3, #12]
 8008ae2:	b14c      	cbz	r4, 8008af8 <__assert_func+0x24>
 8008ae4:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <__assert_func+0x30>)
 8008ae6:	9100      	str	r1, [sp, #0]
 8008ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aec:	4906      	ldr	r1, [pc, #24]	; (8008b08 <__assert_func+0x34>)
 8008aee:	462b      	mov	r3, r5
 8008af0:	f000 fc90 	bl	8009414 <fiprintf>
 8008af4:	f000 fe40 	bl	8009778 <abort>
 8008af8:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <__assert_func+0x38>)
 8008afa:	461c      	mov	r4, r3
 8008afc:	e7f3      	b.n	8008ae6 <__assert_func+0x12>
 8008afe:	bf00      	nop
 8008b00:	200000dc 	.word	0x200000dc
 8008b04:	08009c8e 	.word	0x08009c8e
 8008b08:	08009c9b 	.word	0x08009c9b
 8008b0c:	08009cc9 	.word	0x08009cc9

08008b10 <_free_r>:
 8008b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d044      	beq.n	8008ba0 <_free_r+0x90>
 8008b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1a:	9001      	str	r0, [sp, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b22:	bfb8      	it	lt
 8008b24:	18e4      	addlt	r4, r4, r3
 8008b26:	f000 f8e7 	bl	8008cf8 <__malloc_lock>
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <_free_r+0x94>)
 8008b2c:	9801      	ldr	r0, [sp, #4]
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	b933      	cbnz	r3, 8008b40 <_free_r+0x30>
 8008b32:	6063      	str	r3, [r4, #4]
 8008b34:	6014      	str	r4, [r2, #0]
 8008b36:	b003      	add	sp, #12
 8008b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b3c:	f000 b8e2 	b.w	8008d04 <__malloc_unlock>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x46>
 8008b44:	6825      	ldr	r5, [r4, #0]
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf01      	itttt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	1949      	addeq	r1, r1, r5
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	e7ed      	b.n	8008b32 <_free_r+0x22>
 8008b56:	461a      	mov	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	b10b      	cbz	r3, 8008b60 <_free_r+0x50>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d9fa      	bls.n	8008b56 <_free_r+0x46>
 8008b60:	6811      	ldr	r1, [r2, #0]
 8008b62:	1855      	adds	r5, r2, r1
 8008b64:	42a5      	cmp	r5, r4
 8008b66:	d10b      	bne.n	8008b80 <_free_r+0x70>
 8008b68:	6824      	ldr	r4, [r4, #0]
 8008b6a:	4421      	add	r1, r4
 8008b6c:	1854      	adds	r4, r2, r1
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	d1e0      	bne.n	8008b36 <_free_r+0x26>
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	6053      	str	r3, [r2, #4]
 8008b7a:	440c      	add	r4, r1
 8008b7c:	6014      	str	r4, [r2, #0]
 8008b7e:	e7da      	b.n	8008b36 <_free_r+0x26>
 8008b80:	d902      	bls.n	8008b88 <_free_r+0x78>
 8008b82:	230c      	movs	r3, #12
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	e7d6      	b.n	8008b36 <_free_r+0x26>
 8008b88:	6825      	ldr	r5, [r4, #0]
 8008b8a:	1961      	adds	r1, r4, r5
 8008b8c:	428b      	cmp	r3, r1
 8008b8e:	bf04      	itt	eq
 8008b90:	6819      	ldreq	r1, [r3, #0]
 8008b92:	685b      	ldreq	r3, [r3, #4]
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	bf04      	itt	eq
 8008b98:	1949      	addeq	r1, r1, r5
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	6054      	str	r4, [r2, #4]
 8008b9e:	e7ca      	b.n	8008b36 <_free_r+0x26>
 8008ba0:	b003      	add	sp, #12
 8008ba2:	bd30      	pop	{r4, r5, pc}
 8008ba4:	20000434 	.word	0x20000434

08008ba8 <malloc>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <malloc+0xc>)
 8008baa:	4601      	mov	r1, r0
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f000 b823 	b.w	8008bf8 <_malloc_r>
 8008bb2:	bf00      	nop
 8008bb4:	200000dc 	.word	0x200000dc

08008bb8 <sbrk_aligned>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	4e0e      	ldr	r6, [pc, #56]	; (8008bf4 <sbrk_aligned+0x3c>)
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	6831      	ldr	r1, [r6, #0]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	b911      	cbnz	r1, 8008bca <sbrk_aligned+0x12>
 8008bc4:	f000 fdc8 	bl	8009758 <_sbrk_r>
 8008bc8:	6030      	str	r0, [r6, #0]
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f000 fdc3 	bl	8009758 <_sbrk_r>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d00a      	beq.n	8008bec <sbrk_aligned+0x34>
 8008bd6:	1cc4      	adds	r4, r0, #3
 8008bd8:	f024 0403 	bic.w	r4, r4, #3
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d007      	beq.n	8008bf0 <sbrk_aligned+0x38>
 8008be0:	1a21      	subs	r1, r4, r0
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 fdb8 	bl	8009758 <_sbrk_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d101      	bne.n	8008bf0 <sbrk_aligned+0x38>
 8008bec:	f04f 34ff 	mov.w	r4, #4294967295
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	20000438 	.word	0x20000438

08008bf8 <_malloc_r>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	1ccd      	adds	r5, r1, #3
 8008bfe:	f025 0503 	bic.w	r5, r5, #3
 8008c02:	3508      	adds	r5, #8
 8008c04:	2d0c      	cmp	r5, #12
 8008c06:	bf38      	it	cc
 8008c08:	250c      	movcc	r5, #12
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	db01      	blt.n	8008c14 <_malloc_r+0x1c>
 8008c10:	42a9      	cmp	r1, r5
 8008c12:	d905      	bls.n	8008c20 <_malloc_r+0x28>
 8008c14:	230c      	movs	r3, #12
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	2600      	movs	r6, #0
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cf4 <_malloc_r+0xfc>
 8008c24:	f000 f868 	bl	8008cf8 <__malloc_lock>
 8008c28:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	bb5c      	cbnz	r4, 8008c88 <_malloc_r+0x90>
 8008c30:	4629      	mov	r1, r5
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7ff ffc0 	bl	8008bb8 <sbrk_aligned>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	d155      	bne.n	8008cea <_malloc_r+0xf2>
 8008c3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008c42:	4626      	mov	r6, r4
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	d145      	bne.n	8008cd4 <_malloc_r+0xdc>
 8008c48:	2c00      	cmp	r4, #0
 8008c4a:	d048      	beq.n	8008cde <_malloc_r+0xe6>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4638      	mov	r0, r7
 8008c52:	eb04 0903 	add.w	r9, r4, r3
 8008c56:	f000 fd7f 	bl	8009758 <_sbrk_r>
 8008c5a:	4581      	cmp	r9, r0
 8008c5c:	d13f      	bne.n	8008cde <_malloc_r+0xe6>
 8008c5e:	6821      	ldr	r1, [r4, #0]
 8008c60:	1a6d      	subs	r5, r5, r1
 8008c62:	4629      	mov	r1, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff ffa7 	bl	8008bb8 <sbrk_aligned>
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d037      	beq.n	8008cde <_malloc_r+0xe6>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	442b      	add	r3, r5
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	f8d8 3000 	ldr.w	r3, [r8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d038      	beq.n	8008cee <_malloc_r+0xf6>
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	42a2      	cmp	r2, r4
 8008c80:	d12b      	bne.n	8008cda <_malloc_r+0xe2>
 8008c82:	2200      	movs	r2, #0
 8008c84:	605a      	str	r2, [r3, #4]
 8008c86:	e00f      	b.n	8008ca8 <_malloc_r+0xb0>
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	1b52      	subs	r2, r2, r5
 8008c8c:	d41f      	bmi.n	8008cce <_malloc_r+0xd6>
 8008c8e:	2a0b      	cmp	r2, #11
 8008c90:	d917      	bls.n	8008cc2 <_malloc_r+0xca>
 8008c92:	1961      	adds	r1, r4, r5
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	6025      	str	r5, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	6059      	strne	r1, [r3, #4]
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	bf08      	it	eq
 8008ca0:	f8c8 1000 	streq.w	r1, [r8]
 8008ca4:	5162      	str	r2, [r4, r5]
 8008ca6:	604b      	str	r3, [r1, #4]
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f104 060b 	add.w	r6, r4, #11
 8008cae:	f000 f829 	bl	8008d04 <__malloc_unlock>
 8008cb2:	f026 0607 	bic.w	r6, r6, #7
 8008cb6:	1d23      	adds	r3, r4, #4
 8008cb8:	1af2      	subs	r2, r6, r3
 8008cba:	d0ae      	beq.n	8008c1a <_malloc_r+0x22>
 8008cbc:	1b9b      	subs	r3, r3, r6
 8008cbe:	50a3      	str	r3, [r4, r2]
 8008cc0:	e7ab      	b.n	8008c1a <_malloc_r+0x22>
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	6862      	ldr	r2, [r4, #4]
 8008cc6:	d1dd      	bne.n	8008c84 <_malloc_r+0x8c>
 8008cc8:	f8c8 2000 	str.w	r2, [r8]
 8008ccc:	e7ec      	b.n	8008ca8 <_malloc_r+0xb0>
 8008cce:	4623      	mov	r3, r4
 8008cd0:	6864      	ldr	r4, [r4, #4]
 8008cd2:	e7ac      	b.n	8008c2e <_malloc_r+0x36>
 8008cd4:	4634      	mov	r4, r6
 8008cd6:	6876      	ldr	r6, [r6, #4]
 8008cd8:	e7b4      	b.n	8008c44 <_malloc_r+0x4c>
 8008cda:	4613      	mov	r3, r2
 8008cdc:	e7cc      	b.n	8008c78 <_malloc_r+0x80>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f000 f80e 	bl	8008d04 <__malloc_unlock>
 8008ce8:	e797      	b.n	8008c1a <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7dc      	b.n	8008ca8 <_malloc_r+0xb0>
 8008cee:	605b      	str	r3, [r3, #4]
 8008cf0:	deff      	udf	#255	; 0xff
 8008cf2:	bf00      	nop
 8008cf4:	20000434 	.word	0x20000434

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff bee8 	b.w	8008ace <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20000430 	.word	0x20000430

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff bee3 	b.w	8008ad0 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20000430 	.word	0x20000430

08008d10 <__sfputc_r>:
 8008d10:	6893      	ldr	r3, [r2, #8]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	b410      	push	{r4}
 8008d18:	6093      	str	r3, [r2, #8]
 8008d1a:	da08      	bge.n	8008d2e <__sfputc_r+0x1e>
 8008d1c:	6994      	ldr	r4, [r2, #24]
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	db01      	blt.n	8008d26 <__sfputc_r+0x16>
 8008d22:	290a      	cmp	r1, #10
 8008d24:	d103      	bne.n	8008d2e <__sfputc_r+0x1e>
 8008d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d2a:	f000 bc5e 	b.w	80095ea <__swbuf_r>
 8008d2e:	6813      	ldr	r3, [r2, #0]
 8008d30:	1c58      	adds	r0, r3, #1
 8008d32:	6010      	str	r0, [r2, #0]
 8008d34:	7019      	strb	r1, [r3, #0]
 8008d36:	4608      	mov	r0, r1
 8008d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <__sfputs_r>:
 8008d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d40:	4606      	mov	r6, r0
 8008d42:	460f      	mov	r7, r1
 8008d44:	4614      	mov	r4, r2
 8008d46:	18d5      	adds	r5, r2, r3
 8008d48:	42ac      	cmp	r4, r5
 8008d4a:	d101      	bne.n	8008d50 <__sfputs_r+0x12>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e007      	b.n	8008d60 <__sfputs_r+0x22>
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	463a      	mov	r2, r7
 8008d56:	4630      	mov	r0, r6
 8008d58:	f7ff ffda 	bl	8008d10 <__sfputc_r>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d1f3      	bne.n	8008d48 <__sfputs_r+0xa>
 8008d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d64 <_vfiprintf_r>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	460d      	mov	r5, r1
 8008d6a:	b09d      	sub	sp, #116	; 0x74
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	4698      	mov	r8, r3
 8008d70:	4606      	mov	r6, r0
 8008d72:	b118      	cbz	r0, 8008d7c <_vfiprintf_r+0x18>
 8008d74:	6a03      	ldr	r3, [r0, #32]
 8008d76:	b90b      	cbnz	r3, 8008d7c <_vfiprintf_r+0x18>
 8008d78:	f7ff fc8a 	bl	8008690 <__sinit>
 8008d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7e:	07d9      	lsls	r1, r3, #31
 8008d80:	d405      	bmi.n	8008d8e <_vfiprintf_r+0x2a>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_vfiprintf_r+0x2a>
 8008d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8a:	f7ff fea0 	bl	8008ace <__retarget_lock_acquire_recursive>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	071b      	lsls	r3, r3, #28
 8008d92:	d501      	bpl.n	8008d98 <_vfiprintf_r+0x34>
 8008d94:	692b      	ldr	r3, [r5, #16]
 8008d96:	b99b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x5c>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 fc62 	bl	8009664 <__swsetup_r>
 8008da0:	b170      	cbz	r0, 8008dc0 <_vfiprintf_r+0x5c>
 8008da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da4:	07dc      	lsls	r4, r3, #31
 8008da6:	d504      	bpl.n	8008db2 <_vfiprintf_r+0x4e>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	0598      	lsls	r0, r3, #22
 8008db6:	d4f7      	bmi.n	8008da8 <_vfiprintf_r+0x44>
 8008db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dba:	f7ff fe89 	bl	8008ad0 <__retarget_lock_release_recursive>
 8008dbe:	e7f3      	b.n	8008da8 <_vfiprintf_r+0x44>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dce:	2330      	movs	r3, #48	; 0x30
 8008dd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f84 <_vfiprintf_r+0x220>
 8008dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd8:	f04f 0901 	mov.w	r9, #1
 8008ddc:	4623      	mov	r3, r4
 8008dde:	469a      	mov	sl, r3
 8008de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de4:	b10a      	cbz	r2, 8008dea <_vfiprintf_r+0x86>
 8008de6:	2a25      	cmp	r2, #37	; 0x25
 8008de8:	d1f9      	bne.n	8008dde <_vfiprintf_r+0x7a>
 8008dea:	ebba 0b04 	subs.w	fp, sl, r4
 8008dee:	d00b      	beq.n	8008e08 <_vfiprintf_r+0xa4>
 8008df0:	465b      	mov	r3, fp
 8008df2:	4622      	mov	r2, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ffa1 	bl	8008d3e <__sfputs_r>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f000 80a9 	beq.w	8008f54 <_vfiprintf_r+0x1f0>
 8008e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e04:	445a      	add	r2, fp
 8008e06:	9209      	str	r2, [sp, #36]	; 0x24
 8008e08:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80a1 	beq.w	8008f54 <_vfiprintf_r+0x1f0>
 8008e12:	2300      	movs	r3, #0
 8008e14:	f04f 32ff 	mov.w	r2, #4294967295
 8008e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e1c:	f10a 0a01 	add.w	sl, sl, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e28:	931a      	str	r3, [sp, #104]	; 0x68
 8008e2a:	4654      	mov	r4, sl
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e32:	4854      	ldr	r0, [pc, #336]	; (8008f84 <_vfiprintf_r+0x220>)
 8008e34:	f7f7 f9dc 	bl	80001f0 <memchr>
 8008e38:	9a04      	ldr	r2, [sp, #16]
 8008e3a:	b9d8      	cbnz	r0, 8008e74 <_vfiprintf_r+0x110>
 8008e3c:	06d1      	lsls	r1, r2, #27
 8008e3e:	bf44      	itt	mi
 8008e40:	2320      	movmi	r3, #32
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	0713      	lsls	r3, r2, #28
 8008e48:	bf44      	itt	mi
 8008e4a:	232b      	movmi	r3, #43	; 0x2b
 8008e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e50:	f89a 3000 	ldrb.w	r3, [sl]
 8008e54:	2b2a      	cmp	r3, #42	; 0x2a
 8008e56:	d015      	beq.n	8008e84 <_vfiprintf_r+0x120>
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	4654      	mov	r4, sl
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f04f 0c0a 	mov.w	ip, #10
 8008e62:	4621      	mov	r1, r4
 8008e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e68:	3b30      	subs	r3, #48	; 0x30
 8008e6a:	2b09      	cmp	r3, #9
 8008e6c:	d94d      	bls.n	8008f0a <_vfiprintf_r+0x1a6>
 8008e6e:	b1b0      	cbz	r0, 8008e9e <_vfiprintf_r+0x13a>
 8008e70:	9207      	str	r2, [sp, #28]
 8008e72:	e014      	b.n	8008e9e <_vfiprintf_r+0x13a>
 8008e74:	eba0 0308 	sub.w	r3, r0, r8
 8008e78:	fa09 f303 	lsl.w	r3, r9, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	46a2      	mov	sl, r4
 8008e82:	e7d2      	b.n	8008e2a <_vfiprintf_r+0xc6>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9103      	str	r1, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfbb      	ittet	lt
 8008e90:	425b      	neglt	r3, r3
 8008e92:	f042 0202 	orrlt.w	r2, r2, #2
 8008e96:	9307      	strge	r3, [sp, #28]
 8008e98:	9307      	strlt	r3, [sp, #28]
 8008e9a:	bfb8      	it	lt
 8008e9c:	9204      	strlt	r2, [sp, #16]
 8008e9e:	7823      	ldrb	r3, [r4, #0]
 8008ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea2:	d10c      	bne.n	8008ebe <_vfiprintf_r+0x15a>
 8008ea4:	7863      	ldrb	r3, [r4, #1]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d134      	bne.n	8008f14 <_vfiprintf_r+0x1b0>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	9203      	str	r2, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfb8      	it	lt
 8008eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eba:	3402      	adds	r4, #2
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f94 <_vfiprintf_r+0x230>
 8008ec2:	7821      	ldrb	r1, [r4, #0]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	f7f7 f992 	bl	80001f0 <memchr>
 8008ecc:	b138      	cbz	r0, 8008ede <_vfiprintf_r+0x17a>
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	eba0 000a 	sub.w	r0, r0, sl
 8008ed4:	2240      	movs	r2, #64	; 0x40
 8008ed6:	4082      	lsls	r2, r0
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	3401      	adds	r4, #1
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	4829      	ldr	r0, [pc, #164]	; (8008f88 <_vfiprintf_r+0x224>)
 8008ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ee8:	2206      	movs	r2, #6
 8008eea:	f7f7 f981 	bl	80001f0 <memchr>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d03f      	beq.n	8008f72 <_vfiprintf_r+0x20e>
 8008ef2:	4b26      	ldr	r3, [pc, #152]	; (8008f8c <_vfiprintf_r+0x228>)
 8008ef4:	bb1b      	cbnz	r3, 8008f3e <_vfiprintf_r+0x1da>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	3307      	adds	r3, #7
 8008efa:	f023 0307 	bic.w	r3, r3, #7
 8008efe:	3308      	adds	r3, #8
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f04:	443b      	add	r3, r7
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	e768      	b.n	8008ddc <_vfiprintf_r+0x78>
 8008f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f0e:	460c      	mov	r4, r1
 8008f10:	2001      	movs	r0, #1
 8008f12:	e7a6      	b.n	8008e62 <_vfiprintf_r+0xfe>
 8008f14:	2300      	movs	r3, #0
 8008f16:	3401      	adds	r4, #1
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f04f 0c0a 	mov.w	ip, #10
 8008f20:	4620      	mov	r0, r4
 8008f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f26:	3a30      	subs	r2, #48	; 0x30
 8008f28:	2a09      	cmp	r2, #9
 8008f2a:	d903      	bls.n	8008f34 <_vfiprintf_r+0x1d0>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0c6      	beq.n	8008ebe <_vfiprintf_r+0x15a>
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	e7c4      	b.n	8008ebe <_vfiprintf_r+0x15a>
 8008f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f38:	4604      	mov	r4, r0
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e7f0      	b.n	8008f20 <_vfiprintf_r+0x1bc>
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462a      	mov	r2, r5
 8008f44:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <_vfiprintf_r+0x22c>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f3af 8000 	nop.w
 8008f4e:	4607      	mov	r7, r0
 8008f50:	1c78      	adds	r0, r7, #1
 8008f52:	d1d6      	bne.n	8008f02 <_vfiprintf_r+0x19e>
 8008f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f56:	07d9      	lsls	r1, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_vfiprintf_r+0x202>
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	059a      	lsls	r2, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_vfiprintf_r+0x202>
 8008f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f62:	f7ff fdb5 	bl	8008ad0 <__retarget_lock_release_recursive>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	065b      	lsls	r3, r3, #25
 8008f6a:	f53f af1d 	bmi.w	8008da8 <_vfiprintf_r+0x44>
 8008f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f70:	e71c      	b.n	8008dac <_vfiprintf_r+0x48>
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <_vfiprintf_r+0x22c>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f000 f879 	bl	8009074 <_printf_i>
 8008f82:	e7e4      	b.n	8008f4e <_vfiprintf_r+0x1ea>
 8008f84:	08009cca 	.word	0x08009cca
 8008f88:	08009cd4 	.word	0x08009cd4
 8008f8c:	00000000 	.word	0x00000000
 8008f90:	08008d3f 	.word	0x08008d3f
 8008f94:	08009cd0 	.word	0x08009cd0

08008f98 <_printf_common>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	4699      	mov	r9, r3
 8008fa0:	688a      	ldr	r2, [r1, #8]
 8008fa2:	690b      	ldr	r3, [r1, #16]
 8008fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bfb8      	it	lt
 8008fac:	4613      	movlt	r3, r2
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_printf_common+0x26>
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	0699      	lsls	r1, r3, #26
 8008fc2:	bf42      	ittt	mi
 8008fc4:	6833      	ldrmi	r3, [r6, #0]
 8008fc6:	3302      	addmi	r3, #2
 8008fc8:	6033      	strmi	r3, [r6, #0]
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	f015 0506 	ands.w	r5, r5, #6
 8008fd0:	d106      	bne.n	8008fe0 <_printf_common+0x48>
 8008fd2:	f104 0a19 	add.w	sl, r4, #25
 8008fd6:	68e3      	ldr	r3, [r4, #12]
 8008fd8:	6832      	ldr	r2, [r6, #0]
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	42ab      	cmp	r3, r5
 8008fde:	dc26      	bgt.n	800902e <_printf_common+0x96>
 8008fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fe4:	1e13      	subs	r3, r2, #0
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	bf18      	it	ne
 8008fea:	2301      	movne	r3, #1
 8008fec:	0692      	lsls	r2, r2, #26
 8008fee:	d42b      	bmi.n	8009048 <_printf_common+0xb0>
 8008ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	47c0      	blx	r8
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d01e      	beq.n	800903c <_printf_common+0xa4>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6922      	ldr	r2, [r4, #16]
 8009002:	f003 0306 	and.w	r3, r3, #6
 8009006:	2b04      	cmp	r3, #4
 8009008:	bf02      	ittt	eq
 800900a:	68e5      	ldreq	r5, [r4, #12]
 800900c:	6833      	ldreq	r3, [r6, #0]
 800900e:	1aed      	subeq	r5, r5, r3
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	bf0c      	ite	eq
 8009014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009018:	2500      	movne	r5, #0
 800901a:	4293      	cmp	r3, r2
 800901c:	bfc4      	itt	gt
 800901e:	1a9b      	subgt	r3, r3, r2
 8009020:	18ed      	addgt	r5, r5, r3
 8009022:	2600      	movs	r6, #0
 8009024:	341a      	adds	r4, #26
 8009026:	42b5      	cmp	r5, r6
 8009028:	d11a      	bne.n	8009060 <_printf_common+0xc8>
 800902a:	2000      	movs	r0, #0
 800902c:	e008      	b.n	8009040 <_printf_common+0xa8>
 800902e:	2301      	movs	r3, #1
 8009030:	4652      	mov	r2, sl
 8009032:	4649      	mov	r1, r9
 8009034:	4638      	mov	r0, r7
 8009036:	47c0      	blx	r8
 8009038:	3001      	adds	r0, #1
 800903a:	d103      	bne.n	8009044 <_printf_common+0xac>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	3501      	adds	r5, #1
 8009046:	e7c6      	b.n	8008fd6 <_printf_common+0x3e>
 8009048:	18e1      	adds	r1, r4, r3
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	2030      	movs	r0, #48	; 0x30
 800904e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009052:	4422      	add	r2, r4
 8009054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800905c:	3302      	adds	r3, #2
 800905e:	e7c7      	b.n	8008ff0 <_printf_common+0x58>
 8009060:	2301      	movs	r3, #1
 8009062:	4622      	mov	r2, r4
 8009064:	4649      	mov	r1, r9
 8009066:	4638      	mov	r0, r7
 8009068:	47c0      	blx	r8
 800906a:	3001      	adds	r0, #1
 800906c:	d0e6      	beq.n	800903c <_printf_common+0xa4>
 800906e:	3601      	adds	r6, #1
 8009070:	e7d9      	b.n	8009026 <_printf_common+0x8e>
	...

08009074 <_printf_i>:
 8009074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	7e0f      	ldrb	r7, [r1, #24]
 800907a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800907c:	2f78      	cmp	r7, #120	; 0x78
 800907e:	4691      	mov	r9, r2
 8009080:	4680      	mov	r8, r0
 8009082:	460c      	mov	r4, r1
 8009084:	469a      	mov	sl, r3
 8009086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800908a:	d807      	bhi.n	800909c <_printf_i+0x28>
 800908c:	2f62      	cmp	r7, #98	; 0x62
 800908e:	d80a      	bhi.n	80090a6 <_printf_i+0x32>
 8009090:	2f00      	cmp	r7, #0
 8009092:	f000 80d4 	beq.w	800923e <_printf_i+0x1ca>
 8009096:	2f58      	cmp	r7, #88	; 0x58
 8009098:	f000 80c0 	beq.w	800921c <_printf_i+0x1a8>
 800909c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a4:	e03a      	b.n	800911c <_printf_i+0xa8>
 80090a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090aa:	2b15      	cmp	r3, #21
 80090ac:	d8f6      	bhi.n	800909c <_printf_i+0x28>
 80090ae:	a101      	add	r1, pc, #4	; (adr r1, 80090b4 <_printf_i+0x40>)
 80090b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b4:	0800910d 	.word	0x0800910d
 80090b8:	08009121 	.word	0x08009121
 80090bc:	0800909d 	.word	0x0800909d
 80090c0:	0800909d 	.word	0x0800909d
 80090c4:	0800909d 	.word	0x0800909d
 80090c8:	0800909d 	.word	0x0800909d
 80090cc:	08009121 	.word	0x08009121
 80090d0:	0800909d 	.word	0x0800909d
 80090d4:	0800909d 	.word	0x0800909d
 80090d8:	0800909d 	.word	0x0800909d
 80090dc:	0800909d 	.word	0x0800909d
 80090e0:	08009225 	.word	0x08009225
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	080091df 	.word	0x080091df
 80090ec:	0800909d 	.word	0x0800909d
 80090f0:	0800909d 	.word	0x0800909d
 80090f4:	08009247 	.word	0x08009247
 80090f8:	0800909d 	.word	0x0800909d
 80090fc:	0800914d 	.word	0x0800914d
 8009100:	0800909d 	.word	0x0800909d
 8009104:	0800909d 	.word	0x0800909d
 8009108:	080091e7 	.word	0x080091e7
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	602a      	str	r2, [r5, #0]
 8009114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800911c:	2301      	movs	r3, #1
 800911e:	e09f      	b.n	8009260 <_printf_i+0x1ec>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	0607      	lsls	r7, r0, #24
 8009126:	f103 0104 	add.w	r1, r3, #4
 800912a:	6029      	str	r1, [r5, #0]
 800912c:	d501      	bpl.n	8009132 <_printf_i+0xbe>
 800912e:	681e      	ldr	r6, [r3, #0]
 8009130:	e003      	b.n	800913a <_printf_i+0xc6>
 8009132:	0646      	lsls	r6, r0, #25
 8009134:	d5fb      	bpl.n	800912e <_printf_i+0xba>
 8009136:	f9b3 6000 	ldrsh.w	r6, [r3]
 800913a:	2e00      	cmp	r6, #0
 800913c:	da03      	bge.n	8009146 <_printf_i+0xd2>
 800913e:	232d      	movs	r3, #45	; 0x2d
 8009140:	4276      	negs	r6, r6
 8009142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009146:	485a      	ldr	r0, [pc, #360]	; (80092b0 <_printf_i+0x23c>)
 8009148:	230a      	movs	r3, #10
 800914a:	e012      	b.n	8009172 <_printf_i+0xfe>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	6029      	str	r1, [r5, #0]
 8009154:	0605      	lsls	r5, r0, #24
 8009156:	d501      	bpl.n	800915c <_printf_i+0xe8>
 8009158:	681e      	ldr	r6, [r3, #0]
 800915a:	e002      	b.n	8009162 <_printf_i+0xee>
 800915c:	0641      	lsls	r1, r0, #25
 800915e:	d5fb      	bpl.n	8009158 <_printf_i+0xe4>
 8009160:	881e      	ldrh	r6, [r3, #0]
 8009162:	4853      	ldr	r0, [pc, #332]	; (80092b0 <_printf_i+0x23c>)
 8009164:	2f6f      	cmp	r7, #111	; 0x6f
 8009166:	bf0c      	ite	eq
 8009168:	2308      	moveq	r3, #8
 800916a:	230a      	movne	r3, #10
 800916c:	2100      	movs	r1, #0
 800916e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009172:	6865      	ldr	r5, [r4, #4]
 8009174:	60a5      	str	r5, [r4, #8]
 8009176:	2d00      	cmp	r5, #0
 8009178:	bfa2      	ittt	ge
 800917a:	6821      	ldrge	r1, [r4, #0]
 800917c:	f021 0104 	bicge.w	r1, r1, #4
 8009180:	6021      	strge	r1, [r4, #0]
 8009182:	b90e      	cbnz	r6, 8009188 <_printf_i+0x114>
 8009184:	2d00      	cmp	r5, #0
 8009186:	d04b      	beq.n	8009220 <_printf_i+0x1ac>
 8009188:	4615      	mov	r5, r2
 800918a:	fbb6 f1f3 	udiv	r1, r6, r3
 800918e:	fb03 6711 	mls	r7, r3, r1, r6
 8009192:	5dc7      	ldrb	r7, [r0, r7]
 8009194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009198:	4637      	mov	r7, r6
 800919a:	42bb      	cmp	r3, r7
 800919c:	460e      	mov	r6, r1
 800919e:	d9f4      	bls.n	800918a <_printf_i+0x116>
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d10b      	bne.n	80091bc <_printf_i+0x148>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	07de      	lsls	r6, r3, #31
 80091a8:	d508      	bpl.n	80091bc <_printf_i+0x148>
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	6861      	ldr	r1, [r4, #4]
 80091ae:	4299      	cmp	r1, r3
 80091b0:	bfde      	ittt	le
 80091b2:	2330      	movle	r3, #48	; 0x30
 80091b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091bc:	1b52      	subs	r2, r2, r5
 80091be:	6122      	str	r2, [r4, #16]
 80091c0:	f8cd a000 	str.w	sl, [sp]
 80091c4:	464b      	mov	r3, r9
 80091c6:	aa03      	add	r2, sp, #12
 80091c8:	4621      	mov	r1, r4
 80091ca:	4640      	mov	r0, r8
 80091cc:	f7ff fee4 	bl	8008f98 <_printf_common>
 80091d0:	3001      	adds	r0, #1
 80091d2:	d14a      	bne.n	800926a <_printf_i+0x1f6>
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	b004      	add	sp, #16
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	f043 0320 	orr.w	r3, r3, #32
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	4833      	ldr	r0, [pc, #204]	; (80092b4 <_printf_i+0x240>)
 80091e8:	2778      	movs	r7, #120	; 0x78
 80091ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	6829      	ldr	r1, [r5, #0]
 80091f2:	061f      	lsls	r7, r3, #24
 80091f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80091f8:	d402      	bmi.n	8009200 <_printf_i+0x18c>
 80091fa:	065f      	lsls	r7, r3, #25
 80091fc:	bf48      	it	mi
 80091fe:	b2b6      	uxthmi	r6, r6
 8009200:	07df      	lsls	r7, r3, #31
 8009202:	bf48      	it	mi
 8009204:	f043 0320 	orrmi.w	r3, r3, #32
 8009208:	6029      	str	r1, [r5, #0]
 800920a:	bf48      	it	mi
 800920c:	6023      	strmi	r3, [r4, #0]
 800920e:	b91e      	cbnz	r6, 8009218 <_printf_i+0x1a4>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	f023 0320 	bic.w	r3, r3, #32
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	2310      	movs	r3, #16
 800921a:	e7a7      	b.n	800916c <_printf_i+0xf8>
 800921c:	4824      	ldr	r0, [pc, #144]	; (80092b0 <_printf_i+0x23c>)
 800921e:	e7e4      	b.n	80091ea <_printf_i+0x176>
 8009220:	4615      	mov	r5, r2
 8009222:	e7bd      	b.n	80091a0 <_printf_i+0x12c>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	6826      	ldr	r6, [r4, #0]
 8009228:	6961      	ldr	r1, [r4, #20]
 800922a:	1d18      	adds	r0, r3, #4
 800922c:	6028      	str	r0, [r5, #0]
 800922e:	0635      	lsls	r5, r6, #24
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	d501      	bpl.n	8009238 <_printf_i+0x1c4>
 8009234:	6019      	str	r1, [r3, #0]
 8009236:	e002      	b.n	800923e <_printf_i+0x1ca>
 8009238:	0670      	lsls	r0, r6, #25
 800923a:	d5fb      	bpl.n	8009234 <_printf_i+0x1c0>
 800923c:	8019      	strh	r1, [r3, #0]
 800923e:	2300      	movs	r3, #0
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	4615      	mov	r5, r2
 8009244:	e7bc      	b.n	80091c0 <_printf_i+0x14c>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	602a      	str	r2, [r5, #0]
 800924c:	681d      	ldr	r5, [r3, #0]
 800924e:	6862      	ldr	r2, [r4, #4]
 8009250:	2100      	movs	r1, #0
 8009252:	4628      	mov	r0, r5
 8009254:	f7f6 ffcc 	bl	80001f0 <memchr>
 8009258:	b108      	cbz	r0, 800925e <_printf_i+0x1ea>
 800925a:	1b40      	subs	r0, r0, r5
 800925c:	6060      	str	r0, [r4, #4]
 800925e:	6863      	ldr	r3, [r4, #4]
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	2300      	movs	r3, #0
 8009264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009268:	e7aa      	b.n	80091c0 <_printf_i+0x14c>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	462a      	mov	r2, r5
 800926e:	4649      	mov	r1, r9
 8009270:	4640      	mov	r0, r8
 8009272:	47d0      	blx	sl
 8009274:	3001      	adds	r0, #1
 8009276:	d0ad      	beq.n	80091d4 <_printf_i+0x160>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	079b      	lsls	r3, r3, #30
 800927c:	d413      	bmi.n	80092a6 <_printf_i+0x232>
 800927e:	68e0      	ldr	r0, [r4, #12]
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	4298      	cmp	r0, r3
 8009284:	bfb8      	it	lt
 8009286:	4618      	movlt	r0, r3
 8009288:	e7a6      	b.n	80091d8 <_printf_i+0x164>
 800928a:	2301      	movs	r3, #1
 800928c:	4632      	mov	r2, r6
 800928e:	4649      	mov	r1, r9
 8009290:	4640      	mov	r0, r8
 8009292:	47d0      	blx	sl
 8009294:	3001      	adds	r0, #1
 8009296:	d09d      	beq.n	80091d4 <_printf_i+0x160>
 8009298:	3501      	adds	r5, #1
 800929a:	68e3      	ldr	r3, [r4, #12]
 800929c:	9903      	ldr	r1, [sp, #12]
 800929e:	1a5b      	subs	r3, r3, r1
 80092a0:	42ab      	cmp	r3, r5
 80092a2:	dcf2      	bgt.n	800928a <_printf_i+0x216>
 80092a4:	e7eb      	b.n	800927e <_printf_i+0x20a>
 80092a6:	2500      	movs	r5, #0
 80092a8:	f104 0619 	add.w	r6, r4, #25
 80092ac:	e7f5      	b.n	800929a <_printf_i+0x226>
 80092ae:	bf00      	nop
 80092b0:	08009cdb 	.word	0x08009cdb
 80092b4:	08009cec 	.word	0x08009cec

080092b8 <__sflush_r>:
 80092b8:	898a      	ldrh	r2, [r1, #12]
 80092ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	4605      	mov	r5, r0
 80092c0:	0710      	lsls	r0, r2, #28
 80092c2:	460c      	mov	r4, r1
 80092c4:	d458      	bmi.n	8009378 <__sflush_r+0xc0>
 80092c6:	684b      	ldr	r3, [r1, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc05      	bgt.n	80092d8 <__sflush_r+0x20>
 80092cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dc02      	bgt.n	80092d8 <__sflush_r+0x20>
 80092d2:	2000      	movs	r0, #0
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092da:	2e00      	cmp	r6, #0
 80092dc:	d0f9      	beq.n	80092d2 <__sflush_r+0x1a>
 80092de:	2300      	movs	r3, #0
 80092e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092e4:	682f      	ldr	r7, [r5, #0]
 80092e6:	6a21      	ldr	r1, [r4, #32]
 80092e8:	602b      	str	r3, [r5, #0]
 80092ea:	d032      	beq.n	8009352 <__sflush_r+0x9a>
 80092ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	075a      	lsls	r2, r3, #29
 80092f2:	d505      	bpl.n	8009300 <__sflush_r+0x48>
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	1ac0      	subs	r0, r0, r3
 80092f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092fa:	b10b      	cbz	r3, 8009300 <__sflush_r+0x48>
 80092fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092fe:	1ac0      	subs	r0, r0, r3
 8009300:	2300      	movs	r3, #0
 8009302:	4602      	mov	r2, r0
 8009304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009306:	6a21      	ldr	r1, [r4, #32]
 8009308:	4628      	mov	r0, r5
 800930a:	47b0      	blx	r6
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	d106      	bne.n	8009320 <__sflush_r+0x68>
 8009312:	6829      	ldr	r1, [r5, #0]
 8009314:	291d      	cmp	r1, #29
 8009316:	d82b      	bhi.n	8009370 <__sflush_r+0xb8>
 8009318:	4a29      	ldr	r2, [pc, #164]	; (80093c0 <__sflush_r+0x108>)
 800931a:	410a      	asrs	r2, r1
 800931c:	07d6      	lsls	r6, r2, #31
 800931e:	d427      	bmi.n	8009370 <__sflush_r+0xb8>
 8009320:	2200      	movs	r2, #0
 8009322:	6062      	str	r2, [r4, #4]
 8009324:	04d9      	lsls	r1, r3, #19
 8009326:	6922      	ldr	r2, [r4, #16]
 8009328:	6022      	str	r2, [r4, #0]
 800932a:	d504      	bpl.n	8009336 <__sflush_r+0x7e>
 800932c:	1c42      	adds	r2, r0, #1
 800932e:	d101      	bne.n	8009334 <__sflush_r+0x7c>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b903      	cbnz	r3, 8009336 <__sflush_r+0x7e>
 8009334:	6560      	str	r0, [r4, #84]	; 0x54
 8009336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009338:	602f      	str	r7, [r5, #0]
 800933a:	2900      	cmp	r1, #0
 800933c:	d0c9      	beq.n	80092d2 <__sflush_r+0x1a>
 800933e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009342:	4299      	cmp	r1, r3
 8009344:	d002      	beq.n	800934c <__sflush_r+0x94>
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff fbe2 	bl	8008b10 <_free_r>
 800934c:	2000      	movs	r0, #0
 800934e:	6360      	str	r0, [r4, #52]	; 0x34
 8009350:	e7c0      	b.n	80092d4 <__sflush_r+0x1c>
 8009352:	2301      	movs	r3, #1
 8009354:	4628      	mov	r0, r5
 8009356:	47b0      	blx	r6
 8009358:	1c41      	adds	r1, r0, #1
 800935a:	d1c8      	bne.n	80092ee <__sflush_r+0x36>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0c5      	beq.n	80092ee <__sflush_r+0x36>
 8009362:	2b1d      	cmp	r3, #29
 8009364:	d001      	beq.n	800936a <__sflush_r+0xb2>
 8009366:	2b16      	cmp	r3, #22
 8009368:	d101      	bne.n	800936e <__sflush_r+0xb6>
 800936a:	602f      	str	r7, [r5, #0]
 800936c:	e7b1      	b.n	80092d2 <__sflush_r+0x1a>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	e7ad      	b.n	80092d4 <__sflush_r+0x1c>
 8009378:	690f      	ldr	r7, [r1, #16]
 800937a:	2f00      	cmp	r7, #0
 800937c:	d0a9      	beq.n	80092d2 <__sflush_r+0x1a>
 800937e:	0793      	lsls	r3, r2, #30
 8009380:	680e      	ldr	r6, [r1, #0]
 8009382:	bf08      	it	eq
 8009384:	694b      	ldreq	r3, [r1, #20]
 8009386:	600f      	str	r7, [r1, #0]
 8009388:	bf18      	it	ne
 800938a:	2300      	movne	r3, #0
 800938c:	eba6 0807 	sub.w	r8, r6, r7
 8009390:	608b      	str	r3, [r1, #8]
 8009392:	f1b8 0f00 	cmp.w	r8, #0
 8009396:	dd9c      	ble.n	80092d2 <__sflush_r+0x1a>
 8009398:	6a21      	ldr	r1, [r4, #32]
 800939a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800939c:	4643      	mov	r3, r8
 800939e:	463a      	mov	r2, r7
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b0      	blx	r6
 80093a4:	2800      	cmp	r0, #0
 80093a6:	dc06      	bgt.n	80093b6 <__sflush_r+0xfe>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	e78e      	b.n	80092d4 <__sflush_r+0x1c>
 80093b6:	4407      	add	r7, r0
 80093b8:	eba8 0800 	sub.w	r8, r8, r0
 80093bc:	e7e9      	b.n	8009392 <__sflush_r+0xda>
 80093be:	bf00      	nop
 80093c0:	dfbffffe 	.word	0xdfbffffe

080093c4 <_fflush_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	690b      	ldr	r3, [r1, #16]
 80093c8:	4605      	mov	r5, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	b913      	cbnz	r3, 80093d4 <_fflush_r+0x10>
 80093ce:	2500      	movs	r5, #0
 80093d0:	4628      	mov	r0, r5
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	b118      	cbz	r0, 80093de <_fflush_r+0x1a>
 80093d6:	6a03      	ldr	r3, [r0, #32]
 80093d8:	b90b      	cbnz	r3, 80093de <_fflush_r+0x1a>
 80093da:	f7ff f959 	bl	8008690 <__sinit>
 80093de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f3      	beq.n	80093ce <_fflush_r+0xa>
 80093e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e8:	07d0      	lsls	r0, r2, #31
 80093ea:	d404      	bmi.n	80093f6 <_fflush_r+0x32>
 80093ec:	0599      	lsls	r1, r3, #22
 80093ee:	d402      	bmi.n	80093f6 <_fflush_r+0x32>
 80093f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f2:	f7ff fb6c 	bl	8008ace <__retarget_lock_acquire_recursive>
 80093f6:	4628      	mov	r0, r5
 80093f8:	4621      	mov	r1, r4
 80093fa:	f7ff ff5d 	bl	80092b8 <__sflush_r>
 80093fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009400:	07da      	lsls	r2, r3, #31
 8009402:	4605      	mov	r5, r0
 8009404:	d4e4      	bmi.n	80093d0 <_fflush_r+0xc>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	059b      	lsls	r3, r3, #22
 800940a:	d4e1      	bmi.n	80093d0 <_fflush_r+0xc>
 800940c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940e:	f7ff fb5f 	bl	8008ad0 <__retarget_lock_release_recursive>
 8009412:	e7dd      	b.n	80093d0 <_fflush_r+0xc>

08009414 <fiprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b503      	push	{r0, r1, lr}
 8009418:	4601      	mov	r1, r0
 800941a:	ab03      	add	r3, sp, #12
 800941c:	4805      	ldr	r0, [pc, #20]	; (8009434 <fiprintf+0x20>)
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f7ff fc9d 	bl	8008d64 <_vfiprintf_r>
 800942a:	b002      	add	sp, #8
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	200000dc 	.word	0x200000dc

08009438 <_getc_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	4605      	mov	r5, r0
 800943e:	b118      	cbz	r0, 8009448 <_getc_r+0x10>
 8009440:	6a03      	ldr	r3, [r0, #32]
 8009442:	b90b      	cbnz	r3, 8009448 <_getc_r+0x10>
 8009444:	f7ff f924 	bl	8008690 <__sinit>
 8009448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800944a:	07d8      	lsls	r0, r3, #31
 800944c:	d405      	bmi.n	800945a <_getc_r+0x22>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	0599      	lsls	r1, r3, #22
 8009452:	d402      	bmi.n	800945a <_getc_r+0x22>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f7ff fb3a 	bl	8008ace <__retarget_lock_acquire_recursive>
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	3b01      	subs	r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	6063      	str	r3, [r4, #4]
 8009462:	da0f      	bge.n	8009484 <_getc_r+0x4c>
 8009464:	4628      	mov	r0, r5
 8009466:	4621      	mov	r1, r4
 8009468:	f000 f8a7 	bl	80095ba <__srget_r>
 800946c:	4605      	mov	r5, r0
 800946e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	d405      	bmi.n	8009480 <_getc_r+0x48>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	059b      	lsls	r3, r3, #22
 8009478:	d402      	bmi.n	8009480 <_getc_r+0x48>
 800947a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947c:	f7ff fb28 	bl	8008ad0 <__retarget_lock_release_recursive>
 8009480:	4628      	mov	r0, r5
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	781d      	ldrb	r5, [r3, #0]
 800948c:	e7ef      	b.n	800946e <_getc_r+0x36>

0800948e <__swhatbuf_r>:
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	460c      	mov	r4, r1
 8009492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009496:	2900      	cmp	r1, #0
 8009498:	b096      	sub	sp, #88	; 0x58
 800949a:	4615      	mov	r5, r2
 800949c:	461e      	mov	r6, r3
 800949e:	da0d      	bge.n	80094bc <__swhatbuf_r+0x2e>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094a6:	f04f 0100 	mov.w	r1, #0
 80094aa:	bf0c      	ite	eq
 80094ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094b0:	2340      	movne	r3, #64	; 0x40
 80094b2:	2000      	movs	r0, #0
 80094b4:	6031      	str	r1, [r6, #0]
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	b016      	add	sp, #88	; 0x58
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	466a      	mov	r2, sp
 80094be:	f000 f929 	bl	8009714 <_fstat_r>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	dbec      	blt.n	80094a0 <__swhatbuf_r+0x12>
 80094c6:	9901      	ldr	r1, [sp, #4]
 80094c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094d0:	4259      	negs	r1, r3
 80094d2:	4159      	adcs	r1, r3
 80094d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d8:	e7eb      	b.n	80094b2 <__swhatbuf_r+0x24>

080094da <__smakebuf_r>:
 80094da:	898b      	ldrh	r3, [r1, #12]
 80094dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094de:	079d      	lsls	r5, r3, #30
 80094e0:	4606      	mov	r6, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	d507      	bpl.n	80094f6 <__smakebuf_r+0x1c>
 80094e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	2301      	movs	r3, #1
 80094f0:	6163      	str	r3, [r4, #20]
 80094f2:	b002      	add	sp, #8
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	ab01      	add	r3, sp, #4
 80094f8:	466a      	mov	r2, sp
 80094fa:	f7ff ffc8 	bl	800948e <__swhatbuf_r>
 80094fe:	9900      	ldr	r1, [sp, #0]
 8009500:	4605      	mov	r5, r0
 8009502:	4630      	mov	r0, r6
 8009504:	f7ff fb78 	bl	8008bf8 <_malloc_r>
 8009508:	b948      	cbnz	r0, 800951e <__smakebuf_r+0x44>
 800950a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950e:	059a      	lsls	r2, r3, #22
 8009510:	d4ef      	bmi.n	80094f2 <__smakebuf_r+0x18>
 8009512:	f023 0303 	bic.w	r3, r3, #3
 8009516:	f043 0302 	orr.w	r3, r3, #2
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	e7e3      	b.n	80094e6 <__smakebuf_r+0xc>
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	6020      	str	r0, [r4, #0]
 8009522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	9b00      	ldr	r3, [sp, #0]
 800952a:	6163      	str	r3, [r4, #20]
 800952c:	9b01      	ldr	r3, [sp, #4]
 800952e:	6120      	str	r0, [r4, #16]
 8009530:	b15b      	cbz	r3, 800954a <__smakebuf_r+0x70>
 8009532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009536:	4630      	mov	r0, r6
 8009538:	f000 f8fe 	bl	8009738 <_isatty_r>
 800953c:	b128      	cbz	r0, 800954a <__smakebuf_r+0x70>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	431d      	orrs	r5, r3
 800954e:	81a5      	strh	r5, [r4, #12]
 8009550:	e7cf      	b.n	80094f2 <__smakebuf_r+0x18>

08009552 <_putc_r>:
 8009552:	b570      	push	{r4, r5, r6, lr}
 8009554:	460d      	mov	r5, r1
 8009556:	4614      	mov	r4, r2
 8009558:	4606      	mov	r6, r0
 800955a:	b118      	cbz	r0, 8009564 <_putc_r+0x12>
 800955c:	6a03      	ldr	r3, [r0, #32]
 800955e:	b90b      	cbnz	r3, 8009564 <_putc_r+0x12>
 8009560:	f7ff f896 	bl	8008690 <__sinit>
 8009564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009566:	07d8      	lsls	r0, r3, #31
 8009568:	d405      	bmi.n	8009576 <_putc_r+0x24>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	0599      	lsls	r1, r3, #22
 800956e:	d402      	bmi.n	8009576 <_putc_r+0x24>
 8009570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009572:	f7ff faac 	bl	8008ace <__retarget_lock_acquire_recursive>
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	3b01      	subs	r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	da05      	bge.n	800958c <_putc_r+0x3a>
 8009580:	69a2      	ldr	r2, [r4, #24]
 8009582:	4293      	cmp	r3, r2
 8009584:	db12      	blt.n	80095ac <_putc_r+0x5a>
 8009586:	b2eb      	uxtb	r3, r5
 8009588:	2b0a      	cmp	r3, #10
 800958a:	d00f      	beq.n	80095ac <_putc_r+0x5a>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	6022      	str	r2, [r4, #0]
 8009592:	701d      	strb	r5, [r3, #0]
 8009594:	b2ed      	uxtb	r5, r5
 8009596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009598:	07da      	lsls	r2, r3, #31
 800959a:	d405      	bmi.n	80095a8 <_putc_r+0x56>
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	059b      	lsls	r3, r3, #22
 80095a0:	d402      	bmi.n	80095a8 <_putc_r+0x56>
 80095a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a4:	f7ff fa94 	bl	8008ad0 <__retarget_lock_release_recursive>
 80095a8:	4628      	mov	r0, r5
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	4629      	mov	r1, r5
 80095ae:	4622      	mov	r2, r4
 80095b0:	4630      	mov	r0, r6
 80095b2:	f000 f81a 	bl	80095ea <__swbuf_r>
 80095b6:	4605      	mov	r5, r0
 80095b8:	e7ed      	b.n	8009596 <_putc_r+0x44>

080095ba <__srget_r>:
 80095ba:	b538      	push	{r3, r4, r5, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	4605      	mov	r5, r0
 80095c0:	b118      	cbz	r0, 80095ca <__srget_r+0x10>
 80095c2:	6a03      	ldr	r3, [r0, #32]
 80095c4:	b90b      	cbnz	r3, 80095ca <__srget_r+0x10>
 80095c6:	f7ff f863 	bl	8008690 <__sinit>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f000 f8e9 	bl	80097a4 <__srefill_r>
 80095d2:	b938      	cbnz	r0, 80095e4 <__srget_r+0x2a>
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	6063      	str	r3, [r4, #4]
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	7818      	ldrb	r0, [r3, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	e7fb      	b.n	80095e2 <__srget_r+0x28>

080095ea <__swbuf_r>:
 80095ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ec:	460e      	mov	r6, r1
 80095ee:	4614      	mov	r4, r2
 80095f0:	4605      	mov	r5, r0
 80095f2:	b118      	cbz	r0, 80095fc <__swbuf_r+0x12>
 80095f4:	6a03      	ldr	r3, [r0, #32]
 80095f6:	b90b      	cbnz	r3, 80095fc <__swbuf_r+0x12>
 80095f8:	f7ff f84a 	bl	8008690 <__sinit>
 80095fc:	69a3      	ldr	r3, [r4, #24]
 80095fe:	60a3      	str	r3, [r4, #8]
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	071a      	lsls	r2, r3, #28
 8009604:	d525      	bpl.n	8009652 <__swbuf_r+0x68>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	b31b      	cbz	r3, 8009652 <__swbuf_r+0x68>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	1a98      	subs	r0, r3, r2
 8009610:	6963      	ldr	r3, [r4, #20]
 8009612:	b2f6      	uxtb	r6, r6
 8009614:	4283      	cmp	r3, r0
 8009616:	4637      	mov	r7, r6
 8009618:	dc04      	bgt.n	8009624 <__swbuf_r+0x3a>
 800961a:	4621      	mov	r1, r4
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff fed1 	bl	80093c4 <_fflush_r>
 8009622:	b9e0      	cbnz	r0, 800965e <__swbuf_r+0x74>
 8009624:	68a3      	ldr	r3, [r4, #8]
 8009626:	3b01      	subs	r3, #1
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	6022      	str	r2, [r4, #0]
 8009630:	701e      	strb	r6, [r3, #0]
 8009632:	6962      	ldr	r2, [r4, #20]
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	429a      	cmp	r2, r3
 8009638:	d004      	beq.n	8009644 <__swbuf_r+0x5a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d506      	bpl.n	800964e <__swbuf_r+0x64>
 8009640:	2e0a      	cmp	r6, #10
 8009642:	d104      	bne.n	800964e <__swbuf_r+0x64>
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f7ff febc 	bl	80093c4 <_fflush_r>
 800964c:	b938      	cbnz	r0, 800965e <__swbuf_r+0x74>
 800964e:	4638      	mov	r0, r7
 8009650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 f805 	bl	8009664 <__swsetup_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	d0d5      	beq.n	800960a <__swbuf_r+0x20>
 800965e:	f04f 37ff 	mov.w	r7, #4294967295
 8009662:	e7f4      	b.n	800964e <__swbuf_r+0x64>

08009664 <__swsetup_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <__swsetup_r+0xac>)
 8009668:	4605      	mov	r5, r0
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	460c      	mov	r4, r1
 800966e:	b118      	cbz	r0, 8009678 <__swsetup_r+0x14>
 8009670:	6a03      	ldr	r3, [r0, #32]
 8009672:	b90b      	cbnz	r3, 8009678 <__swsetup_r+0x14>
 8009674:	f7ff f80c 	bl	8008690 <__sinit>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800967e:	0718      	lsls	r0, r3, #28
 8009680:	d422      	bmi.n	80096c8 <__swsetup_r+0x64>
 8009682:	06d9      	lsls	r1, r3, #27
 8009684:	d407      	bmi.n	8009696 <__swsetup_r+0x32>
 8009686:	2309      	movs	r3, #9
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e034      	b.n	8009700 <__swsetup_r+0x9c>
 8009696:	0758      	lsls	r0, r3, #29
 8009698:	d512      	bpl.n	80096c0 <__swsetup_r+0x5c>
 800969a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969c:	b141      	cbz	r1, 80096b0 <__swsetup_r+0x4c>
 800969e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a2:	4299      	cmp	r1, r3
 80096a4:	d002      	beq.n	80096ac <__swsetup_r+0x48>
 80096a6:	4628      	mov	r0, r5
 80096a8:	f7ff fa32 	bl	8008b10 <_free_r>
 80096ac:	2300      	movs	r3, #0
 80096ae:	6363      	str	r3, [r4, #52]	; 0x34
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	2300      	movs	r3, #0
 80096ba:	6063      	str	r3, [r4, #4]
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0308 	orr.w	r3, r3, #8
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	b94b      	cbnz	r3, 80096e0 <__swsetup_r+0x7c>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d6:	d003      	beq.n	80096e0 <__swsetup_r+0x7c>
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f7ff fefd 	bl	80094da <__smakebuf_r>
 80096e0:	89a0      	ldrh	r0, [r4, #12]
 80096e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096e6:	f010 0301 	ands.w	r3, r0, #1
 80096ea:	d00a      	beq.n	8009702 <__swsetup_r+0x9e>
 80096ec:	2300      	movs	r3, #0
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	6963      	ldr	r3, [r4, #20]
 80096f2:	425b      	negs	r3, r3
 80096f4:	61a3      	str	r3, [r4, #24]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	b943      	cbnz	r3, 800970c <__swsetup_r+0xa8>
 80096fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096fe:	d1c4      	bne.n	800968a <__swsetup_r+0x26>
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	0781      	lsls	r1, r0, #30
 8009704:	bf58      	it	pl
 8009706:	6963      	ldrpl	r3, [r4, #20]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	e7f4      	b.n	80096f6 <__swsetup_r+0x92>
 800970c:	2000      	movs	r0, #0
 800970e:	e7f7      	b.n	8009700 <__swsetup_r+0x9c>
 8009710:	200000dc 	.word	0x200000dc

08009714 <_fstat_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	; (8009734 <_fstat_r+0x20>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	f7f8 f90f 	bl	8001944 <_fstat>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	d102      	bne.n	8009730 <_fstat_r+0x1c>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	b103      	cbz	r3, 8009730 <_fstat_r+0x1c>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	2000042c 	.word	0x2000042c

08009738 <_isatty_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d06      	ldr	r5, [pc, #24]	; (8009754 <_isatty_r+0x1c>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	602b      	str	r3, [r5, #0]
 8009744:	f7f8 f86c 	bl	8001820 <_isatty>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_isatty_r+0x1a>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_isatty_r+0x1a>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	2000042c 	.word	0x2000042c

08009758 <_sbrk_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_sbrk_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f8 fb00 	bl	8001d68 <_sbrk>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_sbrk_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_sbrk_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	2000042c 	.word	0x2000042c

08009778 <abort>:
 8009778:	b508      	push	{r3, lr}
 800977a:	2006      	movs	r0, #6
 800977c:	f000 f8b2 	bl	80098e4 <raise>
 8009780:	2001      	movs	r0, #1
 8009782:	f7f8 fae7 	bl	8001d54 <_exit>
	...

08009788 <lflush>:
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	f003 0309 	and.w	r3, r3, #9
 800978e:	2b09      	cmp	r3, #9
 8009790:	d103      	bne.n	800979a <lflush+0x12>
 8009792:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <lflush+0x18>)
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff be15 	b.w	80093c4 <_fflush_r>
 800979a:	2000      	movs	r0, #0
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	200000dc 	.word	0x200000dc

080097a4 <__srefill_r>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	4605      	mov	r5, r0
 80097aa:	b118      	cbz	r0, 80097b4 <__srefill_r+0x10>
 80097ac:	6a03      	ldr	r3, [r0, #32]
 80097ae:	b90b      	cbnz	r3, 80097b4 <__srefill_r+0x10>
 80097b0:	f7fe ff6e 	bl	8008690 <__sinit>
 80097b4:	2300      	movs	r3, #0
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097be:	069e      	lsls	r6, r3, #26
 80097c0:	d502      	bpl.n	80097c8 <__srefill_r+0x24>
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295
 80097c6:	e05c      	b.n	8009882 <__srefill_r+0xde>
 80097c8:	0758      	lsls	r0, r3, #29
 80097ca:	d448      	bmi.n	800985e <__srefill_r+0xba>
 80097cc:	06d9      	lsls	r1, r3, #27
 80097ce:	d405      	bmi.n	80097dc <__srefill_r+0x38>
 80097d0:	2309      	movs	r3, #9
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	e7f2      	b.n	80097c2 <__srefill_r+0x1e>
 80097dc:	071a      	lsls	r2, r3, #28
 80097de:	d50b      	bpl.n	80097f8 <__srefill_r+0x54>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f7ff fdee 	bl	80093c4 <_fflush_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d1ea      	bne.n	80097c2 <__srefill_r+0x1e>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	60a0      	str	r0, [r4, #8]
 80097f0:	f023 0308 	bic.w	r3, r3, #8
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	61a0      	str	r0, [r4, #24]
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f043 0304 	orr.w	r3, r3, #4
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	6923      	ldr	r3, [r4, #16]
 8009802:	b91b      	cbnz	r3, 800980c <__srefill_r+0x68>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f7ff fe67 	bl	80094da <__smakebuf_r>
 800980c:	89a6      	ldrh	r6, [r4, #12]
 800980e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009812:	07b3      	lsls	r3, r6, #30
 8009814:	d00f      	beq.n	8009836 <__srefill_r+0x92>
 8009816:	2301      	movs	r3, #1
 8009818:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <__srefill_r+0xe4>)
 800981a:	491c      	ldr	r1, [pc, #112]	; (800988c <__srefill_r+0xe8>)
 800981c:	481c      	ldr	r0, [pc, #112]	; (8009890 <__srefill_r+0xec>)
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	f006 0609 	and.w	r6, r6, #9
 8009824:	f7fe ff4c 	bl	80086c0 <_fwalk_sglue>
 8009828:	2e09      	cmp	r6, #9
 800982a:	81a7      	strh	r7, [r4, #12]
 800982c:	d103      	bne.n	8009836 <__srefill_r+0x92>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f7ff fd41 	bl	80092b8 <__sflush_r>
 8009836:	6922      	ldr	r2, [r4, #16]
 8009838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	6a21      	ldr	r1, [r4, #32]
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	4628      	mov	r0, r5
 8009842:	47b0      	blx	r6
 8009844:	2800      	cmp	r0, #0
 8009846:	6060      	str	r0, [r4, #4]
 8009848:	dc1c      	bgt.n	8009884 <__srefill_r+0xe0>
 800984a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984e:	bf17      	itett	ne
 8009850:	2200      	movne	r2, #0
 8009852:	f043 0320 	orreq.w	r3, r3, #32
 8009856:	6062      	strne	r2, [r4, #4]
 8009858:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800985c:	e7bc      	b.n	80097d8 <__srefill_r+0x34>
 800985e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009860:	2900      	cmp	r1, #0
 8009862:	d0cd      	beq.n	8009800 <__srefill_r+0x5c>
 8009864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009868:	4299      	cmp	r1, r3
 800986a:	d002      	beq.n	8009872 <__srefill_r+0xce>
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff f94f 	bl	8008b10 <_free_r>
 8009872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	2000      	movs	r0, #0
 8009878:	6360      	str	r0, [r4, #52]	; 0x34
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0c0      	beq.n	8009800 <__srefill_r+0x5c>
 800987e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009884:	2000      	movs	r0, #0
 8009886:	e7fc      	b.n	8009882 <__srefill_r+0xde>
 8009888:	20000084 	.word	0x20000084
 800988c:	08009789 	.word	0x08009789
 8009890:	20000090 	.word	0x20000090

08009894 <_raise_r>:
 8009894:	291f      	cmp	r1, #31
 8009896:	b538      	push	{r3, r4, r5, lr}
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	d904      	bls.n	80098a8 <_raise_r+0x14>
 800989e:	2316      	movs	r3, #22
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098aa:	b112      	cbz	r2, 80098b2 <_raise_r+0x1e>
 80098ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b0:	b94b      	cbnz	r3, 80098c6 <_raise_r+0x32>
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f830 	bl	8009918 <_getpid_r>
 80098b8:	462a      	mov	r2, r5
 80098ba:	4601      	mov	r1, r0
 80098bc:	4620      	mov	r0, r4
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_kill_r>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d00a      	beq.n	80098e0 <_raise_r+0x4c>
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	d103      	bne.n	80098d6 <_raise_r+0x42>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7e7      	b.n	80098a6 <_raise_r+0x12>
 80098d6:	2400      	movs	r4, #0
 80098d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098dc:	4628      	mov	r0, r5
 80098de:	4798      	blx	r3
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e0      	b.n	80098a6 <_raise_r+0x12>

080098e4 <raise>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <raise+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f7ff bfd3 	b.w	8009894 <_raise_r>
 80098ee:	bf00      	nop
 80098f0:	200000dc 	.word	0x200000dc

080098f4 <_kill_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_kill_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f8 fa17 	bl	8001d34 <_kill>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_kill_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_kill_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	2000042c 	.word	0x2000042c

08009918 <_getpid_r>:
 8009918:	f7f8 ba04 	b.w	8001d24 <_getpid>

0800991c <_init>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr

08009928 <_fini>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	bf00      	nop
 800992c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992e:	bc08      	pop	{r3}
 8009930:	469e      	mov	lr, r3
 8009932:	4770      	bx	lr
