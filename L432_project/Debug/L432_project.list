
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d14  08005d14  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d1c  08005d1c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000090  08005db4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005db4  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011417  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd8  00000000  00000000  0003151a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab3  00000000  00000000  00035118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023046  00000000  00000000  00035bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012567  00000000  00000000  00058c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f70  00000000  00000000  0006b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b4  00000000  00000000  001340e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aec 	.word	0x08005aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005aec 	.word	0x08005aec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:
void help_command(char *);
void lof_command(char *);
void lon_command(char *);
void test_command(char *);

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("> ");
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <prompt+0x10>)
 8000592:	f004 f9a3 	bl	80048dc <iprintf>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08005b04 	.word	0x08005b04

080005a0 <help_command>:
	{"test",test_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <help_command+0x30>)
 80005aa:	f004 f997 	bl	80048dc <iprintf>
	printf("help\n\r");
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <help_command+0x34>)
 80005b0:	f004 f994 	bl	80048dc <iprintf>
	printf("lof\n\r");
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <help_command+0x38>)
 80005b6:	f004 f991 	bl	80048dc <iprintf>
	printf("lon\n\r");
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <help_command+0x3c>)
 80005bc:	f004 f98e 	bl	80048dc <iprintf>
	printf("test\n\r");
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <help_command+0x40>)
 80005c2:	f004 f98b 	bl	80048dc <iprintf>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08005b20 	.word	0x08005b20
 80005d4:	08005b38 	.word	0x08005b38
 80005d8:	08005b40 	.word	0x08005b40
 80005dc:	08005b48 	.word	0x08005b48
 80005e0:	08005b50 	.word	0x08005b50

080005e4 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	printf("led_off\n\r");
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <lof_command+0x20>)
 80005ee:	f004 f975 	bl	80048dc <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <lof_command+0x24>)
 80005f8:	f001 f9ba 	bl	8001970 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08005b58 	.word	0x08005b58
 8000608:	48000400 	.word	0x48000400

0800060c <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	printf("led_on\n\r");
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <lon_command+0x20>)
 8000616:	f004 f961 	bl	80048dc <iprintf>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <lon_command+0x24>)
 8000620:	f001 f9a6 	bl	8001970 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08005b64 	.word	0x08005b64
 8000630:	48000400 	.word	0x48000400

08000634 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <test_command+0x40>)
 800063e:	f004 f94d 	bl	80048dc <iprintf>
	if (arguments) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d011      	beq.n	800066c <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 8000648:	490b      	ldr	r1, [pc, #44]	; (8000678 <test_command+0x44>)
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f004 fa5a 	bl	8004b04 <strtok>
 8000650:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000652:	e008      	b.n	8000666 <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <test_command+0x48>)
 8000658:	f004 f940 	bl	80048dc <iprintf>
			pt = strtok (NULL, ",");
 800065c:	4906      	ldr	r1, [pc, #24]	; (8000678 <test_command+0x44>)
 800065e:	2000      	movs	r0, #0
 8000660:	f004 fa50 	bl	8004b04 <strtok>
 8000664:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f3      	bne.n	8000654 <test_command+0x20>
		}
	}
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	08005b70 	.word	0x08005b70
 8000678:	08005b80 	.word	0x08005b80
 800067c:	08005b84 	.word	0x08005b84

08000680 <get_commands>:


enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 800068c:	482e      	ldr	r0, [pc, #184]	; (8000748 <get_commands+0xc8>)
 800068e:	f000 fb51 	bl	8000d34 <dequeue>
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 8000696:	e03a      	b.n	800070e <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	d027      	beq.n	80006ee <get_commands+0x6e>
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	d024      	beq.n	80006ee <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b7f      	cmp	r3, #127	; 0x7f
 80006a8:	d10c      	bne.n	80006c4 <get_commands+0x44>
        if (counter > 0) {
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <get_commands+0xcc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d021      	beq.n	80006f6 <get_commands+0x76>
            printf("\b \b");
 80006b2:	4827      	ldr	r0, [pc, #156]	; (8000750 <get_commands+0xd0>)
 80006b4:	f004 f912 	bl	80048dc <iprintf>
            counter--;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <get_commands+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <get_commands+0xcc>)
 80006c0:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80006c2:	e018      	b.n	80006f6 <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f91a 	bl	8004900 <putchar>
        command_buf[counter++]=ch;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <get_commands+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	491e      	ldr	r1, [pc, #120]	; (800074c <get_commands+0xcc>)
 80006d4:	600a      	str	r2, [r1, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	7bfa      	ldrb	r2, [r7, #15]
 80006dc:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <get_commands+0xcc>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b1d      	cmp	r3, #29
 80006e4:	d907      	bls.n	80006f6 <get_commands+0x76>
          mode=COMPLETE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <get_commands+0xd4>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
          break;
 80006ec:	e012      	b.n	8000714 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <get_commands+0xd4>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
      break;
 80006f4:	e00e      	b.n	8000714 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80006f6:	bf00      	nop
    }
    mask = disable();
 80006f8:	f000 f8b8 	bl	800086c <disable>
 80006fc:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <get_commands+0xc8>)
 8000700:	f000 fb18 	bl	8000d34 <dequeue>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f000 f8c2 	bl	8000892 <restore>
  while (ch!=0) {
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1c1      	bne.n	8000698 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <get_commands+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d110      	bne.n	800073e <get_commands+0xbe>
    command_buf[counter] = 0;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <get_commands+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <get_commands+0xd8>)
 800072a:	f004 f8d7 	bl	80048dc <iprintf>
    counter = 0;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <get_commands+0xcc>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <get_commands+0xd4>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
    return(1);
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <get_commands+0xc0>
  }
  else {
    return(0);
 800073e:	2300      	movs	r3, #0
  }
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000160 	.word	0x20000160
 800074c:	200000ac 	.word	0x200000ac
 8000750:	08005b8c 	.word	0x08005b8c
 8000754:	200000b0 	.word	0x200000b0
 8000758:	08005b90 	.word	0x08005b90

0800075c <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d005      	beq.n	800077a <parse_command+0x1e>
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <parse_command+0x1e>
     (!command) ||
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <parse_command+0x24>
     (!args)) {
    return (-1);
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e01e      	b.n	80007be <parse_command+0x62>
  }
  *command = line;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	601a      	str	r2, [r3, #0]
  p = line;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 800078a:	e00b      	b.n	80007a4 <parse_command+0x48>
    if (!*p) {
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d104      	bne.n	800079e <parse_command+0x42>
      *args = '\0';
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
      return(0);
 800079a:	2300      	movs	r3, #0
 800079c:	e00f      	b.n	80007be <parse_command+0x62>
    }
    p++;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b2c      	cmp	r3, #44	; 0x2c
 80007aa:	d1ef      	bne.n	800078c <parse_command+0x30>
  }
  *p++ = '\0';
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	617a      	str	r2, [r7, #20]
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  *args = p;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	601a      	str	r2, [r3, #0]
  return (0);
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <execute_command+0x98>)
 80007d6:	617b      	str	r3, [r7, #20]
  int success = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]

  if (!line) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d102      	bne.n	80007e8 <execute_command+0x1c>
    return (-1);
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e038      	b.n	800085a <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 80007e8:	f107 0208 	add.w	r2, r7, #8
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb2 	bl	800075c <parse_command>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fe:	d121      	bne.n	8000844 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000800:	4819      	ldr	r0, [pc, #100]	; (8000868 <execute_command+0x9c>)
 8000802:	f004 f86b 	bl	80048dc <iprintf>
    return (-1);
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	e026      	b.n	800085a <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcdb 	bl	80001d0 <strcmp>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10e      	bne.n	800083e <execute_command+0x72>
      if (!p->cmd_function) {
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <execute_command+0x62>
        return (-1);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	e015      	b.n	800085a <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	4610      	mov	r0, r2
 8000836:	4798      	blx	r3
      success = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
      break;
 800083c:	e006      	b.n	800084c <execute_command+0x80>
    }
    p++;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3308      	adds	r3, #8
 8000842:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1df      	bne.n	800080c <execute_command+0x40>
  }
  if (success) {
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <execute_command+0x8a>
    return (0);
 8000852:	2300      	movs	r3, #0
 8000854:	e001      	b.n	800085a <execute_command+0x8e>
  }
  else {
    return (-1);
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000
 8000868:	08005b94 	.word	0x08005b94

0800086c <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000876:	f3ef 8310 	mrs	r3, PRIMASK
 800087a:	603b      	str	r3, [r7, #0]
  return(result);
 800087c:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 800087e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <restore>:

void restore(uint32_t priority_mask) {
 8000892:	b480      	push	{r7}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f383 8810 	msr	PRIMASK, r3
}
 80008a4:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b089      	sub	sp, #36	; 0x24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	e853 3f00 	ldrex	r3, [r3]
 80008c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	61ba      	str	r2, [r7, #24]
 80008d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	e841 2300 	strex	r3, r2, [r1]
 80008de:	613b      	str	r3, [r7, #16]
   return(result);
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1e9      	bne.n	80008ba <LL_USART_EnableIT_RXNE+0x8>
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	3724      	adds	r7, #36	; 0x24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 80008f8:	4823      	ldr	r0, [pc, #140]	; (8000988 <main+0x94>)
 80008fa:	f000 f9ce 	bl	8000c9a <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fcc8 	bl	8001292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f855 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 f979 	bl	8000bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800090a:	f000 f947 	bl	8000b9c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800090e:	f000 f8b3 	bl	8000a78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <main+0x98>)
 8000914:	f000 fa38 	bl	8000d88 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000918:	481d      	ldr	r0, [pc, #116]	; (8000990 <main+0x9c>)
 800091a:	f7ff ffca 	bl	80008b2 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <main+0xa0>)
 8000920:	f003 ffdc 	bl	80048dc <iprintf>
  static uint32_t counter = 0;
  uint8_t data;
  prompt();
 8000924:	f7ff fe32 	bl	800058c <prompt>
  while (1)
  {
	  if (get_commands(command)) {
 8000928:	481b      	ldr	r0, [pc, #108]	; (8000998 <main+0xa4>)
 800092a:	f7ff fea9 	bl	8000680 <get_commands>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01e      	beq.n	8000972 <main+0x7e>
		  command_length = 16;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <main+0xa8>)
 8000936:	2210      	movs	r2, #16
 8000938:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <main+0xa8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000942:	d011      	beq.n	8000968 <main+0x74>
			  if(execute_command(command)) {
 8000944:	4814      	ldr	r0, [pc, #80]	; (8000998 <main+0xa4>)
 8000946:	f7ff ff41 	bl	80007cc <execute_command>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d005      	beq.n	800095c <main+0x68>
				  printf("NOK\n\r");
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <main+0xac>)
 8000952:	f003 ffc3 	bl	80048dc <iprintf>
				  prompt();
 8000956:	f7ff fe19 	bl	800058c <prompt>
 800095a:	e00a      	b.n	8000972 <main+0x7e>
			  }
			  else {
				  printf("OK\n\r");
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <main+0xb0>)
 800095e:	f003 ffbd 	bl	80048dc <iprintf>
				  prompt();
 8000962:	f7ff fe13 	bl	800058c <prompt>
 8000966:	e004      	b.n	8000972 <main+0x7e>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <main+0xac>)
 800096a:	f003 ffb7 	bl	80048dc <iprintf>
			  prompt();
 800096e:	f7ff fe0d 	bl	800058c <prompt>
		  }

	  }
	  if (alarm) {
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <main+0xb4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0d6      	beq.n	8000928 <main+0x34>
		  printf("alarm_triggered\n\r");
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <main+0xb8>)
 800097c:	f003 ffae 	bl	80048dc <iprintf>
		  alarm = 0;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <main+0xb4>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	  if (get_commands(command)) {
 8000986:	e7cf      	b.n	8000928 <main+0x34>
 8000988:	20000160 	.word	0x20000160
 800098c:	200000d8 	.word	0x200000d8
 8000990:	40004400 	.word	0x40004400
 8000994:	08005bb0 	.word	0x08005bb0
 8000998:	20000188 	.word	0x20000188
 800099c:	20000198 	.word	0x20000198
 80009a0:	08005bc8 	.word	0x08005bc8
 80009a4:	08005bd0 	.word	0x08005bd0
 80009a8:	2000019c 	.word	0x2000019c
 80009ac:	08005bd8 	.word	0x08005bd8

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	; 0x58
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2244      	movs	r2, #68	; 0x44
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 f897 	bl	8004af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d6:	f001 f801 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e0:	f000 f956 	bl	8000c90 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009e4:	f000 ffdc 	bl	80019a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xc4>)
 80009ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <SystemClock_Config+0xc4>)
 80009f0:	f023 0318 	bic.w	r3, r3, #24
 80009f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80009f8:	231c      	movs	r3, #28
 80009fa:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a14:	2301      	movs	r3, #1
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a20:	2307      	movs	r3, #7
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 f829 	bl	8001a88 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a3c:	f000 f928 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2303      	movs	r3, #3
 8000a46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fc29 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a64:	f000 f914 	bl	8000c90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a68:	f002 f83c 	bl	8002ae4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a6c:	bf00      	nop
 8000a6e:	3758      	adds	r7, #88	; 0x58
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b092      	sub	sp, #72	; 0x48
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	222c      	movs	r2, #44	; 0x2c
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 f82a 	bl	8004af2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_RTC_Init+0x118>)
 8000aa0:	4a3c      	ldr	r2, [pc, #240]	; (8000b94 <MX_RTC_Init+0x11c>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_RTC_Init+0x118>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_RTC_Init+0x118>)
 8000aac:	227f      	movs	r2, #127	; 0x7f
 8000aae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab0:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_RTC_Init+0x118>)
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <MX_RTC_Init+0x118>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_RTC_Init+0x118>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <MX_RTC_Init+0x118>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_RTC_Init+0x118>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <MX_RTC_Init+0x118>)
 8000ad0:	f002 f90a 	bl	8002ce8 <HAL_RTC_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ada:	f000 f8d9 	bl	8000c90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afc:	2201      	movs	r2, #1
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_RTC_Init+0x118>)
 8000b02:	f002 f979 	bl	8002df8 <HAL_RTC_SetTime>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000b0c:	f000 f8c0 	bl	8000c90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <MX_RTC_Init+0x118>)
 8000b32:	f002 f9fe 	bl	8002f32 <HAL_RTC_SetDate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000b3c:	f000 f8a8 	bl	8000c90 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000b48:	2330      	movs	r3, #48	; 0x30
 8000b4a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_RTC_Init+0x120>)
 8000b5a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_RTC_Init+0x118>)
 8000b78:	f002 fa62 	bl	8003040 <HAL_RTC_SetAlarm_IT>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000b82:	f000 f885 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3748      	adds	r7, #72	; 0x48
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000b4 	.word	0x200000b4
 8000b94:	40002800 	.word	0x40002800
 8000b98:	80808000 	.word	0x80808000

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART2_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000be0:	f002 fc7a 	bl	80034d8 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f851 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000d8 	.word	0x200000d8
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_GPIO_Init+0x8c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MX_GPIO_Init+0x90>)
 8000c60:	f000 fe86 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c64:	2308      	movs	r3, #8
 8000c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0x90>)
 8000c7c:	f000 fd0e 	bl	800169c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>

08000c9a <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8000ca2:	f7ff fde3 	bl	800086c <disable>
 8000ca6:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  restore(mask);
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff fdec 	bl	8000892 <restore>
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000cd2:	f7ff fdcb 	bl	800086c <disable>
 8000cd6:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	425a      	negs	r2, r3
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	f002 021f 	and.w	r2, r2, #31
 8000ce8:	bf58      	it	pl
 8000cea:	4253      	negpl	r3, r2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6852      	ldr	r2, [r2, #4]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d014      	beq.n	8000d1e <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	78fa      	ldrb	r2, [r7, #3]
 8000cfe:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	425a      	negs	r2, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	f002 021f 	and.w	r2, r2, #31
 8000d10:	bf58      	it	pl
 8000d12:	4253      	negpl	r3, r2
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e002      	b.n	8000d24 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f7ff fdb4 	bl	8000892 <restore>
  return (return_val);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000d40:	f7ff fd94 	bl	800086c <disable>
 8000d44:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d011      	beq.n	8000d76 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	7a1b      	ldrb	r3, [r3, #8]
 8000d5c:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	425a      	negs	r2, r3
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	f002 021f 	and.w	r2, r2, #31
 8000d6e:	bf58      	it	pl
 8000d70:	4253      	negpl	r3, r2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8000d76:	68b8      	ldr	r0, [r7, #8]
 8000d78:	f7ff fd8b 	bl	8000892 <restore>
  return(return_val);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	b2db      	uxtb	r3, r3
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <RetargetInit+0x28>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <RetargetInit+0x2c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6898      	ldr	r0, [r3, #8]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2202      	movs	r2, #2
 8000da0:	2100      	movs	r1, #0
 8000da2:	f003 fdb5 	bl	8004910 <setvbuf>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001a0 	.word	0x200001a0
 8000db4:	2000008c 	.word	0x2000008c

08000db8 <_isatty>:

int _isatty(int fd) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db04      	blt.n	8000dd0 <_isatty+0x18>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	dc01      	bgt.n	8000dd0 <_isatty+0x18>
    return 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e005      	b.n	8000ddc <_isatty+0x24>

  errno = EBADF;
 8000dd0:	f003 ff3a 	bl	8004c48 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2209      	movs	r2, #9
 8000dd8:	601a      	str	r2, [r3, #0]
  return 0;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_write>:

int _write(int fd, char* ptr, int len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d002      	beq.n	8000dfc <_write+0x18>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d111      	bne.n	8000e20 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_write+0x54>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	f002 fbb3 	bl	8003574 <HAL_UART_Transmit>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <_write+0x38>
      return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	e008      	b.n	8000e2e <_write+0x4a>
    else
      return EIO;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	e006      	b.n	8000e2e <_write+0x4a>
  }
  errno = EBADF;
 8000e20:	f003 ff12 	bl	8004c48 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2209      	movs	r2, #9
 8000e28:	601a      	str	r2, [r3, #0]
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001a0 	.word	0x200001a0

08000e3c <_close>:

int _close(int fd) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db04      	blt.n	8000e54 <_close+0x18>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	dc01      	bgt.n	8000e54 <_close+0x18>
    return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e006      	b.n	8000e62 <_close+0x26>

  errno = EBADF;
 8000e54:	f003 fef8 	bl	8004c48 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e76:	f003 fee7 	bl	8004c48 <__errno>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2209      	movs	r2, #9
 8000e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_read>:

int _read(int fd, char* ptr, int len) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d110      	bne.n	8000ec0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <_read+0x4c>)
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	f002 fbed 	bl	8003688 <HAL_UART_Receive>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <_read+0x30>
      return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e008      	b.n	8000ece <_read+0x42>
    else
      return EIO;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	e006      	b.n	8000ece <_read+0x42>
  }
  errno = EBADF;
 8000ec0:	f003 fec2 	bl	8004c48 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2209      	movs	r2, #9
 8000ec8:	601a      	str	r2, [r3, #0]
  return -1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200001a0 	.word	0x200001a0

08000edc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db08      	blt.n	8000efe <_fstat+0x22>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	dc05      	bgt.n	8000efe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef8:	605a      	str	r2, [r3, #4]
    return 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e005      	b.n	8000f0a <_fstat+0x2e>
  }

  errno = EBADF;
 8000efe:	f003 fea3 	bl	8004c48 <__errno>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2209      	movs	r2, #9
 8000f06:	601a      	str	r2, [r3, #0]
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6613      	str	r3, [r2, #96]	; 0x60
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x44>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b098      	sub	sp, #96	; 0x60
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2254      	movs	r2, #84	; 0x54
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fdc0 	bl	8004af2 <memset>
  if(hrtc->Instance==RTC)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_RTC_MspInit+0x68>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d11f      	bne.n	8000fbc <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fbb3 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f98:	f7ff fe7a 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_RTC_MspInit+0x6c>)
 8000f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_RTC_MspInit+0x6c>)
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2029      	movs	r0, #41	; 0x29
 8000fb2:	f000 fabe 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000fb6:	2029      	movs	r0, #41	; 0x29
 8000fb8:	f000 fad7 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3760      	adds	r7, #96	; 0x60
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40002800 	.word	0x40002800
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09e      	sub	sp, #120	; 0x78
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2254      	movs	r2, #84	; 0x54
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fd80 	bl	8004af2 <memset>
  if(huart->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_UART_MspInit+0xdc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d150      	bne.n	800109e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fb75 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001014:	f7ff fe3c 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_UART_MspInit+0xe0>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <HAL_UART_MspInit+0xe0>)
 800101e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_UART_MspInit+0xe0>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_UART_MspInit+0xe0>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_UART_MspInit+0xe0>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_UART_MspInit+0xe0>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001048:	2304      	movs	r3, #4
 800104a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001058:	2307      	movs	r3, #7
 800105a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fb19 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800107c:	2303      	movs	r3, #3
 800107e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fb07 	bl	800169c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2026      	movs	r0, #38	; 0x26
 8001094:	f000 fa4d 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001098:	2026      	movs	r0, #38	; 0x26
 800109a:	f000 fa66 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3778      	adds	r7, #120	; 0x78
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f91e 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <USART2_IRQHandler+0x40>)
 800110a:	f002 fb87 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 800110e:	f003 fbdd 	bl	80048cc <getchar>
 8001112:	4603      	mov	r3, r0
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <USART2_IRQHandler+0x44>)
 8001118:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <USART2_IRQHandler+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <USART2_IRQHandler+0x48>)
 8001122:	f7ff fdce 	bl	8000cc2 <enqueue>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <USART2_IRQHandler+0x48>)
 800112e:	f7ff fe01 	bl	8000d34 <dequeue>
      enqueue(&buf,ch);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <USART2_IRQHandler+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <USART2_IRQHandler+0x48>)
 800113a:	f7ff fdc2 	bl	8000cc2 <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d8 	.word	0x200000d8
 8001148:	200001a4 	.word	0x200001a4
 800114c:	20000160 	.word	0x20000160

08001150 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <RTC_Alarm_IRQHandler+0x14>)
 8001156:	f002 f8af 	bl	80032b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <RTC_Alarm_IRQHandler+0x18>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000b4 	.word	0x200000b4
 8001168:	2000019c 	.word	0x2000019c

0800116c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_kill>:

int _kill(int pid, int sig)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001186:	f003 fd5f 	bl	8004c48 <__errno>
 800118a:	4603      	mov	r3, r0
 800118c:	2216      	movs	r2, #22
 800118e:	601a      	str	r2, [r3, #0]
  return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_exit>:

void _exit (int status)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe7 	bl	800117c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ae:	e7fe      	b.n	80011ae <_exit+0x12>

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f003 fd32 	bl	8004c48 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20010000 	.word	0x20010000
 8001210:	00000400 	.word	0x00000400
 8001214:	200001a8 	.word	0x200001a8
 8001218:	20000300 	.word	0x20000300

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopForever+0x2>
 8001244:	f7ff ffea 	bl	800121c <SystemInit>
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopForever+0x6>)
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopForever+0xa>)
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopForever+0xe>)
 800124e:	2300      	movs	r3, #0
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:
 8001252:	58d4      	ldr	r4, [r2, r3]
 8001254:	50c4      	str	r4, [r0, r3]
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:
 8001258:	18c4      	adds	r4, r0, r3
 800125a:	428c      	cmp	r4, r1
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopForever+0x16>)
 8001262:	2300      	movs	r3, #0
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:
 800126a:	42a2      	cmp	r2, r4
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>
 800126e:	f003 fcf1 	bl	8004c54 <__libc_init_array>
 8001272:	f7ff fb3f 	bl	80008f4 <main>

08001276 <LoopForever>:
 8001276:	e7fe      	b.n	8001276 <LoopForever>
 8001278:	20010000 	.word	0x20010000
 800127c:	20000000 	.word	0x20000000
 8001280:	20000090 	.word	0x20000090
 8001284:	08005d24 	.word	0x08005d24
 8001288:	20000090 	.word	0x20000090
 800128c:	200002fc 	.word	0x200002fc

08001290 <ADC1_IRQHandler>:
 8001290:	e7fe      	b.n	8001290 <ADC1_IRQHandler>

08001292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f93d 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f80e 	bl	80012c4 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b4:	f7ff fe2e 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_InitTick+0x70>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_InitTick+0x6c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f949 	bl	8001586 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f913 	bl	8001532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_InitTick+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e007      	b.n	8001324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e001      	b.n	8001324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000030 	.word	0x20000030
 8001334:	20000028 	.word	0x20000028
 8001338:	2000002c 	.word	0x2000002c

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000030 	.word	0x20000030
 8001360:	200001ac 	.word	0x200001ac

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001ac 	.word	0x200001ac

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d008      	beq.n	80015c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e022      	b.n	800160e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d005      	beq.n	800163e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e029      	b.n	8001692 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 020e 	bic.w	r2, r2, #14
 800164c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 021c 	and.w	r2, r3, #28
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
    }
  }
  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e148      	b.n	800193e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 813a 	beq.w	8001938 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d005      	beq.n	80016dc <HAL_GPIO_Init+0x40>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d130      	bne.n	800173e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001712:	2201      	movs	r2, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 0201 	and.w	r2, r3, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b03      	cmp	r3, #3
 8001748:	d017      	beq.n	800177a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d123      	bne.n	80017ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8094 	beq.w	8001938 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_GPIO_Init+0x2c0>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x2c0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6613      	str	r3, [r2, #96]	; 0x60
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <HAL_GPIO_Init+0x2c0>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1d4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1d0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1cc>
 8001864:	2302      	movs	r3, #2
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 8001868:	2307      	movs	r3, #7
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 8001870:	2300      	movs	r3, #0
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001882:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aeaf 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800198c:	e002      	b.n	8001994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	d130      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d038      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2232      	movs	r2, #50	; 0x32
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a20:	e002      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d102      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f2      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d110      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00f      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d007      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	20000028 	.word	0x20000028
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 bc02 	b.w	80022a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9c:	4b96      	ldr	r3, [pc, #600]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa6:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80e4 	beq.w	8001c86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4c>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	f040 808b 	bne.w	8001be2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 8087 	bne.w	8001be2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_OscConfig+0x64>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e3d9      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_RCC_OscConfig+0x7e>
 8001afc:	4b7e      	ldr	r3, [pc, #504]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b04:	e005      	b.n	8001b12 <HAL_RCC_OscConfig+0x8a>
 8001b06:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d223      	bcs.n	8001b5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd8c 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e3ba      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	496d      	ldr	r1, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b48:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	4968      	ldr	r1, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e025      	b.n	8001baa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4960      	ldr	r1, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	495b      	ldr	r1, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fd4c 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e37a      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001baa:	f000 fc81 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4950      	ldr	r1, [pc, #320]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001bbc:	5ccb      	ldrb	r3, [r1, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_RCC_OscConfig+0x278>)
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bca:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb78 	bl	80012c4 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d052      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	e35e      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d032      	beq.n	8001c50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fbb5 	bl	8001364 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fbb1 	bl	8001364 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e347      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4930      	ldr	r1, [pc, #192]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	492b      	ldr	r1, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	e01a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fb82 	bl	8001364 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c64:	f7ff fb7e 	bl	8001364 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e314      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1dc>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d073      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x21c>
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d063      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d15f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e2f1      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e025      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d114      	bne.n	8001d08 <HAL_RCC_OscConfig+0x280>
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a02      	ldr	r2, [pc, #8]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e013      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08005bec 	.word	0x08005bec
 8001d00:	20000028 	.word	0x20000028
 8001d04:	2000002c 	.word	0x2000002c
 8001d08:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a9f      	ldr	r2, [pc, #636]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9c      	ldr	r2, [pc, #624]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb1c 	bl	8001364 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb18 	bl	8001364 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2ae      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb08 	bl	8001364 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fb04 	bl	8001364 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e29a      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d0>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x310>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x328>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e277      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	e040      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fac3 	bl	8001364 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fabf 	bl	8001364 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e255      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	495f      	ldr	r1, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa9f 	bl	8001364 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fa9b 	bl	8001364 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e231      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fa7a 	bl	8001364 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fa76 	bl	8001364 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e20c      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3ec>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa5d 	bl	8001364 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff fa59 	bl	8001364 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1ef      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80a6 	beq.w	8002028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fa20 	bl	8001364 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff fa1c 	bl	8001364 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1b2      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d8>
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	e029      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d115      	bne.n	8001f94 <HAL_RCC_OscConfig+0x50c>
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	4b9a      	ldr	r3, [pc, #616]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a99      	ldr	r2, [pc, #612]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b96      	ldr	r3, [pc, #600]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a95      	ldr	r2, [pc, #596]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f9d2 	bl	8001364 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f9ce 	bl	8001364 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e162      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ed      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x53c>
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff f9bb 	bl	8001364 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff f9b7 	bl	8001364 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e14b      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002008:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ed      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002026:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03c      	beq.n	80020ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800203e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002042:	4a6f      	ldr	r2, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f98a 	bl	8001364 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002054:	f7ff f986 	bl	8001364 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e11c      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002066:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCC_OscConfig+0x5cc>
 8002074:	e01b      	b.n	80020ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002076:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff f96d 	bl	8001364 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208e:	f7ff f969 	bl	8001364 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0ff      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020a0:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80020a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ef      	bne.n	800208e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80f3 	beq.w	800229e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b02      	cmp	r3, #2
 80020be:	f040 80c9 	bne.w	8002254 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020c2:	4b4f      	ldr	r3, [pc, #316]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0203 	and.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d12c      	bne.n	8002130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	3b01      	subs	r3, #1
 80020e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d123      	bne.n	8002130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d11b      	bne.n	8002130 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d113      	bne.n	8002130 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d109      	bne.n	8002130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	3b01      	subs	r3, #1
 800212a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d06b      	beq.n	8002208 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d062      	beq.n	80021fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0ac      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800214c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002150:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002152:	f7ff f907 	bl	8001364 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff f903 	bl	8001364 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e099      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_OscConfig+0x77c>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002188:	3a01      	subs	r2, #1
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002192:	0212      	lsls	r2, r2, #8
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800219a:	0852      	lsrs	r2, r2, #1
 800219c:	3a01      	subs	r2, #1
 800219e:	0552      	lsls	r2, r2, #21
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0652      	lsls	r2, r2, #25
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b2:	06d2      	lsls	r2, r2, #27
 80021b4:	430a      	orrs	r2, r1
 80021b6:	4912      	ldr	r1, [pc, #72]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d4:	f7ff f8c6 	bl	8001364 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f8c2 	bl	8001364 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e058      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_RCC_OscConfig+0x778>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fa:	e050      	b.n	800229e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e04f      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
 8002200:	40021000 	.word	0x40021000
 8002204:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d144      	bne.n	800229e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222c:	f7ff f89a 	bl	8001364 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff f896 	bl	8001364 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e02c      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x7ac>
 8002252:	e024      	b.n	800229e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d01f      	beq.n	800229a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff f87d 	bl	8001364 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff f879 	bl	8001364 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4905      	ldr	r1, [pc, #20]	; (80022a8 <HAL_RCC_OscConfig+0x820>)
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_OscConfig+0x824>)
 8002294:	4013      	ands	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
 8002298:	e001      	b.n	800229e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	feeefffc 	.word	0xfeeefffc

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0e7      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b72      	ldr	r3, [pc, #456]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4970      	ldr	r1, [pc, #448]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b6e      	ldr	r3, [pc, #440]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0cf      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	429a      	cmp	r2, r3
 800230e:	d908      	bls.n	8002322 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4960      	ldr	r1, [pc, #384]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04c      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0a6      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e09a      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002366:	4b4e      	ldr	r3, [pc, #312]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e08e      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e086      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4943      	ldr	r1, [pc, #268]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe ffe4 	bl	8001364 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe ffe0 	bl	8001364 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e06e      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d208      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	492b      	ldr	r1, [pc, #172]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d210      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	4923      	ldr	r1, [pc, #140]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e036      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4918      	ldr	r1, [pc, #96]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4910      	ldr	r1, [pc, #64]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002464:	f000 f824 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	490b      	ldr	r1, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1fc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe ff1b 	bl	80012c4 <HAL_InitTick>
 800248e:	4603      	mov	r3, r0
 8002490:	72fb      	strb	r3, [r7, #11]

  return status;
 8002492:	7afb      	ldrb	r3, [r7, #11]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08005bec 	.word	0x08005bec
 80024a8:	20000028 	.word	0x20000028
 80024ac:	2000002c 	.word	0x2000002c

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x34>
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11e      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e004      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d101      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d134      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0xa6>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d003      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xac>
 8002554:	e005      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002558:	617b      	str	r3, [r7, #20]
      break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800255e:	617b      	str	r3, [r7, #20]
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	617b      	str	r3, [r7, #20]
      break;
 8002566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	3301      	adds	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0e5b      	lsrs	r3, r3, #25
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	3301      	adds	r3, #1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025a8:	69bb      	ldr	r3, [r7, #24]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08005c04 	.word	0x08005c04
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000028 	.word	0x20000028

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	08005bfc 	.word	0x08005bfc

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002610:	f7ff ffda 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0adb      	lsrs	r3, r3, #11
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08005bfc 	.word	0x08005bfc

08002638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9b6 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
 8002656:	e014      	b.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff f9a6 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002688:	d10b      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d919      	bls.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2ba0      	cmp	r3, #160	; 0xa0
 8002694:	d902      	bls.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e013      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e010      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e00a      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d102      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e004      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d101      	bne.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d031      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800271c:	d01a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800271e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002722:	d814      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800272c:	d10f      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273a:	e00c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f9de 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	74fb      	strb	r3, [r7, #19]
      break;
 8002752:	e000      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	494e      	ldr	r1, [pc, #312]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002772:	e001      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 809e 	beq.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a3f      	ldr	r2, [pc, #252]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fdcc 	bl	8001364 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ce:	e009      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe fdc8 	bl	8001364 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	74fb      	strb	r3, [r7, #19]
        break;
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d15a      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002800:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01e      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	429a      	cmp	r2, r3
 8002810:	d019      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fd88 	bl	8001364 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fd84 	bl	8001364 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d902      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	74fb      	strb	r3, [r7, #19]
            break;
 800286e:	e006      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ec      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800289a:	e009      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b0:	7c7b      	ldrb	r3, [r7, #17]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a89      	ldr	r2, [pc, #548]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ce:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0203 	bic.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4980      	ldr	r1, [pc, #512]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f0:	4b7b      	ldr	r3, [pc, #492]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 020c 	bic.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	4978      	ldr	r1, [pc, #480]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002912:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	496f      	ldr	r1, [pc, #444]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	4967      	ldr	r1, [pc, #412]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002956:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	495e      	ldr	r1, [pc, #376]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	4956      	ldr	r1, [pc, #344]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299a:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d028      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029bc:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4945      	ldr	r1, [pc, #276]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d106      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e011      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f882 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d028      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	492d      	ldr	r1, [pc, #180]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a44:	60d3      	str	r3, [r2, #12]
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f853 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a86:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f830 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ad4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b12:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b1e:	4b71      	ldr	r3, [pc, #452]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
       ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b36:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
       ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d047      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d018      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0x86>
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d825      	bhi.n	8002ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x62>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d009      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x74>
 8002b64:	e020      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e01a      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b78:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b88:	e013      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b96:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba6:	e006      	b.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e004      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	4943      	ldr	r1, [pc, #268]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d17c      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002be0:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3f      	ldr	r2, [pc, #252]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe fbba 	bl	8001364 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf4:	f7fe fbb6 	bl	8001364 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
        break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ef      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d15f      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	06d2      	lsls	r2, r2, #27
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	492a      	ldr	r1, [pc, #168]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	610b      	str	r3, [r1, #16]
 8002c40:	e027      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d112      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c48:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6912      	ldr	r2, [r2, #16]
 8002c5e:	0852      	lsrs	r2, r2, #1
 8002c60:	3a01      	subs	r2, #1
 8002c62:	0552      	lsls	r2, r2, #21
 8002c64:	430a      	orrs	r2, r1
 8002c66:	491f      	ldr	r1, [pc, #124]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	610b      	str	r3, [r1, #16]
 8002c6c:	e011      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	0211      	lsls	r1, r2, #8
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6952      	ldr	r2, [r2, #20]
 8002c84:	0852      	lsrs	r2, r2, #1
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0652      	lsls	r2, r2, #25
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	4915      	ldr	r1, [pc, #84]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fb61 	bl	8001364 <HAL_GetTick>
 8002ca2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca4:	e009      	b.n	8002cba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca6:	f7fe fb5d 	bl	8001364 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d902      	bls.n	8002cba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb8:	e005      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ef      	beq.n	8002ca6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d079      	beq.n	8002dee <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f924 	bl	8000f5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d058      	beq.n	8002ddc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ca      	movs	r2, #202	; 0xca
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2253      	movs	r2, #83	; 0x53
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fb30 	bl	80033a0 <RTC_EnterInitMode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d127      	bne.n	8002d9a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68d2      	ldr	r2, [r2, #12]
 8002d84:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6919      	ldr	r1, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fb34 	bl	8003408 <RTC_ExitInitMode>
 8002da0:	4603      	mov	r3, r0
 8002da2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0203 	bic.w	r2, r2, #3
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dda:	e001      	b.n	8002de0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_RTC_SetTime+0x1a>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e08b      	b.n	8002f2a <HAL_RTC_SetTime+0x132>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	22ca      	movs	r2, #202	; 0xca
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2253      	movs	r2, #83	; 0x53
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fab4 	bl	80033a0 <RTC_EnterInitMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d163      	bne.n	8002f0a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d126      	bne.n	8002e96 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fb0f 	bl	8003484 <RTC_ByteToBcd2>
 8002e66:	4603      	mov	r3, r0
 8002e68:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fb08 	bl	8003484 <RTC_ByteToBcd2>
 8002e74:	4603      	mov	r3, r0
 8002e76:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e78:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	789b      	ldrb	r3, [r3, #2]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fb00 	bl	8003484 <RTC_ByteToBcd2>
 8002e84:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e86:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e018      	b.n	8002ec8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002eb6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ebc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	78db      	ldrb	r3, [r3, #3]
 8002ec2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ed2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ed6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fa81 	bl	8003408 <RTC_ExitInitMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}

08002f32 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f32:	b590      	push	{r4, r7, lr}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_RTC_SetDate+0x1a>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e075      	b.n	8003038 <HAL_RTC_SetDate+0x106>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_RTC_SetDate+0x4e>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	f023 0310 	bic.w	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	330a      	adds	r3, #10
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	78db      	ldrb	r3, [r3, #3]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa7a 	bl	8003484 <RTC_ByteToBcd2>
 8002f90:	4603      	mov	r3, r0
 8002f92:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa73 	bl	8003484 <RTC_ByteToBcd2>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002fa2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	789b      	ldrb	r3, [r3, #2]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa6b 	bl	8003484 <RTC_ByteToBcd2>
 8002fae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fb0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e00e      	b.n	8002fde <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	78db      	ldrb	r3, [r3, #3]
 8002fc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fcc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	22ca      	movs	r2, #202	; 0xca
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2253      	movs	r2, #83	; 0x53
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f9d6 	bl	80033a0 <RTC_EnterInitMode>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003008:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800300c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9fa 	bl	8003408 <RTC_ExitInitMode>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_RTC_SetAlarm_IT+0x1a>
 8003056:	2302      	movs	r3, #2
 8003058:	e127      	b.n	80032aa <HAL_RTC_SetAlarm_IT+0x26a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d137      	bne.n	80030e0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2200      	movs	r2, #0
 8003082:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f9fb 	bl	8003484 <RTC_ByteToBcd2>
 800308e:	4603      	mov	r3, r0
 8003090:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f9f4 	bl	8003484 <RTC_ByteToBcd2>
 800309c:	4603      	mov	r3, r0
 800309e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030a0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	789b      	ldrb	r3, [r3, #2]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f9ec 	bl	8003484 <RTC_ByteToBcd2>
 80030ac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030ae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030b8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f9de 	bl	8003484 <RTC_ByteToBcd2>
 80030c8:	4603      	mov	r3, r0
 80030ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030da:	4313      	orrs	r3, r2
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e023      	b.n	8003128 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003100:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	78db      	ldrb	r3, [r3, #3]
 800310c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800310e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003116:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800311e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003124:	4313      	orrs	r3, r2
 8003126:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	22ca      	movs	r2, #202	; 0xca
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2253      	movs	r2, #83	; 0x53
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d14a      	bne.n	80031e4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800316e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003170:	f7fe f8f8 	bl	8001364 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003176:	e015      	b.n	80031a4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003178:	f7fe f8f4 	bl	8001364 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003186:	d90d      	bls.n	80031a4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e082      	b.n	80032aa <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0e2      	beq.n	8003178 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e049      	b.n	8003278 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031f2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003204:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003206:	f7fe f8ad 	bl	8001364 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800320c:	e015      	b.n	800323a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800320e:	f7fe f8a9 	bl	8001364 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321c:	d90d      	bls.n	800323a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e037      	b.n	80032aa <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0e2      	beq.n	800320e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003276:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_RTC_SetAlarm_IT+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_RTC_SetAlarm_IT+0x274>)
 800327e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RTC_SetAlarm_IT+0x274>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RTC_SetAlarm_IT+0x274>)
 800328a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3724      	adds	r7, #36	; 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_RTC_AlarmIRQHandler+0x88>)
 80032c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80032c6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032f4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f824 	bl	8003344 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003328:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8ca 	bl	80034c4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_RTC_WaitForSynchro+0x44>)
 8003366:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003368:	f7fd fffc 	bl	8001364 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800336e:	e009      	b.n	8003384 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003370:	f7fd fff8 	bl	8001364 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337e:	d901      	bls.n	8003384 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e007      	b.n	8003394 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ee      	beq.n	8003370 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	0003ff5f 	.word	0x0003ff5f

080033a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d120      	bne.n	80033fc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80033c4:	f7fd ffce 	bl	8001364 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033ca:	e00d      	b.n	80033e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80033cc:	f7fd ffca 	bl	8001364 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033da:	d905      	bls.n	80033e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2203      	movs	r2, #3
 80033e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <RTC_EnterInitMode+0x5c>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d1e7      	bne.n	80033cc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <RTC_ExitInitMode+0x78>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <RTC_ExitInitMode+0x78>)
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <RTC_ExitInitMode+0x78>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10c      	bne.n	8003446 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff93 	bl	8003358 <HAL_RTC_WaitForSynchro>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01e      	beq.n	8003476 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e017      	b.n	8003476 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <RTC_ExitInitMode+0x78>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <RTC_ExitInitMode+0x78>)
 800344c:	f023 0320 	bic.w	r3, r3, #32
 8003450:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff80 	bl	8003358 <HAL_RTC_WaitForSynchro>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <RTC_ExitInitMode+0x78>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4a04      	ldr	r2, [pc, #16]	; (8003480 <RTC_ExitInitMode+0x78>)
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40002800 	.word	0x40002800

08003484 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003496:	e005      	b.n	80034a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	3b0a      	subs	r3, #10
 80034a2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d8f6      	bhi.n	8003498 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b2db      	uxtb	r3, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e040      	b.n	800356c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fd66 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 feb2 	bl	8004288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fc83 	bl	8003e30 <UART_SetConfig>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01b      	b.n	800356c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 ff31 	bl	80043cc <UART_CheckIdleState>
 800356a:	4603      	mov	r3, r0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003588:	2b20      	cmp	r3, #32
 800358a:	d178      	bne.n	800367e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Transmit+0x24>
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e071      	b.n	8003680 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035aa:	f7fd fedb 	bl	8001364 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d108      	bne.n	80035dc <HAL_UART_Transmit+0x68>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e003      	b.n	80035e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e4:	e030      	b.n	8003648 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 ff93 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e03c      	b.n	8003680 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003618:	b292      	uxth	r2, r2
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	3302      	adds	r3, #2
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e008      	b.n	8003636 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b292      	uxth	r2, r2
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	3301      	adds	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1c8      	bne.n	80035e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 ff5c 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e005      	b.n	8003680 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
  }
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369e:	2b20      	cmp	r3, #32
 80036a0:	f040 80b6 	bne.w	8003810 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Receive+0x28>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0ae      	b.n	8003812 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2222      	movs	r2, #34	; 0x22
 80036c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fd fe4b 	bl	8001364 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d10e      	bne.n	8003708 <HAL_UART_Receive+0x80>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d105      	bne.n	80036fe <HAL_UART_Receive+0x76>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036fc:	e02d      	b.n	800375a <HAL_UART_Receive+0xd2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003706:	e028      	b.n	800375a <HAL_UART_Receive+0xd2>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_UART_Receive+0xa4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <HAL_UART_Receive+0x9a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003720:	e01b      	b.n	800375a <HAL_UART_Receive+0xd2>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	227f      	movs	r2, #127	; 0x7f
 8003726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800372a:	e016      	b.n	800375a <HAL_UART_Receive+0xd2>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003734:	d10d      	bne.n	8003752 <HAL_UART_Receive+0xca>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Receive+0xc0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	227f      	movs	r2, #127	; 0x7f
 8003742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003746:	e008      	b.n	800375a <HAL_UART_Receive+0xd2>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	223f      	movs	r2, #63	; 0x3f
 800374c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003750:	e003      	b.n	800375a <HAL_UART_Receive+0xd2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003760:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d108      	bne.n	800377e <HAL_UART_Receive+0xf6>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	e003      	b.n	8003786 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003786:	e037      	b.n	80037f8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	2120      	movs	r1, #32
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fec2 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e033      	b.n	8003812 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10c      	bne.n	80037ca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	8a7b      	ldrh	r3, [r7, #18]
 80037ba:	4013      	ands	r3, r2
 80037bc:	b29a      	uxth	r2, r3
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3302      	adds	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e00d      	b.n	80037e6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8a7b      	ldrh	r3, [r7, #18]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4013      	ands	r3, r2
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1c1      	bne.n	8003788 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ba      	sub	sp, #232	; 0xe8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003846:	f640 030f 	movw	r3, #2063	; 0x80f
 800384a:	4013      	ands	r3, r2
 800384c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d115      	bne.n	8003884 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00f      	beq.n	8003884 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 82ae 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
      }
      return;
 8003882:	e2a8      	b.n	8003dd6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8117 	beq.w	8003abc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800389a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800389e:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_UART_IRQHandler+0x298>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 810a 	beq.w	8003abc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d011      	beq.n	80038d8 <HAL_UART_IRQHandler+0xbc>
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d011      	beq.n	8003908 <HAL_UART_IRQHandler+0xec>
 80038e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2202      	movs	r2, #2
 80038f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_UART_IRQHandler+0x11c>
 8003914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2204      	movs	r2, #4
 8003926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003954:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2208      	movs	r2, #8
 8003962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	f043 0208 	orr.w	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_UART_IRQHandler+0x18a>
 8003980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8214 	beq.w	8003dda <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04f      	beq.n	8003a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fdf3 	bl	80045ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d141      	bne.n	8003a96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1d9      	bne.n	8003a12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <HAL_UART_IRQHandler+0x29c>)
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fdd1 	bl	800161a <HAL_DMA_Abort_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00f      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9b8 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00b      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9b4 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e007      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9b0 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003aac:	e195      	b.n	8003dda <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	bf00      	nop
    return;
 8003ab0:	e193      	b.n	8003dda <HAL_UART_IRQHandler+0x5be>
 8003ab2:	bf00      	nop
 8003ab4:	04000120 	.word	0x04000120
 8003ab8:	080046b3 	.word	0x080046b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f040 814e 	bne.w	8003d62 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8147 	beq.w	8003d62 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8140 	beq.w	8003d62 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	f040 80b8 	bne.w	8003c6a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8167 	beq.w	8003dde <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f080 815f 	bcs.w	8003dde <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8086 	bne.w	8003c48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1da      	bne.n	8003b3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e1      	bne.n	8003b86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e3      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	f023 0310 	bic.w	r3, r3, #16
 8003c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e4      	bne.n	8003c08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fcab 	bl	800159e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8d8 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c68:	e0b9      	b.n	8003dde <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80ab 	beq.w	8003de2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a6 	beq.w	8003de2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e4      	bne.n	8003c96 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	623b      	str	r3, [r7, #32]
   return(result);
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cf0:	633a      	str	r2, [r7, #48]	; 0x30
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e3      	bne.n	8003ccc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f023 0310 	bic.w	r3, r3, #16
 8003d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	69b9      	ldr	r1, [r7, #24]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	617b      	str	r3, [r7, #20]
   return(result);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e4      	bne.n	8003d18 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f85c 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d60:	e03f      	b.n	8003de2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <HAL_UART_IRQHandler+0x570>
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fcd4 	bl	8004732 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d8a:	e02d      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
    }
    return;
 8003db4:	e017      	b.n	8003de6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fc85 	bl	80046de <UART_EndTransmit_IT>
    return;
 8003dd4:	e008      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003dd6:	bf00      	nop
 8003dd8:	e006      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003de6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003de8:	37e8      	adds	r7, #232	; 0xe8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b08a      	sub	sp, #40	; 0x28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4bb4      	ldr	r3, [pc, #720]	; (8004130 <UART_SetConfig+0x300>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4aa9      	ldr	r2, [pc, #676]	; (8004134 <UART_SetConfig+0x304>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4aa0      	ldr	r2, [pc, #640]	; (8004138 <UART_SetConfig+0x308>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d126      	bne.n	8003f08 <UART_SetConfig+0xd8>
 8003eba:	4ba0      	ldr	r3, [pc, #640]	; (800413c <UART_SetConfig+0x30c>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d81b      	bhi.n	8003f00 <UART_SetConfig+0xd0>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0xa0>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ef9 	.word	0x08003ef9
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e080      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e07c      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e078      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e074      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e070      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a8c      	ldr	r2, [pc, #560]	; (8004140 <UART_SetConfig+0x310>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d138      	bne.n	8003f84 <UART_SetConfig+0x154>
 8003f12:	4b8a      	ldr	r3, [pc, #552]	; (800413c <UART_SetConfig+0x30c>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d82d      	bhi.n	8003f7c <UART_SetConfig+0x14c>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0xf8>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f75 	.word	0x08003f75
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e042      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e03e      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e03a      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e036      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e032      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <UART_SetConfig+0x304>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d12a      	bne.n	8003fe4 <UART_SetConfig+0x1b4>
 8003f8e:	4b6b      	ldr	r3, [pc, #428]	; (800413c <UART_SetConfig+0x30c>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9c:	d01a      	beq.n	8003fd4 <UART_SetConfig+0x1a4>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa2:	d81b      	bhi.n	8003fdc <UART_SetConfig+0x1ac>
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d00c      	beq.n	8003fc4 <UART_SetConfig+0x194>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d815      	bhi.n	8003fdc <UART_SetConfig+0x1ac>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0x18c>
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d008      	beq.n	8003fcc <UART_SetConfig+0x19c>
 8003fba:	e00f      	b.n	8003fdc <UART_SetConfig+0x1ac>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e012      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e00e      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e00a      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e006      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e002      	b.n	8003fea <UART_SetConfig+0x1ba>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a51      	ldr	r2, [pc, #324]	; (8004134 <UART_SetConfig+0x304>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d17a      	bne.n	80040ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d824      	bhi.n	8004046 <UART_SetConfig+0x216>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x1d4>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004047 	.word	0x08004047
 800400c:	08004031 	.word	0x08004031
 8004010:	08004047 	.word	0x08004047
 8004014:	08004037 	.word	0x08004037
 8004018:	08004047 	.word	0x08004047
 800401c:	08004047 	.word	0x08004047
 8004020:	08004047 	.word	0x08004047
 8004024:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fada 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800402c:	61f8      	str	r0, [r7, #28]
        break;
 800402e:	e010      	b.n	8004052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b44      	ldr	r3, [pc, #272]	; (8004144 <UART_SetConfig+0x314>)
 8004032:	61fb      	str	r3, [r7, #28]
        break;
 8004034:	e00d      	b.n	8004052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7fe fa3b 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800403a:	61f8      	str	r0, [r7, #28]
        break;
 800403c:	e009      	b.n	8004052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	61fb      	str	r3, [r7, #28]
        break;
 8004044:	e005      	b.n	8004052 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8107 	beq.w	8004268 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	429a      	cmp	r2, r3
 8004068:	d305      	bcc.n	8004076 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	429a      	cmp	r2, r3
 8004074:	d903      	bls.n	800407e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800407c:	e0f4      	b.n	8004268 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2200      	movs	r2, #0
 8004082:	461c      	mov	r4, r3
 8004084:	4615      	mov	r5, r2
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	022b      	lsls	r3, r5, #8
 8004090:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004094:	0222      	lsls	r2, r4, #8
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6849      	ldr	r1, [r1, #4]
 800409a:	0849      	lsrs	r1, r1, #1
 800409c:	2000      	movs	r0, #0
 800409e:	4688      	mov	r8, r1
 80040a0:	4681      	mov	r9, r0
 80040a2:	eb12 0a08 	adds.w	sl, r2, r8
 80040a6:	eb43 0b09 	adc.w	fp, r3, r9
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b8:	4650      	mov	r0, sl
 80040ba:	4659      	mov	r1, fp
 80040bc:	f7fc f8e8 	bl	8000290 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ce:	d308      	bcc.n	80040e2 <UART_SetConfig+0x2b2>
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d6:	d204      	bcs.n	80040e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e0c2      	b.n	8004268 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040e8:	e0be      	b.n	8004268 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d16a      	bne.n	80041ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80040f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d834      	bhi.n	8004166 <UART_SetConfig+0x336>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0x2d4>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004129 	.word	0x08004129
 8004108:	08004149 	.word	0x08004149
 800410c:	08004151 	.word	0x08004151
 8004110:	08004167 	.word	0x08004167
 8004114:	08004157 	.word	0x08004157
 8004118:	08004167 	.word	0x08004167
 800411c:	08004167 	.word	0x08004167
 8004120:	08004167 	.word	0x08004167
 8004124:	0800415f 	.word	0x0800415f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fe fa5a 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800412c:	61f8      	str	r0, [r7, #28]
        break;
 800412e:	e020      	b.n	8004172 <UART_SetConfig+0x342>
 8004130:	efff69f3 	.word	0xefff69f3
 8004134:	40008000 	.word	0x40008000
 8004138:	40013800 	.word	0x40013800
 800413c:	40021000 	.word	0x40021000
 8004140:	40004400 	.word	0x40004400
 8004144:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe fa60 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 800414c:	61f8      	str	r0, [r7, #28]
        break;
 800414e:	e010      	b.n	8004172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <UART_SetConfig+0x454>)
 8004152:	61fb      	str	r3, [r7, #28]
        break;
 8004154:	e00d      	b.n	8004172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004156:	f7fe f9ab 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800415a:	61f8      	str	r0, [r7, #28]
        break;
 800415c:	e009      	b.n	8004172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004162:	61fb      	str	r3, [r7, #28]
        break;
 8004164:	e005      	b.n	8004172 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d077      	beq.n	8004268 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005a      	lsls	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	441a      	add	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b0f      	cmp	r3, #15
 8004192:	d916      	bls.n	80041c2 <UART_SetConfig+0x392>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d212      	bcs.n	80041c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f023 030f 	bic.w	r3, r3, #15
 80041a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	8afb      	ldrh	r3, [r7, #22]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	8afa      	ldrh	r2, [r7, #22]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e052      	b.n	8004268 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041c8:	e04e      	b.n	8004268 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d827      	bhi.n	8004222 <UART_SetConfig+0x3f2>
 80041d2:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x3a8>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	08004223 	.word	0x08004223
 80041e8:	08004213 	.word	0x08004213
 80041ec:	08004223 	.word	0x08004223
 80041f0:	08004223 	.word	0x08004223
 80041f4:	08004223 	.word	0x08004223
 80041f8:	0800421b 	.word	0x0800421b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe f9f0 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8004200:	61f8      	str	r0, [r7, #28]
        break;
 8004202:	e014      	b.n	800422e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe fa02 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004208:	61f8      	str	r0, [r7, #28]
        break;
 800420a:	e010      	b.n	800422e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <UART_SetConfig+0x454>)
 800420e:	61fb      	str	r3, [r7, #28]
        break;
 8004210:	e00d      	b.n	800422e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fe f94d 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8004216:	61f8      	str	r0, [r7, #28]
        break;
 8004218:	e009      	b.n	800422e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	61fb      	str	r3, [r7, #28]
        break;
 8004220:	e005      	b.n	800422e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800422c:	bf00      	nop
    }

    if (pclk != 0U)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d019      	beq.n	8004268 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	085a      	lsrs	r2, r3, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	441a      	add	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	d909      	bls.n	8004262 <UART_SetConfig+0x432>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d205      	bcs.n	8004262 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e002      	b.n	8004268 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004274:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004278:	4618      	mov	r0, r3
 800427a:	3728      	adds	r7, #40	; 0x28
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004282:	bf00      	nop
 8004284:	00f42400 	.word	0x00f42400

08004288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d10a      	bne.n	800439e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b098      	sub	sp, #96	; 0x60
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043dc:	f7fc ffc2 	bl	8001364 <HAL_GetTick>
 80043e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d12e      	bne.n	800444e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f8:	2200      	movs	r2, #0
 80043fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f88c 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d021      	beq.n	800444e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441e:	653b      	str	r3, [r7, #80]	; 0x50
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
 800442a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800442e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e062      	b.n	8004514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d149      	bne.n	80044f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800445c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004464:	2200      	movs	r2, #0
 8004466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f856 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03c      	beq.n	80044f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	623b      	str	r3, [r7, #32]
   return(result);
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800449a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c8:	61fa      	str	r2, [r7, #28]
 80044ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e011      	b.n	8004514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3758      	adds	r7, #88	; 0x58
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	e049      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d045      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7fc ff15 	bl	8001364 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <UART_WaitOnFlagUntilTimeout+0x30>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e048      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d031      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d110      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f838 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2208      	movs	r2, #8
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e029      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d111      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f81e 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e00f      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d0a6      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b095      	sub	sp, #84	; 0x54
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	643b      	str	r3, [r7, #64]	; 0x40
 8004612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	2b01      	cmp	r3, #1
 800465e:	d118      	bne.n	8004692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	60bb      	str	r3, [r7, #8]
   return(result);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	647b      	str	r3, [r7, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	613b      	str	r3, [r7, #16]
   return(result);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e6      	bne.n	8004660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046a6:	bf00      	nop
 80046a8:	3754      	adds	r7, #84	; 0x54
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff fb97 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b088      	sub	sp, #32
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	613b      	str	r3, [r7, #16]
   return(result);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e6      	bne.n	80046e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fb63 	bl	8003df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472a:	bf00      	nop
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <std>:
 8004748:	2300      	movs	r3, #0
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	e9c0 3300 	strd	r3, r3, [r0]
 8004752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004756:	6083      	str	r3, [r0, #8]
 8004758:	8181      	strh	r1, [r0, #12]
 800475a:	6643      	str	r3, [r0, #100]	; 0x64
 800475c:	81c2      	strh	r2, [r0, #14]
 800475e:	6183      	str	r3, [r0, #24]
 8004760:	4619      	mov	r1, r3
 8004762:	2208      	movs	r2, #8
 8004764:	305c      	adds	r0, #92	; 0x5c
 8004766:	f000 f9c4 	bl	8004af2 <memset>
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <std+0x58>)
 800476c:	6263      	str	r3, [r4, #36]	; 0x24
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <std+0x5c>)
 8004770:	62a3      	str	r3, [r4, #40]	; 0x28
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <std+0x60>)
 8004774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <std+0x64>)
 8004778:	6323      	str	r3, [r4, #48]	; 0x30
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <std+0x68>)
 800477c:	6224      	str	r4, [r4, #32]
 800477e:	429c      	cmp	r4, r3
 8004780:	d006      	beq.n	8004790 <std+0x48>
 8004782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004786:	4294      	cmp	r4, r2
 8004788:	d002      	beq.n	8004790 <std+0x48>
 800478a:	33d0      	adds	r3, #208	; 0xd0
 800478c:	429c      	cmp	r4, r3
 800478e:	d105      	bne.n	800479c <std+0x54>
 8004790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f000 ba80 	b.w	8004c9c <__retarget_lock_init_recursive>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	08004a6d 	.word	0x08004a6d
 80047a4:	08004a8f 	.word	0x08004a8f
 80047a8:	08004ac7 	.word	0x08004ac7
 80047ac:	08004aeb 	.word	0x08004aeb
 80047b0:	200001b0 	.word	0x200001b0

080047b4 <stdio_exit_handler>:
 80047b4:	4a02      	ldr	r2, [pc, #8]	; (80047c0 <stdio_exit_handler+0xc>)
 80047b6:	4903      	ldr	r1, [pc, #12]	; (80047c4 <stdio_exit_handler+0x10>)
 80047b8:	4803      	ldr	r0, [pc, #12]	; (80047c8 <stdio_exit_handler+0x14>)
 80047ba:	f000 b869 	b.w	8004890 <_fwalk_sglue>
 80047be:	bf00      	nop
 80047c0:	20000034 	.word	0x20000034
 80047c4:	08005595 	.word	0x08005595
 80047c8:	20000040 	.word	0x20000040

080047cc <cleanup_stdio>:
 80047cc:	6841      	ldr	r1, [r0, #4]
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <cleanup_stdio+0x34>)
 80047d0:	4299      	cmp	r1, r3
 80047d2:	b510      	push	{r4, lr}
 80047d4:	4604      	mov	r4, r0
 80047d6:	d001      	beq.n	80047dc <cleanup_stdio+0x10>
 80047d8:	f000 fedc 	bl	8005594 <_fflush_r>
 80047dc:	68a1      	ldr	r1, [r4, #8]
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <cleanup_stdio+0x38>)
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d002      	beq.n	80047ea <cleanup_stdio+0x1e>
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 fed5 	bl	8005594 <_fflush_r>
 80047ea:	68e1      	ldr	r1, [r4, #12]
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <cleanup_stdio+0x3c>)
 80047ee:	4299      	cmp	r1, r3
 80047f0:	d004      	beq.n	80047fc <cleanup_stdio+0x30>
 80047f2:	4620      	mov	r0, r4
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f000 becc 	b.w	8005594 <_fflush_r>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	200001b0 	.word	0x200001b0
 8004804:	20000218 	.word	0x20000218
 8004808:	20000280 	.word	0x20000280

0800480c <global_stdio_init.part.0>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <global_stdio_init.part.0+0x30>)
 8004810:	4c0b      	ldr	r4, [pc, #44]	; (8004840 <global_stdio_init.part.0+0x34>)
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <global_stdio_init.part.0+0x38>)
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	4620      	mov	r0, r4
 8004818:	2200      	movs	r2, #0
 800481a:	2104      	movs	r1, #4
 800481c:	f7ff ff94 	bl	8004748 <std>
 8004820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004824:	2201      	movs	r2, #1
 8004826:	2109      	movs	r1, #9
 8004828:	f7ff ff8e 	bl	8004748 <std>
 800482c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004830:	2202      	movs	r2, #2
 8004832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004836:	2112      	movs	r1, #18
 8004838:	f7ff bf86 	b.w	8004748 <std>
 800483c:	200002e8 	.word	0x200002e8
 8004840:	200001b0 	.word	0x200001b0
 8004844:	080047b5 	.word	0x080047b5

08004848 <__sfp_lock_acquire>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__sfp_lock_acquire+0x8>)
 800484a:	f000 ba28 	b.w	8004c9e <__retarget_lock_acquire_recursive>
 800484e:	bf00      	nop
 8004850:	200002f1 	.word	0x200002f1

08004854 <__sfp_lock_release>:
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <__sfp_lock_release+0x8>)
 8004856:	f000 ba23 	b.w	8004ca0 <__retarget_lock_release_recursive>
 800485a:	bf00      	nop
 800485c:	200002f1 	.word	0x200002f1

08004860 <__sinit>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0
 8004864:	f7ff fff0 	bl	8004848 <__sfp_lock_acquire>
 8004868:	6a23      	ldr	r3, [r4, #32]
 800486a:	b11b      	cbz	r3, 8004874 <__sinit+0x14>
 800486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004870:	f7ff bff0 	b.w	8004854 <__sfp_lock_release>
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <__sinit+0x28>)
 8004876:	6223      	str	r3, [r4, #32]
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <__sinit+0x2c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f5      	bne.n	800486c <__sinit+0xc>
 8004880:	f7ff ffc4 	bl	800480c <global_stdio_init.part.0>
 8004884:	e7f2      	b.n	800486c <__sinit+0xc>
 8004886:	bf00      	nop
 8004888:	080047cd 	.word	0x080047cd
 800488c:	200002e8 	.word	0x200002e8

08004890 <_fwalk_sglue>:
 8004890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004894:	4607      	mov	r7, r0
 8004896:	4688      	mov	r8, r1
 8004898:	4614      	mov	r4, r2
 800489a:	2600      	movs	r6, #0
 800489c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a0:	f1b9 0901 	subs.w	r9, r9, #1
 80048a4:	d505      	bpl.n	80048b2 <_fwalk_sglue+0x22>
 80048a6:	6824      	ldr	r4, [r4, #0]
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	d1f7      	bne.n	800489c <_fwalk_sglue+0xc>
 80048ac:	4630      	mov	r0, r6
 80048ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d907      	bls.n	80048c8 <_fwalk_sglue+0x38>
 80048b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048bc:	3301      	adds	r3, #1
 80048be:	d003      	beq.n	80048c8 <_fwalk_sglue+0x38>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	4306      	orrs	r6, r0
 80048c8:	3568      	adds	r5, #104	; 0x68
 80048ca:	e7e9      	b.n	80048a0 <_fwalk_sglue+0x10>

080048cc <getchar>:
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <getchar+0xc>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	6841      	ldr	r1, [r0, #4]
 80048d2:	f000 be99 	b.w	8005608 <_getc_r>
 80048d6:	bf00      	nop
 80048d8:	2000008c 	.word	0x2000008c

080048dc <iprintf>:
 80048dc:	b40f      	push	{r0, r1, r2, r3}
 80048de:	b507      	push	{r0, r1, r2, lr}
 80048e0:	4906      	ldr	r1, [pc, #24]	; (80048fc <iprintf+0x20>)
 80048e2:	ab04      	add	r3, sp, #16
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ea:	6881      	ldr	r1, [r0, #8]
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	f000 fb21 	bl	8004f34 <_vfiprintf_r>
 80048f2:	b003      	add	sp, #12
 80048f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f8:	b004      	add	sp, #16
 80048fa:	4770      	bx	lr
 80048fc:	2000008c 	.word	0x2000008c

08004900 <putchar>:
 8004900:	4b02      	ldr	r3, [pc, #8]	; (800490c <putchar+0xc>)
 8004902:	4601      	mov	r1, r0
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	6882      	ldr	r2, [r0, #8]
 8004908:	f000 bf0b 	b.w	8005722 <_putc_r>
 800490c:	2000008c 	.word	0x2000008c

08004910 <setvbuf>:
 8004910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004914:	461d      	mov	r5, r3
 8004916:	4b54      	ldr	r3, [pc, #336]	; (8004a68 <setvbuf+0x158>)
 8004918:	681f      	ldr	r7, [r3, #0]
 800491a:	4604      	mov	r4, r0
 800491c:	460e      	mov	r6, r1
 800491e:	4690      	mov	r8, r2
 8004920:	b127      	cbz	r7, 800492c <setvbuf+0x1c>
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	b913      	cbnz	r3, 800492c <setvbuf+0x1c>
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ff9a 	bl	8004860 <__sinit>
 800492c:	f1b8 0f02 	cmp.w	r8, #2
 8004930:	d006      	beq.n	8004940 <setvbuf+0x30>
 8004932:	f1b8 0f01 	cmp.w	r8, #1
 8004936:	f200 8094 	bhi.w	8004a62 <setvbuf+0x152>
 800493a:	2d00      	cmp	r5, #0
 800493c:	f2c0 8091 	blt.w	8004a62 <setvbuf+0x152>
 8004940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004942:	07da      	lsls	r2, r3, #31
 8004944:	d405      	bmi.n	8004952 <setvbuf+0x42>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	d402      	bmi.n	8004952 <setvbuf+0x42>
 800494c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494e:	f000 f9a6 	bl	8004c9e <__retarget_lock_acquire_recursive>
 8004952:	4621      	mov	r1, r4
 8004954:	4638      	mov	r0, r7
 8004956:	f000 fe1d 	bl	8005594 <_fflush_r>
 800495a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495c:	b141      	cbz	r1, 8004970 <setvbuf+0x60>
 800495e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004962:	4299      	cmp	r1, r3
 8004964:	d002      	beq.n	800496c <setvbuf+0x5c>
 8004966:	4638      	mov	r0, r7
 8004968:	f000 f9ba 	bl	8004ce0 <_free_r>
 800496c:	2300      	movs	r3, #0
 800496e:	6363      	str	r3, [r4, #52]	; 0x34
 8004970:	2300      	movs	r3, #0
 8004972:	61a3      	str	r3, [r4, #24]
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	0618      	lsls	r0, r3, #24
 800497a:	d503      	bpl.n	8004984 <setvbuf+0x74>
 800497c:	6921      	ldr	r1, [r4, #16]
 800497e:	4638      	mov	r0, r7
 8004980:	f000 f9ae 	bl	8004ce0 <_free_r>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	f1b8 0f02 	cmp.w	r8, #2
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	d05f      	beq.n	8004a56 <setvbuf+0x146>
 8004996:	ab01      	add	r3, sp, #4
 8004998:	466a      	mov	r2, sp
 800499a:	4621      	mov	r1, r4
 800499c:	4638      	mov	r0, r7
 800499e:	f000 fe5e 	bl	800565e <__swhatbuf_r>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	4318      	orrs	r0, r3
 80049a6:	81a0      	strh	r0, [r4, #12]
 80049a8:	bb2d      	cbnz	r5, 80049f6 <setvbuf+0xe6>
 80049aa:	9d00      	ldr	r5, [sp, #0]
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 f9e3 	bl	8004d78 <malloc>
 80049b2:	4606      	mov	r6, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d150      	bne.n	8004a5a <setvbuf+0x14a>
 80049b8:	f8dd 9000 	ldr.w	r9, [sp]
 80049bc:	45a9      	cmp	r9, r5
 80049be:	d13e      	bne.n	8004a3e <setvbuf+0x12e>
 80049c0:	f04f 35ff 	mov.w	r5, #4294967295
 80049c4:	2200      	movs	r2, #0
 80049c6:	60a2      	str	r2, [r4, #8]
 80049c8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80049cc:	6022      	str	r2, [r4, #0]
 80049ce:	6122      	str	r2, [r4, #16]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d6:	6162      	str	r2, [r4, #20]
 80049d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	07d1      	lsls	r1, r2, #31
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	d404      	bmi.n	80049ee <setvbuf+0xde>
 80049e4:	059b      	lsls	r3, r3, #22
 80049e6:	d402      	bmi.n	80049ee <setvbuf+0xde>
 80049e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ea:	f000 f959 	bl	8004ca0 <__retarget_lock_release_recursive>
 80049ee:	4628      	mov	r0, r5
 80049f0:	b003      	add	sp, #12
 80049f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d0d8      	beq.n	80049ac <setvbuf+0x9c>
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	b913      	cbnz	r3, 8004a04 <setvbuf+0xf4>
 80049fe:	4638      	mov	r0, r7
 8004a00:	f7ff ff2e 	bl	8004860 <__sinit>
 8004a04:	f1b8 0f01 	cmp.w	r8, #1
 8004a08:	bf08      	it	eq
 8004a0a:	89a3      	ldrheq	r3, [r4, #12]
 8004a0c:	6026      	str	r6, [r4, #0]
 8004a0e:	bf04      	itt	eq
 8004a10:	f043 0301 	orreq.w	r3, r3, #1
 8004a14:	81a3      	strheq	r3, [r4, #12]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f013 0208 	ands.w	r2, r3, #8
 8004a1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a20:	d01d      	beq.n	8004a5e <setvbuf+0x14e>
 8004a22:	07da      	lsls	r2, r3, #31
 8004a24:	bf41      	itttt	mi
 8004a26:	2200      	movmi	r2, #0
 8004a28:	426d      	negmi	r5, r5
 8004a2a:	60a2      	strmi	r2, [r4, #8]
 8004a2c:	61a5      	strmi	r5, [r4, #24]
 8004a2e:	bf58      	it	pl
 8004a30:	60a5      	strpl	r5, [r4, #8]
 8004a32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a34:	f015 0501 	ands.w	r5, r5, #1
 8004a38:	d0d4      	beq.n	80049e4 <setvbuf+0xd4>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	e7d7      	b.n	80049ee <setvbuf+0xde>
 8004a3e:	4648      	mov	r0, r9
 8004a40:	f000 f99a 	bl	8004d78 <malloc>
 8004a44:	4606      	mov	r6, r0
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0ba      	beq.n	80049c0 <setvbuf+0xb0>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	464d      	mov	r5, r9
 8004a54:	e7d1      	b.n	80049fa <setvbuf+0xea>
 8004a56:	2500      	movs	r5, #0
 8004a58:	e7b4      	b.n	80049c4 <setvbuf+0xb4>
 8004a5a:	46a9      	mov	r9, r5
 8004a5c:	e7f5      	b.n	8004a4a <setvbuf+0x13a>
 8004a5e:	60a2      	str	r2, [r4, #8]
 8004a60:	e7e7      	b.n	8004a32 <setvbuf+0x122>
 8004a62:	f04f 35ff 	mov.w	r5, #4294967295
 8004a66:	e7c2      	b.n	80049ee <setvbuf+0xde>
 8004a68:	2000008c 	.word	0x2000008c

08004a6c <__sread>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f8c4 	bl	8004c00 <_read_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	bfab      	itete	ge
 8004a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a80:	181b      	addge	r3, r3, r0
 8004a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a86:	bfac      	ite	ge
 8004a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a8a:	81a3      	strhlt	r3, [r4, #12]
 8004a8c:	bd10      	pop	{r4, pc}

08004a8e <__swrite>:
 8004a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a92:	461f      	mov	r7, r3
 8004a94:	898b      	ldrh	r3, [r1, #12]
 8004a96:	05db      	lsls	r3, r3, #23
 8004a98:	4605      	mov	r5, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	d505      	bpl.n	8004aac <__swrite+0x1e>
 8004aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f000 f898 	bl	8004bdc <_lseek_r>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab6:	81a3      	strh	r3, [r4, #12]
 8004ab8:	4632      	mov	r2, r6
 8004aba:	463b      	mov	r3, r7
 8004abc:	4628      	mov	r0, r5
 8004abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac2:	f000 b8af 	b.w	8004c24 <_write_r>

08004ac6 <__sseek>:
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	460c      	mov	r4, r1
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 f885 	bl	8004bdc <_lseek_r>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	bf15      	itete	ne
 8004ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ae2:	81a3      	strheq	r3, [r4, #12]
 8004ae4:	bf18      	it	ne
 8004ae6:	81a3      	strhne	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__sclose>:
 8004aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aee:	f000 b865 	b.w	8004bbc <_close_r>

08004af2 <memset>:
 8004af2:	4402      	add	r2, r0
 8004af4:	4603      	mov	r3, r0
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d100      	bne.n	8004afc <memset+0xa>
 8004afa:	4770      	bx	lr
 8004afc:	f803 1b01 	strb.w	r1, [r3], #1
 8004b00:	e7f9      	b.n	8004af6 <memset+0x4>
	...

08004b04 <strtok>:
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <strtok+0x5c>)
 8004b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b08:	681e      	ldr	r6, [r3, #0]
 8004b0a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	b9fc      	cbnz	r4, 8004b50 <strtok+0x4c>
 8004b10:	2050      	movs	r0, #80	; 0x50
 8004b12:	9101      	str	r1, [sp, #4]
 8004b14:	f000 f930 	bl	8004d78 <malloc>
 8004b18:	9901      	ldr	r1, [sp, #4]
 8004b1a:	6470      	str	r0, [r6, #68]	; 0x44
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	b920      	cbnz	r0, 8004b2a <strtok+0x26>
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <strtok+0x60>)
 8004b22:	4811      	ldr	r0, [pc, #68]	; (8004b68 <strtok+0x64>)
 8004b24:	215b      	movs	r1, #91	; 0x5b
 8004b26:	f000 f8bd 	bl	8004ca4 <__assert_func>
 8004b2a:	e9c0 4400 	strd	r4, r4, [r0]
 8004b2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b4a:	6184      	str	r4, [r0, #24]
 8004b4c:	7704      	strb	r4, [r0, #28]
 8004b4e:	6244      	str	r4, [r0, #36]	; 0x24
 8004b50:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004b52:	2301      	movs	r3, #1
 8004b54:	4628      	mov	r0, r5
 8004b56:	b002      	add	sp, #8
 8004b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b5c:	f000 b806 	b.w	8004b6c <__strtok_r>
 8004b60:	2000008c 	.word	0x2000008c
 8004b64:	08005c34 	.word	0x08005c34
 8004b68:	08005c4b 	.word	0x08005c4b

08004b6c <__strtok_r>:
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b908      	cbnz	r0, 8004b74 <__strtok_r+0x8>
 8004b70:	6810      	ldr	r0, [r2, #0]
 8004b72:	b188      	cbz	r0, 8004b98 <__strtok_r+0x2c>
 8004b74:	4604      	mov	r4, r0
 8004b76:	4620      	mov	r0, r4
 8004b78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b82:	b91e      	cbnz	r6, 8004b8c <__strtok_r+0x20>
 8004b84:	b965      	cbnz	r5, 8004ba0 <__strtok_r+0x34>
 8004b86:	6015      	str	r5, [r2, #0]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e005      	b.n	8004b98 <__strtok_r+0x2c>
 8004b8c:	42b5      	cmp	r5, r6
 8004b8e:	d1f6      	bne.n	8004b7e <__strtok_r+0x12>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <__strtok_r+0xa>
 8004b94:	6014      	str	r4, [r2, #0]
 8004b96:	7003      	strb	r3, [r0, #0]
 8004b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	e00c      	b.n	8004bb8 <__strtok_r+0x4c>
 8004b9e:	b915      	cbnz	r5, 8004ba6 <__strtok_r+0x3a>
 8004ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ba4:	460e      	mov	r6, r1
 8004ba6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004baa:	42ab      	cmp	r3, r5
 8004bac:	d1f7      	bne.n	8004b9e <__strtok_r+0x32>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f3      	beq.n	8004b9a <__strtok_r+0x2e>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	e7ed      	b.n	8004b98 <__strtok_r+0x2c>

08004bbc <_close_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	; (8004bd8 <_close_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fc f938 	bl	8000e3c <_close>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_close_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_close_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200002ec 	.word	0x200002ec

08004bdc <_lseek_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	; (8004bfc <_lseek_r+0x20>)
 8004be0:	4604      	mov	r4, r0
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	602a      	str	r2, [r5, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7fc f93d 	bl	8000e6a <_lseek>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_lseek_r+0x1e>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_lseek_r+0x1e>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	200002ec 	.word	0x200002ec

08004c00 <_read_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d07      	ldr	r5, [pc, #28]	; (8004c20 <_read_r+0x20>)
 8004c04:	4604      	mov	r4, r0
 8004c06:	4608      	mov	r0, r1
 8004c08:	4611      	mov	r1, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f7fc f93c 	bl	8000e8c <_read>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_read_r+0x1e>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_read_r+0x1e>
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	200002ec 	.word	0x200002ec

08004c24 <_write_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d07      	ldr	r5, [pc, #28]	; (8004c44 <_write_r+0x20>)
 8004c28:	4604      	mov	r4, r0
 8004c2a:	4608      	mov	r0, r1
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	2200      	movs	r2, #0
 8004c30:	602a      	str	r2, [r5, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f7fc f8d6 	bl	8000de4 <_write>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_write_r+0x1e>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_write_r+0x1e>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	200002ec 	.word	0x200002ec

08004c48 <__errno>:
 8004c48:	4b01      	ldr	r3, [pc, #4]	; (8004c50 <__errno+0x8>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	2000008c 	.word	0x2000008c

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4d0d      	ldr	r5, [pc, #52]	; (8004c8c <__libc_init_array+0x38>)
 8004c58:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	2600      	movs	r6, #0
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	4d0b      	ldr	r5, [pc, #44]	; (8004c94 <__libc_init_array+0x40>)
 8004c66:	4c0c      	ldr	r4, [pc, #48]	; (8004c98 <__libc_init_array+0x44>)
 8004c68:	f000 ff40 	bl	8005aec <_init>
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	2600      	movs	r6, #0
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08005d1c 	.word	0x08005d1c
 8004c90:	08005d1c 	.word	0x08005d1c
 8004c94:	08005d1c 	.word	0x08005d1c
 8004c98:	08005d20 	.word	0x08005d20

08004c9c <__retarget_lock_init_recursive>:
 8004c9c:	4770      	bx	lr

08004c9e <__retarget_lock_acquire_recursive>:
 8004c9e:	4770      	bx	lr

08004ca0 <__retarget_lock_release_recursive>:
 8004ca0:	4770      	bx	lr
	...

08004ca4 <__assert_func>:
 8004ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <__assert_func+0x2c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4605      	mov	r5, r0
 8004cb0:	68d8      	ldr	r0, [r3, #12]
 8004cb2:	b14c      	cbz	r4, 8004cc8 <__assert_func+0x24>
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <__assert_func+0x30>)
 8004cb6:	9100      	str	r1, [sp, #0]
 8004cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cbc:	4906      	ldr	r1, [pc, #24]	; (8004cd8 <__assert_func+0x34>)
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	f000 fc90 	bl	80055e4 <fiprintf>
 8004cc4:	f000 fe40 	bl	8005948 <abort>
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <__assert_func+0x38>)
 8004cca:	461c      	mov	r4, r3
 8004ccc:	e7f3      	b.n	8004cb6 <__assert_func+0x12>
 8004cce:	bf00      	nop
 8004cd0:	2000008c 	.word	0x2000008c
 8004cd4:	08005ca5 	.word	0x08005ca5
 8004cd8:	08005cb2 	.word	0x08005cb2
 8004cdc:	08005ce0 	.word	0x08005ce0

08004ce0 <_free_r>:
 8004ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	d044      	beq.n	8004d70 <_free_r+0x90>
 8004ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cea:	9001      	str	r0, [sp, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf2:	bfb8      	it	lt
 8004cf4:	18e4      	addlt	r4, r4, r3
 8004cf6:	f000 f8e7 	bl	8004ec8 <__malloc_lock>
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <_free_r+0x94>)
 8004cfc:	9801      	ldr	r0, [sp, #4]
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	b933      	cbnz	r3, 8004d10 <_free_r+0x30>
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6014      	str	r4, [r2, #0]
 8004d06:	b003      	add	sp, #12
 8004d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d0c:	f000 b8e2 	b.w	8004ed4 <__malloc_unlock>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d908      	bls.n	8004d26 <_free_r+0x46>
 8004d14:	6825      	ldr	r5, [r4, #0]
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf01      	itttt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	1949      	addeq	r1, r1, r5
 8004d22:	6021      	streq	r1, [r4, #0]
 8004d24:	e7ed      	b.n	8004d02 <_free_r+0x22>
 8004d26:	461a      	mov	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b10b      	cbz	r3, 8004d30 <_free_r+0x50>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x46>
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	1855      	adds	r5, r2, r1
 8004d34:	42a5      	cmp	r5, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x70>
 8004d38:	6824      	ldr	r4, [r4, #0]
 8004d3a:	4421      	add	r1, r4
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	d1e0      	bne.n	8004d06 <_free_r+0x26>
 8004d44:	681c      	ldr	r4, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	440c      	add	r4, r1
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	e7da      	b.n	8004d06 <_free_r+0x26>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x78>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	e7d6      	b.n	8004d06 <_free_r+0x26>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf04      	itt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	bf04      	itt	eq
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	6054      	str	r4, [r2, #4]
 8004d6e:	e7ca      	b.n	8004d06 <_free_r+0x26>
 8004d70:	b003      	add	sp, #12
 8004d72:	bd30      	pop	{r4, r5, pc}
 8004d74:	200002f4 	.word	0x200002f4

08004d78 <malloc>:
 8004d78:	4b02      	ldr	r3, [pc, #8]	; (8004d84 <malloc+0xc>)
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f000 b823 	b.w	8004dc8 <_malloc_r>
 8004d82:	bf00      	nop
 8004d84:	2000008c 	.word	0x2000008c

08004d88 <sbrk_aligned>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4e0e      	ldr	r6, [pc, #56]	; (8004dc4 <sbrk_aligned+0x3c>)
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	6831      	ldr	r1, [r6, #0]
 8004d90:	4605      	mov	r5, r0
 8004d92:	b911      	cbnz	r1, 8004d9a <sbrk_aligned+0x12>
 8004d94:	f000 fdc8 	bl	8005928 <_sbrk_r>
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 fdc3 	bl	8005928 <_sbrk_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d00a      	beq.n	8004dbc <sbrk_aligned+0x34>
 8004da6:	1cc4      	adds	r4, r0, #3
 8004da8:	f024 0403 	bic.w	r4, r4, #3
 8004dac:	42a0      	cmp	r0, r4
 8004dae:	d007      	beq.n	8004dc0 <sbrk_aligned+0x38>
 8004db0:	1a21      	subs	r1, r4, r0
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 fdb8 	bl	8005928 <_sbrk_r>
 8004db8:	3001      	adds	r0, #1
 8004dba:	d101      	bne.n	8004dc0 <sbrk_aligned+0x38>
 8004dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	200002f8 	.word	0x200002f8

08004dc8 <_malloc_r>:
 8004dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	1ccd      	adds	r5, r1, #3
 8004dce:	f025 0503 	bic.w	r5, r5, #3
 8004dd2:	3508      	adds	r5, #8
 8004dd4:	2d0c      	cmp	r5, #12
 8004dd6:	bf38      	it	cc
 8004dd8:	250c      	movcc	r5, #12
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	4607      	mov	r7, r0
 8004dde:	db01      	blt.n	8004de4 <_malloc_r+0x1c>
 8004de0:	42a9      	cmp	r1, r5
 8004de2:	d905      	bls.n	8004df0 <_malloc_r+0x28>
 8004de4:	230c      	movs	r3, #12
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	2600      	movs	r6, #0
 8004dea:	4630      	mov	r0, r6
 8004dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ec4 <_malloc_r+0xfc>
 8004df4:	f000 f868 	bl	8004ec8 <__malloc_lock>
 8004df8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfc:	461c      	mov	r4, r3
 8004dfe:	bb5c      	cbnz	r4, 8004e58 <_malloc_r+0x90>
 8004e00:	4629      	mov	r1, r5
 8004e02:	4638      	mov	r0, r7
 8004e04:	f7ff ffc0 	bl	8004d88 <sbrk_aligned>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	d155      	bne.n	8004eba <_malloc_r+0xf2>
 8004e0e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e12:	4626      	mov	r6, r4
 8004e14:	2e00      	cmp	r6, #0
 8004e16:	d145      	bne.n	8004ea4 <_malloc_r+0xdc>
 8004e18:	2c00      	cmp	r4, #0
 8004e1a:	d048      	beq.n	8004eae <_malloc_r+0xe6>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4638      	mov	r0, r7
 8004e22:	eb04 0903 	add.w	r9, r4, r3
 8004e26:	f000 fd7f 	bl	8005928 <_sbrk_r>
 8004e2a:	4581      	cmp	r9, r0
 8004e2c:	d13f      	bne.n	8004eae <_malloc_r+0xe6>
 8004e2e:	6821      	ldr	r1, [r4, #0]
 8004e30:	1a6d      	subs	r5, r5, r1
 8004e32:	4629      	mov	r1, r5
 8004e34:	4638      	mov	r0, r7
 8004e36:	f7ff ffa7 	bl	8004d88 <sbrk_aligned>
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d037      	beq.n	8004eae <_malloc_r+0xe6>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	442b      	add	r3, r5
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	f8d8 3000 	ldr.w	r3, [r8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d038      	beq.n	8004ebe <_malloc_r+0xf6>
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	42a2      	cmp	r2, r4
 8004e50:	d12b      	bne.n	8004eaa <_malloc_r+0xe2>
 8004e52:	2200      	movs	r2, #0
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	e00f      	b.n	8004e78 <_malloc_r+0xb0>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	1b52      	subs	r2, r2, r5
 8004e5c:	d41f      	bmi.n	8004e9e <_malloc_r+0xd6>
 8004e5e:	2a0b      	cmp	r2, #11
 8004e60:	d917      	bls.n	8004e92 <_malloc_r+0xca>
 8004e62:	1961      	adds	r1, r4, r5
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	6025      	str	r5, [r4, #0]
 8004e68:	bf18      	it	ne
 8004e6a:	6059      	strne	r1, [r3, #4]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	bf08      	it	eq
 8004e70:	f8c8 1000 	streq.w	r1, [r8]
 8004e74:	5162      	str	r2, [r4, r5]
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f104 060b 	add.w	r6, r4, #11
 8004e7e:	f000 f829 	bl	8004ed4 <__malloc_unlock>
 8004e82:	f026 0607 	bic.w	r6, r6, #7
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	1af2      	subs	r2, r6, r3
 8004e8a:	d0ae      	beq.n	8004dea <_malloc_r+0x22>
 8004e8c:	1b9b      	subs	r3, r3, r6
 8004e8e:	50a3      	str	r3, [r4, r2]
 8004e90:	e7ab      	b.n	8004dea <_malloc_r+0x22>
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	6862      	ldr	r2, [r4, #4]
 8004e96:	d1dd      	bne.n	8004e54 <_malloc_r+0x8c>
 8004e98:	f8c8 2000 	str.w	r2, [r8]
 8004e9c:	e7ec      	b.n	8004e78 <_malloc_r+0xb0>
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	6864      	ldr	r4, [r4, #4]
 8004ea2:	e7ac      	b.n	8004dfe <_malloc_r+0x36>
 8004ea4:	4634      	mov	r4, r6
 8004ea6:	6876      	ldr	r6, [r6, #4]
 8004ea8:	e7b4      	b.n	8004e14 <_malloc_r+0x4c>
 8004eaa:	4613      	mov	r3, r2
 8004eac:	e7cc      	b.n	8004e48 <_malloc_r+0x80>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f000 f80e 	bl	8004ed4 <__malloc_unlock>
 8004eb8:	e797      	b.n	8004dea <_malloc_r+0x22>
 8004eba:	6025      	str	r5, [r4, #0]
 8004ebc:	e7dc      	b.n	8004e78 <_malloc_r+0xb0>
 8004ebe:	605b      	str	r3, [r3, #4]
 8004ec0:	deff      	udf	#255	; 0xff
 8004ec2:	bf00      	nop
 8004ec4:	200002f4 	.word	0x200002f4

08004ec8 <__malloc_lock>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__malloc_lock+0x8>)
 8004eca:	f7ff bee8 	b.w	8004c9e <__retarget_lock_acquire_recursive>
 8004ece:	bf00      	nop
 8004ed0:	200002f0 	.word	0x200002f0

08004ed4 <__malloc_unlock>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__malloc_unlock+0x8>)
 8004ed6:	f7ff bee3 	b.w	8004ca0 <__retarget_lock_release_recursive>
 8004eda:	bf00      	nop
 8004edc:	200002f0 	.word	0x200002f0

08004ee0 <__sfputc_r>:
 8004ee0:	6893      	ldr	r3, [r2, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	b410      	push	{r4}
 8004ee8:	6093      	str	r3, [r2, #8]
 8004eea:	da08      	bge.n	8004efe <__sfputc_r+0x1e>
 8004eec:	6994      	ldr	r4, [r2, #24]
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	db01      	blt.n	8004ef6 <__sfputc_r+0x16>
 8004ef2:	290a      	cmp	r1, #10
 8004ef4:	d103      	bne.n	8004efe <__sfputc_r+0x1e>
 8004ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efa:	f000 bc5e 	b.w	80057ba <__swbuf_r>
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	1c58      	adds	r0, r3, #1
 8004f02:	6010      	str	r0, [r2, #0]
 8004f04:	7019      	strb	r1, [r3, #0]
 8004f06:	4608      	mov	r0, r1
 8004f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <__sfputs_r>:
 8004f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f10:	4606      	mov	r6, r0
 8004f12:	460f      	mov	r7, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	18d5      	adds	r5, r2, r3
 8004f18:	42ac      	cmp	r4, r5
 8004f1a:	d101      	bne.n	8004f20 <__sfputs_r+0x12>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e007      	b.n	8004f30 <__sfputs_r+0x22>
 8004f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f24:	463a      	mov	r2, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff ffda 	bl	8004ee0 <__sfputc_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d1f3      	bne.n	8004f18 <__sfputs_r+0xa>
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f34 <_vfiprintf_r>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	460d      	mov	r5, r1
 8004f3a:	b09d      	sub	sp, #116	; 0x74
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	4698      	mov	r8, r3
 8004f40:	4606      	mov	r6, r0
 8004f42:	b118      	cbz	r0, 8004f4c <_vfiprintf_r+0x18>
 8004f44:	6a03      	ldr	r3, [r0, #32]
 8004f46:	b90b      	cbnz	r3, 8004f4c <_vfiprintf_r+0x18>
 8004f48:	f7ff fc8a 	bl	8004860 <__sinit>
 8004f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4e:	07d9      	lsls	r1, r3, #31
 8004f50:	d405      	bmi.n	8004f5e <_vfiprintf_r+0x2a>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	059a      	lsls	r2, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_vfiprintf_r+0x2a>
 8004f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f5a:	f7ff fea0 	bl	8004c9e <__retarget_lock_acquire_recursive>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	d501      	bpl.n	8004f68 <_vfiprintf_r+0x34>
 8004f64:	692b      	ldr	r3, [r5, #16]
 8004f66:	b99b      	cbnz	r3, 8004f90 <_vfiprintf_r+0x5c>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 fc62 	bl	8005834 <__swsetup_r>
 8004f70:	b170      	cbz	r0, 8004f90 <_vfiprintf_r+0x5c>
 8004f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f74:	07dc      	lsls	r4, r3, #31
 8004f76:	d504      	bpl.n	8004f82 <_vfiprintf_r+0x4e>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	b01d      	add	sp, #116	; 0x74
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	0598      	lsls	r0, r3, #22
 8004f86:	d4f7      	bmi.n	8004f78 <_vfiprintf_r+0x44>
 8004f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f8a:	f7ff fe89 	bl	8004ca0 <__retarget_lock_release_recursive>
 8004f8e:	e7f3      	b.n	8004f78 <_vfiprintf_r+0x44>
 8004f90:	2300      	movs	r3, #0
 8004f92:	9309      	str	r3, [sp, #36]	; 0x24
 8004f94:	2320      	movs	r3, #32
 8004f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005154 <_vfiprintf_r+0x220>
 8004fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fa8:	f04f 0901 	mov.w	r9, #1
 8004fac:	4623      	mov	r3, r4
 8004fae:	469a      	mov	sl, r3
 8004fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fb4:	b10a      	cbz	r2, 8004fba <_vfiprintf_r+0x86>
 8004fb6:	2a25      	cmp	r2, #37	; 0x25
 8004fb8:	d1f9      	bne.n	8004fae <_vfiprintf_r+0x7a>
 8004fba:	ebba 0b04 	subs.w	fp, sl, r4
 8004fbe:	d00b      	beq.n	8004fd8 <_vfiprintf_r+0xa4>
 8004fc0:	465b      	mov	r3, fp
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7ff ffa1 	bl	8004f0e <__sfputs_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f000 80a9 	beq.w	8005124 <_vfiprintf_r+0x1f0>
 8004fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd4:	445a      	add	r2, fp
 8004fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a1 	beq.w	8005124 <_vfiprintf_r+0x1f0>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fec:	f10a 0a01 	add.w	sl, sl, #1
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	9307      	str	r3, [sp, #28]
 8004ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8004ffa:	4654      	mov	r4, sl
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005002:	4854      	ldr	r0, [pc, #336]	; (8005154 <_vfiprintf_r+0x220>)
 8005004:	f7fb f8f4 	bl	80001f0 <memchr>
 8005008:	9a04      	ldr	r2, [sp, #16]
 800500a:	b9d8      	cbnz	r0, 8005044 <_vfiprintf_r+0x110>
 800500c:	06d1      	lsls	r1, r2, #27
 800500e:	bf44      	itt	mi
 8005010:	2320      	movmi	r3, #32
 8005012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005016:	0713      	lsls	r3, r2, #28
 8005018:	bf44      	itt	mi
 800501a:	232b      	movmi	r3, #43	; 0x2b
 800501c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005020:	f89a 3000 	ldrb.w	r3, [sl]
 8005024:	2b2a      	cmp	r3, #42	; 0x2a
 8005026:	d015      	beq.n	8005054 <_vfiprintf_r+0x120>
 8005028:	9a07      	ldr	r2, [sp, #28]
 800502a:	4654      	mov	r4, sl
 800502c:	2000      	movs	r0, #0
 800502e:	f04f 0c0a 	mov.w	ip, #10
 8005032:	4621      	mov	r1, r4
 8005034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005038:	3b30      	subs	r3, #48	; 0x30
 800503a:	2b09      	cmp	r3, #9
 800503c:	d94d      	bls.n	80050da <_vfiprintf_r+0x1a6>
 800503e:	b1b0      	cbz	r0, 800506e <_vfiprintf_r+0x13a>
 8005040:	9207      	str	r2, [sp, #28]
 8005042:	e014      	b.n	800506e <_vfiprintf_r+0x13a>
 8005044:	eba0 0308 	sub.w	r3, r0, r8
 8005048:	fa09 f303 	lsl.w	r3, r9, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	46a2      	mov	sl, r4
 8005052:	e7d2      	b.n	8004ffa <_vfiprintf_r+0xc6>
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	1d19      	adds	r1, r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	9103      	str	r1, [sp, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	bfbb      	ittet	lt
 8005060:	425b      	neglt	r3, r3
 8005062:	f042 0202 	orrlt.w	r2, r2, #2
 8005066:	9307      	strge	r3, [sp, #28]
 8005068:	9307      	strlt	r3, [sp, #28]
 800506a:	bfb8      	it	lt
 800506c:	9204      	strlt	r2, [sp, #16]
 800506e:	7823      	ldrb	r3, [r4, #0]
 8005070:	2b2e      	cmp	r3, #46	; 0x2e
 8005072:	d10c      	bne.n	800508e <_vfiprintf_r+0x15a>
 8005074:	7863      	ldrb	r3, [r4, #1]
 8005076:	2b2a      	cmp	r3, #42	; 0x2a
 8005078:	d134      	bne.n	80050e4 <_vfiprintf_r+0x1b0>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	9203      	str	r2, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfb8      	it	lt
 8005086:	f04f 33ff 	movlt.w	r3, #4294967295
 800508a:	3402      	adds	r4, #2
 800508c:	9305      	str	r3, [sp, #20]
 800508e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005164 <_vfiprintf_r+0x230>
 8005092:	7821      	ldrb	r1, [r4, #0]
 8005094:	2203      	movs	r2, #3
 8005096:	4650      	mov	r0, sl
 8005098:	f7fb f8aa 	bl	80001f0 <memchr>
 800509c:	b138      	cbz	r0, 80050ae <_vfiprintf_r+0x17a>
 800509e:	9b04      	ldr	r3, [sp, #16]
 80050a0:	eba0 000a 	sub.w	r0, r0, sl
 80050a4:	2240      	movs	r2, #64	; 0x40
 80050a6:	4082      	lsls	r2, r0
 80050a8:	4313      	orrs	r3, r2
 80050aa:	3401      	adds	r4, #1
 80050ac:	9304      	str	r3, [sp, #16]
 80050ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b2:	4829      	ldr	r0, [pc, #164]	; (8005158 <_vfiprintf_r+0x224>)
 80050b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050b8:	2206      	movs	r2, #6
 80050ba:	f7fb f899 	bl	80001f0 <memchr>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d03f      	beq.n	8005142 <_vfiprintf_r+0x20e>
 80050c2:	4b26      	ldr	r3, [pc, #152]	; (800515c <_vfiprintf_r+0x228>)
 80050c4:	bb1b      	cbnz	r3, 800510e <_vfiprintf_r+0x1da>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	3307      	adds	r3, #7
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	3308      	adds	r3, #8
 80050d0:	9303      	str	r3, [sp, #12]
 80050d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d4:	443b      	add	r3, r7
 80050d6:	9309      	str	r3, [sp, #36]	; 0x24
 80050d8:	e768      	b.n	8004fac <_vfiprintf_r+0x78>
 80050da:	fb0c 3202 	mla	r2, ip, r2, r3
 80050de:	460c      	mov	r4, r1
 80050e0:	2001      	movs	r0, #1
 80050e2:	e7a6      	b.n	8005032 <_vfiprintf_r+0xfe>
 80050e4:	2300      	movs	r3, #0
 80050e6:	3401      	adds	r4, #1
 80050e8:	9305      	str	r3, [sp, #20]
 80050ea:	4619      	mov	r1, r3
 80050ec:	f04f 0c0a 	mov.w	ip, #10
 80050f0:	4620      	mov	r0, r4
 80050f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050f6:	3a30      	subs	r2, #48	; 0x30
 80050f8:	2a09      	cmp	r2, #9
 80050fa:	d903      	bls.n	8005104 <_vfiprintf_r+0x1d0>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0c6      	beq.n	800508e <_vfiprintf_r+0x15a>
 8005100:	9105      	str	r1, [sp, #20]
 8005102:	e7c4      	b.n	800508e <_vfiprintf_r+0x15a>
 8005104:	fb0c 2101 	mla	r1, ip, r1, r2
 8005108:	4604      	mov	r4, r0
 800510a:	2301      	movs	r3, #1
 800510c:	e7f0      	b.n	80050f0 <_vfiprintf_r+0x1bc>
 800510e:	ab03      	add	r3, sp, #12
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	462a      	mov	r2, r5
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <_vfiprintf_r+0x22c>)
 8005116:	a904      	add	r1, sp, #16
 8005118:	4630      	mov	r0, r6
 800511a:	f3af 8000 	nop.w
 800511e:	4607      	mov	r7, r0
 8005120:	1c78      	adds	r0, r7, #1
 8005122:	d1d6      	bne.n	80050d2 <_vfiprintf_r+0x19e>
 8005124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005126:	07d9      	lsls	r1, r3, #31
 8005128:	d405      	bmi.n	8005136 <_vfiprintf_r+0x202>
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d402      	bmi.n	8005136 <_vfiprintf_r+0x202>
 8005130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005132:	f7ff fdb5 	bl	8004ca0 <__retarget_lock_release_recursive>
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	065b      	lsls	r3, r3, #25
 800513a:	f53f af1d 	bmi.w	8004f78 <_vfiprintf_r+0x44>
 800513e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005140:	e71c      	b.n	8004f7c <_vfiprintf_r+0x48>
 8005142:	ab03      	add	r3, sp, #12
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	462a      	mov	r2, r5
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <_vfiprintf_r+0x22c>)
 800514a:	a904      	add	r1, sp, #16
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f879 	bl	8005244 <_printf_i>
 8005152:	e7e4      	b.n	800511e <_vfiprintf_r+0x1ea>
 8005154:	08005ce1 	.word	0x08005ce1
 8005158:	08005ceb 	.word	0x08005ceb
 800515c:	00000000 	.word	0x00000000
 8005160:	08004f0f 	.word	0x08004f0f
 8005164:	08005ce7 	.word	0x08005ce7

08005168 <_printf_common>:
 8005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	4616      	mov	r6, r2
 800516e:	4699      	mov	r9, r3
 8005170:	688a      	ldr	r2, [r1, #8]
 8005172:	690b      	ldr	r3, [r1, #16]
 8005174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005178:	4293      	cmp	r3, r2
 800517a:	bfb8      	it	lt
 800517c:	4613      	movlt	r3, r2
 800517e:	6033      	str	r3, [r6, #0]
 8005180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005184:	4607      	mov	r7, r0
 8005186:	460c      	mov	r4, r1
 8005188:	b10a      	cbz	r2, 800518e <_printf_common+0x26>
 800518a:	3301      	adds	r3, #1
 800518c:	6033      	str	r3, [r6, #0]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	0699      	lsls	r1, r3, #26
 8005192:	bf42      	ittt	mi
 8005194:	6833      	ldrmi	r3, [r6, #0]
 8005196:	3302      	addmi	r3, #2
 8005198:	6033      	strmi	r3, [r6, #0]
 800519a:	6825      	ldr	r5, [r4, #0]
 800519c:	f015 0506 	ands.w	r5, r5, #6
 80051a0:	d106      	bne.n	80051b0 <_printf_common+0x48>
 80051a2:	f104 0a19 	add.w	sl, r4, #25
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	6832      	ldr	r2, [r6, #0]
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	42ab      	cmp	r3, r5
 80051ae:	dc26      	bgt.n	80051fe <_printf_common+0x96>
 80051b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b4:	1e13      	subs	r3, r2, #0
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	bf18      	it	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	0692      	lsls	r2, r2, #26
 80051be:	d42b      	bmi.n	8005218 <_printf_common+0xb0>
 80051c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c4:	4649      	mov	r1, r9
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c0      	blx	r8
 80051ca:	3001      	adds	r0, #1
 80051cc:	d01e      	beq.n	800520c <_printf_common+0xa4>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	6922      	ldr	r2, [r4, #16]
 80051d2:	f003 0306 	and.w	r3, r3, #6
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	bf02      	ittt	eq
 80051da:	68e5      	ldreq	r5, [r4, #12]
 80051dc:	6833      	ldreq	r3, [r6, #0]
 80051de:	1aed      	subeq	r5, r5, r3
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	bf0c      	ite	eq
 80051e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e8:	2500      	movne	r5, #0
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bfc4      	itt	gt
 80051ee:	1a9b      	subgt	r3, r3, r2
 80051f0:	18ed      	addgt	r5, r5, r3
 80051f2:	2600      	movs	r6, #0
 80051f4:	341a      	adds	r4, #26
 80051f6:	42b5      	cmp	r5, r6
 80051f8:	d11a      	bne.n	8005230 <_printf_common+0xc8>
 80051fa:	2000      	movs	r0, #0
 80051fc:	e008      	b.n	8005210 <_printf_common+0xa8>
 80051fe:	2301      	movs	r3, #1
 8005200:	4652      	mov	r2, sl
 8005202:	4649      	mov	r1, r9
 8005204:	4638      	mov	r0, r7
 8005206:	47c0      	blx	r8
 8005208:	3001      	adds	r0, #1
 800520a:	d103      	bne.n	8005214 <_printf_common+0xac>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	3501      	adds	r5, #1
 8005216:	e7c6      	b.n	80051a6 <_printf_common+0x3e>
 8005218:	18e1      	adds	r1, r4, r3
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	2030      	movs	r0, #48	; 0x30
 800521e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005222:	4422      	add	r2, r4
 8005224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800522c:	3302      	adds	r3, #2
 800522e:	e7c7      	b.n	80051c0 <_printf_common+0x58>
 8005230:	2301      	movs	r3, #1
 8005232:	4622      	mov	r2, r4
 8005234:	4649      	mov	r1, r9
 8005236:	4638      	mov	r0, r7
 8005238:	47c0      	blx	r8
 800523a:	3001      	adds	r0, #1
 800523c:	d0e6      	beq.n	800520c <_printf_common+0xa4>
 800523e:	3601      	adds	r6, #1
 8005240:	e7d9      	b.n	80051f6 <_printf_common+0x8e>
	...

08005244 <_printf_i>:
 8005244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	7e0f      	ldrb	r7, [r1, #24]
 800524a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800524c:	2f78      	cmp	r7, #120	; 0x78
 800524e:	4691      	mov	r9, r2
 8005250:	4680      	mov	r8, r0
 8005252:	460c      	mov	r4, r1
 8005254:	469a      	mov	sl, r3
 8005256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800525a:	d807      	bhi.n	800526c <_printf_i+0x28>
 800525c:	2f62      	cmp	r7, #98	; 0x62
 800525e:	d80a      	bhi.n	8005276 <_printf_i+0x32>
 8005260:	2f00      	cmp	r7, #0
 8005262:	f000 80d4 	beq.w	800540e <_printf_i+0x1ca>
 8005266:	2f58      	cmp	r7, #88	; 0x58
 8005268:	f000 80c0 	beq.w	80053ec <_printf_i+0x1a8>
 800526c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005274:	e03a      	b.n	80052ec <_printf_i+0xa8>
 8005276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800527a:	2b15      	cmp	r3, #21
 800527c:	d8f6      	bhi.n	800526c <_printf_i+0x28>
 800527e:	a101      	add	r1, pc, #4	; (adr r1, 8005284 <_printf_i+0x40>)
 8005280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052f1 	.word	0x080052f1
 800528c:	0800526d 	.word	0x0800526d
 8005290:	0800526d 	.word	0x0800526d
 8005294:	0800526d 	.word	0x0800526d
 8005298:	0800526d 	.word	0x0800526d
 800529c:	080052f1 	.word	0x080052f1
 80052a0:	0800526d 	.word	0x0800526d
 80052a4:	0800526d 	.word	0x0800526d
 80052a8:	0800526d 	.word	0x0800526d
 80052ac:	0800526d 	.word	0x0800526d
 80052b0:	080053f5 	.word	0x080053f5
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	080053af 	.word	0x080053af
 80052bc:	0800526d 	.word	0x0800526d
 80052c0:	0800526d 	.word	0x0800526d
 80052c4:	08005417 	.word	0x08005417
 80052c8:	0800526d 	.word	0x0800526d
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	0800526d 	.word	0x0800526d
 80052d4:	0800526d 	.word	0x0800526d
 80052d8:	080053b7 	.word	0x080053b7
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	1d1a      	adds	r2, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	602a      	str	r2, [r5, #0]
 80052e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ec:	2301      	movs	r3, #1
 80052ee:	e09f      	b.n	8005430 <_printf_i+0x1ec>
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	0607      	lsls	r7, r0, #24
 80052f6:	f103 0104 	add.w	r1, r3, #4
 80052fa:	6029      	str	r1, [r5, #0]
 80052fc:	d501      	bpl.n	8005302 <_printf_i+0xbe>
 80052fe:	681e      	ldr	r6, [r3, #0]
 8005300:	e003      	b.n	800530a <_printf_i+0xc6>
 8005302:	0646      	lsls	r6, r0, #25
 8005304:	d5fb      	bpl.n	80052fe <_printf_i+0xba>
 8005306:	f9b3 6000 	ldrsh.w	r6, [r3]
 800530a:	2e00      	cmp	r6, #0
 800530c:	da03      	bge.n	8005316 <_printf_i+0xd2>
 800530e:	232d      	movs	r3, #45	; 0x2d
 8005310:	4276      	negs	r6, r6
 8005312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005316:	485a      	ldr	r0, [pc, #360]	; (8005480 <_printf_i+0x23c>)
 8005318:	230a      	movs	r3, #10
 800531a:	e012      	b.n	8005342 <_printf_i+0xfe>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	1d19      	adds	r1, r3, #4
 8005322:	6029      	str	r1, [r5, #0]
 8005324:	0605      	lsls	r5, r0, #24
 8005326:	d501      	bpl.n	800532c <_printf_i+0xe8>
 8005328:	681e      	ldr	r6, [r3, #0]
 800532a:	e002      	b.n	8005332 <_printf_i+0xee>
 800532c:	0641      	lsls	r1, r0, #25
 800532e:	d5fb      	bpl.n	8005328 <_printf_i+0xe4>
 8005330:	881e      	ldrh	r6, [r3, #0]
 8005332:	4853      	ldr	r0, [pc, #332]	; (8005480 <_printf_i+0x23c>)
 8005334:	2f6f      	cmp	r7, #111	; 0x6f
 8005336:	bf0c      	ite	eq
 8005338:	2308      	moveq	r3, #8
 800533a:	230a      	movne	r3, #10
 800533c:	2100      	movs	r1, #0
 800533e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005342:	6865      	ldr	r5, [r4, #4]
 8005344:	60a5      	str	r5, [r4, #8]
 8005346:	2d00      	cmp	r5, #0
 8005348:	bfa2      	ittt	ge
 800534a:	6821      	ldrge	r1, [r4, #0]
 800534c:	f021 0104 	bicge.w	r1, r1, #4
 8005350:	6021      	strge	r1, [r4, #0]
 8005352:	b90e      	cbnz	r6, 8005358 <_printf_i+0x114>
 8005354:	2d00      	cmp	r5, #0
 8005356:	d04b      	beq.n	80053f0 <_printf_i+0x1ac>
 8005358:	4615      	mov	r5, r2
 800535a:	fbb6 f1f3 	udiv	r1, r6, r3
 800535e:	fb03 6711 	mls	r7, r3, r1, r6
 8005362:	5dc7      	ldrb	r7, [r0, r7]
 8005364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005368:	4637      	mov	r7, r6
 800536a:	42bb      	cmp	r3, r7
 800536c:	460e      	mov	r6, r1
 800536e:	d9f4      	bls.n	800535a <_printf_i+0x116>
 8005370:	2b08      	cmp	r3, #8
 8005372:	d10b      	bne.n	800538c <_printf_i+0x148>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07de      	lsls	r6, r3, #31
 8005378:	d508      	bpl.n	800538c <_printf_i+0x148>
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	6861      	ldr	r1, [r4, #4]
 800537e:	4299      	cmp	r1, r3
 8005380:	bfde      	ittt	le
 8005382:	2330      	movle	r3, #48	; 0x30
 8005384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800538c:	1b52      	subs	r2, r2, r5
 800538e:	6122      	str	r2, [r4, #16]
 8005390:	f8cd a000 	str.w	sl, [sp]
 8005394:	464b      	mov	r3, r9
 8005396:	aa03      	add	r2, sp, #12
 8005398:	4621      	mov	r1, r4
 800539a:	4640      	mov	r0, r8
 800539c:	f7ff fee4 	bl	8005168 <_printf_common>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d14a      	bne.n	800543a <_printf_i+0x1f6>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	b004      	add	sp, #16
 80053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	f043 0320 	orr.w	r3, r3, #32
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	4833      	ldr	r0, [pc, #204]	; (8005484 <_printf_i+0x240>)
 80053b8:	2778      	movs	r7, #120	; 0x78
 80053ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6829      	ldr	r1, [r5, #0]
 80053c2:	061f      	lsls	r7, r3, #24
 80053c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053c8:	d402      	bmi.n	80053d0 <_printf_i+0x18c>
 80053ca:	065f      	lsls	r7, r3, #25
 80053cc:	bf48      	it	mi
 80053ce:	b2b6      	uxthmi	r6, r6
 80053d0:	07df      	lsls	r7, r3, #31
 80053d2:	bf48      	it	mi
 80053d4:	f043 0320 	orrmi.w	r3, r3, #32
 80053d8:	6029      	str	r1, [r5, #0]
 80053da:	bf48      	it	mi
 80053dc:	6023      	strmi	r3, [r4, #0]
 80053de:	b91e      	cbnz	r6, 80053e8 <_printf_i+0x1a4>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f023 0320 	bic.w	r3, r3, #32
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	2310      	movs	r3, #16
 80053ea:	e7a7      	b.n	800533c <_printf_i+0xf8>
 80053ec:	4824      	ldr	r0, [pc, #144]	; (8005480 <_printf_i+0x23c>)
 80053ee:	e7e4      	b.n	80053ba <_printf_i+0x176>
 80053f0:	4615      	mov	r5, r2
 80053f2:	e7bd      	b.n	8005370 <_printf_i+0x12c>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	6826      	ldr	r6, [r4, #0]
 80053f8:	6961      	ldr	r1, [r4, #20]
 80053fa:	1d18      	adds	r0, r3, #4
 80053fc:	6028      	str	r0, [r5, #0]
 80053fe:	0635      	lsls	r5, r6, #24
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	d501      	bpl.n	8005408 <_printf_i+0x1c4>
 8005404:	6019      	str	r1, [r3, #0]
 8005406:	e002      	b.n	800540e <_printf_i+0x1ca>
 8005408:	0670      	lsls	r0, r6, #25
 800540a:	d5fb      	bpl.n	8005404 <_printf_i+0x1c0>
 800540c:	8019      	strh	r1, [r3, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	6123      	str	r3, [r4, #16]
 8005412:	4615      	mov	r5, r2
 8005414:	e7bc      	b.n	8005390 <_printf_i+0x14c>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	1d1a      	adds	r2, r3, #4
 800541a:	602a      	str	r2, [r5, #0]
 800541c:	681d      	ldr	r5, [r3, #0]
 800541e:	6862      	ldr	r2, [r4, #4]
 8005420:	2100      	movs	r1, #0
 8005422:	4628      	mov	r0, r5
 8005424:	f7fa fee4 	bl	80001f0 <memchr>
 8005428:	b108      	cbz	r0, 800542e <_printf_i+0x1ea>
 800542a:	1b40      	subs	r0, r0, r5
 800542c:	6060      	str	r0, [r4, #4]
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	2300      	movs	r3, #0
 8005434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005438:	e7aa      	b.n	8005390 <_printf_i+0x14c>
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	462a      	mov	r2, r5
 800543e:	4649      	mov	r1, r9
 8005440:	4640      	mov	r0, r8
 8005442:	47d0      	blx	sl
 8005444:	3001      	adds	r0, #1
 8005446:	d0ad      	beq.n	80053a4 <_printf_i+0x160>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	d413      	bmi.n	8005476 <_printf_i+0x232>
 800544e:	68e0      	ldr	r0, [r4, #12]
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	4298      	cmp	r0, r3
 8005454:	bfb8      	it	lt
 8005456:	4618      	movlt	r0, r3
 8005458:	e7a6      	b.n	80053a8 <_printf_i+0x164>
 800545a:	2301      	movs	r3, #1
 800545c:	4632      	mov	r2, r6
 800545e:	4649      	mov	r1, r9
 8005460:	4640      	mov	r0, r8
 8005462:	47d0      	blx	sl
 8005464:	3001      	adds	r0, #1
 8005466:	d09d      	beq.n	80053a4 <_printf_i+0x160>
 8005468:	3501      	adds	r5, #1
 800546a:	68e3      	ldr	r3, [r4, #12]
 800546c:	9903      	ldr	r1, [sp, #12]
 800546e:	1a5b      	subs	r3, r3, r1
 8005470:	42ab      	cmp	r3, r5
 8005472:	dcf2      	bgt.n	800545a <_printf_i+0x216>
 8005474:	e7eb      	b.n	800544e <_printf_i+0x20a>
 8005476:	2500      	movs	r5, #0
 8005478:	f104 0619 	add.w	r6, r4, #25
 800547c:	e7f5      	b.n	800546a <_printf_i+0x226>
 800547e:	bf00      	nop
 8005480:	08005cf2 	.word	0x08005cf2
 8005484:	08005d03 	.word	0x08005d03

08005488 <__sflush_r>:
 8005488:	898a      	ldrh	r2, [r1, #12]
 800548a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	4605      	mov	r5, r0
 8005490:	0710      	lsls	r0, r2, #28
 8005492:	460c      	mov	r4, r1
 8005494:	d458      	bmi.n	8005548 <__sflush_r+0xc0>
 8005496:	684b      	ldr	r3, [r1, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dc05      	bgt.n	80054a8 <__sflush_r+0x20>
 800549c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dc02      	bgt.n	80054a8 <__sflush_r+0x20>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d0f9      	beq.n	80054a2 <__sflush_r+0x1a>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054b4:	682f      	ldr	r7, [r5, #0]
 80054b6:	6a21      	ldr	r1, [r4, #32]
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	d032      	beq.n	8005522 <__sflush_r+0x9a>
 80054bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	075a      	lsls	r2, r3, #29
 80054c2:	d505      	bpl.n	80054d0 <__sflush_r+0x48>
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	1ac0      	subs	r0, r0, r3
 80054c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054ca:	b10b      	cbz	r3, 80054d0 <__sflush_r+0x48>
 80054cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ce:	1ac0      	subs	r0, r0, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	4602      	mov	r2, r0
 80054d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d6:	6a21      	ldr	r1, [r4, #32]
 80054d8:	4628      	mov	r0, r5
 80054da:	47b0      	blx	r6
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	d106      	bne.n	80054f0 <__sflush_r+0x68>
 80054e2:	6829      	ldr	r1, [r5, #0]
 80054e4:	291d      	cmp	r1, #29
 80054e6:	d82b      	bhi.n	8005540 <__sflush_r+0xb8>
 80054e8:	4a29      	ldr	r2, [pc, #164]	; (8005590 <__sflush_r+0x108>)
 80054ea:	410a      	asrs	r2, r1
 80054ec:	07d6      	lsls	r6, r2, #31
 80054ee:	d427      	bmi.n	8005540 <__sflush_r+0xb8>
 80054f0:	2200      	movs	r2, #0
 80054f2:	6062      	str	r2, [r4, #4]
 80054f4:	04d9      	lsls	r1, r3, #19
 80054f6:	6922      	ldr	r2, [r4, #16]
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	d504      	bpl.n	8005506 <__sflush_r+0x7e>
 80054fc:	1c42      	adds	r2, r0, #1
 80054fe:	d101      	bne.n	8005504 <__sflush_r+0x7c>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b903      	cbnz	r3, 8005506 <__sflush_r+0x7e>
 8005504:	6560      	str	r0, [r4, #84]	; 0x54
 8005506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005508:	602f      	str	r7, [r5, #0]
 800550a:	2900      	cmp	r1, #0
 800550c:	d0c9      	beq.n	80054a2 <__sflush_r+0x1a>
 800550e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005512:	4299      	cmp	r1, r3
 8005514:	d002      	beq.n	800551c <__sflush_r+0x94>
 8005516:	4628      	mov	r0, r5
 8005518:	f7ff fbe2 	bl	8004ce0 <_free_r>
 800551c:	2000      	movs	r0, #0
 800551e:	6360      	str	r0, [r4, #52]	; 0x34
 8005520:	e7c0      	b.n	80054a4 <__sflush_r+0x1c>
 8005522:	2301      	movs	r3, #1
 8005524:	4628      	mov	r0, r5
 8005526:	47b0      	blx	r6
 8005528:	1c41      	adds	r1, r0, #1
 800552a:	d1c8      	bne.n	80054be <__sflush_r+0x36>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c5      	beq.n	80054be <__sflush_r+0x36>
 8005532:	2b1d      	cmp	r3, #29
 8005534:	d001      	beq.n	800553a <__sflush_r+0xb2>
 8005536:	2b16      	cmp	r3, #22
 8005538:	d101      	bne.n	800553e <__sflush_r+0xb6>
 800553a:	602f      	str	r7, [r5, #0]
 800553c:	e7b1      	b.n	80054a2 <__sflush_r+0x1a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e7ad      	b.n	80054a4 <__sflush_r+0x1c>
 8005548:	690f      	ldr	r7, [r1, #16]
 800554a:	2f00      	cmp	r7, #0
 800554c:	d0a9      	beq.n	80054a2 <__sflush_r+0x1a>
 800554e:	0793      	lsls	r3, r2, #30
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	bf08      	it	eq
 8005554:	694b      	ldreq	r3, [r1, #20]
 8005556:	600f      	str	r7, [r1, #0]
 8005558:	bf18      	it	ne
 800555a:	2300      	movne	r3, #0
 800555c:	eba6 0807 	sub.w	r8, r6, r7
 8005560:	608b      	str	r3, [r1, #8]
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	dd9c      	ble.n	80054a2 <__sflush_r+0x1a>
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800556c:	4643      	mov	r3, r8
 800556e:	463a      	mov	r2, r7
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	2800      	cmp	r0, #0
 8005576:	dc06      	bgt.n	8005586 <__sflush_r+0xfe>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e78e      	b.n	80054a4 <__sflush_r+0x1c>
 8005586:	4407      	add	r7, r0
 8005588:	eba8 0800 	sub.w	r8, r8, r0
 800558c:	e7e9      	b.n	8005562 <__sflush_r+0xda>
 800558e:	bf00      	nop
 8005590:	dfbffffe 	.word	0xdfbffffe

08005594 <_fflush_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	b913      	cbnz	r3, 80055a4 <_fflush_r+0x10>
 800559e:	2500      	movs	r5, #0
 80055a0:	4628      	mov	r0, r5
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	b118      	cbz	r0, 80055ae <_fflush_r+0x1a>
 80055a6:	6a03      	ldr	r3, [r0, #32]
 80055a8:	b90b      	cbnz	r3, 80055ae <_fflush_r+0x1a>
 80055aa:	f7ff f959 	bl	8004860 <__sinit>
 80055ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f3      	beq.n	800559e <_fflush_r+0xa>
 80055b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b8:	07d0      	lsls	r0, r2, #31
 80055ba:	d404      	bmi.n	80055c6 <_fflush_r+0x32>
 80055bc:	0599      	lsls	r1, r3, #22
 80055be:	d402      	bmi.n	80055c6 <_fflush_r+0x32>
 80055c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c2:	f7ff fb6c 	bl	8004c9e <__retarget_lock_acquire_recursive>
 80055c6:	4628      	mov	r0, r5
 80055c8:	4621      	mov	r1, r4
 80055ca:	f7ff ff5d 	bl	8005488 <__sflush_r>
 80055ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d0:	07da      	lsls	r2, r3, #31
 80055d2:	4605      	mov	r5, r0
 80055d4:	d4e4      	bmi.n	80055a0 <_fflush_r+0xc>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	d4e1      	bmi.n	80055a0 <_fflush_r+0xc>
 80055dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055de:	f7ff fb5f 	bl	8004ca0 <__retarget_lock_release_recursive>
 80055e2:	e7dd      	b.n	80055a0 <_fflush_r+0xc>

080055e4 <fiprintf>:
 80055e4:	b40e      	push	{r1, r2, r3}
 80055e6:	b503      	push	{r0, r1, lr}
 80055e8:	4601      	mov	r1, r0
 80055ea:	ab03      	add	r3, sp, #12
 80055ec:	4805      	ldr	r0, [pc, #20]	; (8005604 <fiprintf+0x20>)
 80055ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f7ff fc9d 	bl	8004f34 <_vfiprintf_r>
 80055fa:	b002      	add	sp, #8
 80055fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005600:	b003      	add	sp, #12
 8005602:	4770      	bx	lr
 8005604:	2000008c 	.word	0x2000008c

08005608 <_getc_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	4605      	mov	r5, r0
 800560e:	b118      	cbz	r0, 8005618 <_getc_r+0x10>
 8005610:	6a03      	ldr	r3, [r0, #32]
 8005612:	b90b      	cbnz	r3, 8005618 <_getc_r+0x10>
 8005614:	f7ff f924 	bl	8004860 <__sinit>
 8005618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800561a:	07d8      	lsls	r0, r3, #31
 800561c:	d405      	bmi.n	800562a <_getc_r+0x22>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	0599      	lsls	r1, r3, #22
 8005622:	d402      	bmi.n	800562a <_getc_r+0x22>
 8005624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005626:	f7ff fb3a 	bl	8004c9e <__retarget_lock_acquire_recursive>
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	3b01      	subs	r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	da0f      	bge.n	8005654 <_getc_r+0x4c>
 8005634:	4628      	mov	r0, r5
 8005636:	4621      	mov	r1, r4
 8005638:	f000 f8a7 	bl	800578a <__srget_r>
 800563c:	4605      	mov	r5, r0
 800563e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005640:	07da      	lsls	r2, r3, #31
 8005642:	d405      	bmi.n	8005650 <_getc_r+0x48>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	059b      	lsls	r3, r3, #22
 8005648:	d402      	bmi.n	8005650 <_getc_r+0x48>
 800564a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564c:	f7ff fb28 	bl	8004ca0 <__retarget_lock_release_recursive>
 8005650:	4628      	mov	r0, r5
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	6022      	str	r2, [r4, #0]
 800565a:	781d      	ldrb	r5, [r3, #0]
 800565c:	e7ef      	b.n	800563e <_getc_r+0x36>

0800565e <__swhatbuf_r>:
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005666:	2900      	cmp	r1, #0
 8005668:	b096      	sub	sp, #88	; 0x58
 800566a:	4615      	mov	r5, r2
 800566c:	461e      	mov	r6, r3
 800566e:	da0d      	bge.n	800568c <__swhatbuf_r+0x2e>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	bf0c      	ite	eq
 800567c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005680:	2340      	movne	r3, #64	; 0x40
 8005682:	2000      	movs	r0, #0
 8005684:	6031      	str	r1, [r6, #0]
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	b016      	add	sp, #88	; 0x58
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	466a      	mov	r2, sp
 800568e:	f000 f929 	bl	80058e4 <_fstat_r>
 8005692:	2800      	cmp	r0, #0
 8005694:	dbec      	blt.n	8005670 <__swhatbuf_r+0x12>
 8005696:	9901      	ldr	r1, [sp, #4]
 8005698:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800569c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80056a0:	4259      	negs	r1, r3
 80056a2:	4159      	adcs	r1, r3
 80056a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a8:	e7eb      	b.n	8005682 <__swhatbuf_r+0x24>

080056aa <__smakebuf_r>:
 80056aa:	898b      	ldrh	r3, [r1, #12]
 80056ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056ae:	079d      	lsls	r5, r3, #30
 80056b0:	4606      	mov	r6, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	d507      	bpl.n	80056c6 <__smakebuf_r+0x1c>
 80056b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	2301      	movs	r3, #1
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	b002      	add	sp, #8
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	ab01      	add	r3, sp, #4
 80056c8:	466a      	mov	r2, sp
 80056ca:	f7ff ffc8 	bl	800565e <__swhatbuf_r>
 80056ce:	9900      	ldr	r1, [sp, #0]
 80056d0:	4605      	mov	r5, r0
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff fb78 	bl	8004dc8 <_malloc_r>
 80056d8:	b948      	cbnz	r0, 80056ee <__smakebuf_r+0x44>
 80056da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056de:	059a      	lsls	r2, r3, #22
 80056e0:	d4ef      	bmi.n	80056c2 <__smakebuf_r+0x18>
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	f043 0302 	orr.w	r3, r3, #2
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	e7e3      	b.n	80056b6 <__smakebuf_r+0xc>
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	6020      	str	r0, [r4, #0]
 80056f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	9b00      	ldr	r3, [sp, #0]
 80056fa:	6163      	str	r3, [r4, #20]
 80056fc:	9b01      	ldr	r3, [sp, #4]
 80056fe:	6120      	str	r0, [r4, #16]
 8005700:	b15b      	cbz	r3, 800571a <__smakebuf_r+0x70>
 8005702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005706:	4630      	mov	r0, r6
 8005708:	f000 f8fe 	bl	8005908 <_isatty_r>
 800570c:	b128      	cbz	r0, 800571a <__smakebuf_r+0x70>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f023 0303 	bic.w	r3, r3, #3
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	431d      	orrs	r5, r3
 800571e:	81a5      	strh	r5, [r4, #12]
 8005720:	e7cf      	b.n	80056c2 <__smakebuf_r+0x18>

08005722 <_putc_r>:
 8005722:	b570      	push	{r4, r5, r6, lr}
 8005724:	460d      	mov	r5, r1
 8005726:	4614      	mov	r4, r2
 8005728:	4606      	mov	r6, r0
 800572a:	b118      	cbz	r0, 8005734 <_putc_r+0x12>
 800572c:	6a03      	ldr	r3, [r0, #32]
 800572e:	b90b      	cbnz	r3, 8005734 <_putc_r+0x12>
 8005730:	f7ff f896 	bl	8004860 <__sinit>
 8005734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005736:	07d8      	lsls	r0, r3, #31
 8005738:	d405      	bmi.n	8005746 <_putc_r+0x24>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	0599      	lsls	r1, r3, #22
 800573e:	d402      	bmi.n	8005746 <_putc_r+0x24>
 8005740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005742:	f7ff faac 	bl	8004c9e <__retarget_lock_acquire_recursive>
 8005746:	68a3      	ldr	r3, [r4, #8]
 8005748:	3b01      	subs	r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	60a3      	str	r3, [r4, #8]
 800574e:	da05      	bge.n	800575c <_putc_r+0x3a>
 8005750:	69a2      	ldr	r2, [r4, #24]
 8005752:	4293      	cmp	r3, r2
 8005754:	db12      	blt.n	800577c <_putc_r+0x5a>
 8005756:	b2eb      	uxtb	r3, r5
 8005758:	2b0a      	cmp	r3, #10
 800575a:	d00f      	beq.n	800577c <_putc_r+0x5a>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	701d      	strb	r5, [r3, #0]
 8005764:	b2ed      	uxtb	r5, r5
 8005766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005768:	07da      	lsls	r2, r3, #31
 800576a:	d405      	bmi.n	8005778 <_putc_r+0x56>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	059b      	lsls	r3, r3, #22
 8005770:	d402      	bmi.n	8005778 <_putc_r+0x56>
 8005772:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005774:	f7ff fa94 	bl	8004ca0 <__retarget_lock_release_recursive>
 8005778:	4628      	mov	r0, r5
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	4629      	mov	r1, r5
 800577e:	4622      	mov	r2, r4
 8005780:	4630      	mov	r0, r6
 8005782:	f000 f81a 	bl	80057ba <__swbuf_r>
 8005786:	4605      	mov	r5, r0
 8005788:	e7ed      	b.n	8005766 <_putc_r+0x44>

0800578a <__srget_r>:
 800578a:	b538      	push	{r3, r4, r5, lr}
 800578c:	460c      	mov	r4, r1
 800578e:	4605      	mov	r5, r0
 8005790:	b118      	cbz	r0, 800579a <__srget_r+0x10>
 8005792:	6a03      	ldr	r3, [r0, #32]
 8005794:	b90b      	cbnz	r3, 800579a <__srget_r+0x10>
 8005796:	f7ff f863 	bl	8004860 <__sinit>
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 f8e9 	bl	8005974 <__srefill_r>
 80057a2:	b938      	cbnz	r0, 80057b4 <__srget_r+0x2a>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	6063      	str	r3, [r4, #4]
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	7818      	ldrb	r0, [r3, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e7fb      	b.n	80057b2 <__srget_r+0x28>

080057ba <__swbuf_r>:
 80057ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057bc:	460e      	mov	r6, r1
 80057be:	4614      	mov	r4, r2
 80057c0:	4605      	mov	r5, r0
 80057c2:	b118      	cbz	r0, 80057cc <__swbuf_r+0x12>
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	b90b      	cbnz	r3, 80057cc <__swbuf_r+0x12>
 80057c8:	f7ff f84a 	bl	8004860 <__sinit>
 80057cc:	69a3      	ldr	r3, [r4, #24]
 80057ce:	60a3      	str	r3, [r4, #8]
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	071a      	lsls	r2, r3, #28
 80057d4:	d525      	bpl.n	8005822 <__swbuf_r+0x68>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	b31b      	cbz	r3, 8005822 <__swbuf_r+0x68>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	6922      	ldr	r2, [r4, #16]
 80057de:	1a98      	subs	r0, r3, r2
 80057e0:	6963      	ldr	r3, [r4, #20]
 80057e2:	b2f6      	uxtb	r6, r6
 80057e4:	4283      	cmp	r3, r0
 80057e6:	4637      	mov	r7, r6
 80057e8:	dc04      	bgt.n	80057f4 <__swbuf_r+0x3a>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f7ff fed1 	bl	8005594 <_fflush_r>
 80057f2:	b9e0      	cbnz	r0, 800582e <__swbuf_r+0x74>
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	6022      	str	r2, [r4, #0]
 8005800:	701e      	strb	r6, [r3, #0]
 8005802:	6962      	ldr	r2, [r4, #20]
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	429a      	cmp	r2, r3
 8005808:	d004      	beq.n	8005814 <__swbuf_r+0x5a>
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	07db      	lsls	r3, r3, #31
 800580e:	d506      	bpl.n	800581e <__swbuf_r+0x64>
 8005810:	2e0a      	cmp	r6, #10
 8005812:	d104      	bne.n	800581e <__swbuf_r+0x64>
 8005814:	4621      	mov	r1, r4
 8005816:	4628      	mov	r0, r5
 8005818:	f7ff febc 	bl	8005594 <_fflush_r>
 800581c:	b938      	cbnz	r0, 800582e <__swbuf_r+0x74>
 800581e:	4638      	mov	r0, r7
 8005820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f805 	bl	8005834 <__swsetup_r>
 800582a:	2800      	cmp	r0, #0
 800582c:	d0d5      	beq.n	80057da <__swbuf_r+0x20>
 800582e:	f04f 37ff 	mov.w	r7, #4294967295
 8005832:	e7f4      	b.n	800581e <__swbuf_r+0x64>

08005834 <__swsetup_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <__swsetup_r+0xac>)
 8005838:	4605      	mov	r5, r0
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	460c      	mov	r4, r1
 800583e:	b118      	cbz	r0, 8005848 <__swsetup_r+0x14>
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	b90b      	cbnz	r3, 8005848 <__swsetup_r+0x14>
 8005844:	f7ff f80c 	bl	8004860 <__sinit>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800584e:	0718      	lsls	r0, r3, #28
 8005850:	d422      	bmi.n	8005898 <__swsetup_r+0x64>
 8005852:	06d9      	lsls	r1, r3, #27
 8005854:	d407      	bmi.n	8005866 <__swsetup_r+0x32>
 8005856:	2309      	movs	r3, #9
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	e034      	b.n	80058d0 <__swsetup_r+0x9c>
 8005866:	0758      	lsls	r0, r3, #29
 8005868:	d512      	bpl.n	8005890 <__swsetup_r+0x5c>
 800586a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586c:	b141      	cbz	r1, 8005880 <__swsetup_r+0x4c>
 800586e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005872:	4299      	cmp	r1, r3
 8005874:	d002      	beq.n	800587c <__swsetup_r+0x48>
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff fa32 	bl	8004ce0 <_free_r>
 800587c:	2300      	movs	r3, #0
 800587e:	6363      	str	r3, [r4, #52]	; 0x34
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	2300      	movs	r3, #0
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f043 0308 	orr.w	r3, r3, #8
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	b94b      	cbnz	r3, 80058b0 <__swsetup_r+0x7c>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a6:	d003      	beq.n	80058b0 <__swsetup_r+0x7c>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7ff fefd 	bl	80056aa <__smakebuf_r>
 80058b0:	89a0      	ldrh	r0, [r4, #12]
 80058b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058b6:	f010 0301 	ands.w	r3, r0, #1
 80058ba:	d00a      	beq.n	80058d2 <__swsetup_r+0x9e>
 80058bc:	2300      	movs	r3, #0
 80058be:	60a3      	str	r3, [r4, #8]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	425b      	negs	r3, r3
 80058c4:	61a3      	str	r3, [r4, #24]
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	b943      	cbnz	r3, 80058dc <__swsetup_r+0xa8>
 80058ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058ce:	d1c4      	bne.n	800585a <__swsetup_r+0x26>
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	0781      	lsls	r1, r0, #30
 80058d4:	bf58      	it	pl
 80058d6:	6963      	ldrpl	r3, [r4, #20]
 80058d8:	60a3      	str	r3, [r4, #8]
 80058da:	e7f4      	b.n	80058c6 <__swsetup_r+0x92>
 80058dc:	2000      	movs	r0, #0
 80058de:	e7f7      	b.n	80058d0 <__swsetup_r+0x9c>
 80058e0:	2000008c 	.word	0x2000008c

080058e4 <_fstat_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	; (8005904 <_fstat_r+0x20>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	f7fb faf3 	bl	8000edc <_fstat>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d102      	bne.n	8005900 <_fstat_r+0x1c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	b103      	cbz	r3, 8005900 <_fstat_r+0x1c>
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	200002ec 	.word	0x200002ec

08005908 <_isatty_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	; (8005924 <_isatty_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb fa50 	bl	8000db8 <_isatty>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_isatty_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_isatty_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200002ec 	.word	0x200002ec

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb fc3c 	bl	80011b0 <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200002ec 	.word	0x200002ec

08005948 <abort>:
 8005948:	b508      	push	{r3, lr}
 800594a:	2006      	movs	r0, #6
 800594c:	f000 f8b2 	bl	8005ab4 <raise>
 8005950:	2001      	movs	r0, #1
 8005952:	f7fb fc23 	bl	800119c <_exit>
	...

08005958 <lflush>:
 8005958:	898b      	ldrh	r3, [r1, #12]
 800595a:	f003 0309 	and.w	r3, r3, #9
 800595e:	2b09      	cmp	r3, #9
 8005960:	d103      	bne.n	800596a <lflush+0x12>
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <lflush+0x18>)
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	f7ff be15 	b.w	8005594 <_fflush_r>
 800596a:	2000      	movs	r0, #0
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	2000008c 	.word	0x2000008c

08005974 <__srefill_r>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	460c      	mov	r4, r1
 8005978:	4605      	mov	r5, r0
 800597a:	b118      	cbz	r0, 8005984 <__srefill_r+0x10>
 800597c:	6a03      	ldr	r3, [r0, #32]
 800597e:	b90b      	cbnz	r3, 8005984 <__srefill_r+0x10>
 8005980:	f7fe ff6e 	bl	8004860 <__sinit>
 8005984:	2300      	movs	r3, #0
 8005986:	6063      	str	r3, [r4, #4]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800598e:	069e      	lsls	r6, r3, #26
 8005990:	d502      	bpl.n	8005998 <__srefill_r+0x24>
 8005992:	f04f 30ff 	mov.w	r0, #4294967295
 8005996:	e05c      	b.n	8005a52 <__srefill_r+0xde>
 8005998:	0758      	lsls	r0, r3, #29
 800599a:	d448      	bmi.n	8005a2e <__srefill_r+0xba>
 800599c:	06d9      	lsls	r1, r3, #27
 800599e:	d405      	bmi.n	80059ac <__srefill_r+0x38>
 80059a0:	2309      	movs	r3, #9
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	e7f2      	b.n	8005992 <__srefill_r+0x1e>
 80059ac:	071a      	lsls	r2, r3, #28
 80059ae:	d50b      	bpl.n	80059c8 <__srefill_r+0x54>
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f7ff fdee 	bl	8005594 <_fflush_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d1ea      	bne.n	8005992 <__srefill_r+0x1e>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	60a0      	str	r0, [r4, #8]
 80059c0:	f023 0308 	bic.w	r3, r3, #8
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	61a0      	str	r0, [r4, #24]
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f043 0304 	orr.w	r3, r3, #4
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b91b      	cbnz	r3, 80059dc <__srefill_r+0x68>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7ff fe67 	bl	80056aa <__smakebuf_r>
 80059dc:	89a6      	ldrh	r6, [r4, #12]
 80059de:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80059e2:	07b3      	lsls	r3, r6, #30
 80059e4:	d00f      	beq.n	8005a06 <__srefill_r+0x92>
 80059e6:	2301      	movs	r3, #1
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <__srefill_r+0xe4>)
 80059ea:	491c      	ldr	r1, [pc, #112]	; (8005a5c <__srefill_r+0xe8>)
 80059ec:	481c      	ldr	r0, [pc, #112]	; (8005a60 <__srefill_r+0xec>)
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	f006 0609 	and.w	r6, r6, #9
 80059f4:	f7fe ff4c 	bl	8004890 <_fwalk_sglue>
 80059f8:	2e09      	cmp	r6, #9
 80059fa:	81a7      	strh	r7, [r4, #12]
 80059fc:	d103      	bne.n	8005a06 <__srefill_r+0x92>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f7ff fd41 	bl	8005488 <__sflush_r>
 8005a06:	6922      	ldr	r2, [r4, #16]
 8005a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a0a:	6963      	ldr	r3, [r4, #20]
 8005a0c:	6a21      	ldr	r1, [r4, #32]
 8005a0e:	6022      	str	r2, [r4, #0]
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b0      	blx	r6
 8005a14:	2800      	cmp	r0, #0
 8005a16:	6060      	str	r0, [r4, #4]
 8005a18:	dc1c      	bgt.n	8005a54 <__srefill_r+0xe0>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	bf17      	itett	ne
 8005a20:	2200      	movne	r2, #0
 8005a22:	f043 0320 	orreq.w	r3, r3, #32
 8005a26:	6062      	strne	r2, [r4, #4]
 8005a28:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005a2c:	e7bc      	b.n	80059a8 <__srefill_r+0x34>
 8005a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d0cd      	beq.n	80059d0 <__srefill_r+0x5c>
 8005a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d002      	beq.n	8005a42 <__srefill_r+0xce>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f7ff f94f 	bl	8004ce0 <_free_r>
 8005a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a44:	6063      	str	r3, [r4, #4]
 8005a46:	2000      	movs	r0, #0
 8005a48:	6360      	str	r0, [r4, #52]	; 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0c0      	beq.n	80059d0 <__srefill_r+0x5c>
 8005a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7fc      	b.n	8005a52 <__srefill_r+0xde>
 8005a58:	20000034 	.word	0x20000034
 8005a5c:	08005959 	.word	0x08005959
 8005a60:	20000040 	.word	0x20000040

08005a64 <_raise_r>:
 8005a64:	291f      	cmp	r1, #31
 8005a66:	b538      	push	{r3, r4, r5, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	d904      	bls.n	8005a78 <_raise_r+0x14>
 8005a6e:	2316      	movs	r3, #22
 8005a70:	6003      	str	r3, [r0, #0]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a7a:	b112      	cbz	r2, 8005a82 <_raise_r+0x1e>
 8005a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a80:	b94b      	cbnz	r3, 8005a96 <_raise_r+0x32>
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f830 	bl	8005ae8 <_getpid_r>
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a92:	f000 b817 	b.w	8005ac4 <_kill_r>
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d00a      	beq.n	8005ab0 <_raise_r+0x4c>
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	d103      	bne.n	8005aa6 <_raise_r+0x42>
 8005a9e:	2316      	movs	r3, #22
 8005aa0:	6003      	str	r3, [r0, #0]
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	e7e7      	b.n	8005a76 <_raise_r+0x12>
 8005aa6:	2400      	movs	r4, #0
 8005aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005aac:	4628      	mov	r0, r5
 8005aae:	4798      	blx	r3
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7e0      	b.n	8005a76 <_raise_r+0x12>

08005ab4 <raise>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <raise+0xc>)
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	f7ff bfd3 	b.w	8005a64 <_raise_r>
 8005abe:	bf00      	nop
 8005ac0:	2000008c 	.word	0x2000008c

08005ac4 <_kill_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	; (8005ae4 <_kill_r+0x20>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f7fb fb53 	bl	800117c <_kill>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d102      	bne.n	8005ae0 <_kill_r+0x1c>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b103      	cbz	r3, 8005ae0 <_kill_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200002ec 	.word	0x200002ec

08005ae8 <_getpid_r>:
 8005ae8:	f7fb bb40 	b.w	800116c <_getpid>

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
