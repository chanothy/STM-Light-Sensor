
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e94  08009e94  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e9c  08009e9c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08009ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200000e0  08009f84  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08009f84  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c363  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414c  00000000  00000000  0003c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00040608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001348  00000000  00000000  00041f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002662e  00000000  00000000  00043248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e309  00000000  00000000  00069876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c02  00000000  00000000  00087b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007544  00000000  00000000  0016c784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00173cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a54 	.word	0x08009a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08009a54 	.word	0x08009a54

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f005 fbff 	bl	8005da0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f005 fb15 	bl	8005bda <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f008 f942 	bl	8008844 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f008 f93a 	bl	8008844 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f008 f937 	bl	8008844 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	08009a6c 	.word	0x08009a6c
 80005ec:	08009a7c 	.word	0x08009a7c
 80005f0:	08009a8c 	.word	0x08009a8c

080005f4 <help_command>:
	{"sample",sample_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <help_command+0x54>)
 80005fe:	f008 f921 	bl	8008844 <iprintf>
	printf("help\n\r");
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <help_command+0x58>)
 8000604:	f008 f91e 	bl	8008844 <iprintf>
	printf("lof\n\r");
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <help_command+0x5c>)
 800060a:	f008 f91b 	bl	8008844 <iprintf>
	printf("lon\n\r");
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <help_command+0x60>)
 8000610:	f008 f918 	bl	8008844 <iprintf>
	printf("test\n\r");
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <help_command+0x64>)
 8000616:	f008 f915 	bl	8008844 <iprintf>
	printf("ts\n\r");
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <help_command+0x68>)
 800061c:	f008 f912 	bl	8008844 <iprintf>
	printf("ds\n\r");
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <help_command+0x6c>)
 8000622:	f008 f90f 	bl	8008844 <iprintf>
	printf("tsl237\n\r");
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <help_command+0x70>)
 8000628:	f008 f90c 	bl	8008844 <iprintf>
	printf("temp\n\r");
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <help_command+0x74>)
 800062e:	f008 f909 	bl	8008844 <iprintf>
	printf("battery\n\r");
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <help_command+0x78>)
 8000634:	f008 f906 	bl	8008844 <iprintf>
	printf("sample\n\r");
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <help_command+0x7c>)
 800063a:	f008 f903 	bl	8008844 <iprintf>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	08009ad4 	.word	0x08009ad4
 800064c:	08009aec 	.word	0x08009aec
 8000650:	08009af4 	.word	0x08009af4
 8000654:	08009afc 	.word	0x08009afc
 8000658:	08009b04 	.word	0x08009b04
 800065c:	08009b0c 	.word	0x08009b0c
 8000660:	08009b14 	.word	0x08009b14
 8000664:	08009b1c 	.word	0x08009b1c
 8000668:	08009b28 	.word	0x08009b28
 800066c:	08009b30 	.word	0x08009b30
 8000670:	08009b3c 	.word	0x08009b3c

08000674 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2108      	movs	r1, #8
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <lof_command+0x1c>)
 8000682:	f003 ffc9 	bl	8004618 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	48000400 	.word	0x48000400

08000694 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2108      	movs	r1, #8
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <lon_command+0x1c>)
 80006a2:	f003 ffb9 	bl	8004618 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400

080006b4 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <test_command+0x40>)
 80006be:	f008 f8c1 	bl	8008844 <iprintf>
	if (arguments) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d011      	beq.n	80006ec <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 80006c8:	490b      	ldr	r1, [pc, #44]	; (80006f8 <test_command+0x44>)
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f008 f9ce 	bl	8008a6c <strtok>
 80006d0:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006d2:	e008      	b.n	80006e6 <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <test_command+0x48>)
 80006d8:	f008 f8b4 	bl	8008844 <iprintf>
			pt = strtok (NULL, ",");
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <test_command+0x44>)
 80006de:	2000      	movs	r0, #0
 80006e0:	f008 f9c4 	bl	8008a6c <strtok>
 80006e4:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f3      	bne.n	80006d4 <test_command+0x20>
		}
	}
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08009b48 	.word	0x08009b48
 80006f8:	08009b58 	.word	0x08009b58
 80006fc:	08009b5c 	.word	0x08009b5c

08000700 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800070e:	492a      	ldr	r1, [pc, #168]	; (80007b8 <ts_command+0xb8>)
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f008 f9ab 	bl	8008a6c <strtok>
 8000716:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	e014      	b.n	8000748 <ts_command+0x48>
			if (pt != NULL) {
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00e      	beq.n	8000742 <ts_command+0x42>
				t[i] = atoi(pt);
 8000724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000726:	f007 ff32 	bl	800858e <atoi>
 800072a:	4602      	mov	r2, r0
 800072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	443b      	add	r3, r7
 8000734:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000738:	491f      	ldr	r1, [pc, #124]	; (80007b8 <ts_command+0xb8>)
 800073a:	2000      	movs	r0, #0
 800073c:	f008 f996 	bl	8008a6c <strtok>
 8000740:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	3301      	adds	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
 8000748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074a:	2b02      	cmp	r3, #2
 800074c:	dde7      	ble.n	800071e <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d029      	beq.n	80007a8 <ts_command+0xa8>
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db26      	blt.n	80007a8 <ts_command+0xa8>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b17      	cmp	r3, #23
 800075e:	dc23      	bgt.n	80007a8 <ts_command+0xa8>
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d020      	beq.n	80007a8 <ts_command+0xa8>
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db1d      	blt.n	80007a8 <ts_command+0xa8>
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	2b3b      	cmp	r3, #59	; 0x3b
 8000770:	dc1a      	bgt.n	80007a8 <ts_command+0xa8>
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	2b00      	cmp	r3, #0
 8000776:	d017      	beq.n	80007a8 <ts_command+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	2b00      	cmp	r3, #0
 800077c:	db14      	blt.n	80007a8 <ts_command+0xa8>
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	2b3b      	cmp	r3, #59	; 0x3b
 8000782:	dc11      	bgt.n	80007a8 <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <ts_command+0xbc>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <ts_command+0xc0>)
 80007a2:	f005 f97d 	bl	8005aa0 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 80007a6:	e003      	b.n	80007b0 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <ts_command+0xc4>)
 80007aa:	f008 f84b 	bl	8008844 <iprintf>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08009b58 	.word	0x08009b58
 80007bc:	200000fc 	.word	0x200000fc
 80007c0:	2000017c 	.word	0x2000017c
 80007c4:	08009b64 	.word	0x08009b64

080007c8 <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01f      	beq.n	8000816 <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80007d6:	4924      	ldr	r1, [pc, #144]	; (8000868 <ds_command+0xa0>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f008 f947 	bl	8008a6c <strtok>
 80007de:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	e014      	b.n	8000810 <ds_command+0x48>
			if (pt != NULL) {
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <ds_command+0x42>
				d[i] = atoi(pt);
 80007ec:	69f8      	ldr	r0, [r7, #28]
 80007ee:	f007 fece 	bl	800858e <atoi>
 80007f2:	4602      	mov	r2, r0
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	3320      	adds	r3, #32
 80007fa:	443b      	add	r3, r7
 80007fc:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 8000800:	4919      	ldr	r1, [pc, #100]	; (8000868 <ds_command+0xa0>)
 8000802:	2000      	movs	r0, #0
 8000804:	f008 f932 	bl	8008a6c <strtok>
 8000808:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	3301      	adds	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2b02      	cmp	r3, #2
 8000814:	dde7      	ble.n	80007e6 <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d01d      	beq.n	8000858 <ds_command+0x90>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd1a      	ble.n	8000858 <ds_command+0x90>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b0c      	cmp	r3, #12
 8000826:	dc17      	bgt.n	8000858 <ds_command+0x90>
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d014      	beq.n	8000858 <ds_command+0x90>
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d011      	beq.n	8000858 <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <ds_command+0xa4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <ds_command+0xa8>)
 8000852:	f005 fa1e 	bl	8005c92 <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 8000856:	e003      	b.n	8000860 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <ds_command+0xac>)
 800085a:	f007 fff3 	bl	8008844 <iprintf>
	}
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08009b58 	.word	0x08009b58
 800086c:	200000fc 	.word	0x200000fc
 8000870:	2000017c 	.word	0x2000017c
 8000874:	08009b64 	.word	0x08009b64

08000878 <tsl237_command>:

extern float tsl237_clock_frequency;

void __attribute__((weak)) tsl237_command(char *arguments) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  int freqInt = tsl237_clock_frequency * 1000;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <tsl237_command+0x5c>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008d8 <tsl237_command+0x60>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000892:	ee17 3a90 	vmov	r3, s15
 8000896:	617b      	str	r3, [r7, #20]
  int freqFirst = freqInt / 1000;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <tsl237_command+0x64>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1192      	asrs	r2, r2, #6
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	613b      	str	r3, [r7, #16]
  int freqSecond = freqInt % 1000;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <tsl237_command+0x64>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1191      	asrs	r1, r2, #6
 80008b2:	17da      	asrs	r2, r3, #31
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ba:	fb01 f202 	mul.w	r2, r1, r2
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  printf("%d.%d hz\n\r", freqFirst, freqSecond);
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	6939      	ldr	r1, [r7, #16]
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <tsl237_command+0x68>)
 80008c8:	f007 ffbc 	bl	8008844 <iprintf>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200002bc 	.word	0x200002bc
 80008d8:	447a0000 	.word	0x447a0000
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	08009b6c 	.word	0x08009b6c

080008e4 <temp_command>:

extern sensorval_t mySensors;

void __attribute__((weak)) temp_command(char *arguments) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	printf("%ld C\n\r", mySensors.temperature);
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <temp_command+0x1c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <temp_command+0x20>)
 80008f4:	f007 ffa6 	bl	8008844 <iprintf>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002c0 	.word	0x200002c0
 8000904:	08009b78 	.word	0x08009b78

08000908 <battery_command>:

void __attribute__((weak)) battery_command(char *arguments) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	int battInt = mySensors.vdda_value;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <battery_command+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	617b      	str	r3, [r7, #20]
	int battFirst = battInt / 1000;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <battery_command+0x50>)
 800091a:	fb82 1203 	smull	r1, r2, r2, r3
 800091e:	1192      	asrs	r2, r2, #6
 8000920:	17db      	asrs	r3, r3, #31
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	613b      	str	r3, [r7, #16]
	int battSecond = battInt % 1000;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <battery_command+0x50>)
 800092a:	fb82 1203 	smull	r1, r2, r2, r3
 800092e:	1191      	asrs	r1, r2, #6
 8000930:	17da      	asrs	r2, r3, #31
 8000932:	1a8a      	subs	r2, r1, r2
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	fb01 f202 	mul.w	r2, r1, r2
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  printf("%d.%d V\n\r", battFirst, battSecond);
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <battery_command+0x54>)
 8000946:	f007 ff7d 	bl	8008844 <iprintf>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002c0 	.word	0x200002c0
 8000958:	10624dd3 	.word	0x10624dd3
 800095c:	08009b80 	.word	0x08009b80

08000960 <sample_command>:

void __attribute__((weak)) sample_command(char *arguments) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <get_commands+0xc8>)
 8000982:	f000 ffa7 	bl	80018d4 <dequeue>
 8000986:	4603      	mov	r3, r0
 8000988:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 800098a:	e03a      	b.n	8000a02 <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d027      	beq.n	80009e2 <get_commands+0x6e>
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b0d      	cmp	r3, #13
 8000996:	d024      	beq.n	80009e2 <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b7f      	cmp	r3, #127	; 0x7f
 800099c:	d10c      	bne.n	80009b8 <get_commands+0x44>
        if (counter > 0) {
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <get_commands+0xcc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d021      	beq.n	80009ea <get_commands+0x76>
            printf("\b \b");
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <get_commands+0xd0>)
 80009a8:	f007 ff4c 	bl	8008844 <iprintf>
            counter--;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <get_commands+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <get_commands+0xcc>)
 80009b4:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80009b6:	e018      	b.n	80009ea <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 ff54 	bl	8008868 <putchar>
        command_buf[counter++]=ch;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <get_commands+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	491e      	ldr	r1, [pc, #120]	; (8000a40 <get_commands+0xcc>)
 80009c8:	600a      	str	r2, [r1, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <get_commands+0xcc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b1d      	cmp	r3, #29
 80009d8:	d907      	bls.n	80009ea <get_commands+0x76>
          mode=COMPLETE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <get_commands+0xd4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
          break;
 80009e0:	e012      	b.n	8000a08 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <get_commands+0xd4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
      break;
 80009e8:	e00e      	b.n	8000a08 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80009ea:	bf00      	nop
    }
    mask = disable();
 80009ec:	f000 fb56 	bl	800109c <disable>
 80009f0:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <get_commands+0xc8>)
 80009f4:	f000 ff6e 	bl	80018d4 <dequeue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f000 fb60 	bl	80010c2 <restore>
  while (ch!=0) {
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1c1      	bne.n	800098c <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <get_commands+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d110      	bne.n	8000a32 <get_commands+0xbe>
    command_buf[counter] = 0;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <get_commands+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <get_commands+0xd8>)
 8000a1e:	f007 ff11 	bl	8008844 <iprintf>
    counter = 0;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <get_commands+0xcc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <get_commands+0xd4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
    return(1);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <get_commands+0xc0>
  }
  else {
    return(0);
 8000a32:	2300      	movs	r3, #0
  }
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000274 	.word	0x20000274
 8000a40:	20000100 	.word	0x20000100
 8000a44:	08009b8c 	.word	0x08009b8c
 8000a48:	20000104 	.word	0x20000104
 8000a4c:	08009b90 	.word	0x08009b90

08000a50 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <parse_command+0x1e>
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <parse_command+0x1e>
     (!command) ||
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <parse_command+0x24>
     (!args)) {
    return (-1);
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e01e      	b.n	8000ab2 <parse_command+0x62>
  }
  *command = line;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	601a      	str	r2, [r3, #0]
  p = line;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a7e:	e00b      	b.n	8000a98 <parse_command+0x48>
    if (!*p) {
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <parse_command+0x42>
      *args = '\0';
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
      return(0);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e00f      	b.n	8000ab2 <parse_command+0x62>
    }
    p++;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a9e:	d1ef      	bne.n	8000a80 <parse_command+0x30>
  }
  *p++ = '\0';
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	617a      	str	r2, [r7, #20]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	601a      	str	r2, [r3, #0]
  return (0);
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <execute_command+0x98>)
 8000aca:	617b      	str	r3, [r7, #20]
  int success = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <execute_command+0x1c>
    return (-1);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e038      	b.n	8000b4e <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000adc:	f107 0208 	add.w	r2, r7, #8
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb2 	bl	8000a50 <parse_command>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af2:	d121      	bne.n	8000b38 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <execute_command+0x9c>)
 8000af6:	f007 fea5 	bl	8008844 <iprintf>
    return (-1);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e026      	b.n	8000b4e <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb61 	bl	80001d0 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10e      	bne.n	8000b32 <execute_command+0x72>
      if (!p->cmd_function) {
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <execute_command+0x62>
        return (-1);
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	e015      	b.n	8000b4e <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4798      	blx	r3
      success = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
      break;
 8000b30:	e006      	b.n	8000b40 <execute_command+0x80>
    }
    p++;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3308      	adds	r3, #8
 8000b36:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1df      	bne.n	8000b00 <execute_command+0x40>
  }
  if (success) {
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <execute_command+0x8a>
    return (0);
 8000b46:	2300      	movs	r3, #0
 8000b48:	e001      	b.n	8000b4e <execute_command+0x8e>
  }
  else {
    return (-1);
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	08009b94 	.word	0x08009b94

08000b60 <flash_erase>:
extern flash_status_t fs;

extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim2;

int flash_erase(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
	uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
	uint32_t PAGEError = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
	/* __IO uint32_t data32 = 0 , MemoryProgramStatus = 0; */

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t program_end = ((uint32_t) &__fini_array_end + (uint32_t) &_edata
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <flash_erase+0xa4>)
 8000b78:	4923      	ldr	r1, [pc, #140]	; (8000c08 <flash_erase+0xa8>)
			- (uint32_t) &_sdata);
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <flash_erase+0xac>)
 8000b7c:	1acb      	subs	r3, r1, r3
	uint32_t program_end = ((uint32_t) &__fini_array_end + (uint32_t) &_edata
 8000b7e:	4413      	add	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
	uint32_t bottom = (((uint32_t) program_end & ~0x7FF) + 0x800);
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b88:	f023 0307 	bic.w	r3, r3, #7
 8000b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000b90:	60fb      	str	r3, [r7, #12]
	uint32_t top = FLASH_END;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <flash_erase+0xb0>)
 8000b94:	60bb      	str	r3, [r7, #8]

	HAL_FLASH_Unlock();
 8000b96:	f003 f9c9 	bl	8003f2c <HAL_FLASH_Unlock>
	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <flash_erase+0xb4>)
 8000b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba0:	611a      	str	r2, [r3, #16]
	/* Get the 1st page to erase */
	FirstPage = GetPage(bottom);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f83a 	bl	8000c1c <GetPage>
 8000ba8:	61f8      	str	r0, [r7, #28]
	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(top) - FirstPage + 1;
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f000 f836 	bl	8000c1c <GetPage>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
	/* Get the bank */
	BankNumber = GetBank(bottom);
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f86e 	bl	8000c9c <GetBank>
 8000bc0:	6178      	str	r0, [r7, #20]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <flash_erase+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks = BankNumber;
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <flash_erase+0xb8>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	6053      	str	r3, [r2, #4]
	EraseInitStruct.Page = FirstPage;
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <flash_erase+0xb8>)
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <flash_erase+0xb8>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	60d3      	str	r3, [r2, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <flash_erase+0xb8>)
 8000be0:	f003 fa8a 	bl	80040f8 <HAL_FLASHEx_Erase>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <flash_erase+0x94>
		HAL_FLASH_Lock();
 8000bea:	f003 f9c1 	bl	8003f70 <HAL_FLASH_Lock>
		return (-1);
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e002      	b.n	8000bfa <flash_erase+0x9a>
	}
	HAL_FLASH_Lock();
 8000bf4:	f003 f9bc 	bl	8003f70 <HAL_FLASH_Lock>
	return (0);
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000e0 	.word	0x200000e0
 8000c08:	08009ea4 	.word	0x08009ea4
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	0803fff0 	.word	0x0803fff0
 8000c14:	40022000 	.word	0x40022000
 8000c18:	20000108 	.word	0x20000108

08000c1c <GetPage>:

static uint32_t GetPage(uint32_t Addr) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <GetPage+0x74>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <GetPage+0x2a>
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <GetPage+0x74>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	029a      	lsls	r2, r3, #10
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <GetPage+0x78>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c44:	e000      	b.n	8000c48 <GetPage+0x2c>
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <GetPage+0x7c>)
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d905      	bls.n	8000c5a <GetPage+0x3e>
		/* Bank 1 */
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c54:	0adb      	lsrs	r3, r3, #11
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e013      	b.n	8000c82 <GetPage+0x66>
	} else {
		/* Bank 2 */
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <GetPage+0x74>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <GetPage+0x5c>
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <GetPage+0x74>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	029a      	lsls	r2, r3, #10
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <GetPage+0x78>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c76:	e000      	b.n	8000c7a <GetPage+0x5e>
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <GetPage+0x7c>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	0adb      	lsrs	r3, r3, #11
 8000c80:	60fb      	str	r3, [r7, #12]
	}

	return page;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	1fff75e0 	.word	0x1fff75e0
 8000c94:	03fffc00 	.word	0x03fffc00
 8000c98:	08040000 	.word	0x08040000

08000c9c <GetBank>:

static uint32_t GetBank(uint32_t Addr) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	return FLASH_BANK_1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <write_record>:

int write_record(flash_status_t * fs, void * record) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  raw_t * write_data;
  HAL_StatusTypeDef status = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]

  if ((!fs) || (!record)) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <write_record+0x1a>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <write_record+0x20>
    return (-1);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e04c      	b.n	8000d6e <write_record+0xba>
  }

  if (fs->total_records >= fs->max_possible_records) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d305      	bcc.n	8000cec <write_record+0x38>
    printf("Flash full\n\r");
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <write_record+0xc4>)
 8000ce2:	f007 fdaf 	bl	8008844 <iprintf>
    return (-1);
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e040      	b.n	8000d6e <write_record+0xba>
  }

  write_data = (raw_t *) record;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	60bb      	str	r3, [r7, #8]

  HAL_FLASH_Unlock();
 8000cf0:	f003 f91c 	bl	8003f2c <HAL_FLASH_Unlock>
  if ((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,(int) fs->next_address++, write_data->data0))) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f103 0108 	add.w	r1, r3, #8
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	60d1      	str	r1, [r2, #12]
 8000d00:	4619      	mov	r1, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f003 f8a3 	bl	8003e54 <HAL_FLASH_Program>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <write_record+0x6e>
    HAL_FLASH_Lock();
 8000d18:	f003 f92a 	bl	8003f70 <HAL_FLASH_Lock>
    return (-1);
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	e025      	b.n	8000d6e <write_record+0xba>
  }
  if ((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,(int) fs->next_address, write_data->data1))) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	4619      	mov	r1, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f003 f890 	bl	8003e54 <HAL_FLASH_Program>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <write_record+0x94>
    HAL_FLASH_Lock();
 8000d3e:	f003 f917 	bl	8003f70 <HAL_FLASH_Lock>
    return (-1);
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e012      	b.n	8000d6e <write_record+0xba>
  }
  HAL_FLASH_Lock();
 8000d48:	f003 f912 	bl	8003f70 <HAL_FLASH_Lock>
  fs->next_address-=3;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f1a3 0218 	sub.w	r2, r3, #24
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
  fs->next_record_number++;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
  fs->total_records++;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
  return (0);
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08009bb0 	.word	0x08009bb0

08000d7c <find_sentinel_bottom>:


uint64_t* find_sentinel_bottom(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	uint64_t *p = (uint64_t*) &__fini_array_end
			+ ((uint64_t*) &_edata - (uint64_t*) &_sdata);
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <find_sentinel_bottom+0x58>)
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <find_sentinel_bottom+0x5c>)
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	461a      	mov	r2, r3
	uint64_t *p = (uint64_t*) &__fini_array_end
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <find_sentinel_bottom+0x60>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	607b      	str	r3, [r7, #4]
	p += 2;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3310      	adds	r3, #16
 8000d94:	607b      	str	r3, [r7, #4]
	p = (uint64_t*) ((uintptr_t) p & ~(uintptr_t) 0xF);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f023 030f 	bic.w	r3, r3, #15
 8000d9c:	607b      	str	r3, [r7, #4]
	while (p <= ((uint64_t*) FLASH_END)) {
 8000d9e:	e00d      	b.n	8000dbc <find_sentinel_bottom+0x40>
		if (*p == SENTINEL_MARK_BOTTOM) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <find_sentinel_bottom+0x64>)
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf08      	it	eq
 8000dac:	f1b2 3fa5 	cmpeq.w	r2, #2779096485	; 0xa5a5a5a5
 8000db0:	d101      	bne.n	8000db6 <find_sentinel_bottom+0x3a>
			return (p);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	e007      	b.n	8000dc6 <find_sentinel_bottom+0x4a>
		}
		p += 2;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3310      	adds	r3, #16
 8000dba:	607b      	str	r3, [r7, #4]
	while (p <= ((uint64_t*) FLASH_END)) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <find_sentinel_bottom+0x68>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d9ed      	bls.n	8000da0 <find_sentinel_bottom+0x24>
	}
	return (0);
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200000e0 	.word	0x200000e0
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	08009ea4 	.word	0x08009ea4
 8000de0:	deadbeef 	.word	0xdeadbeef
 8000de4:	0803fff0 	.word	0x0803fff0

08000de8 <find_sentinel_top>:

uint64_t* find_sentinel_top(void) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	uint64_t *p = (uint64_t*) FLASH_END;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <find_sentinel_top+0x30>)
 8000df0:	607b      	str	r3, [r7, #4]
	if (*p == SENTINEL_MARK_TOP) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <find_sentinel_top+0x34>)
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	f1b2 3f5a 	cmpeq.w	r2, #1515870810	; 0x5a5a5a5a
 8000e02:	d101      	bne.n	8000e08 <find_sentinel_top+0x20>
		return (p);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	e000      	b.n	8000e0a <find_sentinel_top+0x22>
	} else {
		return (0);
 8000e08:	2300      	movs	r3, #0
	}
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	0803fff0 	.word	0x0803fff0
 8000e1c:	feedc0de 	.word	0xfeedc0de

08000e20 <write_sentinel>:

int write_sentinel(uint64_t *location, raw_t *sentinel) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	if ((!location) || (!sentinel)) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <write_sentinel+0x16>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <write_sentinel+0x1c>
		return (-1);
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e026      	b.n	8000e8a <write_sentinel+0x6a>
	}
	HAL_FLASH_Unlock();
 8000e3c:	f003 f876 	bl	8003f2c <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (int) location++,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0208 	add.w	r2, r3, #8
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	2000      	movs	r0, #0
 8000e52:	f002 ffff 	bl	8003e54 <HAL_FLASH_Program>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <write_sentinel+0x46>
			sentinel->data0)) {
		HAL_FLASH_Lock();
 8000e5c:	f003 f888 	bl	8003f70 <HAL_FLASH_Lock>
		return (-1);
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	e011      	b.n	8000e8a <write_sentinel+0x6a>
	}
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (int) location,
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f002 fff0 	bl	8003e54 <HAL_FLASH_Program>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d004      	beq.n	8000e84 <write_sentinel+0x64>
			sentinel->data1)) {
		HAL_FLASH_Lock();
 8000e7a:	f003 f879 	bl	8003f70 <HAL_FLASH_Lock>
		return (-1);
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e002      	b.n	8000e8a <write_sentinel+0x6a>
	}
	HAL_FLASH_Lock();
 8000e84:	f003 f874 	bl	8003f70 <HAL_FLASH_Lock>
	return (0);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	0000      	movs	r0, r0
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <flash_write_init>:

int flash_write_init(flash_status_t *fs) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b092      	sub	sp, #72	; 0x48
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	sensordata_t *sd = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t record_counter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	raw_t sentinel_top = { SENTINEL_MARK_TOP, 0 };
 8000eaa:	a353      	add	r3, pc, #332	; (adr r3, 8000ff8 <flash_write_init+0x160>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	raw_t sentinel_bottom = { SENTINEL_MARK_BOTTOM, 0 };
 8000ec0:	a34f      	add	r3, pc, #316	; (adr r3, 8001000 <flash_write_init+0x168>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
			+ (uint32_t) &_edata - (uint32_t) &_sdata);
 8000ed6:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <flash_write_init+0x150>)
	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
 8000ed8:	4944      	ldr	r1, [pc, #272]	; (8000fec <flash_write_init+0x154>)
			+ (uint32_t) &_edata - (uint32_t) &_sdata);
 8000eda:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <flash_write_init+0x158>)
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	4413      	add	r3, r2
	uint64_t *program_end = (uint64_t*) ((uint32_t) &__fini_array_end
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint64_t *top = (uint64_t*) FLASH_END;
 8000ee2:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <flash_write_init+0x15c>)
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38

	uint64_t *bottom = (uint64_t*) (((uint32_t) program_end & ~0x7FF) + 0x800);
 8000ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eec:	f023 0307 	bic.w	r3, r3, #7
 8000ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34

	uint64_t *pt = find_sentinel_top();
 8000ef6:	f7ff ff77 	bl	8000de8 <find_sentinel_top>
 8000efa:	6338      	str	r0, [r7, #48]	; 0x30

	uint64_t *pb = find_sentinel_bottom();
 8000efc:	f7ff ff3e 	bl	8000d7c <find_sentinel_bottom>
 8000f00:	62f8      	str	r0, [r7, #44]	; 0x2c

	if ((!pt) && (!pb)) {
 8000f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11a      	bne.n	8000f3e <flash_write_init+0xa6>
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d117      	bne.n	8000f3e <flash_write_init+0xa6>
		if (write_sentinel(top, &sentinel_top)) {
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4619      	mov	r1, r3
 8000f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f16:	f7ff ff83 	bl	8000e20 <write_sentinel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <flash_write_init+0x8e>
			return (-1);
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	e059      	b.n	8000fda <flash_write_init+0x142>
		}
		if (write_sentinel(bottom, &sentinel_bottom)) {
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f2e:	f7ff ff77 	bl	8000e20 <write_sentinel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d026      	beq.n	8000f86 <flash_write_init+0xee>
			return (-1);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e04d      	b.n	8000fda <flash_write_init+0x142>
		}
	} else if ((pt) && (!pb)) {
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00e      	beq.n	8000f62 <flash_write_init+0xca>
 8000f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10b      	bne.n	8000f62 <flash_write_init+0xca>
		if (write_sentinel(bottom, &sentinel_bottom)) {
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f52:	f7ff ff65 	bl	8000e20 <write_sentinel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d014      	beq.n	8000f86 <flash_write_init+0xee>
			return (-1);
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	e03b      	b.n	8000fda <flash_write_init+0x142>
		}
	} else if ((!pt) && (pb)) {
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d105      	bne.n	8000f74 <flash_write_init+0xdc>
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <flash_write_init+0xdc>
		return (-1);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e032      	b.n	8000fda <flash_write_init+0x142>
	} else if ((pt) && (pb)) {
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <flash_write_init+0xe8>
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <flash_write_init+0xee>
		if (pb != bottom) {

		}
	} else {
		return (-1);
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	e029      	b.n	8000fda <flash_write_init+0x142>
	}

	fs->data_start = top - 2;
 8000f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f88:	f1a3 0210 	sub.w	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	601a      	str	r2, [r3, #0]
	fs->max_possible_records = (((uint32_t) top - (uint32_t) bottom) >> 4) - 1;
 8000f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
	sd = (sensordata_t*) top;
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
	sd--;
 8000fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fa4:	3b10      	subs	r3, #16
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	while ((sd->watermark != 0xFF)) {
 8000fa8:	e007      	b.n	8000fba <flash_write_init+0x122>
		record_counter++;
 8000faa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		sd--;
 8000fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fb6:	3b10      	subs	r3, #16
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
	while ((sd->watermark != 0xFF)) {
 8000fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d1f3      	bne.n	8000faa <flash_write_init+0x112>
	}
	fs->next_record_number = record_counter;
 8000fc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	611a      	str	r2, [r3, #16]
	fs->total_records = record_counter;
 8000fca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	605a      	str	r2, [r3, #4]
	fs->next_address = (uint64_t*) sd;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fd6:	60da      	str	r2, [r3, #12]

	return (0);
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3748      	adds	r7, #72	; 0x48
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	08009ea4 	.word	0x08009ea4
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	0803fff0 	.word	0x0803fff0
 8000ff8:	5a5a5a5a 	.word	0x5a5a5a5a
 8000ffc:	feedc0de 	.word	0xfeedc0de
 8001000:	a5a5a5a5 	.word	0xa5a5a5a5
 8001004:	deadbeef 	.word	0xdeadbeef

08001008 <write_sensor_data>:

int write_sensor_data(flash_status_t *fs) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08f      	sub	sp, #60	; 0x3c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	sensordata_t sensor_data = { .watermark = 0x01, .status = 0x01,
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <write_sensor_data+0x7c>)
 8001012:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.record_number = 4, .timestamp = 0x1234567, .battery_voltage = 33,
			.temperature = 25, .sensor_period = 100 };

	logdata_t log_data = { .watermark = 0x01, .status = 0x02, .record_number = 2,
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <write_sensor_data+0x80>)
 800101e:	f107 0418 	add.w	r4, r7, #24
 8001022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.timestamp = 0x87654321, .msg = "Hello!" };

	raw_t raw_data = { .data0 = *(uint64_t*) &sensor_data, .data1 =
 8001028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	e9c7 2302 	strd	r2, r3, [r7, #8]
			*(uint64_t*) &log_data };
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
	raw_t raw_data = { .data0 = *(uint64_t*) &sensor_data, .data1 =
 800103c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (write_record(fs, &raw_data)) {
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fe34 	bl	8000cb4 <write_record>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <write_sensor_data+0x52>
		printf("Write failed\n\r");
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <write_sensor_data+0x84>)
 8001054:	f007 fbf6 	bl	8008844 <iprintf>
 8001058:	e002      	b.n	8001060 <write_sensor_data+0x58>
	} else {
		printf("Write success\n\r");
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <write_sensor_data+0x88>)
 800105c:	f007 fbf2 	bl	8008844 <iprintf>
	}
	printf("%d\n\r",fs->total_records);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4619      	mov	r1, r3
 8001066:	480b      	ldr	r0, [pc, #44]	; (8001094 <write_sensor_data+0x8c>)
 8001068:	f007 fbec 	bl	8008844 <iprintf>
	printf("%u\n\r",fs->next_address);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4619      	mov	r1, r3
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <write_sensor_data+0x90>)
 8001074:	f007 fbe6 	bl	8008844 <iprintf>
}
 8001078:	bf00      	nop
 800107a:	4618      	mov	r0, r3
 800107c:	373c      	adds	r7, #60	; 0x3c
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	08009bf0 	.word	0x08009bf0
 8001088:	08009c00 	.word	0x08009c00
 800108c:	08009bc0 	.word	0x08009bc0
 8001090:	08009bd0 	.word	0x08009bd0
 8001094:	08009be0 	.word	0x08009be0
 8001098:	08009be8 	.word	0x08009be8

0800109c <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010a6:	f3ef 8310 	mrs	r3, PRIMASK
 80010aa:	603b      	str	r3, [r7, #0]
  return(result);
 80010ac:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 80010ae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <restore>:

void restore(uint32_t priority_mask) {
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f383 8810 	msr	PRIMASK, r3
}
 80010d4:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b089      	sub	sp, #36	; 0x24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	e853 3f00 	ldrex	r3, [r3]
 80010f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	61ba      	str	r2, [r7, #24]
 8001104:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	e841 2300 	strex	r3, r2, [r1]
 800110e:	613b      	str	r3, [r7, #16]
   return(result);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1e9      	bne.n	80010ea <LL_USART_EnableIT_RXNE+0x8>
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <readsensor>:
/* USER CODE BEGIN 0 */
//typedef struct sensorval {
//  uint32_t vdda_value;
//  uint32_t temperature;
//} sensorval_t;
uint32_t readsensor(sensorval_t *sensors) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	uint32_t temp_raw;
	uint32_t vrefint_raw;

	if (!sensors) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <readsensor+0x14>
		return (-1);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e04d      	b.n	80011d4 <readsensor+0xb0>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001138:	217f      	movs	r1, #127	; 0x7f
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <readsensor+0xb8>)
 800113c:	f002 fbd8 	bl	80038f0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <readsensor+0xb8>)
 8001142:	f001 fb21 	bl	8002788 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001146:	f04f 31ff 	mov.w	r1, #4294967295
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <readsensor+0xb8>)
 800114c:	f001 fbb2 	bl	80028b4 <HAL_ADC_PollForConversion>
	temp_raw = HAL_ADC_GetValue(&hadc1);
 8001150:	4822      	ldr	r0, [pc, #136]	; (80011dc <readsensor+0xb8>)
 8001152:	f001 fc3e 	bl	80029d2 <HAL_ADC_GetValue>
 8001156:	60f8      	str	r0, [r7, #12]
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <readsensor+0xb8>)
 800115e:	f001 fba9 	bl	80028b4 <HAL_ADC_PollForConversion>
	vrefint_raw = HAL_ADC_GetValue(&hadc1);
 8001162:	481e      	ldr	r0, [pc, #120]	; (80011dc <readsensor+0xb8>)
 8001164:	f001 fc35 	bl	80029d2 <HAL_ADC_GetValue>
 8001168:	60b8      	str	r0, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <readsensor+0xb8>)
 800116c:	f001 fb6f 	bl	800284e <HAL_ADC_Stop>
	sensors->vdda_value = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw,
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <readsensor+0xbc>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800117a:	fb03 f202 	mul.w	r2, r3, r2
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	fbb2 f2f3 	udiv	r2, r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
			ADC_RESOLUTION_12B);
	sensors->temperature = __HAL_ADC_CALC_TEMPERATURE(sensors->vdda_value,
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <readsensor+0xc0>)
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <readsensor+0xc4>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d01a      	beq.n	80011ca <readsensor+0xa6>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <readsensor+0xc8>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <readsensor+0xc4>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2264      	movs	r2, #100	; 0x64
 80011b0:	fb03 f202 	mul.w	r2, r3, r2
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <readsensor+0xc0>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <readsensor+0xc4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	1acb      	subs	r3, r1, r3
 80011c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011c4:	331e      	adds	r3, #30
 80011c6:	461a      	mov	r2, r3
 80011c8:	e001      	b.n	80011ce <readsensor+0xaa>
 80011ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	605a      	str	r2, [r3, #4]
			temp_raw, ADC_RESOLUTION_12B);

	return (0);
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000118 	.word	0x20000118
 80011e0:	1fff75aa 	.word	0x1fff75aa
 80011e4:	1fff75ca 	.word	0x1fff75ca
 80011e8:	1fff75a8 	.word	0x1fff75a8
 80011ec:	057619f1 	.word	0x057619f1

080011f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static uint32_t last = 0;
	uint32_t current;
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7f1b      	ldrb	r3, [r3, #28]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d11c      	bne.n	800123a <HAL_TIM_IC_CaptureCallback+0x4a>
		current = htim->Instance->CCR1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	60fb      	str	r3, [r7, #12]
		if (last <= current) {
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x58>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	429a      	cmp	r2, r3
 8001210:	d306      	bcc.n	8001220 <HAL_TIM_IC_CaptureCallback+0x30>
			period = current - last;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e009      	b.n	8001234 <HAL_TIM_IC_CaptureCallback+0x44>
		} else {
			period = TIM2->ARR - last + current;
 8001220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001232:	6013      	str	r3, [r2, #0]
		}
		last = current;
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6013      	str	r3, [r2, #0]
	}
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200002dc 	.word	0x200002dc
 800124c:	200002b4 	.word	0x200002b4

08001250 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	init_queue(&buf);
 8001256:	4846      	ldr	r0, [pc, #280]	; (8001370 <main+0x120>)
 8001258:	f000 faef 	bl	800183a <init_queue>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800125c:	f000 fe91 	bl	8001f82 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001260:	f000 f8aa 	bl	80013b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001264:	f000 fa9a 	bl	800179c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001268:	f000 fa68 	bl	800173c <MX_USART2_UART_Init>
	MX_RTC_Init();
 800126c:	f000 f97c 	bl	8001568 <MX_RTC_Init>
	MX_TIM2_Init();
 8001270:	f000 fa0c 	bl	800168c <MX_TIM2_Init>
	MX_ADC1_Init();
 8001274:	f000 f904 	bl	8001480 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 8001278:	483e      	ldr	r0, [pc, #248]	; (8001374 <main+0x124>)
 800127a:	f000 fb55 	bl	8001928 <RetargetInit>
	LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <main+0x128>)
 8001280:	f7ff ff2f 	bl	80010e2 <LL_USART_EnableIT_RXNE>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8001284:	463a      	mov	r2, r7
 8001286:	2302      	movs	r3, #2
 8001288:	2100      	movs	r1, #0
 800128a:	483c      	ldr	r0, [pc, #240]	; (800137c <main+0x12c>)
 800128c:	f005 f9c2 	bl	8006614 <HAL_TIM_IC_Start_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	flash_erase();
 8001290:	f7ff fc66 	bl	8000b60 <flash_erase>
	printf("System Up and Running\n\r");
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <main+0x130>)
 8001296:	f007 fad5 	bl	8008844 <iprintf>

  flash_write_init(&fs);
 800129a:	483a      	ldr	r0, [pc, #232]	; (8001384 <main+0x134>)
 800129c:	f7ff fdfc 	bl	8000e98 <flash_write_init>
  printf("Flash Total Records: %d\n\r",fs.total_records);
 80012a0:	4b38      	ldr	r3, [pc, #224]	; (8001384 <main+0x134>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4838      	ldr	r0, [pc, #224]	; (8001388 <main+0x138>)
 80012a8:	f007 facc 	bl	8008844 <iprintf>
	write_sensor_data(&fs);
 80012ac:	4835      	ldr	r0, [pc, #212]	; (8001384 <main+0x134>)
 80012ae:	f7ff feab 	bl	8001008 <write_sensor_data>

//	printf("Data: %d\n\r", (sensordata_t)(((raw_t*)(0x0803FFF0))->record_number));

	prompt();
 80012b2:	f7ff f96b 	bl	800058c <prompt>
	while (1) {
		HAL_Delay(100);
 80012b6:	2064      	movs	r0, #100	; 0x64
 80012b8:	f000 fed8 	bl	800206c <HAL_Delay>
		readsensor(&mySensors);
 80012bc:	4833      	ldr	r0, [pc, #204]	; (800138c <main+0x13c>)
 80012be:	f7ff ff31 	bl	8001124 <readsensor>
		tsl237_clock_period = (1 / (float) SystemCoreClock) * (float) period;
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <main+0x140>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <main+0x144>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <main+0x148>)
 80012e8:	edc3 7a00 	vstr	s15, [r3]
		tsl237_clock_frequency = 1 / tsl237_clock_period;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <main+0x148>)
 80012ee:	ed93 7a00 	vldr	s14, [r3]
 80012f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <main+0x14c>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]

		if (get_commands(command)) {
 8001300:	4827      	ldr	r0, [pc, #156]	; (80013a0 <main+0x150>)
 8001302:	f7ff fb37 	bl	8000974 <get_commands>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01e      	beq.n	800134a <main+0xfa>
			command_length = 16;
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <main+0x154>)
 800130e:	2210      	movs	r2, #16
 8001310:	601a      	str	r2, [r3, #0]
			if (command_length != -1) {
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <main+0x154>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d011      	beq.n	8001340 <main+0xf0>
				if (execute_command(command)) {
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <main+0x150>)
 800131e:	f7ff fbcf 	bl	8000ac0 <execute_command>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <main+0xe4>
					printf("NOK\n\r");
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <main+0x158>)
 800132a:	f007 fa8b 	bl	8008844 <iprintf>
					prompt();
 800132e:	f7ff f92d 	bl	800058c <prompt>
 8001332:	e00a      	b.n	800134a <main+0xfa>
				} else {
					printf("OK\n\r");
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <main+0x15c>)
 8001336:	f007 fa85 	bl	8008844 <iprintf>
					prompt();
 800133a:	f7ff f927 	bl	800058c <prompt>
 800133e:	e004      	b.n	800134a <main+0xfa>
				}
			} else {
				printf("NOK\n\r");
 8001340:	4819      	ldr	r0, [pc, #100]	; (80013a8 <main+0x158>)
 8001342:	f007 fa7f 	bl	8008844 <iprintf>
				prompt();
 8001346:	f7ff f921 	bl	800058c <prompt>
			}

		}

		if (alarm) {
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <main+0x160>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0b1      	beq.n	80012b6 <main+0x66>
			printf("alarm_triggered\n\r");
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <main+0x164>)
 8001354:	f007 fa76 	bl	8008844 <iprintf>
			lon_command();
 8001358:	f7ff f99c 	bl	8000694 <lon_command>
			HAL_Delay(100);
 800135c:	2064      	movs	r0, #100	; 0x64
 800135e:	f000 fe85 	bl	800206c <HAL_Delay>
			lof_command();
 8001362:	f7ff f987 	bl	8000674 <lof_command>
			alarm = 0;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <main+0x160>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 800136c:	e7a3      	b.n	80012b6 <main+0x66>
 800136e:	bf00      	nop
 8001370:	20000274 	.word	0x20000274
 8001374:	200001ec 	.word	0x200001ec
 8001378:	40004400 	.word	0x40004400
 800137c:	200001a0 	.word	0x200001a0
 8001380:	08009c10 	.word	0x08009c10
 8001384:	200002c8 	.word	0x200002c8
 8001388:	08009c28 	.word	0x08009c28
 800138c:	200002c0 	.word	0x200002c0
 8001390:	20000058 	.word	0x20000058
 8001394:	200002b4 	.word	0x200002b4
 8001398:	200002b8 	.word	0x200002b8
 800139c:	200002bc 	.word	0x200002bc
 80013a0:	2000029c 	.word	0x2000029c
 80013a4:	200002ac 	.word	0x200002ac
 80013a8:	08009c44 	.word	0x08009c44
 80013ac:	08009c4c 	.word	0x08009c4c
 80013b0:	200002b0 	.word	0x200002b0
 80013b4:	08009c54 	.word	0x08009c54

080013b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2244      	movs	r2, #68	; 0x44
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 fb47 	bl	8008a5a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80013da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013de:	f003 f951 	bl	8004684 <HAL_PWREx_ControlVoltageScaling>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x34>
		Error_Handler();
 80013e8:	f000 fa22 	bl	8001830 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80013ec:	f003 f92c 	bl	8004648 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <SystemClock_Config+0xc4>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <SystemClock_Config+0xc4>)
 80013f8:	f023 0318 	bic.w	r3, r3, #24
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001400:	231c      	movs	r3, #28
 8001402:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800141c:	2301      	movs	r3, #1
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001424:	2310      	movs	r3, #16
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001428:	2307      	movs	r3, #7
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f979 	bl	8004730 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x90>
		Error_Handler();
 8001444:	f000 f9f4 	bl	8001830 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2303      	movs	r3, #3
 800144e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800145c:	463b      	mov	r3, r7
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fd79 	bl	8004f58 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xb8>
		Error_Handler();
 800146c:	f000 f9e0 	bl	8001830 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001470:	f004 f98c 	bl	800578c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001474:	bf00      	nop
 8001476:	3758      	adds	r7, #88	; 0x58
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <MX_ADC1_Init+0xd8>)
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <MX_ADC1_Init+0xdc>)
 800149a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <MX_ADC1_Init+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 2;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_ADC1_Init+0xd8>)
 80014f8:	f001 f804 	bl	8002504 <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x86>
		Error_Handler();
 8001502:	f000 f995 	bl	8001830 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_ADC1_Init+0xe0>)
 8001508:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800150a:	2306      	movs	r3, #6
 800150c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800150e:	2307      	movs	r3, #7
 8001510:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001512:	237f      	movs	r3, #127	; 0x7f
 8001514:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_ADC1_Init+0xd8>)
 8001524:	f001 fc34 	bl	8002d90 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC1_Init+0xb2>
		Error_Handler();
 800152e:	f000 f97f 	bl	8001830 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_ADC1_Init+0xe4>)
 8001534:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001536:	230c      	movs	r3, #12
 8001538:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_ADC1_Init+0xd8>)
 8001540:	f001 fc26 	bl	8002d90 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0xce>
		Error_Handler();
 800154a:	f000 f971 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000118 	.word	0x20000118
 800155c:	50040000 	.word	0x50040000
 8001560:	c7520000 	.word	0xc7520000
 8001564:	80000001 	.word	0x80000001

08001568 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b092      	sub	sp, #72	; 0x48
 800156c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800156e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = { 0 };
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	222c      	movs	r2, #44	; 0x2c
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f007 fa66 	bl	8008a5a <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <MX_RTC_Init+0x118>)
 8001590:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <MX_RTC_Init+0x11c>)
 8001592:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <MX_RTC_Init+0x118>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_RTC_Init+0x118>)
 800159c:	227f      	movs	r2, #127	; 0x7f
 800159e:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <MX_RTC_Init+0x118>)
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_RTC_Init+0x118>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <MX_RTC_Init+0x118>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_RTC_Init+0x118>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <MX_RTC_Init+0x118>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_RTC_Init+0x118>)
 80015c0:	f004 f9e6 	bl	8005990 <HAL_RTC_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_RTC_Init+0x66>
		Error_Handler();
 80015ca:	f000 f931 	bl	8001830 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80015e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	4823      	ldr	r0, [pc, #140]	; (8001680 <MX_RTC_Init+0x118>)
 80015f2:	f004 fa55 	bl	8005aa0 <HAL_RTC_SetTime>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_RTC_Init+0x98>
		Error_Handler();
 80015fc:	f000 f918 	bl	8001830 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 800160c:	2301      	movs	r3, #1
 800160e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <MX_RTC_Init+0x118>)
 8001622:	f004 fb36 	bl	8005c92 <HAL_RTC_SetDate>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_RTC_Init+0xc8>
		Error_Handler();
 800162c:	f000 f900 	bl	8001830 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001630:	2300      	movs	r3, #0
 8001632:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001634:	2300      	movs	r3, #0
 8001636:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x30;
 8001638:	2330      	movs	r3, #48	; 0x30
 800163a:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_RTC_Init+0x120>)
 800164a:	61bb      	str	r3, [r7, #24]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8001654:	2301      	movs	r3, #1
 8001656:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_RTC_Init+0x118>)
 8001668:	f004 fbe8 	bl	8005e3c <HAL_RTC_SetAlarm_IT>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_RTC_Init+0x10e>
		Error_Handler();
 8001672:	f000 f8dd 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3748      	adds	r7, #72	; 0x48
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000017c 	.word	0x2000017c
 8001684:	40002800 	.word	0x40002800
 8001688:	80808000 	.word	0x80808000

0800168c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_TIM2_Init+0xac>)
 80016ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_TIM2_Init+0xac>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_TIM2_Init+0xac>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_TIM2_Init+0xac>)
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM2_Init+0xac>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM2_Init+0xac>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <MX_TIM2_Init+0xac>)
 80016d4:	f004 fe18 	bl	8006308 <HAL_TIM_IC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x56>
		Error_Handler();
 80016de:	f000 f8a7 	bl	8001830 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <MX_TIM2_Init+0xac>)
 80016f2:	f005 fd91 	bl	8007218 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x74>
		Error_Handler();
 80016fc:	f000 f898 	bl	8001830 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001704:	2301      	movs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <MX_TIM2_Init+0xac>)
 8001718:	f005 fa2e 	bl	8006b78 <HAL_TIM_IC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x9a>
		Error_Handler();
 8001722:	f000 f885 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM2_Init+0xac>)
 800172a:	f004 fe45 	bl	80063b8 <HAL_TIM_IC_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200001a0 	.word	0x200001a0

0800173c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <MX_USART2_UART_Init+0x5c>)
 8001744:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART2_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART2_UART_Init+0x58>)
 8001780:	f005 fdce 	bl	8007320 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800178a:	f000 f851 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001ec 	.word	0x200001ec
 8001798:	40004400 	.word	0x40004400

0800179c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_GPIO_Init+0x8c>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2108      	movs	r1, #8
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <MX_GPIO_Init+0x90>)
 8001800:	f002 ff0a 	bl	8004618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8001804:	2308      	movs	r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_GPIO_Init+0x90>)
 800181c:	f002 fd92 	bl	8004344 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>

0800183a <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8001842:	f7ff fc2b 	bl	800109c <disable>
 8001846:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  restore(mask);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fc34 	bl	80010c2 <restore>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001872:	f7ff fc13 	bl	800109c <disable>
 8001876:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	425a      	negs	r2, r3
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	bf58      	it	pl
 800188a:	4253      	negpl	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6852      	ldr	r2, [r2, #4]
 8001890:	4293      	cmp	r3, r2
 8001892:	d014      	beq.n	80018be <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	425a      	negs	r2, r3
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	f002 021f 	and.w	r2, r2, #31
 80018b0:	bf58      	it	pl
 80018b2:	4253      	negpl	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
    return_val=0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e002      	b.n	80018c4 <enqueue+0x62>
  }
  else {
    return_val=-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fbfc 	bl	80010c2 <restore>
  return (return_val);
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  int return_val=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80018e0:	f7ff fbdc 	bl	800109c <disable>
 80018e4:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d011      	beq.n	8001916 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	7a1b      	ldrb	r3, [r3, #8]
 80018fc:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	425a      	negs	r2, r3
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	bf58      	it	pl
 8001910:	4253      	negpl	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f7ff fbd3 	bl	80010c2 <restore>
  return(return_val);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	b2db      	uxtb	r3, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <RetargetInit+0x28>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <RetargetInit+0x2c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6898      	ldr	r0, [r3, #8]
 800193c:	2300      	movs	r3, #0
 800193e:	2202      	movs	r2, #2
 8001940:	2100      	movs	r1, #0
 8001942:	f006 ff99 	bl	8008878 <setvbuf>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002e0 	.word	0x200002e0
 8001954:	200000dc 	.word	0x200000dc

08001958 <_isatty>:

int _isatty(int fd) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db04      	blt.n	8001970 <_isatty+0x18>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	dc01      	bgt.n	8001970 <_isatty+0x18>
    return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e005      	b.n	800197c <_isatty+0x24>

  errno = EBADF;
 8001970:	f007 f91e 	bl	8008bb0 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	2209      	movs	r2, #9
 8001978:	601a      	str	r2, [r3, #0]
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_write>:

int _write(int fd, char* ptr, int len) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d002      	beq.n	800199c <_write+0x18>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d111      	bne.n	80019c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <_write+0x54>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	f005 fd07 	bl	80073bc <HAL_UART_Transmit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <_write+0x38>
      return len;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	e008      	b.n	80019ce <_write+0x4a>
    else
      return EIO;
 80019bc:	2305      	movs	r3, #5
 80019be:	e006      	b.n	80019ce <_write+0x4a>
  }
  errno = EBADF;
 80019c0:	f007 f8f6 	bl	8008bb0 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2209      	movs	r2, #9
 80019c8:	601a      	str	r2, [r3, #0]
  return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200002e0 	.word	0x200002e0

080019dc <_close>:

int _close(int fd) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db04      	blt.n	80019f4 <_close+0x18>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	dc01      	bgt.n	80019f4 <_close+0x18>
    return 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e006      	b.n	8001a02 <_close+0x26>

  errno = EBADF;
 80019f4:	f007 f8dc 	bl	8008bb0 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2209      	movs	r2, #9
 80019fc:	601a      	str	r2, [r3, #0]
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001a16:	f007 f8cb 	bl	8008bb0 <__errno>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2209      	movs	r2, #9
 8001a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_read>:

int _read(int fd, char* ptr, int len) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d110      	bne.n	8001a60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <_read+0x4c>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	2201      	movs	r2, #1
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	f005 fd41 	bl	80074d0 <HAL_UART_Receive>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <_read+0x30>
      return 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e008      	b.n	8001a6e <_read+0x42>
    else
      return EIO;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	e006      	b.n	8001a6e <_read+0x42>
  }
  errno = EBADF;
 8001a60:	f007 f8a6 	bl	8008bb0 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2209      	movs	r2, #9
 8001a68:	601a      	str	r2, [r3, #0]
  return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002e0 	.word	0x200002e0

08001a7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db08      	blt.n	8001a9e <_fstat+0x22>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	dc05      	bgt.n	8001a9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
    return 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e005      	b.n	8001aaa <_fstat+0x2e>
  }

  errno = EBADF;
 8001a9e:	f007 f887 	bl	8008bb0 <__errno>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2209      	movs	r2, #9
 8001aa6:	601a      	str	r2, [r3, #0]
  return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_MspInit+0x44>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_MspInit+0x44>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b098      	sub	sp, #96	; 0x60
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2254      	movs	r2, #84	; 0x54
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f006 ffa4 	bl	8008a5a <memset>
  if(hadc->Instance==ADC1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_ADC_MspInit+0x90>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d132      	bne.n	8001b82 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b26:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b30:	2310      	movs	r3, #16
 8001b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b34:	2307      	movs	r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fc28 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8001b56:	f7ff fe6b 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_ADC_MspInit+0x94>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_ADC_MspInit+0x94>)
 8001b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_ADC_MspInit+0x94>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2012      	movs	r0, #18
 8001b78:	f002 f827 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b7c:	2012      	movs	r0, #18
 8001b7e:	f002 f840 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3760      	adds	r7, #96	; 0x60
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	50040000 	.word	0x50040000
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b098      	sub	sp, #96	; 0x60
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2254      	movs	r2, #84	; 0x54
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 ff58 	bl	8008a5a <memset>
  if(hrtc->Instance==RTC)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_RTC_MspInit+0x68>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d11f      	bne.n	8001bf4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fbeb 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bd0:	f7ff fe2e 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RTC_MspInit+0x6c>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RTC_MspInit+0x6c>)
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2029      	movs	r0, #41	; 0x29
 8001bea:	f001 ffee 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001bee:	2029      	movs	r0, #41	; 0x29
 8001bf0:	f002 f807 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3760      	adds	r7, #96	; 0x60
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40002800 	.word	0x40002800
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c24:	d130      	bne.n	8001c88 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_TIM_IC_MspInit+0x8c>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c56:	2320      	movs	r3, #32
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f002 fb66 	bl	8004344 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f001 ffa4 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c82:	201c      	movs	r0, #28
 8001c84:	f001 ffbd 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09e      	sub	sp, #120	; 0x78
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2254      	movs	r2, #84	; 0x54
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 fed0 	bl	8008a5a <memset>
  if(huart->Instance==USART2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <HAL_UART_MspInit+0xdc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d150      	bne.n	8001d66 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fb65 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cdc:	f7ff fda8 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0xe0>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d10:	2304      	movs	r3, #4
 8001d12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d20:	2307      	movs	r3, #7
 8001d22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f002 fb09 	bl	8004344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d44:	2303      	movs	r3, #3
 8001d46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f002 faf7 	bl	8004344 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2026      	movs	r0, #38	; 0x26
 8001d5c:	f001 ff35 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d60:	2026      	movs	r0, #38	; 0x26
 8001d62:	f001 ff4e 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3778      	adds	r7, #120	; 0x78
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40004400 	.word	0x40004400
 8001d74:	40021000 	.word	0x40021000

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f932 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <ADC1_IRQHandler+0x10>)
 8001dd2:	f000 fe0b 	bl	80029ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000118 	.word	0x20000118

08001de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM2_IRQHandler+0x10>)
 8001de6:	f004 fdc5 	bl	8006974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200001a0 	.word	0x200001a0

08001df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df8:	480e      	ldr	r0, [pc, #56]	; (8001e34 <USART2_IRQHandler+0x40>)
 8001dfa:	f005 fc33 	bl	8007664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001dfe:	f006 fd19 	bl	8008834 <getchar>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <USART2_IRQHandler+0x44>)
 8001e08:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <USART2_IRQHandler+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480a      	ldr	r0, [pc, #40]	; (8001e3c <USART2_IRQHandler+0x48>)
 8001e12:	f7ff fd26 	bl	8001862 <enqueue>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <USART2_IRQHandler+0x48>)
 8001e1e:	f7ff fd59 	bl	80018d4 <dequeue>
      enqueue(&buf,ch);
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <USART2_IRQHandler+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <USART2_IRQHandler+0x48>)
 8001e2a:	f7ff fd1a 	bl	8001862 <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001ec 	.word	0x200001ec
 8001e38:	200002e4 	.word	0x200002e4
 8001e3c:	20000274 	.word	0x20000274

08001e40 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <RTC_Alarm_IRQHandler+0x14>)
 8001e46:	f004 f935 	bl	80060b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <RTC_Alarm_IRQHandler+0x18>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000017c 	.word	0x2000017c
 8001e58:	200002b0 	.word	0x200002b0

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e76:	f006 fe9b 	bl	8008bb0 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x12>

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f006 fe6e 	bl	8008bb0 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20010000 	.word	0x20010000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	200002e8 	.word	0x200002e8
 8001f08:	20000440 	.word	0x20000440

08001f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LoopForever+0xe>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <LoopForever+0x16>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f006 fe2d 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f62:	f7ff f975 	bl	8001250 <main>

08001f66 <LoopForever>:

LoopForever:
    b LoopForever
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001f74:	08009ea4 	.word	0x08009ea4
  ldr r2, =_sbss
 8001f78:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001f7c:	2000043c 	.word	0x2000043c

08001f80 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <CAN1_RX0_IRQHandler>

08001f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f001 fe11 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f80e 	bl	8001fb4 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	e001      	b.n	8001fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa4:	f7ff fd86 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_InitTick+0x6c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_InitTick+0x70>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_InitTick+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fe1d 	bl	8003c1e <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d809      	bhi.n	8002004 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f001 fde7 	bl	8003bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0x74>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e007      	b.n	8002014 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e004      	b.n	8002014 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e001      	b.n	8002014 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000060 	.word	0x20000060
 8002024:	20000058 	.word	0x20000058
 8002028:	2000005c 	.word	0x2000005c

0800202c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000060 	.word	0x20000060
 8002050:	200002ec 	.word	0x200002ec

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200002ec 	.word	0x200002ec

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffde 	bl	8002054 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000060 	.word	0x20000060

080020b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3360      	adds	r3, #96	; 0x60
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LL_ADC_SetOffset+0x44>)
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	4313      	orrs	r3, r2
 800214c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	03fff000 	.word	0x03fff000

08002164 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	461a      	mov	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3330      	adds	r3, #48	; 0x30
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	211f      	movs	r1, #31
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	f003 011f 	and.w	r1, r3, #31
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	431a      	orrs	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800226a:	b480      	push	{r7}
 800226c:	b087      	sub	sp, #28
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3314      	adds	r3, #20
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0e5b      	lsrs	r3, r3, #25
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	0d1b      	lsrs	r3, r3, #20
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2107      	movs	r1, #7
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	0d1b      	lsrs	r3, r3, #20
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0318 	and.w	r3, r3, #24
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022e4:	40d9      	lsrs	r1, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	400b      	ands	r3, r1
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	0007ffff 	.word	0x0007ffff

08002308 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6093      	str	r3, [r2, #8]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800233c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002340:	d101      	bne.n	8002346 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002368:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002390:	d101      	bne.n	8002396 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e0:	f043 0202 	orr.w	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <LL_ADC_IsEnabled+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_IsEnabled+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d101      	bne.n	8002432 <LL_ADC_IsDisableOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_IsDisableOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002454:	f043 0204 	orr.w	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e126      	b.n	800276c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff fae5 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fef1 	bl	800232c <LL_ADC_IsDeepPowerDownEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fed7 	bl	8002308 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff0c 	bl	800237c <LL_ADC_IsInternalRegulatorEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d115      	bne.n	8002596 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fef0 	bl	8002354 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002574:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <HAL_ADC_Init+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	4a7f      	ldr	r2, [pc, #508]	; (8002778 <HAL_ADC_Init+0x274>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002588:	e002      	b.n	8002590 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff feee 	bl	800237c <LL_ADC_IsInternalRegulatorEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff62 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 80025cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80bf 	bne.w	800275a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80bb 	bne.w	800275a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fefb 	bl	80023f4 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002604:	485d      	ldr	r0, [pc, #372]	; (800277c <HAL_ADC_Init+0x278>)
 8002606:	f7ff fef5 	bl	80023f4 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	485a      	ldr	r0, [pc, #360]	; (8002780 <HAL_ADC_Init+0x27c>)
 8002618:	f7ff fd4c 	bl	80020b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e5b      	ldrb	r3, [r3, #25]
 8002620:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002626:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800262c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002632:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d106      	bne.n	8002658 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	3b01      	subs	r3, #1
 8002650:	045b      	lsls	r3, r3, #17
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_ADC_Init+0x280>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	430b      	orrs	r3, r1
 8002686:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff26 	bl	80024de <LL_ADC_INJ_IsConversionOngoing>
 8002692:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d13d      	bne.n	8002716 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d13a      	bne.n	8002716 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026a4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d118      	bne.n	8002706 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f6:	430a      	orrs	r2, r1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	e007      	b.n	8002716 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10c      	bne.n	8002738 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f023 010f 	bic.w	r1, r3, #15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
 8002736:	e007      	b.n	8002748 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020f 	bic.w	r2, r2, #15
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f023 0303 	bic.w	r3, r3, #3
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
 8002758:	e007      	b.n	800276a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800276a:	7ffb      	ldrb	r3, [r7, #31]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000058 	.word	0x20000058
 8002778:	053e2d63 	.word	0x053e2d63
 800277c:	50040000 	.word	0x50040000
 8002780:	50040300 	.word	0x50040300
 8002784:	fff0c007 	.word	0xfff0c007

08002788 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe7b 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d14f      	bne.n	8002840 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Start+0x26>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e04b      	b.n	8002846 <HAL_ADC_Start+0xbe>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 ff88 	bl	80036cc <ADC_Enable>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d137      	bne.n	8002836 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f023 0206 	bic.w	r2, r3, #6
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	659a      	str	r2, [r3, #88]	; 0x58
 80027f4:	e002      	b.n	80027fc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	221c      	movs	r2, #28
 8002802:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002822:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fe06 	bl	8002440 <LL_ADC_REG_StartConversion>
 8002834:	e006      	b.n	8002844 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800283e:	e001      	b.n	8002844 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002840:	2302      	movs	r3, #2
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_ADC_Stop+0x16>
 8002860:	2302      	movs	r3, #2
 8002862:	e023      	b.n	80028ac <HAL_ADC_Stop+0x5e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800286c:	2103      	movs	r1, #3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fe70 	bl	8003554 <ADC_ConversionStop>
 8002874:	4603      	mov	r3, r0
 8002876:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 ffaa 	bl	80037d8 <ADC_Disable>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d102      	bne.n	80028cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028c6:	2308      	movs	r3, #8
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e010      	b.n	80028ee <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80028ea:	2304      	movs	r3, #4
 80028ec:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ee:	f7ff fbb1 	bl	8002054 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f4:	e021      	b.n	800293a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d01d      	beq.n	800293a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028fe:	f7ff fba9 	bl	8002054 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <HAL_ADC_PollForConversion+0x60>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d112      	bne.n	800293a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e047      	b.n	80029ca <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0d6      	beq.n	80028f6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fc34 	bl	80021c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01c      	beq.n	800299e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7e5b      	ldrb	r3, [r3, #25]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d111      	bne.n	800299e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d104      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2208      	movs	r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e008      	b.n	80029c8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	220c      	movs	r2, #12
 80029c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x56>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 ffe3 	bl	8003a00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_ADC_IRQHandler+0x6a>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05e      	beq.n	8002b1e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d059      	beq.n	8002b1e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fb9d 	bl	80021c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03e      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d135      	bne.n	8002b10 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d12e      	bne.n	8002b10 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fcea 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11a      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 020c 	bic.w	r2, r2, #12
 8002ad0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d112      	bne.n	8002b10 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
 8002af6:	e00b      	b.n	8002b10 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0210 	orr.w	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f91f 	bl	8002d54 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x146>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d072      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06d      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fb6e 	bl	8002244 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b68:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fb29 	bl	80021c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b74:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d047      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x1b2>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03f      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d13a      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d133      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d12e      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fc8f 	bl	80024de <LL_ADC_INJ_IsConversionOngoing>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11a      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bd4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d112      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
 8002bfa:	e00b      	b.n	8002c14 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fecb 	bl	80039b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2260      	movs	r2, #96	; 0x60
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x264>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f890 	bl	8002d68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_ADC_IRQHandler+0x294>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 feb1 	bl	80039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x2c4>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00d      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fea3 	bl	80039ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02a      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x324>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d025      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	e008      	b.n	8002ce4 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10e      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f83a 	bl	8002d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x360>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0208 	orr.w	r2, r3, #8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fe3c 	bl	80039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0b6      	sub	sp, #216	; 0xd8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x22>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e3bb      	b.n	800352a <HAL_ADC_ConfigChannel+0x79a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fb66 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 83a0 	bne.w	800350c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d824      	bhi.n	8002e26 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	3b02      	subs	r3, #2
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d81b      	bhi.n	8002e1e <HAL_ADC_ConfigChannel+0x8e>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_ADC_ConfigChannel+0x5c>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e05 	.word	0x08002e05
 8002df4:	08002e0d 	.word	0x08002e0d
 8002df8:	08002e15 	.word	0x08002e15
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e02:	e010      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e04:	2312      	movs	r3, #18
 8002e06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e0a:	e00c      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e0c:	2318      	movs	r3, #24
 8002e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e12:	e008      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e1e:	2306      	movs	r3, #6
 8002e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e24:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002e34:	f7ff f9da 	bl	80021ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fb27 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002e42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb47 	bl	80024de <LL_ADC_INJ_IsConversionOngoing>
 8002e50:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 81a4 	bne.w	80031a6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 819f 	bne.w	80031a6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff f9f8 	bl	800226a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eac:	f7ff f936 	bl	800211c <LL_ADC_SetOffset>
 8002eb0:	e179      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f953 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x14e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f948 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	e01e      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x18c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff f93d 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002efc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e004      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1a4>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	e018      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x1d6>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e004      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f90c 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f8f0 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x214>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f8e5 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	e01e      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x252>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f8da 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e004      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x26a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e018      	b.n	800302c <HAL_ADC_ConfigChannel+0x29c>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800300e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003012:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003016:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e004      	b.n	800302c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800302c:	429a      	cmp	r2, r3
 800302e:	d106      	bne.n	800303e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f8a9 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f88d 	bl	8002164 <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x2da>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f882 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	e01e      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x318>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f877 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e004      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800309c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x330>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	e014      	b.n	80030ea <HAL_ADC_ConfigChannel+0x35a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80030ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030dc:	2320      	movs	r3, #32
 80030de:	e004      	b.n	80030ea <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d106      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2102      	movs	r1, #2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f84a 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f82e 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x398>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2103      	movs	r1, #3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f823 	bl	8002164 <LL_ADC_GetOffsetChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	e017      	b.n	8003158 <HAL_ADC_ConfigChannel+0x3c8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f818 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003142:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800314e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x3e0>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	e011      	b.n	8003194 <HAL_ADC_ConfigChannel+0x404>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800317e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003180:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e003      	b.n	8003194 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800318c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	2103      	movs	r1, #3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fff5 	bl	8002190 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f922 	bl	80023f4 <LL_ADC_IsEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 8140 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f7ff f87b 	bl	80022c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a8f      	ldr	r2, [pc, #572]	; (800340c <HAL_ADC_ConfigChannel+0x67c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	f040 8131 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x46e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	3301      	adds	r3, #1
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	bf94      	ite	ls
 80031f6:	2301      	movls	r3, #1
 80031f8:	2300      	movhi	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e019      	b.n	8003232 <HAL_ADC_ConfigChannel+0x4a2>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e003      	b.n	8003222 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800321a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2b09      	cmp	r3, #9
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003232:	2b00      	cmp	r3, #0
 8003234:	d079      	beq.n	800332a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x4c2>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	3301      	adds	r3, #1
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003250:	e015      	b.n	800327e <HAL_ADC_ConfigChannel+0x4ee>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e003      	b.n	8003276 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800326e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	069b      	lsls	r3, r3, #26
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_ADC_ConfigChannel+0x50e>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0e9b      	lsrs	r3, r3, #26
 8003290:	3301      	adds	r3, #1
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	e017      	b.n	80032ce <HAL_ADC_ConfigChannel+0x53e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80032ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80032b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e003      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	ea42 0103 	orr.w	r1, r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x564>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	051b      	lsls	r3, r3, #20
 80032f2:	e018      	b.n	8003326 <HAL_ADC_ConfigChannel+0x596>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f003 021f 	and.w	r2, r3, #31
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003326:	430b      	orrs	r3, r1
 8003328:	e081      	b.n	800342e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x5b6>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	3301      	adds	r3, #1
 800333e:	069b      	lsls	r3, r3, #26
 8003340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003344:	e015      	b.n	8003372 <HAL_ADC_ConfigChannel+0x5e2>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800335e:	2320      	movs	r3, #32
 8003360:	e003      	b.n	800336a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3301      	adds	r3, #1
 800336c:	069b      	lsls	r3, r3, #26
 800336e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x602>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	3301      	adds	r3, #1
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	e017      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x632>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	61bb      	str	r3, [r7, #24]
  return result;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10d      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x65e>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ec:	e01e      	b.n	800342c <HAL_ADC_ConfigChannel+0x69c>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  return result;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e006      	b.n	8003418 <HAL_ADC_ConfigChannel+0x688>
 800340a:	bf00      	nop
 800340c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	3b1e      	subs	r3, #30
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003432:	4619      	mov	r1, r3
 8003434:	f7fe ff19 	bl	800226a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_ADC_ConfigChannel+0x7a4>)
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d06c      	beq.n	800351e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003444:	483c      	ldr	r0, [pc, #240]	; (8003538 <HAL_ADC_ConfigChannel+0x7a8>)
 8003446:	f7fe fe5b 	bl	8002100 <LL_ADC_GetCommonPathInternalCh>
 800344a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3a      	ldr	r2, [pc, #232]	; (800353c <HAL_ADC_ConfigChannel+0x7ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d127      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d121      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a35      	ldr	r2, [pc, #212]	; (8003540 <HAL_ADC_ConfigChannel+0x7b0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d157      	bne.n	800351e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003472:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003476:	4619      	mov	r1, r3
 8003478:	482f      	ldr	r0, [pc, #188]	; (8003538 <HAL_ADC_ConfigChannel+0x7a8>)
 800347a:	f7fe fe2e 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_ADC_ConfigChannel+0x7b4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_ADC_ConfigChannel+0x7b8>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003498:	e002      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3b01      	subs	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f9      	bne.n	800349a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a6:	e03a      	b.n	800351e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <HAL_ADC_ConfigChannel+0x7bc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d113      	bne.n	80034da <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <HAL_ADC_ConfigChannel+0x7b0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d12a      	bne.n	800351e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d0:	4619      	mov	r1, r3
 80034d2:	4819      	ldr	r0, [pc, #100]	; (8003538 <HAL_ADC_ConfigChannel+0x7a8>)
 80034d4:	f7fe fe01 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d8:	e021      	b.n	800351e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_ADC_ConfigChannel+0x7c0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d11c      	bne.n	800351e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_ADC_ConfigChannel+0x7b0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003502:	4619      	mov	r1, r3
 8003504:	480c      	ldr	r0, [pc, #48]	; (8003538 <HAL_ADC_ConfigChannel+0x7a8>)
 8003506:	f7fe fde8 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
 800350a:	e008      	b.n	800351e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003526:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800352a:	4618      	mov	r0, r3
 800352c:	37d8      	adds	r7, #216	; 0xd8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	80080000 	.word	0x80080000
 8003538:	50040300 	.word	0x50040300
 800353c:	c7520000 	.word	0xc7520000
 8003540:	50040000 	.word	0x50040000
 8003544:	20000058 	.word	0x20000058
 8003548:	053e2d63 	.word	0x053e2d63
 800354c:	cb840000 	.word	0xcb840000
 8003550:	80000001 	.word	0x80000001

08003554 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe ff90 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8003570:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ffb1 	bl	80024de <LL_ADC_INJ_IsConversionOngoing>
 800357c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8098 	beq.w	80036bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02a      	beq.n	80035f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7e5b      	ldrb	r3, [r3, #25]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d126      	bne.n	80035f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7e1b      	ldrb	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d122      	bne.n	80035f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ae:	e014      	b.n	80035da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <ADC_ConversionStop+0x174>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d90d      	bls.n	80035d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0210 	orr.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e074      	b.n	80036be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d1e3      	bne.n	80035b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2240      	movs	r2, #64	; 0x40
 80035ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d014      	beq.n	8003620 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff48 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe ff05 	bl	800241a <LL_ADC_IsDisableOngoing>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe ff24 	bl	8002468 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d014      	beq.n	8003650 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe ff57 	bl	80024de <LL_ADC_INJ_IsConversionOngoing>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe feed 	bl	800241a <LL_ADC_IsDisableOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff33 	bl	80024b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d005      	beq.n	8003662 <ADC_ConversionStop+0x10e>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d105      	bne.n	8003668 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800365c:	230c      	movs	r3, #12
 800365e:	617b      	str	r3, [r7, #20]
        break;
 8003660:	e005      	b.n	800366e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003662:	2308      	movs	r3, #8
 8003664:	617b      	str	r3, [r7, #20]
        break;
 8003666:	e002      	b.n	800366e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003668:	2304      	movs	r3, #4
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800366e:	f7fe fcf1 	bl	8002054 <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003674:	e01b      	b.n	80036ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003676:	f7fe fced 	bl	8002054 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b05      	cmp	r3, #5
 8003682:	d914      	bls.n	80036ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1dc      	bne.n	8003676 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	a33fffff 	.word	0xa33fffff

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fe89 	bl	80023f4 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d169      	bne.n	80037bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <ADC_Enable+0xfc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e055      	b.n	80037be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fe44 	bl	80023a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800371c:	482b      	ldr	r0, [pc, #172]	; (80037cc <ADC_Enable+0x100>)
 800371e:	f7fe fcef 	bl	8002100 <LL_ADC_GetCommonPathInternalCh>
 8003722:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <ADC_Enable+0x104>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <ADC_Enable+0x108>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003746:	e002      	b.n	800374e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3b01      	subs	r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f9      	bne.n	8003748 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003754:	f7fe fc7e 	bl	8002054 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375a:	e028      	b.n	80037ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fe47 	bl	80023f4 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fe17 	bl	80023a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003776:	f7fe fc6d 	bl	8002054 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d914      	bls.n	80037ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00d      	beq.n	80037ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1cf      	bne.n	800375c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	8000003f 	.word	0x8000003f
 80037cc:	50040300 	.word	0x50040300
 80037d0:	20000058 	.word	0x20000058
 80037d4:	053e2d63 	.word	0x053e2d63

080037d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fe18 	bl	800241a <LL_ADC_IsDisableOngoing>
 80037ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fdff 	bl	80023f4 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d144      	bne.n	800388c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030d 	and.w	r3, r3, #13
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fdd9 	bl	80023cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003822:	f7fe fc17 	bl	8002054 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003828:	e029      	b.n	800387e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003846:	f7fe fc05 	bl	8002054 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d914      	bls.n	800387e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1dc      	bne.n	8003846 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <LL_ADC_StartCalibration>:
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80038a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038dc:	d101      	bne.n	80038e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_ADCEx_Calibration_Start+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e04d      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff5f 	bl	80037d8 <ADC_Disable>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d136      	bne.n	8003992 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800392c:	f023 0302 	bic.w	r3, r3, #2
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ffa9 	bl	8003896 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003944:	e014      	b.n	8003970 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3301      	adds	r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003952:	d30d      	bcc.n	8003970 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f023 0312 	bic.w	r3, r3, #18
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01b      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ffa7 	bl	80038c8 <LL_ADC_IsCalibrationOnGoing>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e2      	bne.n	8003946 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
 8003990:	e005      	b.n	800399e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff8e 	bl	8003ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff29 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff3e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff8e 	bl	8003b08 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5d 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff31 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa2 	bl	8003b70 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Start_IT+0x20>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e04b      	b.n	8003cee <HAL_DMA_Start_IT+0xb8>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d13a      	bne.n	8003ce0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f8b0 	bl	8003df4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 020e 	orr.w	r2, r2, #14
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e00f      	b.n	8003cce <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0204 	bic.w	r2, r2, #4
 8003cbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 020a 	orr.w	r2, r2, #10
 8003ccc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e005      	b.n	8003cec <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d008      	beq.n	8003d20 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e022      	b.n	8003d66 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020e 	bic.w	r2, r2, #14
 8003d2e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f003 021c 	and.w	r2, r3, #28
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d005      	beq.n	8003d96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e029      	b.n	8003dea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 020e 	bic.w	r2, r2, #14
 8003da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 021c 	and.w	r2, r3, #28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
    }
  }
  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f003 021c 	and.w	r2, r3, #28
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d108      	bne.n	8003e38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e36:	e007      	b.n	8003e48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_FLASH_Program+0x1e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e053      	b.n	8003f1a <HAL_FLASH_Program+0xc6>
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e7c:	f000 f888 	bl	8003f90 <FLASH_WaitForLastOperation>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d143      	bne.n	8003f12 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_FLASH_Program+0xd4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_FLASH_Program+0xd4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_FLASH_Program+0xd4>)
 8003ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	771a      	strb	r2, [r3, #28]
 8003eae:	e002      	b.n	8003eb6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f000 f8bd 	bl	8004040 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e010      	b.n	8003eee <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d002      	beq.n	8003ed8 <HAL_FLASH_Program+0x84>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d10a      	bne.n	8003eee <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f000 f8d5 	bl	800408c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d102      	bne.n	8003eee <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003ee8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eec:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ef2:	f000 f84d 	bl	8003f90 <FLASH_WaitForLastOperation>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_FLASH_Program+0xd4>)
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <HAL_FLASH_Program+0xd4>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f0e:	f000 f9cf 	bl	80042b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_FLASH_Program+0xd0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]

  return status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000064 	.word	0x20000064
 8003f28:	40022000 	.word	0x40022000

08003f2c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_FLASH_Unlock+0x38>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da0b      	bge.n	8003f56 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_FLASH_Unlock+0x38>)
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_FLASH_Unlock+0x3c>)
 8003f42:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_FLASH_Unlock+0x38>)
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_FLASH_Unlock+0x40>)
 8003f48:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_FLASH_Unlock+0x38>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da01      	bge.n	8003f56 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f56:	79fb      	ldrb	r3, [r7, #7]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40022000 	.word	0x40022000
 8003f68:	45670123 	.word	0x45670123
 8003f6c:	cdef89ab 	.word	0xcdef89ab

08003f70 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_FLASH_Lock+0x1c>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_FLASH_Lock+0x1c>)
 8003f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f7e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40022000 	.word	0x40022000

08003f90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7fe f85c 	bl	8002054 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003f9e:	e00d      	b.n	8003fbc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	d009      	beq.n	8003fbc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003fa8:	f7fe f854 	bl	8002054 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d801      	bhi.n	8003fbc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e036      	b.n	800402a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1eb      	bne.n	8003fa0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <FLASH_WaitForLastOperation+0xa8>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01e      	beq.n	8004016 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <FLASH_WaitForLastOperation+0xac>)
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <FLASH_WaitForLastOperation+0xac>)
 8003fe2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <FLASH_WaitForLastOperation+0x6e>
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003ff8:	490e      	ldr	r1, [pc, #56]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	618b      	str	r3, [r1, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <FLASH_WaitForLastOperation+0x82>
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004010:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e009      	b.n	800402a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <FLASH_WaitForLastOperation+0xa4>)
 8004024:	2201      	movs	r2, #1
 8004026:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40022000 	.word	0x40022000
 8004038:	0002c3fa 	.word	0x0002c3fa
 800403c:	20000064 	.word	0x20000064

08004040 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <FLASH_Program_DoubleWord+0x48>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <FLASH_Program_DoubleWord+0x48>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800405e:	f3bf 8f6f 	isb	sy
}
 8004062:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	000a      	movs	r2, r1
 8004072:	2300      	movs	r3, #0
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	3104      	adds	r1, #4
 8004078:	4613      	mov	r3, r2
 800407a:	600b      	str	r3, [r1, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40022000 	.word	0x40022000

0800408c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <FLASH_Program_Fast+0x68>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <FLASH_Program_Fast+0x68>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040b4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80040b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	3304      	adds	r3, #4
 80040c8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3304      	adds	r3, #4
 80040ce:	617b      	str	r3, [r7, #20]
    row_index--;
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ef      	bne.n	80040bc <FLASH_Program_Fast+0x30>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80040e8:	bf00      	nop
 80040ea:	3724      	adds	r7, #36	; 0x24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40022000 	.word	0x40022000

080040f8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_FLASHEx_Erase+0x16>
 800410a:	2302      	movs	r3, #2
 800410c:	e085      	b.n	800421a <HAL_FLASHEx_Erase+0x122>
 800410e:	4b45      	ldr	r3, [pc, #276]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004118:	f7ff ff3a 	bl	8003f90 <FLASH_WaitForLastOperation>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d175      	bne.n	8004212 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800412c:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004138:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 800414a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004150:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004152:	2203      	movs	r2, #3
 8004154:	771a      	strb	r2, [r3, #28]
 8004156:	e016      	b.n	8004186 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 800415a:	2201      	movs	r2, #1
 800415c:	771a      	strb	r2, [r3, #28]
 800415e:	e012      	b.n	8004186 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004160:	4b31      	ldr	r3, [pc, #196]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 8004172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004176:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 800417a:	2202      	movs	r2, #2
 800417c:	771a      	strb	r2, [r3, #28]
 800417e:	e002      	b.n	8004186 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004180:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004182:	2200      	movs	r2, #0
 8004184:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d111      	bne.n	80041b2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f84a 	bl	800422c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004198:	f24c 3050 	movw	r0, #50000	; 0xc350
 800419c:	f7ff fef8 	bl	8003f90 <FLASH_WaitForLastOperation>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6153      	str	r3, [r2, #20]
 80041b0:	e02d      	b.n	800420e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	e01d      	b.n	80041fe <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4619      	mov	r1, r3
 80041c8:	68b8      	ldr	r0, [r7, #8]
 80041ca:	f000 f84d 	bl	8004268 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041d2:	f7ff fedd 	bl	8003f90 <FLASH_WaitForLastOperation>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_FLASHEx_Erase+0x130>)
 80041e0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80041e4:	f023 0302 	bic.w	r3, r3, #2
 80041e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	601a      	str	r2, [r3, #0]
          break;
 80041f6:	e00a      	b.n	800420e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4413      	add	r3, r2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3d9      	bcc.n	80041c2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800420e:	f000 f84f 	bl	80042b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_FLASHEx_Erase+0x12c>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000064 	.word	0x20000064
 8004228:	40022000 	.word	0x40022000

0800422c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <FLASH_MassErase+0x38>)
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <FLASH_MassErase+0x38>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <FLASH_MassErase+0x38>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <FLASH_MassErase+0x38>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6153      	str	r3, [r2, #20]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40022000 	.word	0x40022000

08004268 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <FLASH_PageErase+0x44>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004282:	490a      	ldr	r1, [pc, #40]	; (80042ac <FLASH_PageErase+0x44>)
 8004284:	4313      	orrs	r3, r2
 8004286:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <FLASH_PageErase+0x44>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <FLASH_PageErase+0x44>)
 800428e:	f043 0302 	orr.w	r3, r3, #2
 8004292:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <FLASH_PageErase+0x44>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <FLASH_PageErase+0x44>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6153      	str	r3, [r2, #20]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40022000 	.word	0x40022000

080042b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80042b6:	4b21      	ldr	r3, [pc, #132]	; (800433c <FLASH_FlushCaches+0x8c>)
 80042b8:	7f1b      	ldrb	r3, [r3, #28]
 80042ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d002      	beq.n	80042c8 <FLASH_FlushCaches+0x18>
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d117      	bne.n	80042f8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a16      	ldr	r2, [pc, #88]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <FLASH_FlushCaches+0x90>)
 80042f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d002      	beq.n	8004304 <FLASH_FlushCaches+0x54>
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d111      	bne.n	8004328 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <FLASH_FlushCaches+0x90>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <FLASH_FlushCaches+0x90>)
 800430a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <FLASH_FlushCaches+0x90>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <FLASH_FlushCaches+0x90>)
 8004316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800431a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <FLASH_FlushCaches+0x90>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a07      	ldr	r2, [pc, #28]	; (8004340 <FLASH_FlushCaches+0x90>)
 8004322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004326:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <FLASH_FlushCaches+0x8c>)
 800432a:	2200      	movs	r2, #0
 800432c:	771a      	strb	r2, [r3, #28]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000064 	.word	0x20000064
 8004340:	40022000 	.word	0x40022000

08004344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004352:	e148      	b.n	80045e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 813a 	beq.w	80045e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d005      	beq.n	8004384 <HAL_GPIO_Init+0x40>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d130      	bne.n	80043e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ba:	2201      	movs	r2, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0201 	and.w	r2, r3, #1
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d017      	beq.n	8004422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d123      	bne.n	8004476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	220f      	movs	r2, #15
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	08da      	lsrs	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3208      	adds	r2, #8
 8004470:	6939      	ldr	r1, [r7, #16]
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0203 	and.w	r2, r3, #3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8094 	beq.w	80045e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b8:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_GPIO_Init+0x2c0>)
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	4a51      	ldr	r2, [pc, #324]	; (8004604 <HAL_GPIO_Init+0x2c0>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6613      	str	r3, [r2, #96]	; 0x60
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <HAL_GPIO_Init+0x2c0>)
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_GPIO_Init+0x2c4>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	3302      	adds	r3, #2
 80044d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	220f      	movs	r2, #15
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044fa:	d00d      	beq.n	8004518 <HAL_GPIO_Init+0x1d4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a43      	ldr	r2, [pc, #268]	; (800460c <HAL_GPIO_Init+0x2c8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <HAL_GPIO_Init+0x1d0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_GPIO_Init+0x2cc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_GPIO_Init+0x1cc>
 800450c:	2302      	movs	r3, #2
 800450e:	e004      	b.n	800451a <HAL_GPIO_Init+0x1d6>
 8004510:	2307      	movs	r3, #7
 8004512:	e002      	b.n	800451a <HAL_GPIO_Init+0x1d6>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_GPIO_Init+0x1d6>
 8004518:	2300      	movs	r3, #0
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	f002 0203 	and.w	r2, r2, #3
 8004520:	0092      	lsls	r2, r2, #2
 8004522:	4093      	lsls	r3, r2
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800452a:	4937      	ldr	r1, [pc, #220]	; (8004608 <HAL_GPIO_Init+0x2c4>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	3302      	adds	r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004538:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004562:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004586:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045da:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_GPIO_Init+0x2d0>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f47f aeaf 	bne.w	8004354 <HAL_GPIO_Init+0x10>
  }
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40021000 	.word	0x40021000
 8004608:	40010000 	.word	0x40010000
 800460c:	48000400 	.word	0x48000400
 8004610:	48000800 	.word	0x48000800
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
 8004624:	4613      	mov	r3, r2
 8004626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004628:	787b      	ldrb	r3, [r7, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004634:	e002      	b.n	800463c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40007000 	.word	0x40007000

08004668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <HAL_PWREx_GetVoltageRange+0x18>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40007000 	.word	0x40007000

08004684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004692:	d130      	bne.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d038      	beq.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2232      	movs	r2, #50	; 0x32
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0c9b      	lsrs	r3, r3, #18
 80046c4:	3301      	adds	r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c8:	e002      	b.n	80046d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d102      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f2      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d110      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00f      	b.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004702:	d007      	beq.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800470c:	4a05      	ldr	r2, [pc, #20]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40007000 	.word	0x40007000
 8004728:	20000058 	.word	0x20000058
 800472c:	431bde83 	.word	0x431bde83

08004730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f000 bc02 	b.w	8004f48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004744:	4b96      	ldr	r3, [pc, #600]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474e:	4b94      	ldr	r3, [pc, #592]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80e4 	beq.w	800492e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_RCC_OscConfig+0x4c>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	f040 808b 	bne.w	800488a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b01      	cmp	r3, #1
 8004778:	f040 8087 	bne.w	800488a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800477c:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_OscConfig+0x64>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e3d9      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_RCC_OscConfig+0x7e>
 80047a4:	4b7e      	ldr	r3, [pc, #504]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ac:	e005      	b.n	80047ba <HAL_RCC_OscConfig+0x8a>
 80047ae:	4b7c      	ldr	r3, [pc, #496]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d223      	bcs.n	8004806 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd8c 	bl	80052e0 <RCC_SetFlashLatencyFromMSIRange>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e3ba      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d2:	4b73      	ldr	r3, [pc, #460]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a72      	ldr	r2, [pc, #456]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047d8:	f043 0308 	orr.w	r3, r3, #8
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	496d      	ldr	r1, [pc, #436]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f0:	4b6b      	ldr	r3, [pc, #428]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4968      	ldr	r1, [pc, #416]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
 8004804:	e025      	b.n	8004852 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004806:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800480c:	f043 0308 	orr.w	r3, r3, #8
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b63      	ldr	r3, [pc, #396]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4960      	ldr	r1, [pc, #384]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	495b      	ldr	r1, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fd4c 	bl	80052e0 <RCC_SetFlashLatencyFromMSIRange>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e37a      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004852:	f000 fc81 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8004856:	4602      	mov	r2, r0
 8004858:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	4950      	ldr	r1, [pc, #320]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004864:	5ccb      	ldrb	r3, [r1, r3]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a4e      	ldr	r2, [pc, #312]	; (80049a8 <HAL_RCC_OscConfig+0x278>)
 8004870:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004872:	4b4e      	ldr	r3, [pc, #312]	; (80049ac <HAL_RCC_OscConfig+0x27c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd fb9c 	bl	8001fb4 <HAL_InitTick>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d052      	beq.n	800492c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	e35e      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d032      	beq.n	80048f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800489e:	f7fd fbd9 	bl	8002054 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048a6:	f7fd fbd5 	bl	8002054 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e347      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4930      	ldr	r1, [pc, #192]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e2:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	492b      	ldr	r1, [pc, #172]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
 80048f6:	e01a      	b.n	800492e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048f8:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004904:	f7fd fba6 	bl	8002054 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800490c:	f7fd fba2 	bl	8002054 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e314      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800491e:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x1dc>
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800492c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d073      	beq.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d005      	beq.n	800494c <HAL_RCC_OscConfig+0x21c>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d10e      	bne.n	8004964 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10b      	bne.n	8004964 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d063      	beq.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d15f      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e2f1      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d106      	bne.n	800497c <HAL_RCC_OscConfig+0x24c>
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a0b      	ldr	r2, [pc, #44]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e025      	b.n	80049c8 <HAL_RCC_OscConfig+0x298>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004984:	d114      	bne.n	80049b0 <HAL_RCC_OscConfig+0x280>
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e013      	b.n	80049c8 <HAL_RCC_OscConfig+0x298>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08009c68 	.word	0x08009c68
 80049a8:	20000058 	.word	0x20000058
 80049ac:	2000005c 	.word	0x2000005c
 80049b0:	4ba0      	ldr	r3, [pc, #640]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a9f      	ldr	r2, [pc, #636]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b9d      	ldr	r3, [pc, #628]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9c      	ldr	r2, [pc, #624]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd fb40 	bl	8002054 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd fb3c 	bl	8002054 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e2ae      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ea:	4b92      	ldr	r3, [pc, #584]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2a8>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd fb2c 	bl	8002054 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd fb28 	bl	8002054 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e29a      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a12:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2d0>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d060      	beq.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_OscConfig+0x310>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d116      	bne.n	8004a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a40:	4b7c      	ldr	r3, [pc, #496]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x328>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e277      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	4973      	ldr	r1, [pc, #460]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6c:	e040      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d023      	beq.n	8004abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a76:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6e      	ldr	r2, [pc, #440]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fd fae7 	bl	8002054 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fae3 	bl	8002054 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e255      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9c:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	495f      	ldr	r1, [pc, #380]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	e018      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5c      	ldr	r2, [pc, #368]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fac3 	bl	8002054 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fabf 	bl	8002054 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e231      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b04:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fd fa9e 	bl	8002054 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fd fa9a 	bl	8002054 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e20c      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b2e:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ef      	beq.n	8004b1c <HAL_RCC_OscConfig+0x3ec>
 8004b3c:	e01b      	b.n	8004b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b44:	4a3b      	ldr	r2, [pc, #236]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fa81 	bl	8002054 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fd fa7d 	bl	8002054 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1ef      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b68:	4b32      	ldr	r3, [pc, #200]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ef      	bne.n	8004b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a6 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b88:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba0:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d118      	bne.n	8004bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc8:	f7fd fa44 	bl	8002054 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fd fa40 	bl	8002054 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1b2      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4d8>
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c06:	e029      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d115      	bne.n	8004c3c <HAL_RCC_OscConfig+0x50c>
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c30:	e014      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	4b9a      	ldr	r3, [pc, #616]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	4a99      	ldr	r2, [pc, #612]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4c:	4b96      	ldr	r3, [pc, #600]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	4a95      	ldr	r2, [pc, #596]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d016      	beq.n	8004c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fd f9f6 	bl	8002054 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fd f9f2 	bl	8002054 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e162      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	4b89      	ldr	r3, [pc, #548]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ed      	beq.n	8004c6c <HAL_RCC_OscConfig+0x53c>
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fd f9df 	bl	8002054 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fd f9db 	bl	8002054 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e14b      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb0:	4b7d      	ldr	r3, [pc, #500]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ed      	bne.n	8004c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cbe:	7ffb      	ldrb	r3, [r7, #31]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b78      	ldr	r3, [pc, #480]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	4a77      	ldr	r2, [pc, #476]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d03c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01c      	beq.n	8004d1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ce4:	4b70      	ldr	r3, [pc, #448]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cea:	4a6f      	ldr	r2, [pc, #444]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd f9ae 	bl	8002054 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cfc:	f7fd f9aa 	bl	8002054 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e11c      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d0e:	4b66      	ldr	r3, [pc, #408]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ef      	beq.n	8004cfc <HAL_RCC_OscConfig+0x5cc>
 8004d1c:	e01b      	b.n	8004d56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d1e:	4b62      	ldr	r3, [pc, #392]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d24:	4a60      	ldr	r2, [pc, #384]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fd f991 	bl	8002054 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d36:	f7fd f98d 	bl	8002054 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0ff      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d48:	4b57      	ldr	r3, [pc, #348]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ef      	bne.n	8004d36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80f3 	beq.w	8004f46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f040 80c9 	bne.w	8004efc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d12c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d123      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d113      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d06b      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d062      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dde:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0ac      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dee:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dfa:	f7fd f92b 	bl	8002054 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fd f927 	bl	8002054 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e099      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e20:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	4b21      	ldr	r3, [pc, #132]	; (8004eac <HAL_RCC_OscConfig+0x77c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e30:	3a01      	subs	r2, #1
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	4311      	orrs	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e3a:	0212      	lsls	r2, r2, #8
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0552      	lsls	r2, r2, #21
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0652      	lsls	r2, r2, #25
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e5a:	06d2      	lsls	r2, r2, #27
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	4912      	ldr	r1, [pc, #72]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e64:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e7c:	f7fd f8ea 	bl	8002054 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd f8e6 	bl	8002054 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e058      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ea2:	e050      	b.n	8004f46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e04f      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d144      	bne.n	8004f46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ed4:	f7fd f8be 	bl	8002054 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fd f8ba 	bl	8002054 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e02c      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x7ac>
 8004efa:	e024      	b.n	8004f46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d01f      	beq.n	8004f42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fd f8a1 	bl	8002054 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd f89d 	bl	8002054 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e00f      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	4905      	ldr	r1, [pc, #20]	; (8004f50 <HAL_RCC_OscConfig+0x820>)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x824>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	60cb      	str	r3, [r1, #12]
 8004f40:	e001      	b.n	8004f46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	feeefffc 	.word	0xfeeefffc

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0e7      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b75      	ldr	r3, [pc, #468]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d910      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b72      	ldr	r3, [pc, #456]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 0207 	bic.w	r2, r3, #7
 8004f82:	4970      	ldr	r1, [pc, #448]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0cf      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	4b66      	ldr	r3, [pc, #408]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d908      	bls.n	8004fca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b63      	ldr	r3, [pc, #396]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4960      	ldr	r1, [pc, #384]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d04c      	beq.n	8005070 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	4b5a      	ldr	r3, [pc, #360]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d121      	bne.n	800502e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0a6      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff6:	4b54      	ldr	r3, [pc, #336]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d115      	bne.n	800502e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e09a      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800500e:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e08e      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e086      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800502e:	4b46      	ldr	r3, [pc, #280]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4943      	ldr	r1, [pc, #268]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fd f808 	bl	8002054 <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fd f804 	bl	8002054 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e06e      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 020c 	and.w	r2, r3, #12
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	429a      	cmp	r2, r3
 800506e:	d1eb      	bne.n	8005048 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	4b31      	ldr	r3, [pc, #196]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	429a      	cmp	r2, r3
 800508a:	d208      	bcs.n	800509e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	492b      	ldr	r1, [pc, #172]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d210      	bcs.n	80050ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 0207 	bic.w	r2, r3, #7
 80050b4:	4923      	ldr	r1, [pc, #140]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050bc:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_RCC_ClockConfig+0x1ec>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e036      	b.n	800513c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4918      	ldr	r1, [pc, #96]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4910      	ldr	r1, [pc, #64]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800510c:	f000 f824 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	490b      	ldr	r1, [pc, #44]	; (800514c <HAL_RCC_ClockConfig+0x1f4>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
 8005128:	4a09      	ldr	r2, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1f8>)
 800512a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_ClockConfig+0x1fc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7fc ff3f 	bl	8001fb4 <HAL_InitTick>
 8005136:	4603      	mov	r3, r0
 8005138:	72fb      	strb	r3, [r7, #11]

  return status;
 800513a:	7afb      	ldrb	r3, [r7, #11]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40022000 	.word	0x40022000
 8005148:	40021000 	.word	0x40021000
 800514c:	08009c68 	.word	0x08009c68
 8005150:	20000058 	.word	0x20000058
 8005154:	2000005c 	.word	0x2000005c

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005166:	4b3e      	ldr	r3, [pc, #248]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005170:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0c      	cmp	r3, #12
 8005184:	d121      	bne.n	80051ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d11e      	bne.n	80051ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005198:	4b31      	ldr	r3, [pc, #196]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 800519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e005      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051a8:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d102      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <HAL_RCC_GetSysClockFreq+0x110>)
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e004      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051dc:	4b23      	ldr	r3, [pc, #140]	; (800526c <HAL_RCC_GetSysClockFreq+0x114>)
 80051de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d134      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051e6:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d003      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0xa6>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d003      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0xac>
 80051fc:	e005      	b.n	800520a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051fe:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <HAL_RCC_GetSysClockFreq+0x110>)
 8005200:	617b      	str	r3, [r7, #20]
      break;
 8005202:	e005      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_RCC_GetSysClockFreq+0x114>)
 8005206:	617b      	str	r3, [r7, #20]
      break;
 8005208:	e002      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	617b      	str	r3, [r7, #20]
      break;
 800520e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	3301      	adds	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	fb03 f202 	mul.w	r2, r3, r2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_RCC_GetSysClockFreq+0x108>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	0e5b      	lsrs	r3, r3, #25
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	3301      	adds	r3, #1
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	fbb2 f3f3 	udiv	r3, r2, r3
 800524e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005250:	69bb      	ldr	r3, [r7, #24]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3724      	adds	r7, #36	; 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
 8005264:	08009c80 	.word	0x08009c80
 8005268:	00f42400 	.word	0x00f42400
 800526c:	007a1200 	.word	0x007a1200

08005270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCC_GetHCLKFreq+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000058 	.word	0x20000058

08005288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800528c:	f7ff fff0 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4904      	ldr	r1, [pc, #16]	; (80052b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	08009c78 	.word	0x08009c78

080052b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052b8:	f7ff ffda 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0adb      	lsrs	r3, r3, #11
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4904      	ldr	r1, [pc, #16]	; (80052dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000
 80052dc:	08009c78 	.word	0x08009c78

080052e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052ec:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052f8:	f7ff f9b6 	bl	8004668 <HAL_PWREx_GetVoltageRange>
 80052fc:	6178      	str	r0, [r7, #20]
 80052fe:	e014      	b.n	800532a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	4a24      	ldr	r2, [pc, #144]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	6593      	str	r3, [r2, #88]	; 0x58
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005318:	f7ff f9a6 	bl	8004668 <HAL_PWREx_GetVoltageRange>
 800531c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800531e:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005328:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d10b      	bne.n	800534a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d919      	bls.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2ba0      	cmp	r3, #160	; 0xa0
 800533c:	d902      	bls.n	8005344 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800533e:	2302      	movs	r3, #2
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e013      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005344:	2301      	movs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e010      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d902      	bls.n	8005356 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005350:	2303      	movs	r3, #3
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e00a      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d102      	bne.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800535c:	2302      	movs	r3, #2
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e004      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b70      	cmp	r3, #112	; 0x70
 8005366:	d101      	bne.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005368:	2301      	movs	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f023 0207 	bic.w	r2, r3, #7
 8005374:	4909      	ldr	r1, [pc, #36]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d001      	beq.n	800538e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	40022000 	.word	0x40022000

080053a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a8:	2300      	movs	r3, #0
 80053aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ac:	2300      	movs	r3, #0
 80053ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d031      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053c4:	d01a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80053c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053ca:	d814      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053d4:	d10f      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80053d6:	4b5d      	ldr	r3, [pc, #372]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4a5c      	ldr	r2, [pc, #368]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053e2:	e00c      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	2100      	movs	r1, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f9de 	bl	80057ac <RCCEx_PLLSAI1_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053f4:	e003      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	74fb      	strb	r3, [r7, #19]
      break;
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80053fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005404:	4b51      	ldr	r3, [pc, #324]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	494e      	ldr	r1, [pc, #312]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800541a:	e001      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 809e 	beq.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005432:	4b46      	ldr	r3, [pc, #280]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005448:	4b40      	ldr	r3, [pc, #256]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	4a3f      	ldr	r2, [pc, #252]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6593      	str	r3, [r2, #88]	; 0x58
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005460:	2301      	movs	r3, #1
 8005462:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005464:	4b3a      	ldr	r3, [pc, #232]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a39      	ldr	r2, [pc, #228]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800546a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005470:	f7fc fdf0 	bl	8002054 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005476:	e009      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005478:	f7fc fdec 	bl	8002054 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	74fb      	strb	r3, [r7, #19]
        break;
 800548a:	e005      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800548c:	4b30      	ldr	r3, [pc, #192]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d15a      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01e      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d019      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054ba:	4b24      	ldr	r3, [pc, #144]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054e6:	4a19      	ldr	r2, [pc, #100]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fc fdac 	bl	8002054 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	e00b      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fc fda8 	bl	8002054 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d902      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	74fb      	strb	r3, [r7, #19]
            break;
 8005516:	e006      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ec      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	4904      	ldr	r1, [pc, #16]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005542:	e009      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	74bb      	strb	r3, [r7, #18]
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005558:	7c7b      	ldrb	r3, [r7, #17]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	4b8a      	ldr	r3, [pc, #552]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a89      	ldr	r2, [pc, #548]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005576:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f023 0203 	bic.w	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4980      	ldr	r1, [pc, #512]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005598:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f023 020c 	bic.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	4978      	ldr	r1, [pc, #480]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ba:	4b73      	ldr	r3, [pc, #460]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	496f      	ldr	r1, [pc, #444]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055dc:	4b6a      	ldr	r3, [pc, #424]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	4967      	ldr	r1, [pc, #412]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055fe:	4b62      	ldr	r3, [pc, #392]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	495e      	ldr	r1, [pc, #376]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005620:	4b59      	ldr	r3, [pc, #356]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4956      	ldr	r1, [pc, #344]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005642:	4b51      	ldr	r3, [pc, #324]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	494d      	ldr	r1, [pc, #308]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d028      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005664:	4b48      	ldr	r3, [pc, #288]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	4945      	ldr	r1, [pc, #276]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005682:	d106      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	4b40      	ldr	r3, [pc, #256]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800568a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568e:	60d3      	str	r3, [r2, #12]
 8005690:	e011      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800569a:	d10c      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f882 	bl	80057ac <RCCEx_PLLSAI1_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d028      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d0:	492d      	ldr	r1, [pc, #180]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4a28      	ldr	r2, [pc, #160]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ec:	60d3      	str	r3, [r2, #12]
 80056ee:	e011      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f8:	d10c      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3304      	adds	r3, #4
 80056fe:	2101      	movs	r1, #1
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f853 	bl	80057ac <RCCEx_PLLSAI1_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572e:	4916      	ldr	r1, [pc, #88]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573e:	d10c      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f830 	bl	80057ac <RCCEx_PLLSAI1_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005750:	7cfb      	ldrb	r3, [r7, #19]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	4904      	ldr	r1, [pc, #16]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800577c:	7cbb      	ldrb	r3, [r7, #18]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000

0800578c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000

080057ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ba:	4b74      	ldr	r3, [pc, #464]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057c6:	4b71      	ldr	r3, [pc, #452]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0203 	and.w	r2, r3, #3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d10d      	bne.n	80057f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
       ||
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057de:	4b6b      	ldr	r3, [pc, #428]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
       ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d047      	beq.n	8005882 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e044      	b.n	8005882 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d018      	beq.n	8005832 <RCCEx_PLLSAI1_Config+0x86>
 8005800:	2b03      	cmp	r3, #3
 8005802:	d825      	bhi.n	8005850 <RCCEx_PLLSAI1_Config+0xa4>
 8005804:	2b01      	cmp	r3, #1
 8005806:	d002      	beq.n	800580e <RCCEx_PLLSAI1_Config+0x62>
 8005808:	2b02      	cmp	r3, #2
 800580a:	d009      	beq.n	8005820 <RCCEx_PLLSAI1_Config+0x74>
 800580c:	e020      	b.n	8005850 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800580e:	4b5f      	ldr	r3, [pc, #380]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d11d      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581e:	e01a      	b.n	8005856 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005820:	4b5a      	ldr	r3, [pc, #360]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005828:	2b00      	cmp	r3, #0
 800582a:	d116      	bne.n	800585a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005830:	e013      	b.n	800585a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005832:	4b56      	ldr	r3, [pc, #344]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10f      	bne.n	800585e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800583e:	4b53      	ldr	r3, [pc, #332]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800584e:	e006      	b.n	800585e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
      break;
 8005854:	e004      	b.n	8005860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800585e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005866:	4b49      	ldr	r3, [pc, #292]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	3b01      	subs	r3, #1
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	430b      	orrs	r3, r1
 800587c:	4943      	ldr	r1, [pc, #268]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 800587e:	4313      	orrs	r3, r2
 8005880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d17c      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005888:	4b40      	ldr	r3, [pc, #256]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a3f      	ldr	r2, [pc, #252]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 800588e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005894:	f7fc fbde 	bl	8002054 <HAL_GetTick>
 8005898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800589a:	e009      	b.n	80058b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800589c:	f7fc fbda 	bl	8002054 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d902      	bls.n	80058b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	73fb      	strb	r3, [r7, #15]
        break;
 80058ae:	e005      	b.n	80058bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058b0:	4b36      	ldr	r3, [pc, #216]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ef      	bne.n	800589c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d15f      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d110      	bne.n	80058ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c8:	4b30      	ldr	r3, [pc, #192]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80058d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6892      	ldr	r2, [r2, #8]
 80058d8:	0211      	lsls	r1, r2, #8
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	06d2      	lsls	r2, r2, #27
 80058e0:	430a      	orrs	r2, r1
 80058e2:	492a      	ldr	r1, [pc, #168]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	610b      	str	r3, [r1, #16]
 80058e8:	e027      	b.n	800593a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d112      	bne.n	8005916 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	0211      	lsls	r1, r2, #8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6912      	ldr	r2, [r2, #16]
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0552      	lsls	r2, r2, #21
 800590c:	430a      	orrs	r2, r1
 800590e:	491f      	ldr	r1, [pc, #124]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	610b      	str	r3, [r1, #16]
 8005914:	e011      	b.n	800593a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005916:	4b1d      	ldr	r3, [pc, #116]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800591e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6892      	ldr	r2, [r2, #8]
 8005926:	0211      	lsls	r1, r2, #8
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6952      	ldr	r2, [r2, #20]
 800592c:	0852      	lsrs	r2, r2, #1
 800592e:	3a01      	subs	r2, #1
 8005930:	0652      	lsls	r2, r2, #25
 8005932:	430a      	orrs	r2, r1
 8005934:	4915      	ldr	r1, [pc, #84]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800593a:	4b14      	ldr	r3, [pc, #80]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a13      	ldr	r2, [pc, #76]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005944:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fc fb85 	bl	8002054 <HAL_GetTick>
 800594a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800594c:	e009      	b.n	8005962 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800594e:	f7fc fb81 	bl	8002054 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d902      	bls.n	8005962 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	73fb      	strb	r3, [r7, #15]
          break;
 8005960:	e005      	b.n	800596e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ef      	beq.n	800594e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	4903      	ldr	r1, [pc, #12]	; (800598c <RCCEx_PLLSAI1_Config+0x1e0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40021000 	.word	0x40021000

08005990 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d079      	beq.n	8005a96 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fc f8ec 	bl	8001b94 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d058      	beq.n	8005a84 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	22ca      	movs	r2, #202	; 0xca
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2253      	movs	r2, #83	; 0x53
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fbda 	bl	800619c <RTC_EnterInitMode>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d127      	bne.n	8005a42 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a04:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68d2      	ldr	r2, [r2, #12]
 8005a2c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6919      	ldr	r1, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	041a      	lsls	r2, r3, #16
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fbde 	bl	8006204 <RTC_ExitInitMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0203 	bic.w	r2, r2, #3
 8005a60:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	22ff      	movs	r2, #255	; 0xff
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24
 8005a82:	e001      	b.n	8005a88 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_RTC_SetTime+0x1a>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e08b      	b.n	8005bd2 <HAL_RTC_SetTime+0x132>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	22ca      	movs	r2, #202	; 0xca
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2253      	movs	r2, #83	; 0x53
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fb5e 	bl	800619c <RTC_EnterInitMode>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d163      	bne.n	8005bb2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d126      	bne.n	8005b3e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fbb9 	bl	8006280 <RTC_ByteToBcd2>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fbb2 	bl	8006280 <RTC_ByteToBcd2>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b20:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	789b      	ldrb	r3, [r3, #2]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fbaa 	bl	8006280 <RTC_ByteToBcd2>
 8005b2c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b2e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	78db      	ldrb	r3, [r3, #3]
 8005b36:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e018      	b.n	8005b70 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b5e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b64:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fb2b 	bl	8006204 <RTC_ExitInitMode>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005bba:	7cfb      	ldrb	r3, [r7, #19]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	0d9b      	lsrs	r3, r3, #22
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11a      	bne.n	8005c88 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fb32 	bl	80062c0 <RTC_Bcd2ToByte>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb29 	bl	80062c0 <RTC_Bcd2ToByte>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	789b      	ldrb	r3, [r3, #2]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fb20 	bl	80062c0 <RTC_Bcd2ToByte>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c92:	b590      	push	{r4, r7, lr}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_RTC_SetDate+0x1a>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e075      	b.n	8005d98 <HAL_RTC_SetDate+0x106>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_RTC_SetDate+0x4e>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	330a      	adds	r3, #10
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d11c      	bne.n	8005d20 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fac8 	bl	8006280 <RTC_ByteToBcd2>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fac1 	bl	8006280 <RTC_ByteToBcd2>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d02:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	789b      	ldrb	r3, [r3, #2]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fab9 	bl	8006280 <RTC_ByteToBcd2>
 8005d0e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d10:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e00e      	b.n	8005d3e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d2c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	22ca      	movs	r2, #202	; 0xca
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2253      	movs	r2, #83	; 0x53
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa24 	bl	800619c <RTC_EnterInitMode>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d6c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa48 	bl	8006204 <RTC_ExitInitMode>
 8005d74:	4603      	mov	r3, r0
 8005d76:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd90      	pop	{r4, r7, pc}

08005da0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	0b5b      	lsrs	r3, r3, #13
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11a      	bne.n	8005e30 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	78db      	ldrb	r3, [r3, #3]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fa5e 	bl	80062c0 <RTC_Bcd2ToByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fa55 	bl	80062c0 <RTC_Bcd2ToByte>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fa4c 	bl	80062c0 <RTC_Bcd2ToByte>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_RTC_SetAlarm_IT+0x1a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e127      	b.n	80060a6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2202      	movs	r2, #2
 8005e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d137      	bne.n	8005edc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f9fb 	bl	8006280 <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f9f4 	bl	8006280 <RTC_ByteToBcd2>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e9c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f9ec 	bl	8006280 <RTC_ByteToBcd2>
 8005ea8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005eaa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	78db      	ldrb	r3, [r3, #3]
 8005eb2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005eb4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f9de 	bl	8006280 <RTC_ByteToBcd2>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ec8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ed0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	e023      	b.n	8005f24 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005efc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f12:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	22ca      	movs	r2, #202	; 0xca
 8005f36:	625a      	str	r2, [r3, #36]	; 0x24
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2253      	movs	r2, #83	; 0x53
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f48:	d14a      	bne.n	8005fe0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f58:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005f6a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005f6c:	f7fc f872 	bl	8002054 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f72:	e015      	b.n	8005fa0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f74:	f7fc f86e 	bl	8002054 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f82:	d90d      	bls.n	8005fa0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	22ff      	movs	r2, #255	; 0xff
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e082      	b.n	80060a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0e2      	beq.n	8005f74 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fcc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fdc:	609a      	str	r2, [r3, #8]
 8005fde:	e049      	b.n	8006074 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006000:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006002:	f7fc f827 	bl	8002054 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006008:	e015      	b.n	8006036 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800600a:	f7fc f823 	bl	8002054 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006018:	d90d      	bls.n	8006036 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2203      	movs	r2, #3
 8006026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e037      	b.n	80060a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0e2      	beq.n	800600a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006062:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006072:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <HAL_RTC_SetAlarm_IT+0x274>)
 800607a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800607e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8006086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800608a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	22ff      	movs	r2, #255	; 0xff
 8006092:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3724      	adds	r7, #36	; 0x24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd90      	pop	{r4, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40010400 	.word	0x40010400

080060b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <HAL_RTC_AlarmIRQHandler+0x88>)
 80060be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060c2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80060f0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f824 	bl	8006140 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d012      	beq.n	800612c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006124:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8e4 	bl	80062f4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40010400 	.word	0x40010400

08006140 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <HAL_RTC_WaitForSynchro+0x44>)
 8006162:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006164:	f7fb ff76 	bl	8002054 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800616a:	e009      	b.n	8006180 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800616c:	f7fb ff72 	bl	8002054 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617a:	d901      	bls.n	8006180 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e007      	b.n	8006190 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ee      	beq.n	800616c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	0003ff5f 	.word	0x0003ff5f

0800619c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d120      	bne.n	80061f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061c0:	f7fb ff48 	bl	8002054 <HAL_GetTick>
 80061c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061c6:	e00d      	b.n	80061e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061c8:	f7fb ff44 	bl	8002054 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061d6:	d905      	bls.n	80061e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2203      	movs	r2, #3
 80061e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <RTC_EnterInitMode+0x5c>
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d1e7      	bne.n	80061c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <RTC_ExitInitMode+0x78>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a19      	ldr	r2, [pc, #100]	; (800627c <RTC_ExitInitMode+0x78>)
 8006216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800621c:	4b17      	ldr	r3, [pc, #92]	; (800627c <RTC_ExitInitMode+0x78>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10c      	bne.n	8006242 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff93 	bl	8006154 <HAL_RTC_WaitForSynchro>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01e      	beq.n	8006272 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	e017      	b.n	8006272 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <RTC_ExitInitMode+0x78>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4a0d      	ldr	r2, [pc, #52]	; (800627c <RTC_ExitInitMode+0x78>)
 8006248:	f023 0320 	bic.w	r3, r3, #32
 800624c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff ff80 	bl	8006154 <HAL_RTC_WaitForSynchro>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <RTC_ExitInitMode+0x78>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4a04      	ldr	r2, [pc, #16]	; (800627c <RTC_ExitInitMode+0x78>)
 800626c:	f043 0320 	orr.w	r3, r3, #32
 8006270:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40002800 	.word	0x40002800

08006280 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006292:	e005      	b.n	80062a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800629a:	7afb      	ldrb	r3, [r7, #11]
 800629c:	3b0a      	subs	r3, #10
 800629e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	d8f6      	bhi.n	8006294 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b2db      	uxtb	r3, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	4413      	add	r3, r2
 80062e6:	b2db      	uxtb	r3, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e049      	b.n	80063ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb fc68 	bl	8001c04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f000 fdd0 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_IC_Start_IT+0x1e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e023      	b.n	800641e <HAL_TIM_IC_Start_IT+0x66>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_IC_Start_IT+0x2e>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e01b      	b.n	800641e <HAL_TIM_IC_Start_IT+0x66>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_IC_Start_IT+0x3e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	e013      	b.n	800641e <HAL_TIM_IC_Start_IT+0x66>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_IC_Start_IT+0x4e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	e00b      	b.n	800641e <HAL_TIM_IC_Start_IT+0x66>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b10      	cmp	r3, #16
 800640a:	d104      	bne.n	8006416 <HAL_TIM_IC_Start_IT+0x5e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006412:	b2db      	uxtb	r3, r3
 8006414:	e003      	b.n	800641e <HAL_TIM_IC_Start_IT+0x66>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800641c:	b2db      	uxtb	r3, r3
 800641e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <HAL_TIM_IC_Start_IT+0x78>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e013      	b.n	8006458 <HAL_TIM_IC_Start_IT+0xa0>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b04      	cmp	r3, #4
 8006434:	d104      	bne.n	8006440 <HAL_TIM_IC_Start_IT+0x88>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e00b      	b.n	8006458 <HAL_TIM_IC_Start_IT+0xa0>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d104      	bne.n	8006450 <HAL_TIM_IC_Start_IT+0x98>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e003      	b.n	8006458 <HAL_TIM_IC_Start_IT+0xa0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006456:	b2db      	uxtb	r3, r3
 8006458:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006460:	7b7b      	ldrb	r3, [r7, #13]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d001      	beq.n	800646a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e0c9      	b.n	80065fe <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_TIM_IC_Start_IT+0xc2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006478:	e023      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x10a>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d104      	bne.n	800648a <HAL_TIM_IC_Start_IT+0xd2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006488:	e01b      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x10a>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d104      	bne.n	800649a <HAL_TIM_IC_Start_IT+0xe2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006498:	e013      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x10a>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d104      	bne.n	80064aa <HAL_TIM_IC_Start_IT+0xf2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a8:	e00b      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x10a>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_IC_Start_IT+0x102>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	e003      	b.n	80064c2 <HAL_TIM_IC_Start_IT+0x10a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_IC_Start_IT+0x11a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d0:	e013      	b.n	80064fa <HAL_TIM_IC_Start_IT+0x142>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_IC_Start_IT+0x12a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e0:	e00b      	b.n	80064fa <HAL_TIM_IC_Start_IT+0x142>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_IC_Start_IT+0x13a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064f0:	e003      	b.n	80064fa <HAL_TIM_IC_Start_IT+0x142>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d841      	bhi.n	8006584 <HAL_TIM_IC_Start_IT+0x1cc>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <HAL_TIM_IC_Start_IT+0x150>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006585 	.word	0x08006585
 8006510:	08006585 	.word	0x08006585
 8006514:	08006585 	.word	0x08006585
 8006518:	0800654f 	.word	0x0800654f
 800651c:	08006585 	.word	0x08006585
 8006520:	08006585 	.word	0x08006585
 8006524:	08006585 	.word	0x08006585
 8006528:	08006561 	.word	0x08006561
 800652c:	08006585 	.word	0x08006585
 8006530:	08006585 	.word	0x08006585
 8006534:	08006585 	.word	0x08006585
 8006538:	08006573 	.word	0x08006573
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0202 	orr.w	r2, r2, #2
 800654a:	60da      	str	r2, [r3, #12]
      break;
 800654c:	e01d      	b.n	800658a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0204 	orr.w	r2, r2, #4
 800655c:	60da      	str	r2, [r3, #12]
      break;
 800655e:	e014      	b.n	800658a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0208 	orr.w	r2, r2, #8
 800656e:	60da      	str	r2, [r3, #12]
      break;
 8006570:	e00b      	b.n	800658a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0210 	orr.w	r2, r2, #16
 8006580:	60da      	str	r2, [r3, #12]
      break;
 8006582:	e002      	b.n	800658a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	bf00      	nop
  }

  if (status == HAL_OK)
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d135      	bne.n	80065fc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2201      	movs	r2, #1
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fe17 	bl	80071cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a19      	ldr	r2, [pc, #100]	; (8006608 <HAL_TIM_IC_Start_IT+0x250>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_TIM_IC_Start_IT+0x204>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d004      	beq.n	80065bc <HAL_TIM_IC_Start_IT+0x204>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a15      	ldr	r2, [pc, #84]	; (800660c <HAL_TIM_IC_Start_IT+0x254>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d115      	bne.n	80065e8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <HAL_TIM_IC_Start_IT+0x258>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d015      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x242>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d4:	d011      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	e008      	b.n	80065fa <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e000      	b.n	80065fc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000
 8006610:	00010007 	.word	0x00010007

08006614 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <HAL_TIM_IC_Start_DMA+0x22>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e023      	b.n	800667e <HAL_TIM_IC_Start_DMA+0x6a>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d104      	bne.n	8006646 <HAL_TIM_IC_Start_DMA+0x32>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006642:	b2db      	uxtb	r3, r3
 8006644:	e01b      	b.n	800667e <HAL_TIM_IC_Start_DMA+0x6a>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d104      	bne.n	8006656 <HAL_TIM_IC_Start_DMA+0x42>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006652:	b2db      	uxtb	r3, r3
 8006654:	e013      	b.n	800667e <HAL_TIM_IC_Start_DMA+0x6a>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d104      	bne.n	8006666 <HAL_TIM_IC_Start_DMA+0x52>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e00b      	b.n	800667e <HAL_TIM_IC_Start_DMA+0x6a>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b10      	cmp	r3, #16
 800666a:	d104      	bne.n	8006676 <HAL_TIM_IC_Start_DMA+0x62>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006672:	b2db      	uxtb	r3, r3
 8006674:	e003      	b.n	800667e <HAL_TIM_IC_Start_DMA+0x6a>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800667c:	b2db      	uxtb	r3, r3
 800667e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <HAL_TIM_IC_Start_DMA+0x7c>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e013      	b.n	80066b8 <HAL_TIM_IC_Start_DMA+0xa4>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d104      	bne.n	80066a0 <HAL_TIM_IC_Start_DMA+0x8c>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e00b      	b.n	80066b8 <HAL_TIM_IC_Start_DMA+0xa4>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d104      	bne.n	80066b0 <HAL_TIM_IC_Start_DMA+0x9c>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e003      	b.n	80066b8 <HAL_TIM_IC_Start_DMA+0xa4>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d002      	beq.n	80066c6 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80066c0:	7d7b      	ldrb	r3, [r7, #21]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
 80066c8:	e143      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80066ca:	7dbb      	ldrb	r3, [r7, #22]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d153      	bne.n	8006778 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80066d0:	7d7b      	ldrb	r3, [r7, #21]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d150      	bne.n	8006778 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_TIM_IC_Start_DMA+0xce>
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e135      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <HAL_TIM_IC_Start_DMA+0xe2>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f4:	e023      	b.n	800673e <HAL_TIM_IC_Start_DMA+0x12a>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_IC_Start_DMA+0xf2>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006704:	e01b      	b.n	800673e <HAL_TIM_IC_Start_DMA+0x12a>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d104      	bne.n	8006716 <HAL_TIM_IC_Start_DMA+0x102>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	e013      	b.n	800673e <HAL_TIM_IC_Start_DMA+0x12a>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d104      	bne.n	8006726 <HAL_TIM_IC_Start_DMA+0x112>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006724:	e00b      	b.n	800673e <HAL_TIM_IC_Start_DMA+0x12a>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b10      	cmp	r3, #16
 800672a:	d104      	bne.n	8006736 <HAL_TIM_IC_Start_DMA+0x122>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006734:	e003      	b.n	800673e <HAL_TIM_IC_Start_DMA+0x12a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_TIM_IC_Start_DMA+0x13a>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 800674c:	e016      	b.n	800677c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b04      	cmp	r3, #4
 8006752:	d104      	bne.n	800675e <HAL_TIM_IC_Start_DMA+0x14a>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 800675c:	e00e      	b.n	800677c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d104      	bne.n	800676e <HAL_TIM_IC_Start_DMA+0x15a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 800676c:	e006      	b.n	800677c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 8006776:	e001      	b.n	800677c <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0ea      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2201      	movs	r2, #1
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fd21 	bl	80071cc <TIM_CCxChannelCmd>

  switch (Channel)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b0c      	cmp	r3, #12
 800678e:	f200 80ad 	bhi.w	80068ec <HAL_TIM_IC_Start_DMA+0x2d8>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <HAL_TIM_IC_Start_DMA+0x184>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067cd 	.word	0x080067cd
 800679c:	080068ed 	.word	0x080068ed
 80067a0:	080068ed 	.word	0x080068ed
 80067a4:	080068ed 	.word	0x080068ed
 80067a8:	08006815 	.word	0x08006815
 80067ac:	080068ed 	.word	0x080068ed
 80067b0:	080068ed 	.word	0x080068ed
 80067b4:	080068ed 	.word	0x080068ed
 80067b8:	0800685d 	.word	0x0800685d
 80067bc:	080068ed 	.word	0x080068ed
 80067c0:	080068ed 	.word	0x080068ed
 80067c4:	080068ed 	.word	0x080068ed
 80067c8:	080068a5 	.word	0x080068a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	4a62      	ldr	r2, [pc, #392]	; (800695c <HAL_TIM_IC_Start_DMA+0x348>)
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	4a61      	ldr	r2, [pc, #388]	; (8006960 <HAL_TIM_IC_Start_DMA+0x34c>)
 80067da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	4a60      	ldr	r2, [pc, #384]	; (8006964 <HAL_TIM_IC_Start_DMA+0x350>)
 80067e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3334      	adds	r3, #52	; 0x34
 80067ee:	4619      	mov	r1, r3
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	f7fd fa1f 	bl	8003c36 <HAL_DMA_Start_IT>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e0a7      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006810:	60da      	str	r2, [r3, #12]
      break;
 8006812:	e06e      	b.n	80068f2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	4a50      	ldr	r2, [pc, #320]	; (800695c <HAL_TIM_IC_Start_DMA+0x348>)
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	4a4f      	ldr	r2, [pc, #316]	; (8006960 <HAL_TIM_IC_Start_DMA+0x34c>)
 8006822:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <HAL_TIM_IC_Start_DMA+0x350>)
 800682a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3338      	adds	r3, #56	; 0x38
 8006836:	4619      	mov	r1, r3
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	887b      	ldrh	r3, [r7, #2]
 800683c:	f7fd f9fb 	bl	8003c36 <HAL_DMA_Start_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e083      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006858:	60da      	str	r2, [r3, #12]
      break;
 800685a:	e04a      	b.n	80068f2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a3e      	ldr	r2, [pc, #248]	; (800695c <HAL_TIM_IC_Start_DMA+0x348>)
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	4a3d      	ldr	r2, [pc, #244]	; (8006960 <HAL_TIM_IC_Start_DMA+0x34c>)
 800686a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a3c      	ldr	r2, [pc, #240]	; (8006964 <HAL_TIM_IC_Start_DMA+0x350>)
 8006872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	333c      	adds	r3, #60	; 0x3c
 800687e:	4619      	mov	r1, r3
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	f7fd f9d7 	bl	8003c36 <HAL_DMA_Start_IT>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e05f      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a0:	60da      	str	r2, [r3, #12]
      break;
 80068a2:	e026      	b.n	80068f2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <HAL_TIM_IC_Start_DMA+0x348>)
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <HAL_TIM_IC_Start_DMA+0x34c>)
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <HAL_TIM_IC_Start_DMA+0x350>)
 80068ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3340      	adds	r3, #64	; 0x40
 80068c6:	4619      	mov	r1, r3
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	887b      	ldrh	r3, [r7, #2]
 80068cc:	f7fd f9b3 	bl	8003c36 <HAL_DMA_Start_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e03b      	b.n	8006952 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068e8:	60da      	str	r2, [r3, #12]
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <HAL_TIM_IC_Start_DMA+0x354>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_TIM_IC_Start_DMA+0x2fc>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d004      	beq.n	8006910 <HAL_TIM_IC_Start_DMA+0x2fc>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <HAL_TIM_IC_Start_DMA+0x358>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d115      	bne.n	800693c <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	4b16      	ldr	r3, [pc, #88]	; (8006970 <HAL_TIM_IC_Start_DMA+0x35c>)
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b06      	cmp	r3, #6
 8006920:	d015      	beq.n	800694e <HAL_TIM_IC_Start_DMA+0x33a>
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006928:	d011      	beq.n	800694e <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693a:	e008      	b.n	800694e <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e000      	b.n	8006950 <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	08006dbb 	.word	0x08006dbb
 8006960:	08006e83 	.word	0x08006e83
 8006964:	08006d29 	.word	0x08006d29
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40014000 	.word	0x40014000
 8006970:	00010007 	.word	0x00010007

08006974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0202 	mvn.w	r2, #2
 80069a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fa fc16 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f97c 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f98d 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d020      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0204 	mvn.w	r2, #4
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa fbf0 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f956 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f967 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d020      	beq.n	8006a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0208 	mvn.w	r2, #8
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2204      	movs	r2, #4
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fa fbca 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f930 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f941 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d020      	beq.n	8006abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0210 	mvn.w	r2, #16
 8006a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2208      	movs	r2, #8
 8006a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fa fba4 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f90a 	bl	8006cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f91b 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0201 	mvn.w	r2, #1
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f8e8 	bl	8006cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fbfa 	bl	80072f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fbf2 	bl	800730c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8da 	bl	8006d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0220 	mvn.w	r2, #32
 8006b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbba 	bl	80072e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e088      	b.n	8006ca8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11b      	bne.n	8006bdc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006bb4:	f000 f9fe 	bl	8006fb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 020c 	bic.w	r2, r2, #12
 8006bc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6999      	ldr	r1, [r3, #24]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	619a      	str	r2, [r3, #24]
 8006bda:	e060      	b.n	8006c9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d11c      	bne.n	8006c1c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006bf2:	f000 fa35 	bl	8007060 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6999      	ldr	r1, [r3, #24]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	021a      	lsls	r2, r3, #8
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	619a      	str	r2, [r3, #24]
 8006c1a:	e040      	b.n	8006c9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d11b      	bne.n	8006c5a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006c32:	f000 fa52 	bl	80070da <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 020c 	bic.w	r2, r2, #12
 8006c44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	61da      	str	r2, [r3, #28]
 8006c58:	e021      	b.n	8006c9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d11c      	bne.n	8006c9a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006c70:	f000 fa6f 	bl	8007152 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c82:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69d9      	ldr	r1, [r3, #28]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	61da      	str	r2, [r3, #28]
 8006c98:	e001      	b.n	8006c9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d107      	bne.n	8006d50 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d4e:	e02a      	b.n	8006da6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d107      	bne.n	8006d6a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d68:	e01d      	b.n	8006da6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d107      	bne.n	8006d84 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2204      	movs	r2, #4
 8006d78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d82:	e010      	b.n	8006da6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d107      	bne.n	8006d9e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2208      	movs	r2, #8
 8006d92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d9c:	e003      	b.n	8006da6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff ffb4 	bl	8006d14 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	771a      	strb	r2, [r3, #28]
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d10f      	bne.n	8006df2 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d146      	bne.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df0:	e03d      	b.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d10f      	bne.n	8006e1c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d131      	bne.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1a:	e028      	b.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d10f      	bne.n	8006e46 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11c      	bne.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e44:	e013      	b.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d10e      	bne.n	8006e6e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2208      	movs	r2, #8
 8006e54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7fa f9be 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	771a      	strb	r2, [r3, #28]
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d103      	bne.n	8006ea2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	771a      	strb	r2, [r3, #28]
 8006ea0:	e019      	b.n	8006ed6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d103      	bne.n	8006eb4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	771a      	strb	r2, [r3, #28]
 8006eb2:	e010      	b.n	8006ed6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d103      	bne.n	8006ec6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	771a      	strb	r2, [r3, #28]
 8006ec4:	e007      	b.n	8006ed6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d102      	bne.n	8006ed6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2208      	movs	r2, #8
 8006ed4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fefe 	bl	8006cd8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_Base_SetConfig+0x20>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d108      	bne.n	8006f1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a21      	ldr	r2, [pc, #132]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00b      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	d007      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <TIM_Base_SetConfig+0xc0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <TIM_Base_SetConfig+0xc4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d108      	bne.n	8006f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_Base_SetConfig+0xa0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <TIM_Base_SetConfig+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0xa0>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <TIM_Base_SetConfig+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d103      	bne.n	8006f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400

08006fb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f023 0201 	bic.w	r2, r3, #1
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a1e      	ldr	r2, [pc, #120]	; (8007058 <TIM_TI1_SetConfig+0xa4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_TI1_SetConfig+0x3e>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe8:	d003      	beq.n	8006ff2 <TIM_TI1_SetConfig+0x3e>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <TIM_TI1_SetConfig+0xa8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d101      	bne.n	8006ff6 <TIM_TI1_SetConfig+0x42>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <TIM_TI1_SetConfig+0x44>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e003      	b.n	8007016 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	b2db      	uxtb	r3, r3
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f023 030a 	bic.w	r3, r3, #10
 8007030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f003 030a 	and.w	r3, r3, #10
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40014000 	.word	0x40014000

08007060 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f023 0210 	bic.w	r2, r3, #16
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800709e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	031b      	lsls	r3, r3, #12
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070da:	b480      	push	{r7}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	b2db      	uxtb	r3, r3
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800712a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007190:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	031b      	lsls	r3, r3, #12
 8007196:	b29b      	uxth	r3, r3
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80071a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	031b      	lsls	r3, r3, #12
 80071aa:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2201      	movs	r2, #1
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	43db      	mvns	r3, r3
 80071ee:	401a      	ands	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1a      	ldr	r2, [r3, #32]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	fa01 f303 	lsl.w	r3, r1, r3
 8007204:	431a      	orrs	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800722c:	2302      	movs	r3, #2
 800722e:	e04f      	b.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d108      	bne.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007260:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a14      	ldr	r2, [pc, #80]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007298:	d004      	beq.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a10      	ldr	r2, [pc, #64]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d10c      	bne.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40014000 	.word	0x40014000

080072e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e040      	b.n	80073b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fa fca6 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	; 0x24
 800734c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 feb2 	bl	80080d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc83 	bl	8007c78 <UART_SetConfig>
 8007372:	4603      	mov	r3, r0
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e01b      	b.n	80073b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800738a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800739a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 ff31 	bl	8008214 <UART_CheckIdleState>
 80073b2:	4603      	mov	r3, r0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d178      	bne.n	80074c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_UART_Transmit+0x24>
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e071      	b.n	80074c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2221      	movs	r2, #33	; 0x21
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073f2:	f7fa fe2f 	bl	8002054 <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007410:	d108      	bne.n	8007424 <HAL_UART_Transmit+0x68>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	e003      	b.n	800742c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800742c:	e030      	b.n	8007490 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2180      	movs	r1, #128	; 0x80
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 ff93 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e03c      	b.n	80074c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007460:	b292      	uxth	r2, r2
 8007462:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	3302      	adds	r3, #2
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e008      	b.n	800747e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	b292      	uxth	r2, r2
 8007476:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1c8      	bne.n	800742e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2200      	movs	r2, #0
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 ff5c 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e005      	b.n	80074c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	f040 80b6 	bne.w	8007658 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_UART_Receive+0x28>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0ae      	b.n	800765a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2222      	movs	r2, #34	; 0x22
 8007508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007512:	f7fa fd9f 	bl	8002054 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	88fa      	ldrh	r2, [r7, #6]
 800751c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007530:	d10e      	bne.n	8007550 <HAL_UART_Receive+0x80>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_UART_Receive+0x76>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007544:	e02d      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	22ff      	movs	r2, #255	; 0xff
 800754a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800754e:	e028      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10d      	bne.n	8007574 <HAL_UART_Receive+0xa4>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <HAL_UART_Receive+0x9a>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	22ff      	movs	r2, #255	; 0xff
 8007564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007568:	e01b      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	227f      	movs	r2, #127	; 0x7f
 800756e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007572:	e016      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757c:	d10d      	bne.n	800759a <HAL_UART_Receive+0xca>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_UART_Receive+0xc0>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	227f      	movs	r2, #127	; 0x7f
 800758a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800758e:	e008      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	223f      	movs	r2, #63	; 0x3f
 8007594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007598:	e003      	b.n	80075a2 <HAL_UART_Receive+0xd2>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d108      	bne.n	80075c6 <HAL_UART_Receive+0xf6>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	e003      	b.n	80075ce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80075ce:	e037      	b.n	8007640 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2200      	movs	r2, #0
 80075d8:	2120      	movs	r1, #32
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fec2 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e033      	b.n	800765a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075fe:	b29a      	uxth	r2, r3
 8007600:	8a7b      	ldrh	r3, [r7, #18]
 8007602:	4013      	ands	r3, r2
 8007604:	b29a      	uxth	r2, r3
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	3302      	adds	r3, #2
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e00d      	b.n	800762e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007618:	b29b      	uxth	r3, r3
 800761a:	b2da      	uxtb	r2, r3
 800761c:	8a7b      	ldrh	r3, [r7, #18]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	4013      	ands	r3, r2
 8007622:	b2da      	uxtb	r2, r3
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	3301      	adds	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1c1      	bne.n	80075d0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	e000      	b.n	800765a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b0ba      	sub	sp, #232	; 0xe8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800768a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800768e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007692:	4013      	ands	r3, r2
 8007694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d115      	bne.n	80076cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00f      	beq.n	80076cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 82ae 	beq.w	8007c1e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
      }
      return;
 80076ca:	e2a8      	b.n	8007c1e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80076cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8117 	beq.w	8007904 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076e6:	4b85      	ldr	r3, [pc, #532]	; (80078fc <HAL_UART_IRQHandler+0x298>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 810a 	beq.w	8007904 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_UART_IRQHandler+0xbc>
 80076fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2201      	movs	r2, #1
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007716:	f043 0201 	orr.w	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_UART_IRQHandler+0xec>
 800772c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2202      	movs	r2, #2
 800773e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007746:	f043 0204 	orr.w	r2, r3, #4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d011      	beq.n	8007780 <HAL_UART_IRQHandler+0x11c>
 800775c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2204      	movs	r2, #4
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007776:	f043 0202 	orr.w	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d017      	beq.n	80077bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800779c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2208      	movs	r2, #8
 80077aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b2:	f043 0208 	orr.w	r2, r3, #8
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d012      	beq.n	80077ee <HAL_UART_IRQHandler+0x18a>
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8214 	beq.w	8007c22 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d005      	beq.n	8007846 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800783a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800783e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04f      	beq.n	80078e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fdf3 	bl	8008432 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d141      	bne.n	80078de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800788a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800789e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1d9      	bne.n	800785a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d013      	beq.n	80078d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	4a13      	ldr	r2, [pc, #76]	; (8007900 <HAL_UART_IRQHandler+0x29c>)
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fc fa59 	bl	8003d72 <HAL_DMA_Abort_IT>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d017      	beq.n	80078f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	e00f      	b.n	80078f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f9b8 	bl	8007c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00b      	b.n	80078f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9b4 	bl	8007c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e007      	b.n	80078f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9b0 	bl	8007c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80078f4:	e195      	b.n	8007c22 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f6:	bf00      	nop
    return;
 80078f8:	e193      	b.n	8007c22 <HAL_UART_IRQHandler+0x5be>
 80078fa:	bf00      	nop
 80078fc:	04000120 	.word	0x04000120
 8007900:	080084fb 	.word	0x080084fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007908:	2b01      	cmp	r3, #1
 800790a:	f040 814e 	bne.w	8007baa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8147 	beq.w	8007baa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8140 	beq.w	8007baa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2210      	movs	r2, #16
 8007930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	f040 80b8 	bne.w	8007ab2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800794e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8167 	beq.w	8007c26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800795e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007962:	429a      	cmp	r2, r3
 8007964:	f080 815f 	bcs.w	8007c26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800796e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 8086 	bne.w	8007a90 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800799c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1da      	bne.n	8007984 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e1      	bne.n	80079ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e4      	bne.n	8007a50 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fc f933 	bl	8003cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8d8 	bl	8007c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab0:	e0b9      	b.n	8007c26 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80ab 	beq.w	8007c2a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a6 	beq.w	8007c2a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b00:	647b      	str	r3, [r7, #68]	; 0x44
 8007b02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	623b      	str	r3, [r7, #32]
   return(result);
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	f023 0301 	bic.w	r3, r3, #1
 8007b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b38:	633a      	str	r2, [r7, #48]	; 0x30
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e3      	bne.n	8007b14 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b82:	61fb      	str	r3, [r7, #28]
 8007b84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e4      	bne.n	8007b60 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f85c 	bl	8007c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ba8:	e03f      	b.n	8007c2a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x570>
 8007bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fcd4 	bl	800857a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd2:	e02d      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01c      	beq.n	8007c2e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
    }
    return;
 8007bfc:	e017      	b.n	8007c2e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d012      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
 8007c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fc85 	bl	8008526 <UART_EndTransmit_IT>
    return;
 8007c1c:	e008      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c1e:	bf00      	nop
 8007c20:	e006      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c22:	bf00      	nop
 8007c24:	e004      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c26:	bf00      	nop
 8007c28:	e002      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c30:	37e8      	adds	r7, #232	; 0xe8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c7c:	b08a      	sub	sp, #40	; 0x28
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4bb4      	ldr	r3, [pc, #720]	; (8007f78 <UART_SetConfig+0x300>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4aa9      	ldr	r2, [pc, #676]	; (8007f7c <UART_SetConfig+0x304>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4aa0      	ldr	r2, [pc, #640]	; (8007f80 <UART_SetConfig+0x308>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d126      	bne.n	8007d50 <UART_SetConfig+0xd8>
 8007d02:	4ba0      	ldr	r3, [pc, #640]	; (8007f84 <UART_SetConfig+0x30c>)
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d81b      	bhi.n	8007d48 <UART_SetConfig+0xd0>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <UART_SetConfig+0xa0>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d2e:	e080      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d36:	e07c      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3e:	e078      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d46:	e074      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4e:	e070      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a8c      	ldr	r2, [pc, #560]	; (8007f88 <UART_SetConfig+0x310>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d138      	bne.n	8007dcc <UART_SetConfig+0x154>
 8007d5a:	4b8a      	ldr	r3, [pc, #552]	; (8007f84 <UART_SetConfig+0x30c>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	f003 030c 	and.w	r3, r3, #12
 8007d64:	2b0c      	cmp	r3, #12
 8007d66:	d82d      	bhi.n	8007dc4 <UART_SetConfig+0x14c>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0xf8>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007da5 	.word	0x08007da5
 8007d74:	08007dc5 	.word	0x08007dc5
 8007d78:	08007dc5 	.word	0x08007dc5
 8007d7c:	08007dc5 	.word	0x08007dc5
 8007d80:	08007db5 	.word	0x08007db5
 8007d84:	08007dc5 	.word	0x08007dc5
 8007d88:	08007dc5 	.word	0x08007dc5
 8007d8c:	08007dc5 	.word	0x08007dc5
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dbd 	.word	0x08007dbd
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007daa:	e042      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007dac:	2302      	movs	r3, #2
 8007dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db2:	e03e      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e03a      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e036      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e032      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a6a      	ldr	r2, [pc, #424]	; (8007f7c <UART_SetConfig+0x304>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d12a      	bne.n	8007e2c <UART_SetConfig+0x1b4>
 8007dd6:	4b6b      	ldr	r3, [pc, #428]	; (8007f84 <UART_SetConfig+0x30c>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de4:	d01a      	beq.n	8007e1c <UART_SetConfig+0x1a4>
 8007de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dea:	d81b      	bhi.n	8007e24 <UART_SetConfig+0x1ac>
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df0:	d00c      	beq.n	8007e0c <UART_SetConfig+0x194>
 8007df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df6:	d815      	bhi.n	8007e24 <UART_SetConfig+0x1ac>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <UART_SetConfig+0x18c>
 8007dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e00:	d008      	beq.n	8007e14 <UART_SetConfig+0x19c>
 8007e02:	e00f      	b.n	8007e24 <UART_SetConfig+0x1ac>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0a:	e012      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e12:	e00e      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1a:	e00a      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e22:	e006      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2a:	e002      	b.n	8007e32 <UART_SetConfig+0x1ba>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a51      	ldr	r2, [pc, #324]	; (8007f7c <UART_SetConfig+0x304>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d17a      	bne.n	8007f32 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d824      	bhi.n	8007e8e <UART_SetConfig+0x216>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <UART_SetConfig+0x1d4>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e71 	.word	0x08007e71
 8007e50:	08007e8f 	.word	0x08007e8f
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e8f 	.word	0x08007e8f
 8007e5c:	08007e7f 	.word	0x08007e7f
 8007e60:	08007e8f 	.word	0x08007e8f
 8007e64:	08007e8f 	.word	0x08007e8f
 8007e68:	08007e8f 	.word	0x08007e8f
 8007e6c:	08007e87 	.word	0x08007e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e70:	f7fd fa0a 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8007e74:	61f8      	str	r0, [r7, #28]
        break;
 8007e76:	e010      	b.n	8007e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e78:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <UART_SetConfig+0x314>)
 8007e7a:	61fb      	str	r3, [r7, #28]
        break;
 8007e7c:	e00d      	b.n	8007e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e7e:	f7fd f96b 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8007e82:	61f8      	str	r0, [r7, #28]
        break;
 8007e84:	e009      	b.n	8007e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8a:	61fb      	str	r3, [r7, #28]
        break;
 8007e8c:	e005      	b.n	8007e9a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8107 	beq.w	80080b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4413      	add	r3, r2
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d305      	bcc.n	8007ebe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d903      	bls.n	8007ec6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ec4:	e0f4      	b.n	80080b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	461c      	mov	r4, r3
 8007ecc:	4615      	mov	r5, r2
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	022b      	lsls	r3, r5, #8
 8007ed8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007edc:	0222      	lsls	r2, r4, #8
 8007ede:	68f9      	ldr	r1, [r7, #12]
 8007ee0:	6849      	ldr	r1, [r1, #4]
 8007ee2:	0849      	lsrs	r1, r1, #1
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	4681      	mov	r9, r0
 8007eea:	eb12 0a08 	adds.w	sl, r2, r8
 8007eee:	eb43 0b09 	adc.w	fp, r3, r9
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	f7f8 f9c4 	bl	8000290 <__aeabi_uldivmod>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f16:	d308      	bcc.n	8007f2a <UART_SetConfig+0x2b2>
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1e:	d204      	bcs.n	8007f2a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	e0c2      	b.n	80080b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f30:	e0be      	b.n	80080b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f3a:	d16a      	bne.n	8008012 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d834      	bhi.n	8007fae <UART_SetConfig+0x336>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x2d4>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007faf 	.word	0x08007faf
 8007f5c:	08007f9f 	.word	0x08007f9f
 8007f60:	08007faf 	.word	0x08007faf
 8007f64:	08007faf 	.word	0x08007faf
 8007f68:	08007faf 	.word	0x08007faf
 8007f6c:	08007fa7 	.word	0x08007fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f70:	f7fd f98a 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8007f74:	61f8      	str	r0, [r7, #28]
        break;
 8007f76:	e020      	b.n	8007fba <UART_SetConfig+0x342>
 8007f78:	efff69f3 	.word	0xefff69f3
 8007f7c:	40008000 	.word	0x40008000
 8007f80:	40013800 	.word	0x40013800
 8007f84:	40021000 	.word	0x40021000
 8007f88:	40004400 	.word	0x40004400
 8007f8c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f90:	f7fd f990 	bl	80052b4 <HAL_RCC_GetPCLK2Freq>
 8007f94:	61f8      	str	r0, [r7, #28]
        break;
 8007f96:	e010      	b.n	8007fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f98:	4b4c      	ldr	r3, [pc, #304]	; (80080cc <UART_SetConfig+0x454>)
 8007f9a:	61fb      	str	r3, [r7, #28]
        break;
 8007f9c:	e00d      	b.n	8007fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9e:	f7fd f8db 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8007fa2:	61f8      	str	r0, [r7, #28]
        break;
 8007fa4:	e009      	b.n	8007fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007faa:	61fb      	str	r3, [r7, #28]
        break;
 8007fac:	e005      	b.n	8007fba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d077      	beq.n	80080b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	005a      	lsls	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	441a      	add	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b0f      	cmp	r3, #15
 8007fda:	d916      	bls.n	800800a <UART_SetConfig+0x392>
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe2:	d212      	bcs.n	800800a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f023 030f 	bic.w	r3, r3, #15
 8007fec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	8afb      	ldrh	r3, [r7, #22]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	8afa      	ldrh	r2, [r7, #22]
 8008006:	60da      	str	r2, [r3, #12]
 8008008:	e052      	b.n	80080b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008010:	e04e      	b.n	80080b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008016:	2b08      	cmp	r3, #8
 8008018:	d827      	bhi.n	800806a <UART_SetConfig+0x3f2>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x3a8>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	0800806b 	.word	0x0800806b
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800806b 	.word	0x0800806b
 800803c:	0800806b 	.word	0x0800806b
 8008040:	08008063 	.word	0x08008063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fd f920 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8008048:	61f8      	str	r0, [r7, #28]
        break;
 800804a:	e014      	b.n	8008076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800804c:	f7fd f932 	bl	80052b4 <HAL_RCC_GetPCLK2Freq>
 8008050:	61f8      	str	r0, [r7, #28]
        break;
 8008052:	e010      	b.n	8008076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <UART_SetConfig+0x454>)
 8008056:	61fb      	str	r3, [r7, #28]
        break;
 8008058:	e00d      	b.n	8008076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805a:	f7fd f87d 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 800805e:	61f8      	str	r0, [r7, #28]
        break;
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008066:	61fb      	str	r3, [r7, #28]
        break;
 8008068:	e005      	b.n	8008076 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008074:	bf00      	nop
    }

    if (pclk != 0U)
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d019      	beq.n	80080b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	085a      	lsrs	r2, r3, #1
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b0f      	cmp	r3, #15
 8008094:	d909      	bls.n	80080aa <UART_SetConfig+0x432>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809c:	d205      	bcs.n	80080aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60da      	str	r2, [r3, #12]
 80080a8:	e002      	b.n	80080b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3728      	adds	r7, #40	; 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	00f42400 	.word	0x00f42400

080080d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01a      	beq.n	80081e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ce:	d10a      	bne.n	80081e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b098      	sub	sp, #96	; 0x60
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008224:	f7f9 ff16 	bl	8002054 <HAL_GetTick>
 8008228:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d12e      	bne.n	8008296 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008240:	2200      	movs	r2, #0
 8008242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f88c 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d021      	beq.n	8008296 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008266:	653b      	str	r3, [r7, #80]	; 0x50
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
 8008272:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800827e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e6      	bne.n	8008252 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e062      	b.n	800835c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d149      	bne.n	8008338 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ac:	2200      	movs	r2, #0
 80082ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f856 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d03c      	beq.n	8008338 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	623b      	str	r3, [r7, #32]
   return(result);
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	633b      	str	r3, [r7, #48]	; 0x30
 80082de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008310:	61fa      	str	r2, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	617b      	str	r3, [r7, #20]
   return(result);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e011      	b.n	800835c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3758      	adds	r7, #88	; 0x58
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008374:	e049      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d045      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7f9 fe69 	bl	8002054 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <UART_WaitOnFlagUntilTimeout+0x30>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e048      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d031      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d110      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2208      	movs	r2, #8
 80083ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f838 	bl	8008432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2208      	movs	r2, #8
 80083c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e029      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e4:	d111      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f81e 	bl	8008432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e00f      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d0a6      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008432:	b480      	push	{r7}
 8008434:	b095      	sub	sp, #84	; 0x54
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008458:	643b      	str	r3, [r7, #64]	; 0x40
 800845a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800845e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e6      	bne.n	800843a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	61fb      	str	r3, [r7, #28]
   return(result);
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3308      	adds	r3, #8
 800848a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d118      	bne.n	80084da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6979      	ldr	r1, [r7, #20]
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	613b      	str	r3, [r7, #16]
   return(result);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084ee:	bf00      	nop
 80084f0:	3754      	adds	r7, #84	; 0x54
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff fb97 	bl	8007c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b088      	sub	sp, #32
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	60bb      	str	r3, [r7, #8]
   return(result);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6979      	ldr	r1, [r7, #20]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	613b      	str	r3, [r7, #16]
   return(result);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e6      	bne.n	800852e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff fb63 	bl	8007c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008572:	bf00      	nop
 8008574:	3720      	adds	r7, #32
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <atoi>:
 800858e:	220a      	movs	r2, #10
 8008590:	2100      	movs	r1, #0
 8008592:	f000 b883 	b.w	800869c <strtol>
	...

08008598 <_strtol_l.constprop.0>:
 8008598:	2b01      	cmp	r3, #1
 800859a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859e:	d001      	beq.n	80085a4 <_strtol_l.constprop.0+0xc>
 80085a0:	2b24      	cmp	r3, #36	; 0x24
 80085a2:	d906      	bls.n	80085b2 <_strtol_l.constprop.0+0x1a>
 80085a4:	f000 fb04 	bl	8008bb0 <__errno>
 80085a8:	2316      	movs	r3, #22
 80085aa:	6003      	str	r3, [r0, #0]
 80085ac:	2000      	movs	r0, #0
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008698 <_strtol_l.constprop.0+0x100>
 80085b6:	460d      	mov	r5, r1
 80085b8:	462e      	mov	r6, r5
 80085ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80085c2:	f017 0708 	ands.w	r7, r7, #8
 80085c6:	d1f7      	bne.n	80085b8 <_strtol_l.constprop.0+0x20>
 80085c8:	2c2d      	cmp	r4, #45	; 0x2d
 80085ca:	d132      	bne.n	8008632 <_strtol_l.constprop.0+0x9a>
 80085cc:	782c      	ldrb	r4, [r5, #0]
 80085ce:	2701      	movs	r7, #1
 80085d0:	1cb5      	adds	r5, r6, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d05b      	beq.n	800868e <_strtol_l.constprop.0+0xf6>
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d109      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 80085da:	2c30      	cmp	r4, #48	; 0x30
 80085dc:	d107      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 80085de:	782c      	ldrb	r4, [r5, #0]
 80085e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085e4:	2c58      	cmp	r4, #88	; 0x58
 80085e6:	d14d      	bne.n	8008684 <_strtol_l.constprop.0+0xec>
 80085e8:	786c      	ldrb	r4, [r5, #1]
 80085ea:	2310      	movs	r3, #16
 80085ec:	3502      	adds	r5, #2
 80085ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80085f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80085f6:	f04f 0e00 	mov.w	lr, #0
 80085fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80085fe:	4676      	mov	r6, lr
 8008600:	fb03 8a19 	mls	sl, r3, r9, r8
 8008604:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008608:	f1bc 0f09 	cmp.w	ip, #9
 800860c:	d816      	bhi.n	800863c <_strtol_l.constprop.0+0xa4>
 800860e:	4664      	mov	r4, ip
 8008610:	42a3      	cmp	r3, r4
 8008612:	dd24      	ble.n	800865e <_strtol_l.constprop.0+0xc6>
 8008614:	f1be 3fff 	cmp.w	lr, #4294967295
 8008618:	d008      	beq.n	800862c <_strtol_l.constprop.0+0x94>
 800861a:	45b1      	cmp	r9, r6
 800861c:	d31c      	bcc.n	8008658 <_strtol_l.constprop.0+0xc0>
 800861e:	d101      	bne.n	8008624 <_strtol_l.constprop.0+0x8c>
 8008620:	45a2      	cmp	sl, r4
 8008622:	db19      	blt.n	8008658 <_strtol_l.constprop.0+0xc0>
 8008624:	fb06 4603 	mla	r6, r6, r3, r4
 8008628:	f04f 0e01 	mov.w	lr, #1
 800862c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008630:	e7e8      	b.n	8008604 <_strtol_l.constprop.0+0x6c>
 8008632:	2c2b      	cmp	r4, #43	; 0x2b
 8008634:	bf04      	itt	eq
 8008636:	782c      	ldrbeq	r4, [r5, #0]
 8008638:	1cb5      	addeq	r5, r6, #2
 800863a:	e7ca      	b.n	80085d2 <_strtol_l.constprop.0+0x3a>
 800863c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008640:	f1bc 0f19 	cmp.w	ip, #25
 8008644:	d801      	bhi.n	800864a <_strtol_l.constprop.0+0xb2>
 8008646:	3c37      	subs	r4, #55	; 0x37
 8008648:	e7e2      	b.n	8008610 <_strtol_l.constprop.0+0x78>
 800864a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800864e:	f1bc 0f19 	cmp.w	ip, #25
 8008652:	d804      	bhi.n	800865e <_strtol_l.constprop.0+0xc6>
 8008654:	3c57      	subs	r4, #87	; 0x57
 8008656:	e7db      	b.n	8008610 <_strtol_l.constprop.0+0x78>
 8008658:	f04f 3eff 	mov.w	lr, #4294967295
 800865c:	e7e6      	b.n	800862c <_strtol_l.constprop.0+0x94>
 800865e:	f1be 3fff 	cmp.w	lr, #4294967295
 8008662:	d105      	bne.n	8008670 <_strtol_l.constprop.0+0xd8>
 8008664:	2322      	movs	r3, #34	; 0x22
 8008666:	6003      	str	r3, [r0, #0]
 8008668:	4646      	mov	r6, r8
 800866a:	b942      	cbnz	r2, 800867e <_strtol_l.constprop.0+0xe6>
 800866c:	4630      	mov	r0, r6
 800866e:	e79e      	b.n	80085ae <_strtol_l.constprop.0+0x16>
 8008670:	b107      	cbz	r7, 8008674 <_strtol_l.constprop.0+0xdc>
 8008672:	4276      	negs	r6, r6
 8008674:	2a00      	cmp	r2, #0
 8008676:	d0f9      	beq.n	800866c <_strtol_l.constprop.0+0xd4>
 8008678:	f1be 0f00 	cmp.w	lr, #0
 800867c:	d000      	beq.n	8008680 <_strtol_l.constprop.0+0xe8>
 800867e:	1e69      	subs	r1, r5, #1
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	e7f3      	b.n	800866c <_strtol_l.constprop.0+0xd4>
 8008684:	2430      	movs	r4, #48	; 0x30
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1b1      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 800868a:	2308      	movs	r3, #8
 800868c:	e7af      	b.n	80085ee <_strtol_l.constprop.0+0x56>
 800868e:	2c30      	cmp	r4, #48	; 0x30
 8008690:	d0a5      	beq.n	80085de <_strtol_l.constprop.0+0x46>
 8008692:	230a      	movs	r3, #10
 8008694:	e7ab      	b.n	80085ee <_strtol_l.constprop.0+0x56>
 8008696:	bf00      	nop
 8008698:	08009cb1 	.word	0x08009cb1

0800869c <strtol>:
 800869c:	4613      	mov	r3, r2
 800869e:	460a      	mov	r2, r1
 80086a0:	4601      	mov	r1, r0
 80086a2:	4802      	ldr	r0, [pc, #8]	; (80086ac <strtol+0x10>)
 80086a4:	6800      	ldr	r0, [r0, #0]
 80086a6:	f7ff bf77 	b.w	8008598 <_strtol_l.constprop.0>
 80086aa:	bf00      	nop
 80086ac:	200000dc 	.word	0x200000dc

080086b0 <std>:
 80086b0:	2300      	movs	r3, #0
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	e9c0 3300 	strd	r3, r3, [r0]
 80086ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086be:	6083      	str	r3, [r0, #8]
 80086c0:	8181      	strh	r1, [r0, #12]
 80086c2:	6643      	str	r3, [r0, #100]	; 0x64
 80086c4:	81c2      	strh	r2, [r0, #14]
 80086c6:	6183      	str	r3, [r0, #24]
 80086c8:	4619      	mov	r1, r3
 80086ca:	2208      	movs	r2, #8
 80086cc:	305c      	adds	r0, #92	; 0x5c
 80086ce:	f000 f9c4 	bl	8008a5a <memset>
 80086d2:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <std+0x58>)
 80086d4:	6263      	str	r3, [r4, #36]	; 0x24
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <std+0x5c>)
 80086d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086da:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <std+0x60>)
 80086dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <std+0x64>)
 80086e0:	6323      	str	r3, [r4, #48]	; 0x30
 80086e2:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <std+0x68>)
 80086e4:	6224      	str	r4, [r4, #32]
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d006      	beq.n	80086f8 <std+0x48>
 80086ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80086ee:	4294      	cmp	r4, r2
 80086f0:	d002      	beq.n	80086f8 <std+0x48>
 80086f2:	33d0      	adds	r3, #208	; 0xd0
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d105      	bne.n	8008704 <std+0x54>
 80086f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008700:	f000 ba80 	b.w	8008c04 <__retarget_lock_init_recursive>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	080089d5 	.word	0x080089d5
 800870c:	080089f7 	.word	0x080089f7
 8008710:	08008a2f 	.word	0x08008a2f
 8008714:	08008a53 	.word	0x08008a53
 8008718:	200002f0 	.word	0x200002f0

0800871c <stdio_exit_handler>:
 800871c:	4a02      	ldr	r2, [pc, #8]	; (8008728 <stdio_exit_handler+0xc>)
 800871e:	4903      	ldr	r1, [pc, #12]	; (800872c <stdio_exit_handler+0x10>)
 8008720:	4803      	ldr	r0, [pc, #12]	; (8008730 <stdio_exit_handler+0x14>)
 8008722:	f000 b869 	b.w	80087f8 <_fwalk_sglue>
 8008726:	bf00      	nop
 8008728:	20000084 	.word	0x20000084
 800872c:	080094fd 	.word	0x080094fd
 8008730:	20000090 	.word	0x20000090

08008734 <cleanup_stdio>:
 8008734:	6841      	ldr	r1, [r0, #4]
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <cleanup_stdio+0x34>)
 8008738:	4299      	cmp	r1, r3
 800873a:	b510      	push	{r4, lr}
 800873c:	4604      	mov	r4, r0
 800873e:	d001      	beq.n	8008744 <cleanup_stdio+0x10>
 8008740:	f000 fedc 	bl	80094fc <_fflush_r>
 8008744:	68a1      	ldr	r1, [r4, #8]
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <cleanup_stdio+0x38>)
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <cleanup_stdio+0x1e>
 800874c:	4620      	mov	r0, r4
 800874e:	f000 fed5 	bl	80094fc <_fflush_r>
 8008752:	68e1      	ldr	r1, [r4, #12]
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <cleanup_stdio+0x3c>)
 8008756:	4299      	cmp	r1, r3
 8008758:	d004      	beq.n	8008764 <cleanup_stdio+0x30>
 800875a:	4620      	mov	r0, r4
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f000 becc 	b.w	80094fc <_fflush_r>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	200002f0 	.word	0x200002f0
 800876c:	20000358 	.word	0x20000358
 8008770:	200003c0 	.word	0x200003c0

08008774 <global_stdio_init.part.0>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <global_stdio_init.part.0+0x30>)
 8008778:	4c0b      	ldr	r4, [pc, #44]	; (80087a8 <global_stdio_init.part.0+0x34>)
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <global_stdio_init.part.0+0x38>)
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	4620      	mov	r0, r4
 8008780:	2200      	movs	r2, #0
 8008782:	2104      	movs	r1, #4
 8008784:	f7ff ff94 	bl	80086b0 <std>
 8008788:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800878c:	2201      	movs	r2, #1
 800878e:	2109      	movs	r1, #9
 8008790:	f7ff ff8e 	bl	80086b0 <std>
 8008794:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008798:	2202      	movs	r2, #2
 800879a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879e:	2112      	movs	r1, #18
 80087a0:	f7ff bf86 	b.w	80086b0 <std>
 80087a4:	20000428 	.word	0x20000428
 80087a8:	200002f0 	.word	0x200002f0
 80087ac:	0800871d 	.word	0x0800871d

080087b0 <__sfp_lock_acquire>:
 80087b0:	4801      	ldr	r0, [pc, #4]	; (80087b8 <__sfp_lock_acquire+0x8>)
 80087b2:	f000 ba28 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 80087b6:	bf00      	nop
 80087b8:	20000431 	.word	0x20000431

080087bc <__sfp_lock_release>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <__sfp_lock_release+0x8>)
 80087be:	f000 ba23 	b.w	8008c08 <__retarget_lock_release_recursive>
 80087c2:	bf00      	nop
 80087c4:	20000431 	.word	0x20000431

080087c8 <__sinit>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	f7ff fff0 	bl	80087b0 <__sfp_lock_acquire>
 80087d0:	6a23      	ldr	r3, [r4, #32]
 80087d2:	b11b      	cbz	r3, 80087dc <__sinit+0x14>
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f7ff bff0 	b.w	80087bc <__sfp_lock_release>
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <__sinit+0x28>)
 80087de:	6223      	str	r3, [r4, #32]
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <__sinit+0x2c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f5      	bne.n	80087d4 <__sinit+0xc>
 80087e8:	f7ff ffc4 	bl	8008774 <global_stdio_init.part.0>
 80087ec:	e7f2      	b.n	80087d4 <__sinit+0xc>
 80087ee:	bf00      	nop
 80087f0:	08008735 	.word	0x08008735
 80087f4:	20000428 	.word	0x20000428

080087f8 <_fwalk_sglue>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	4607      	mov	r7, r0
 80087fe:	4688      	mov	r8, r1
 8008800:	4614      	mov	r4, r2
 8008802:	2600      	movs	r6, #0
 8008804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008808:	f1b9 0901 	subs.w	r9, r9, #1
 800880c:	d505      	bpl.n	800881a <_fwalk_sglue+0x22>
 800880e:	6824      	ldr	r4, [r4, #0]
 8008810:	2c00      	cmp	r4, #0
 8008812:	d1f7      	bne.n	8008804 <_fwalk_sglue+0xc>
 8008814:	4630      	mov	r0, r6
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d907      	bls.n	8008830 <_fwalk_sglue+0x38>
 8008820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008824:	3301      	adds	r3, #1
 8008826:	d003      	beq.n	8008830 <_fwalk_sglue+0x38>
 8008828:	4629      	mov	r1, r5
 800882a:	4638      	mov	r0, r7
 800882c:	47c0      	blx	r8
 800882e:	4306      	orrs	r6, r0
 8008830:	3568      	adds	r5, #104	; 0x68
 8008832:	e7e9      	b.n	8008808 <_fwalk_sglue+0x10>

08008834 <getchar>:
 8008834:	4b02      	ldr	r3, [pc, #8]	; (8008840 <getchar+0xc>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	6841      	ldr	r1, [r0, #4]
 800883a:	f000 be99 	b.w	8009570 <_getc_r>
 800883e:	bf00      	nop
 8008840:	200000dc 	.word	0x200000dc

08008844 <iprintf>:
 8008844:	b40f      	push	{r0, r1, r2, r3}
 8008846:	b507      	push	{r0, r1, r2, lr}
 8008848:	4906      	ldr	r1, [pc, #24]	; (8008864 <iprintf+0x20>)
 800884a:	ab04      	add	r3, sp, #16
 800884c:	6808      	ldr	r0, [r1, #0]
 800884e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008852:	6881      	ldr	r1, [r0, #8]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f000 fb21 	bl	8008e9c <_vfiprintf_r>
 800885a:	b003      	add	sp, #12
 800885c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008860:	b004      	add	sp, #16
 8008862:	4770      	bx	lr
 8008864:	200000dc 	.word	0x200000dc

08008868 <putchar>:
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <putchar+0xc>)
 800886a:	4601      	mov	r1, r0
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	6882      	ldr	r2, [r0, #8]
 8008870:	f000 bf0b 	b.w	800968a <_putc_r>
 8008874:	200000dc 	.word	0x200000dc

08008878 <setvbuf>:
 8008878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800887c:	461d      	mov	r5, r3
 800887e:	4b54      	ldr	r3, [pc, #336]	; (80089d0 <setvbuf+0x158>)
 8008880:	681f      	ldr	r7, [r3, #0]
 8008882:	4604      	mov	r4, r0
 8008884:	460e      	mov	r6, r1
 8008886:	4690      	mov	r8, r2
 8008888:	b127      	cbz	r7, 8008894 <setvbuf+0x1c>
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	b913      	cbnz	r3, 8008894 <setvbuf+0x1c>
 800888e:	4638      	mov	r0, r7
 8008890:	f7ff ff9a 	bl	80087c8 <__sinit>
 8008894:	f1b8 0f02 	cmp.w	r8, #2
 8008898:	d006      	beq.n	80088a8 <setvbuf+0x30>
 800889a:	f1b8 0f01 	cmp.w	r8, #1
 800889e:	f200 8094 	bhi.w	80089ca <setvbuf+0x152>
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	f2c0 8091 	blt.w	80089ca <setvbuf+0x152>
 80088a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088aa:	07da      	lsls	r2, r3, #31
 80088ac:	d405      	bmi.n	80088ba <setvbuf+0x42>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d402      	bmi.n	80088ba <setvbuf+0x42>
 80088b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b6:	f000 f9a6 	bl	8008c06 <__retarget_lock_acquire_recursive>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4638      	mov	r0, r7
 80088be:	f000 fe1d 	bl	80094fc <_fflush_r>
 80088c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c4:	b141      	cbz	r1, 80088d8 <setvbuf+0x60>
 80088c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ca:	4299      	cmp	r1, r3
 80088cc:	d002      	beq.n	80088d4 <setvbuf+0x5c>
 80088ce:	4638      	mov	r0, r7
 80088d0:	f000 f9ba 	bl	8008c48 <_free_r>
 80088d4:	2300      	movs	r3, #0
 80088d6:	6363      	str	r3, [r4, #52]	; 0x34
 80088d8:	2300      	movs	r3, #0
 80088da:	61a3      	str	r3, [r4, #24]
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	0618      	lsls	r0, r3, #24
 80088e2:	d503      	bpl.n	80088ec <setvbuf+0x74>
 80088e4:	6921      	ldr	r1, [r4, #16]
 80088e6:	4638      	mov	r0, r7
 80088e8:	f000 f9ae 	bl	8008c48 <_free_r>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	f1b8 0f02 	cmp.w	r8, #2
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	d05f      	beq.n	80089be <setvbuf+0x146>
 80088fe:	ab01      	add	r3, sp, #4
 8008900:	466a      	mov	r2, sp
 8008902:	4621      	mov	r1, r4
 8008904:	4638      	mov	r0, r7
 8008906:	f000 fe5e 	bl	80095c6 <__swhatbuf_r>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	4318      	orrs	r0, r3
 800890e:	81a0      	strh	r0, [r4, #12]
 8008910:	bb2d      	cbnz	r5, 800895e <setvbuf+0xe6>
 8008912:	9d00      	ldr	r5, [sp, #0]
 8008914:	4628      	mov	r0, r5
 8008916:	f000 f9e3 	bl	8008ce0 <malloc>
 800891a:	4606      	mov	r6, r0
 800891c:	2800      	cmp	r0, #0
 800891e:	d150      	bne.n	80089c2 <setvbuf+0x14a>
 8008920:	f8dd 9000 	ldr.w	r9, [sp]
 8008924:	45a9      	cmp	r9, r5
 8008926:	d13e      	bne.n	80089a6 <setvbuf+0x12e>
 8008928:	f04f 35ff 	mov.w	r5, #4294967295
 800892c:	2200      	movs	r2, #0
 800892e:	60a2      	str	r2, [r4, #8]
 8008930:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008934:	6022      	str	r2, [r4, #0]
 8008936:	6122      	str	r2, [r4, #16]
 8008938:	2201      	movs	r2, #1
 800893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893e:	6162      	str	r2, [r4, #20]
 8008940:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008942:	f043 0302 	orr.w	r3, r3, #2
 8008946:	07d1      	lsls	r1, r2, #31
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	d404      	bmi.n	8008956 <setvbuf+0xde>
 800894c:	059b      	lsls	r3, r3, #22
 800894e:	d402      	bmi.n	8008956 <setvbuf+0xde>
 8008950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008952:	f000 f959 	bl	8008c08 <__retarget_lock_release_recursive>
 8008956:	4628      	mov	r0, r5
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895e:	2e00      	cmp	r6, #0
 8008960:	d0d8      	beq.n	8008914 <setvbuf+0x9c>
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	b913      	cbnz	r3, 800896c <setvbuf+0xf4>
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff ff2e 	bl	80087c8 <__sinit>
 800896c:	f1b8 0f01 	cmp.w	r8, #1
 8008970:	bf08      	it	eq
 8008972:	89a3      	ldrheq	r3, [r4, #12]
 8008974:	6026      	str	r6, [r4, #0]
 8008976:	bf04      	itt	eq
 8008978:	f043 0301 	orreq.w	r3, r3, #1
 800897c:	81a3      	strheq	r3, [r4, #12]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f013 0208 	ands.w	r2, r3, #8
 8008984:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008988:	d01d      	beq.n	80089c6 <setvbuf+0x14e>
 800898a:	07da      	lsls	r2, r3, #31
 800898c:	bf41      	itttt	mi
 800898e:	2200      	movmi	r2, #0
 8008990:	426d      	negmi	r5, r5
 8008992:	60a2      	strmi	r2, [r4, #8]
 8008994:	61a5      	strmi	r5, [r4, #24]
 8008996:	bf58      	it	pl
 8008998:	60a5      	strpl	r5, [r4, #8]
 800899a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800899c:	f015 0501 	ands.w	r5, r5, #1
 80089a0:	d0d4      	beq.n	800894c <setvbuf+0xd4>
 80089a2:	2500      	movs	r5, #0
 80089a4:	e7d7      	b.n	8008956 <setvbuf+0xde>
 80089a6:	4648      	mov	r0, r9
 80089a8:	f000 f99a 	bl	8008ce0 <malloc>
 80089ac:	4606      	mov	r6, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0ba      	beq.n	8008928 <setvbuf+0xb0>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	464d      	mov	r5, r9
 80089bc:	e7d1      	b.n	8008962 <setvbuf+0xea>
 80089be:	2500      	movs	r5, #0
 80089c0:	e7b4      	b.n	800892c <setvbuf+0xb4>
 80089c2:	46a9      	mov	r9, r5
 80089c4:	e7f5      	b.n	80089b2 <setvbuf+0x13a>
 80089c6:	60a2      	str	r2, [r4, #8]
 80089c8:	e7e7      	b.n	800899a <setvbuf+0x122>
 80089ca:	f04f 35ff 	mov.w	r5, #4294967295
 80089ce:	e7c2      	b.n	8008956 <setvbuf+0xde>
 80089d0:	200000dc 	.word	0x200000dc

080089d4 <__sread>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	460c      	mov	r4, r1
 80089d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089dc:	f000 f8c4 	bl	8008b68 <_read_r>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	bfab      	itete	ge
 80089e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089e6:	89a3      	ldrhlt	r3, [r4, #12]
 80089e8:	181b      	addge	r3, r3, r0
 80089ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ee:	bfac      	ite	ge
 80089f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089f2:	81a3      	strhlt	r3, [r4, #12]
 80089f4:	bd10      	pop	{r4, pc}

080089f6 <__swrite>:
 80089f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	461f      	mov	r7, r3
 80089fc:	898b      	ldrh	r3, [r1, #12]
 80089fe:	05db      	lsls	r3, r3, #23
 8008a00:	4605      	mov	r5, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4616      	mov	r6, r2
 8008a06:	d505      	bpl.n	8008a14 <__swrite+0x1e>
 8008a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f000 f898 	bl	8008b44 <_lseek_r>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2a:	f000 b8af 	b.w	8008b8c <_write_r>

08008a2e <__sseek>:
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a36:	f000 f885 	bl	8008b44 <_lseek_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	bf15      	itete	ne
 8008a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a4a:	81a3      	strheq	r3, [r4, #12]
 8008a4c:	bf18      	it	ne
 8008a4e:	81a3      	strhne	r3, [r4, #12]
 8008a50:	bd10      	pop	{r4, pc}

08008a52 <__sclose>:
 8008a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a56:	f000 b865 	b.w	8008b24 <_close_r>

08008a5a <memset>:
 8008a5a:	4402      	add	r2, r0
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d100      	bne.n	8008a64 <memset+0xa>
 8008a62:	4770      	bx	lr
 8008a64:	f803 1b01 	strb.w	r1, [r3], #1
 8008a68:	e7f9      	b.n	8008a5e <memset+0x4>
	...

08008a6c <strtok>:
 8008a6c:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <strtok+0x5c>)
 8008a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a70:	681e      	ldr	r6, [r3, #0]
 8008a72:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008a74:	4605      	mov	r5, r0
 8008a76:	b9fc      	cbnz	r4, 8008ab8 <strtok+0x4c>
 8008a78:	2050      	movs	r0, #80	; 0x50
 8008a7a:	9101      	str	r1, [sp, #4]
 8008a7c:	f000 f930 	bl	8008ce0 <malloc>
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	6470      	str	r0, [r6, #68]	; 0x44
 8008a84:	4602      	mov	r2, r0
 8008a86:	b920      	cbnz	r0, 8008a92 <strtok+0x26>
 8008a88:	4b10      	ldr	r3, [pc, #64]	; (8008acc <strtok+0x60>)
 8008a8a:	4811      	ldr	r0, [pc, #68]	; (8008ad0 <strtok+0x64>)
 8008a8c:	215b      	movs	r1, #91	; 0x5b
 8008a8e:	f000 f8bd 	bl	8008c0c <__assert_func>
 8008a92:	e9c0 4400 	strd	r4, r4, [r0]
 8008a96:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a9e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008aa2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008aa6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008aaa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008aae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008ab2:	6184      	str	r4, [r0, #24]
 8008ab4:	7704      	strb	r4, [r0, #28]
 8008ab6:	6244      	str	r4, [r0, #36]	; 0x24
 8008ab8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	b002      	add	sp, #8
 8008ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ac4:	f000 b806 	b.w	8008ad4 <__strtok_r>
 8008ac8:	200000dc 	.word	0x200000dc
 8008acc:	08009db1 	.word	0x08009db1
 8008ad0:	08009dc8 	.word	0x08009dc8

08008ad4 <__strtok_r>:
 8008ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad6:	b908      	cbnz	r0, 8008adc <__strtok_r+0x8>
 8008ad8:	6810      	ldr	r0, [r2, #0]
 8008ada:	b188      	cbz	r0, 8008b00 <__strtok_r+0x2c>
 8008adc:	4604      	mov	r4, r0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008aea:	b91e      	cbnz	r6, 8008af4 <__strtok_r+0x20>
 8008aec:	b965      	cbnz	r5, 8008b08 <__strtok_r+0x34>
 8008aee:	6015      	str	r5, [r2, #0]
 8008af0:	4628      	mov	r0, r5
 8008af2:	e005      	b.n	8008b00 <__strtok_r+0x2c>
 8008af4:	42b5      	cmp	r5, r6
 8008af6:	d1f6      	bne.n	8008ae6 <__strtok_r+0x12>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <__strtok_r+0xa>
 8008afc:	6014      	str	r4, [r2, #0]
 8008afe:	7003      	strb	r3, [r0, #0]
 8008b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b02:	461c      	mov	r4, r3
 8008b04:	e00c      	b.n	8008b20 <__strtok_r+0x4c>
 8008b06:	b915      	cbnz	r5, 8008b0e <__strtok_r+0x3a>
 8008b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b0c:	460e      	mov	r6, r1
 8008b0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b12:	42ab      	cmp	r3, r5
 8008b14:	d1f7      	bne.n	8008b06 <__strtok_r+0x32>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f3      	beq.n	8008b02 <__strtok_r+0x2e>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b20:	6014      	str	r4, [r2, #0]
 8008b22:	e7ed      	b.n	8008b00 <__strtok_r+0x2c>

08008b24 <_close_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	; (8008b40 <_close_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7f8 ff54 	bl	80019dc <_close>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_close_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_close_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2000042c 	.word	0x2000042c

08008b44 <_lseek_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	; (8008b64 <_lseek_r+0x20>)
 8008b48:	4604      	mov	r4, r0
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	602a      	str	r2, [r5, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f7f8 ff59 	bl	8001a0a <_lseek>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_lseek_r+0x1e>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_lseek_r+0x1e>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	2000042c 	.word	0x2000042c

08008b68 <_read_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d07      	ldr	r5, [pc, #28]	; (8008b88 <_read_r+0x20>)
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f7f8 ff58 	bl	8001a2c <_read>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_read_r+0x1e>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_read_r+0x1e>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	2000042c 	.word	0x2000042c

08008b8c <_write_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	; (8008bac <_write_r+0x20>)
 8008b90:	4604      	mov	r4, r0
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f7f8 fef2 	bl	8001984 <_write>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_write_r+0x1e>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_write_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	2000042c 	.word	0x2000042c

08008bb0 <__errno>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	; (8008bb8 <__errno+0x8>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	200000dc 	.word	0x200000dc

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4d0d      	ldr	r5, [pc, #52]	; (8008bf4 <__libc_init_array+0x38>)
 8008bc0:	4c0d      	ldr	r4, [pc, #52]	; (8008bf8 <__libc_init_array+0x3c>)
 8008bc2:	1b64      	subs	r4, r4, r5
 8008bc4:	10a4      	asrs	r4, r4, #2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	4d0b      	ldr	r5, [pc, #44]	; (8008bfc <__libc_init_array+0x40>)
 8008bce:	4c0c      	ldr	r4, [pc, #48]	; (8008c00 <__libc_init_array+0x44>)
 8008bd0:	f000 ff40 	bl	8009a54 <_init>
 8008bd4:	1b64      	subs	r4, r4, r5
 8008bd6:	10a4      	asrs	r4, r4, #2
 8008bd8:	2600      	movs	r6, #0
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	08009e9c 	.word	0x08009e9c
 8008bf8:	08009e9c 	.word	0x08009e9c
 8008bfc:	08009e9c 	.word	0x08009e9c
 8008c00:	08009ea0 	.word	0x08009ea0

08008c04 <__retarget_lock_init_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__retarget_lock_acquire_recursive>:
 8008c06:	4770      	bx	lr

08008c08 <__retarget_lock_release_recursive>:
 8008c08:	4770      	bx	lr
	...

08008c0c <__assert_func>:
 8008c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <__assert_func+0x2c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	68d8      	ldr	r0, [r3, #12]
 8008c1a:	b14c      	cbz	r4, 8008c30 <__assert_func+0x24>
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <__assert_func+0x30>)
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c24:	4906      	ldr	r1, [pc, #24]	; (8008c40 <__assert_func+0x34>)
 8008c26:	462b      	mov	r3, r5
 8008c28:	f000 fc90 	bl	800954c <fiprintf>
 8008c2c:	f000 fe40 	bl	80098b0 <abort>
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <__assert_func+0x38>)
 8008c32:	461c      	mov	r4, r3
 8008c34:	e7f3      	b.n	8008c1e <__assert_func+0x12>
 8008c36:	bf00      	nop
 8008c38:	200000dc 	.word	0x200000dc
 8008c3c:	08009e22 	.word	0x08009e22
 8008c40:	08009e2f 	.word	0x08009e2f
 8008c44:	08009e5d 	.word	0x08009e5d

08008c48 <_free_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d044      	beq.n	8008cd8 <_free_r+0x90>
 8008c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5a:	bfb8      	it	lt
 8008c5c:	18e4      	addlt	r4, r4, r3
 8008c5e:	f000 f8e7 	bl	8008e30 <__malloc_lock>
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <_free_r+0x94>)
 8008c64:	9801      	ldr	r0, [sp, #4]
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	b933      	cbnz	r3, 8008c78 <_free_r+0x30>
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6014      	str	r4, [r2, #0]
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c74:	f000 b8e2 	b.w	8008e3c <__malloc_unlock>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d908      	bls.n	8008c8e <_free_r+0x46>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf01      	itttt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	1949      	addeq	r1, r1, r5
 8008c8a:	6021      	streq	r1, [r4, #0]
 8008c8c:	e7ed      	b.n	8008c6a <_free_r+0x22>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b10b      	cbz	r3, 8008c98 <_free_r+0x50>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d9fa      	bls.n	8008c8e <_free_r+0x46>
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	1855      	adds	r5, r2, r1
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	d10b      	bne.n	8008cb8 <_free_r+0x70>
 8008ca0:	6824      	ldr	r4, [r4, #0]
 8008ca2:	4421      	add	r1, r4
 8008ca4:	1854      	adds	r4, r2, r1
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	d1e0      	bne.n	8008c6e <_free_r+0x26>
 8008cac:	681c      	ldr	r4, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	440c      	add	r4, r1
 8008cb4:	6014      	str	r4, [r2, #0]
 8008cb6:	e7da      	b.n	8008c6e <_free_r+0x26>
 8008cb8:	d902      	bls.n	8008cc0 <_free_r+0x78>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	e7d6      	b.n	8008c6e <_free_r+0x26>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	1961      	adds	r1, r4, r5
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf04      	itt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	bf04      	itt	eq
 8008cd0:	1949      	addeq	r1, r1, r5
 8008cd2:	6021      	streq	r1, [r4, #0]
 8008cd4:	6054      	str	r4, [r2, #4]
 8008cd6:	e7ca      	b.n	8008c6e <_free_r+0x26>
 8008cd8:	b003      	add	sp, #12
 8008cda:	bd30      	pop	{r4, r5, pc}
 8008cdc:	20000434 	.word	0x20000434

08008ce0 <malloc>:
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <malloc+0xc>)
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f000 b823 	b.w	8008d30 <_malloc_r>
 8008cea:	bf00      	nop
 8008cec:	200000dc 	.word	0x200000dc

08008cf0 <sbrk_aligned>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4e0e      	ldr	r6, [pc, #56]	; (8008d2c <sbrk_aligned+0x3c>)
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	6831      	ldr	r1, [r6, #0]
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	b911      	cbnz	r1, 8008d02 <sbrk_aligned+0x12>
 8008cfc:	f000 fdc8 	bl	8009890 <_sbrk_r>
 8008d00:	6030      	str	r0, [r6, #0]
 8008d02:	4621      	mov	r1, r4
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 fdc3 	bl	8009890 <_sbrk_r>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	d00a      	beq.n	8008d24 <sbrk_aligned+0x34>
 8008d0e:	1cc4      	adds	r4, r0, #3
 8008d10:	f024 0403 	bic.w	r4, r4, #3
 8008d14:	42a0      	cmp	r0, r4
 8008d16:	d007      	beq.n	8008d28 <sbrk_aligned+0x38>
 8008d18:	1a21      	subs	r1, r4, r0
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 fdb8 	bl	8009890 <_sbrk_r>
 8008d20:	3001      	adds	r0, #1
 8008d22:	d101      	bne.n	8008d28 <sbrk_aligned+0x38>
 8008d24:	f04f 34ff 	mov.w	r4, #4294967295
 8008d28:	4620      	mov	r0, r4
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	20000438 	.word	0x20000438

08008d30 <_malloc_r>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	1ccd      	adds	r5, r1, #3
 8008d36:	f025 0503 	bic.w	r5, r5, #3
 8008d3a:	3508      	adds	r5, #8
 8008d3c:	2d0c      	cmp	r5, #12
 8008d3e:	bf38      	it	cc
 8008d40:	250c      	movcc	r5, #12
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	4607      	mov	r7, r0
 8008d46:	db01      	blt.n	8008d4c <_malloc_r+0x1c>
 8008d48:	42a9      	cmp	r1, r5
 8008d4a:	d905      	bls.n	8008d58 <_malloc_r+0x28>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	2600      	movs	r6, #0
 8008d52:	4630      	mov	r0, r6
 8008d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e2c <_malloc_r+0xfc>
 8008d5c:	f000 f868 	bl	8008e30 <__malloc_lock>
 8008d60:	f8d8 3000 	ldr.w	r3, [r8]
 8008d64:	461c      	mov	r4, r3
 8008d66:	bb5c      	cbnz	r4, 8008dc0 <_malloc_r+0x90>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	f7ff ffc0 	bl	8008cf0 <sbrk_aligned>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	4604      	mov	r4, r0
 8008d74:	d155      	bne.n	8008e22 <_malloc_r+0xf2>
 8008d76:	f8d8 4000 	ldr.w	r4, [r8]
 8008d7a:	4626      	mov	r6, r4
 8008d7c:	2e00      	cmp	r6, #0
 8008d7e:	d145      	bne.n	8008e0c <_malloc_r+0xdc>
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	d048      	beq.n	8008e16 <_malloc_r+0xe6>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	4631      	mov	r1, r6
 8008d88:	4638      	mov	r0, r7
 8008d8a:	eb04 0903 	add.w	r9, r4, r3
 8008d8e:	f000 fd7f 	bl	8009890 <_sbrk_r>
 8008d92:	4581      	cmp	r9, r0
 8008d94:	d13f      	bne.n	8008e16 <_malloc_r+0xe6>
 8008d96:	6821      	ldr	r1, [r4, #0]
 8008d98:	1a6d      	subs	r5, r5, r1
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	f7ff ffa7 	bl	8008cf0 <sbrk_aligned>
 8008da2:	3001      	adds	r0, #1
 8008da4:	d037      	beq.n	8008e16 <_malloc_r+0xe6>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	442b      	add	r3, r5
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	f8d8 3000 	ldr.w	r3, [r8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d038      	beq.n	8008e26 <_malloc_r+0xf6>
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	42a2      	cmp	r2, r4
 8008db8:	d12b      	bne.n	8008e12 <_malloc_r+0xe2>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	e00f      	b.n	8008de0 <_malloc_r+0xb0>
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	1b52      	subs	r2, r2, r5
 8008dc4:	d41f      	bmi.n	8008e06 <_malloc_r+0xd6>
 8008dc6:	2a0b      	cmp	r2, #11
 8008dc8:	d917      	bls.n	8008dfa <_malloc_r+0xca>
 8008dca:	1961      	adds	r1, r4, r5
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	6025      	str	r5, [r4, #0]
 8008dd0:	bf18      	it	ne
 8008dd2:	6059      	strne	r1, [r3, #4]
 8008dd4:	6863      	ldr	r3, [r4, #4]
 8008dd6:	bf08      	it	eq
 8008dd8:	f8c8 1000 	streq.w	r1, [r8]
 8008ddc:	5162      	str	r2, [r4, r5]
 8008dde:	604b      	str	r3, [r1, #4]
 8008de0:	4638      	mov	r0, r7
 8008de2:	f104 060b 	add.w	r6, r4, #11
 8008de6:	f000 f829 	bl	8008e3c <__malloc_unlock>
 8008dea:	f026 0607 	bic.w	r6, r6, #7
 8008dee:	1d23      	adds	r3, r4, #4
 8008df0:	1af2      	subs	r2, r6, r3
 8008df2:	d0ae      	beq.n	8008d52 <_malloc_r+0x22>
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	50a3      	str	r3, [r4, r2]
 8008df8:	e7ab      	b.n	8008d52 <_malloc_r+0x22>
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	6862      	ldr	r2, [r4, #4]
 8008dfe:	d1dd      	bne.n	8008dbc <_malloc_r+0x8c>
 8008e00:	f8c8 2000 	str.w	r2, [r8]
 8008e04:	e7ec      	b.n	8008de0 <_malloc_r+0xb0>
 8008e06:	4623      	mov	r3, r4
 8008e08:	6864      	ldr	r4, [r4, #4]
 8008e0a:	e7ac      	b.n	8008d66 <_malloc_r+0x36>
 8008e0c:	4634      	mov	r4, r6
 8008e0e:	6876      	ldr	r6, [r6, #4]
 8008e10:	e7b4      	b.n	8008d7c <_malloc_r+0x4c>
 8008e12:	4613      	mov	r3, r2
 8008e14:	e7cc      	b.n	8008db0 <_malloc_r+0x80>
 8008e16:	230c      	movs	r3, #12
 8008e18:	603b      	str	r3, [r7, #0]
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	f000 f80e 	bl	8008e3c <__malloc_unlock>
 8008e20:	e797      	b.n	8008d52 <_malloc_r+0x22>
 8008e22:	6025      	str	r5, [r4, #0]
 8008e24:	e7dc      	b.n	8008de0 <_malloc_r+0xb0>
 8008e26:	605b      	str	r3, [r3, #4]
 8008e28:	deff      	udf	#255	; 0xff
 8008e2a:	bf00      	nop
 8008e2c:	20000434 	.word	0x20000434

08008e30 <__malloc_lock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_lock+0x8>)
 8008e32:	f7ff bee8 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	20000430 	.word	0x20000430

08008e3c <__malloc_unlock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__malloc_unlock+0x8>)
 8008e3e:	f7ff bee3 	b.w	8008c08 <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000430 	.word	0x20000430

08008e48 <__sfputc_r>:
 8008e48:	6893      	ldr	r3, [r2, #8]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	b410      	push	{r4}
 8008e50:	6093      	str	r3, [r2, #8]
 8008e52:	da08      	bge.n	8008e66 <__sfputc_r+0x1e>
 8008e54:	6994      	ldr	r4, [r2, #24]
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	db01      	blt.n	8008e5e <__sfputc_r+0x16>
 8008e5a:	290a      	cmp	r1, #10
 8008e5c:	d103      	bne.n	8008e66 <__sfputc_r+0x1e>
 8008e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e62:	f000 bc5e 	b.w	8009722 <__swbuf_r>
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	1c58      	adds	r0, r3, #1
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	7019      	strb	r1, [r3, #0]
 8008e6e:	4608      	mov	r0, r1
 8008e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <__sfputs_r>:
 8008e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e78:	4606      	mov	r6, r0
 8008e7a:	460f      	mov	r7, r1
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	18d5      	adds	r5, r2, r3
 8008e80:	42ac      	cmp	r4, r5
 8008e82:	d101      	bne.n	8008e88 <__sfputs_r+0x12>
 8008e84:	2000      	movs	r0, #0
 8008e86:	e007      	b.n	8008e98 <__sfputs_r+0x22>
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff ffda 	bl	8008e48 <__sfputc_r>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d1f3      	bne.n	8008e80 <__sfputs_r+0xa>
 8008e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e9c <_vfiprintf_r>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	b09d      	sub	sp, #116	; 0x74
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4698      	mov	r8, r3
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	b118      	cbz	r0, 8008eb4 <_vfiprintf_r+0x18>
 8008eac:	6a03      	ldr	r3, [r0, #32]
 8008eae:	b90b      	cbnz	r3, 8008eb4 <_vfiprintf_r+0x18>
 8008eb0:	f7ff fc8a 	bl	80087c8 <__sinit>
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x2a>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x2a>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff fea0 	bl	8008c06 <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x34>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b99b      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x5c>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 fc62 	bl	800979c <__swsetup_r>
 8008ed8:	b170      	cbz	r0, 8008ef8 <_vfiprintf_r+0x5c>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d504      	bpl.n	8008eea <_vfiprintf_r+0x4e>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	0598      	lsls	r0, r3, #22
 8008eee:	d4f7      	bmi.n	8008ee0 <_vfiprintf_r+0x44>
 8008ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef2:	f7ff fe89 	bl	8008c08 <__retarget_lock_release_recursive>
 8008ef6:	e7f3      	b.n	8008ee0 <_vfiprintf_r+0x44>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9309      	str	r3, [sp, #36]	; 0x24
 8008efc:	2320      	movs	r3, #32
 8008efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f06:	2330      	movs	r3, #48	; 0x30
 8008f08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090bc <_vfiprintf_r+0x220>
 8008f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f10:	f04f 0901 	mov.w	r9, #1
 8008f14:	4623      	mov	r3, r4
 8008f16:	469a      	mov	sl, r3
 8008f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_vfiprintf_r+0x86>
 8008f1e:	2a25      	cmp	r2, #37	; 0x25
 8008f20:	d1f9      	bne.n	8008f16 <_vfiprintf_r+0x7a>
 8008f22:	ebba 0b04 	subs.w	fp, sl, r4
 8008f26:	d00b      	beq.n	8008f40 <_vfiprintf_r+0xa4>
 8008f28:	465b      	mov	r3, fp
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7ff ffa1 	bl	8008e76 <__sfputs_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	f000 80a9 	beq.w	800908c <_vfiprintf_r+0x1f0>
 8008f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3c:	445a      	add	r2, fp
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80a1 	beq.w	800908c <_vfiprintf_r+0x1f0>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f54:	f10a 0a01 	add.w	sl, sl, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f60:	931a      	str	r3, [sp, #104]	; 0x68
 8008f62:	4654      	mov	r4, sl
 8008f64:	2205      	movs	r2, #5
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	4854      	ldr	r0, [pc, #336]	; (80090bc <_vfiprintf_r+0x220>)
 8008f6c:	f7f7 f940 	bl	80001f0 <memchr>
 8008f70:	9a04      	ldr	r2, [sp, #16]
 8008f72:	b9d8      	cbnz	r0, 8008fac <_vfiprintf_r+0x110>
 8008f74:	06d1      	lsls	r1, r2, #27
 8008f76:	bf44      	itt	mi
 8008f78:	2320      	movmi	r3, #32
 8008f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7e:	0713      	lsls	r3, r2, #28
 8008f80:	bf44      	itt	mi
 8008f82:	232b      	movmi	r3, #43	; 0x2b
 8008f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f88:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8e:	d015      	beq.n	8008fbc <_vfiprintf_r+0x120>
 8008f90:	9a07      	ldr	r2, [sp, #28]
 8008f92:	4654      	mov	r4, sl
 8008f94:	2000      	movs	r0, #0
 8008f96:	f04f 0c0a 	mov.w	ip, #10
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa0:	3b30      	subs	r3, #48	; 0x30
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d94d      	bls.n	8009042 <_vfiprintf_r+0x1a6>
 8008fa6:	b1b0      	cbz	r0, 8008fd6 <_vfiprintf_r+0x13a>
 8008fa8:	9207      	str	r2, [sp, #28]
 8008faa:	e014      	b.n	8008fd6 <_vfiprintf_r+0x13a>
 8008fac:	eba0 0308 	sub.w	r3, r0, r8
 8008fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	46a2      	mov	sl, r4
 8008fba:	e7d2      	b.n	8008f62 <_vfiprintf_r+0xc6>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	1d19      	adds	r1, r3, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	9103      	str	r1, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfbb      	ittet	lt
 8008fc8:	425b      	neglt	r3, r3
 8008fca:	f042 0202 	orrlt.w	r2, r2, #2
 8008fce:	9307      	strge	r3, [sp, #28]
 8008fd0:	9307      	strlt	r3, [sp, #28]
 8008fd2:	bfb8      	it	lt
 8008fd4:	9204      	strlt	r2, [sp, #16]
 8008fd6:	7823      	ldrb	r3, [r4, #0]
 8008fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fda:	d10c      	bne.n	8008ff6 <_vfiprintf_r+0x15a>
 8008fdc:	7863      	ldrb	r3, [r4, #1]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d134      	bne.n	800904c <_vfiprintf_r+0x1b0>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9203      	str	r2, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfb8      	it	lt
 8008fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff2:	3402      	adds	r4, #2
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090cc <_vfiprintf_r+0x230>
 8008ffa:	7821      	ldrb	r1, [r4, #0]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	4650      	mov	r0, sl
 8009000:	f7f7 f8f6 	bl	80001f0 <memchr>
 8009004:	b138      	cbz	r0, 8009016 <_vfiprintf_r+0x17a>
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	eba0 000a 	sub.w	r0, r0, sl
 800900c:	2240      	movs	r2, #64	; 0x40
 800900e:	4082      	lsls	r2, r0
 8009010:	4313      	orrs	r3, r2
 8009012:	3401      	adds	r4, #1
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901a:	4829      	ldr	r0, [pc, #164]	; (80090c0 <_vfiprintf_r+0x224>)
 800901c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009020:	2206      	movs	r2, #6
 8009022:	f7f7 f8e5 	bl	80001f0 <memchr>
 8009026:	2800      	cmp	r0, #0
 8009028:	d03f      	beq.n	80090aa <_vfiprintf_r+0x20e>
 800902a:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <_vfiprintf_r+0x228>)
 800902c:	bb1b      	cbnz	r3, 8009076 <_vfiprintf_r+0x1da>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	3307      	adds	r3, #7
 8009032:	f023 0307 	bic.w	r3, r3, #7
 8009036:	3308      	adds	r3, #8
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	443b      	add	r3, r7
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	e768      	b.n	8008f14 <_vfiprintf_r+0x78>
 8009042:	fb0c 3202 	mla	r2, ip, r2, r3
 8009046:	460c      	mov	r4, r1
 8009048:	2001      	movs	r0, #1
 800904a:	e7a6      	b.n	8008f9a <_vfiprintf_r+0xfe>
 800904c:	2300      	movs	r3, #0
 800904e:	3401      	adds	r4, #1
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	4619      	mov	r1, r3
 8009054:	f04f 0c0a 	mov.w	ip, #10
 8009058:	4620      	mov	r0, r4
 800905a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905e:	3a30      	subs	r2, #48	; 0x30
 8009060:	2a09      	cmp	r2, #9
 8009062:	d903      	bls.n	800906c <_vfiprintf_r+0x1d0>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0c6      	beq.n	8008ff6 <_vfiprintf_r+0x15a>
 8009068:	9105      	str	r1, [sp, #20]
 800906a:	e7c4      	b.n	8008ff6 <_vfiprintf_r+0x15a>
 800906c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009070:	4604      	mov	r4, r0
 8009072:	2301      	movs	r3, #1
 8009074:	e7f0      	b.n	8009058 <_vfiprintf_r+0x1bc>
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4b12      	ldr	r3, [pc, #72]	; (80090c8 <_vfiprintf_r+0x22c>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	4630      	mov	r0, r6
 8009082:	f3af 8000 	nop.w
 8009086:	4607      	mov	r7, r0
 8009088:	1c78      	adds	r0, r7, #1
 800908a:	d1d6      	bne.n	800903a <_vfiprintf_r+0x19e>
 800908c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x202>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x202>
 8009098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909a:	f7ff fdb5 	bl	8008c08 <__retarget_lock_release_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	065b      	lsls	r3, r3, #25
 80090a2:	f53f af1d 	bmi.w	8008ee0 <_vfiprintf_r+0x44>
 80090a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a8:	e71c      	b.n	8008ee4 <_vfiprintf_r+0x48>
 80090aa:	ab03      	add	r3, sp, #12
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	462a      	mov	r2, r5
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <_vfiprintf_r+0x22c>)
 80090b2:	a904      	add	r1, sp, #16
 80090b4:	4630      	mov	r0, r6
 80090b6:	f000 f879 	bl	80091ac <_printf_i>
 80090ba:	e7e4      	b.n	8009086 <_vfiprintf_r+0x1ea>
 80090bc:	08009e5e 	.word	0x08009e5e
 80090c0:	08009e68 	.word	0x08009e68
 80090c4:	00000000 	.word	0x00000000
 80090c8:	08008e77 	.word	0x08008e77
 80090cc:	08009e64 	.word	0x08009e64

080090d0 <_printf_common>:
 80090d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	4616      	mov	r6, r2
 80090d6:	4699      	mov	r9, r3
 80090d8:	688a      	ldr	r2, [r1, #8]
 80090da:	690b      	ldr	r3, [r1, #16]
 80090dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090e0:	4293      	cmp	r3, r2
 80090e2:	bfb8      	it	lt
 80090e4:	4613      	movlt	r3, r2
 80090e6:	6033      	str	r3, [r6, #0]
 80090e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090ec:	4607      	mov	r7, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	b10a      	cbz	r2, 80090f6 <_printf_common+0x26>
 80090f2:	3301      	adds	r3, #1
 80090f4:	6033      	str	r3, [r6, #0]
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	0699      	lsls	r1, r3, #26
 80090fa:	bf42      	ittt	mi
 80090fc:	6833      	ldrmi	r3, [r6, #0]
 80090fe:	3302      	addmi	r3, #2
 8009100:	6033      	strmi	r3, [r6, #0]
 8009102:	6825      	ldr	r5, [r4, #0]
 8009104:	f015 0506 	ands.w	r5, r5, #6
 8009108:	d106      	bne.n	8009118 <_printf_common+0x48>
 800910a:	f104 0a19 	add.w	sl, r4, #25
 800910e:	68e3      	ldr	r3, [r4, #12]
 8009110:	6832      	ldr	r2, [r6, #0]
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	42ab      	cmp	r3, r5
 8009116:	dc26      	bgt.n	8009166 <_printf_common+0x96>
 8009118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800911c:	1e13      	subs	r3, r2, #0
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	bf18      	it	ne
 8009122:	2301      	movne	r3, #1
 8009124:	0692      	lsls	r2, r2, #26
 8009126:	d42b      	bmi.n	8009180 <_printf_common+0xb0>
 8009128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800912c:	4649      	mov	r1, r9
 800912e:	4638      	mov	r0, r7
 8009130:	47c0      	blx	r8
 8009132:	3001      	adds	r0, #1
 8009134:	d01e      	beq.n	8009174 <_printf_common+0xa4>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	6922      	ldr	r2, [r4, #16]
 800913a:	f003 0306 	and.w	r3, r3, #6
 800913e:	2b04      	cmp	r3, #4
 8009140:	bf02      	ittt	eq
 8009142:	68e5      	ldreq	r5, [r4, #12]
 8009144:	6833      	ldreq	r3, [r6, #0]
 8009146:	1aed      	subeq	r5, r5, r3
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	bf0c      	ite	eq
 800914c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009150:	2500      	movne	r5, #0
 8009152:	4293      	cmp	r3, r2
 8009154:	bfc4      	itt	gt
 8009156:	1a9b      	subgt	r3, r3, r2
 8009158:	18ed      	addgt	r5, r5, r3
 800915a:	2600      	movs	r6, #0
 800915c:	341a      	adds	r4, #26
 800915e:	42b5      	cmp	r5, r6
 8009160:	d11a      	bne.n	8009198 <_printf_common+0xc8>
 8009162:	2000      	movs	r0, #0
 8009164:	e008      	b.n	8009178 <_printf_common+0xa8>
 8009166:	2301      	movs	r3, #1
 8009168:	4652      	mov	r2, sl
 800916a:	4649      	mov	r1, r9
 800916c:	4638      	mov	r0, r7
 800916e:	47c0      	blx	r8
 8009170:	3001      	adds	r0, #1
 8009172:	d103      	bne.n	800917c <_printf_common+0xac>
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917c:	3501      	adds	r5, #1
 800917e:	e7c6      	b.n	800910e <_printf_common+0x3e>
 8009180:	18e1      	adds	r1, r4, r3
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	2030      	movs	r0, #48	; 0x30
 8009186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800918a:	4422      	add	r2, r4
 800918c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009194:	3302      	adds	r3, #2
 8009196:	e7c7      	b.n	8009128 <_printf_common+0x58>
 8009198:	2301      	movs	r3, #1
 800919a:	4622      	mov	r2, r4
 800919c:	4649      	mov	r1, r9
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	3001      	adds	r0, #1
 80091a4:	d0e6      	beq.n	8009174 <_printf_common+0xa4>
 80091a6:	3601      	adds	r6, #1
 80091a8:	e7d9      	b.n	800915e <_printf_common+0x8e>
	...

080091ac <_printf_i>:
 80091ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	7e0f      	ldrb	r7, [r1, #24]
 80091b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091b4:	2f78      	cmp	r7, #120	; 0x78
 80091b6:	4691      	mov	r9, r2
 80091b8:	4680      	mov	r8, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	469a      	mov	sl, r3
 80091be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091c2:	d807      	bhi.n	80091d4 <_printf_i+0x28>
 80091c4:	2f62      	cmp	r7, #98	; 0x62
 80091c6:	d80a      	bhi.n	80091de <_printf_i+0x32>
 80091c8:	2f00      	cmp	r7, #0
 80091ca:	f000 80d4 	beq.w	8009376 <_printf_i+0x1ca>
 80091ce:	2f58      	cmp	r7, #88	; 0x58
 80091d0:	f000 80c0 	beq.w	8009354 <_printf_i+0x1a8>
 80091d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091dc:	e03a      	b.n	8009254 <_printf_i+0xa8>
 80091de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091e2:	2b15      	cmp	r3, #21
 80091e4:	d8f6      	bhi.n	80091d4 <_printf_i+0x28>
 80091e6:	a101      	add	r1, pc, #4	; (adr r1, 80091ec <_printf_i+0x40>)
 80091e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009259 	.word	0x08009259
 80091f4:	080091d5 	.word	0x080091d5
 80091f8:	080091d5 	.word	0x080091d5
 80091fc:	080091d5 	.word	0x080091d5
 8009200:	080091d5 	.word	0x080091d5
 8009204:	08009259 	.word	0x08009259
 8009208:	080091d5 	.word	0x080091d5
 800920c:	080091d5 	.word	0x080091d5
 8009210:	080091d5 	.word	0x080091d5
 8009214:	080091d5 	.word	0x080091d5
 8009218:	0800935d 	.word	0x0800935d
 800921c:	08009285 	.word	0x08009285
 8009220:	08009317 	.word	0x08009317
 8009224:	080091d5 	.word	0x080091d5
 8009228:	080091d5 	.word	0x080091d5
 800922c:	0800937f 	.word	0x0800937f
 8009230:	080091d5 	.word	0x080091d5
 8009234:	08009285 	.word	0x08009285
 8009238:	080091d5 	.word	0x080091d5
 800923c:	080091d5 	.word	0x080091d5
 8009240:	0800931f 	.word	0x0800931f
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	602a      	str	r2, [r5, #0]
 800924c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009254:	2301      	movs	r3, #1
 8009256:	e09f      	b.n	8009398 <_printf_i+0x1ec>
 8009258:	6820      	ldr	r0, [r4, #0]
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	0607      	lsls	r7, r0, #24
 800925e:	f103 0104 	add.w	r1, r3, #4
 8009262:	6029      	str	r1, [r5, #0]
 8009264:	d501      	bpl.n	800926a <_printf_i+0xbe>
 8009266:	681e      	ldr	r6, [r3, #0]
 8009268:	e003      	b.n	8009272 <_printf_i+0xc6>
 800926a:	0646      	lsls	r6, r0, #25
 800926c:	d5fb      	bpl.n	8009266 <_printf_i+0xba>
 800926e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009272:	2e00      	cmp	r6, #0
 8009274:	da03      	bge.n	800927e <_printf_i+0xd2>
 8009276:	232d      	movs	r3, #45	; 0x2d
 8009278:	4276      	negs	r6, r6
 800927a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800927e:	485a      	ldr	r0, [pc, #360]	; (80093e8 <_printf_i+0x23c>)
 8009280:	230a      	movs	r3, #10
 8009282:	e012      	b.n	80092aa <_printf_i+0xfe>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	6820      	ldr	r0, [r4, #0]
 8009288:	1d19      	adds	r1, r3, #4
 800928a:	6029      	str	r1, [r5, #0]
 800928c:	0605      	lsls	r5, r0, #24
 800928e:	d501      	bpl.n	8009294 <_printf_i+0xe8>
 8009290:	681e      	ldr	r6, [r3, #0]
 8009292:	e002      	b.n	800929a <_printf_i+0xee>
 8009294:	0641      	lsls	r1, r0, #25
 8009296:	d5fb      	bpl.n	8009290 <_printf_i+0xe4>
 8009298:	881e      	ldrh	r6, [r3, #0]
 800929a:	4853      	ldr	r0, [pc, #332]	; (80093e8 <_printf_i+0x23c>)
 800929c:	2f6f      	cmp	r7, #111	; 0x6f
 800929e:	bf0c      	ite	eq
 80092a0:	2308      	moveq	r3, #8
 80092a2:	230a      	movne	r3, #10
 80092a4:	2100      	movs	r1, #0
 80092a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092aa:	6865      	ldr	r5, [r4, #4]
 80092ac:	60a5      	str	r5, [r4, #8]
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	bfa2      	ittt	ge
 80092b2:	6821      	ldrge	r1, [r4, #0]
 80092b4:	f021 0104 	bicge.w	r1, r1, #4
 80092b8:	6021      	strge	r1, [r4, #0]
 80092ba:	b90e      	cbnz	r6, 80092c0 <_printf_i+0x114>
 80092bc:	2d00      	cmp	r5, #0
 80092be:	d04b      	beq.n	8009358 <_printf_i+0x1ac>
 80092c0:	4615      	mov	r5, r2
 80092c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092c6:	fb03 6711 	mls	r7, r3, r1, r6
 80092ca:	5dc7      	ldrb	r7, [r0, r7]
 80092cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092d0:	4637      	mov	r7, r6
 80092d2:	42bb      	cmp	r3, r7
 80092d4:	460e      	mov	r6, r1
 80092d6:	d9f4      	bls.n	80092c2 <_printf_i+0x116>
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d10b      	bne.n	80092f4 <_printf_i+0x148>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	07de      	lsls	r6, r3, #31
 80092e0:	d508      	bpl.n	80092f4 <_printf_i+0x148>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	6861      	ldr	r1, [r4, #4]
 80092e6:	4299      	cmp	r1, r3
 80092e8:	bfde      	ittt	le
 80092ea:	2330      	movle	r3, #48	; 0x30
 80092ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092f4:	1b52      	subs	r2, r2, r5
 80092f6:	6122      	str	r2, [r4, #16]
 80092f8:	f8cd a000 	str.w	sl, [sp]
 80092fc:	464b      	mov	r3, r9
 80092fe:	aa03      	add	r2, sp, #12
 8009300:	4621      	mov	r1, r4
 8009302:	4640      	mov	r0, r8
 8009304:	f7ff fee4 	bl	80090d0 <_printf_common>
 8009308:	3001      	adds	r0, #1
 800930a:	d14a      	bne.n	80093a2 <_printf_i+0x1f6>
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	b004      	add	sp, #16
 8009312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	f043 0320 	orr.w	r3, r3, #32
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	4833      	ldr	r0, [pc, #204]	; (80093ec <_printf_i+0x240>)
 8009320:	2778      	movs	r7, #120	; 0x78
 8009322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	6829      	ldr	r1, [r5, #0]
 800932a:	061f      	lsls	r7, r3, #24
 800932c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009330:	d402      	bmi.n	8009338 <_printf_i+0x18c>
 8009332:	065f      	lsls	r7, r3, #25
 8009334:	bf48      	it	mi
 8009336:	b2b6      	uxthmi	r6, r6
 8009338:	07df      	lsls	r7, r3, #31
 800933a:	bf48      	it	mi
 800933c:	f043 0320 	orrmi.w	r3, r3, #32
 8009340:	6029      	str	r1, [r5, #0]
 8009342:	bf48      	it	mi
 8009344:	6023      	strmi	r3, [r4, #0]
 8009346:	b91e      	cbnz	r6, 8009350 <_printf_i+0x1a4>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	f023 0320 	bic.w	r3, r3, #32
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	2310      	movs	r3, #16
 8009352:	e7a7      	b.n	80092a4 <_printf_i+0xf8>
 8009354:	4824      	ldr	r0, [pc, #144]	; (80093e8 <_printf_i+0x23c>)
 8009356:	e7e4      	b.n	8009322 <_printf_i+0x176>
 8009358:	4615      	mov	r5, r2
 800935a:	e7bd      	b.n	80092d8 <_printf_i+0x12c>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	6826      	ldr	r6, [r4, #0]
 8009360:	6961      	ldr	r1, [r4, #20]
 8009362:	1d18      	adds	r0, r3, #4
 8009364:	6028      	str	r0, [r5, #0]
 8009366:	0635      	lsls	r5, r6, #24
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	d501      	bpl.n	8009370 <_printf_i+0x1c4>
 800936c:	6019      	str	r1, [r3, #0]
 800936e:	e002      	b.n	8009376 <_printf_i+0x1ca>
 8009370:	0670      	lsls	r0, r6, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0x1c0>
 8009374:	8019      	strh	r1, [r3, #0]
 8009376:	2300      	movs	r3, #0
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	4615      	mov	r5, r2
 800937c:	e7bc      	b.n	80092f8 <_printf_i+0x14c>
 800937e:	682b      	ldr	r3, [r5, #0]
 8009380:	1d1a      	adds	r2, r3, #4
 8009382:	602a      	str	r2, [r5, #0]
 8009384:	681d      	ldr	r5, [r3, #0]
 8009386:	6862      	ldr	r2, [r4, #4]
 8009388:	2100      	movs	r1, #0
 800938a:	4628      	mov	r0, r5
 800938c:	f7f6 ff30 	bl	80001f0 <memchr>
 8009390:	b108      	cbz	r0, 8009396 <_printf_i+0x1ea>
 8009392:	1b40      	subs	r0, r0, r5
 8009394:	6060      	str	r0, [r4, #4]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a0:	e7aa      	b.n	80092f8 <_printf_i+0x14c>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	47d0      	blx	sl
 80093ac:	3001      	adds	r0, #1
 80093ae:	d0ad      	beq.n	800930c <_printf_i+0x160>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	079b      	lsls	r3, r3, #30
 80093b4:	d413      	bmi.n	80093de <_printf_i+0x232>
 80093b6:	68e0      	ldr	r0, [r4, #12]
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	4298      	cmp	r0, r3
 80093bc:	bfb8      	it	lt
 80093be:	4618      	movlt	r0, r3
 80093c0:	e7a6      	b.n	8009310 <_printf_i+0x164>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4632      	mov	r2, r6
 80093c6:	4649      	mov	r1, r9
 80093c8:	4640      	mov	r0, r8
 80093ca:	47d0      	blx	sl
 80093cc:	3001      	adds	r0, #1
 80093ce:	d09d      	beq.n	800930c <_printf_i+0x160>
 80093d0:	3501      	adds	r5, #1
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	9903      	ldr	r1, [sp, #12]
 80093d6:	1a5b      	subs	r3, r3, r1
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dcf2      	bgt.n	80093c2 <_printf_i+0x216>
 80093dc:	e7eb      	b.n	80093b6 <_printf_i+0x20a>
 80093de:	2500      	movs	r5, #0
 80093e0:	f104 0619 	add.w	r6, r4, #25
 80093e4:	e7f5      	b.n	80093d2 <_printf_i+0x226>
 80093e6:	bf00      	nop
 80093e8:	08009e6f 	.word	0x08009e6f
 80093ec:	08009e80 	.word	0x08009e80

080093f0 <__sflush_r>:
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	0710      	lsls	r0, r2, #28
 80093fa:	460c      	mov	r4, r1
 80093fc:	d458      	bmi.n	80094b0 <__sflush_r+0xc0>
 80093fe:	684b      	ldr	r3, [r1, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	dc05      	bgt.n	8009410 <__sflush_r+0x20>
 8009404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc02      	bgt.n	8009410 <__sflush_r+0x20>
 800940a:	2000      	movs	r0, #0
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009412:	2e00      	cmp	r6, #0
 8009414:	d0f9      	beq.n	800940a <__sflush_r+0x1a>
 8009416:	2300      	movs	r3, #0
 8009418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800941c:	682f      	ldr	r7, [r5, #0]
 800941e:	6a21      	ldr	r1, [r4, #32]
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	d032      	beq.n	800948a <__sflush_r+0x9a>
 8009424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	075a      	lsls	r2, r3, #29
 800942a:	d505      	bpl.n	8009438 <__sflush_r+0x48>
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	1ac0      	subs	r0, r0, r3
 8009430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009432:	b10b      	cbz	r3, 8009438 <__sflush_r+0x48>
 8009434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009436:	1ac0      	subs	r0, r0, r3
 8009438:	2300      	movs	r3, #0
 800943a:	4602      	mov	r2, r0
 800943c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943e:	6a21      	ldr	r1, [r4, #32]
 8009440:	4628      	mov	r0, r5
 8009442:	47b0      	blx	r6
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	d106      	bne.n	8009458 <__sflush_r+0x68>
 800944a:	6829      	ldr	r1, [r5, #0]
 800944c:	291d      	cmp	r1, #29
 800944e:	d82b      	bhi.n	80094a8 <__sflush_r+0xb8>
 8009450:	4a29      	ldr	r2, [pc, #164]	; (80094f8 <__sflush_r+0x108>)
 8009452:	410a      	asrs	r2, r1
 8009454:	07d6      	lsls	r6, r2, #31
 8009456:	d427      	bmi.n	80094a8 <__sflush_r+0xb8>
 8009458:	2200      	movs	r2, #0
 800945a:	6062      	str	r2, [r4, #4]
 800945c:	04d9      	lsls	r1, r3, #19
 800945e:	6922      	ldr	r2, [r4, #16]
 8009460:	6022      	str	r2, [r4, #0]
 8009462:	d504      	bpl.n	800946e <__sflush_r+0x7e>
 8009464:	1c42      	adds	r2, r0, #1
 8009466:	d101      	bne.n	800946c <__sflush_r+0x7c>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b903      	cbnz	r3, 800946e <__sflush_r+0x7e>
 800946c:	6560      	str	r0, [r4, #84]	; 0x54
 800946e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009470:	602f      	str	r7, [r5, #0]
 8009472:	2900      	cmp	r1, #0
 8009474:	d0c9      	beq.n	800940a <__sflush_r+0x1a>
 8009476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800947a:	4299      	cmp	r1, r3
 800947c:	d002      	beq.n	8009484 <__sflush_r+0x94>
 800947e:	4628      	mov	r0, r5
 8009480:	f7ff fbe2 	bl	8008c48 <_free_r>
 8009484:	2000      	movs	r0, #0
 8009486:	6360      	str	r0, [r4, #52]	; 0x34
 8009488:	e7c0      	b.n	800940c <__sflush_r+0x1c>
 800948a:	2301      	movs	r3, #1
 800948c:	4628      	mov	r0, r5
 800948e:	47b0      	blx	r6
 8009490:	1c41      	adds	r1, r0, #1
 8009492:	d1c8      	bne.n	8009426 <__sflush_r+0x36>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c5      	beq.n	8009426 <__sflush_r+0x36>
 800949a:	2b1d      	cmp	r3, #29
 800949c:	d001      	beq.n	80094a2 <__sflush_r+0xb2>
 800949e:	2b16      	cmp	r3, #22
 80094a0:	d101      	bne.n	80094a6 <__sflush_r+0xb6>
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	e7b1      	b.n	800940a <__sflush_r+0x1a>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	e7ad      	b.n	800940c <__sflush_r+0x1c>
 80094b0:	690f      	ldr	r7, [r1, #16]
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	d0a9      	beq.n	800940a <__sflush_r+0x1a>
 80094b6:	0793      	lsls	r3, r2, #30
 80094b8:	680e      	ldr	r6, [r1, #0]
 80094ba:	bf08      	it	eq
 80094bc:	694b      	ldreq	r3, [r1, #20]
 80094be:	600f      	str	r7, [r1, #0]
 80094c0:	bf18      	it	ne
 80094c2:	2300      	movne	r3, #0
 80094c4:	eba6 0807 	sub.w	r8, r6, r7
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	dd9c      	ble.n	800940a <__sflush_r+0x1a>
 80094d0:	6a21      	ldr	r1, [r4, #32]
 80094d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d4:	4643      	mov	r3, r8
 80094d6:	463a      	mov	r2, r7
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	2800      	cmp	r0, #0
 80094de:	dc06      	bgt.n	80094ee <__sflush_r+0xfe>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e78e      	b.n	800940c <__sflush_r+0x1c>
 80094ee:	4407      	add	r7, r0
 80094f0:	eba8 0800 	sub.w	r8, r8, r0
 80094f4:	e7e9      	b.n	80094ca <__sflush_r+0xda>
 80094f6:	bf00      	nop
 80094f8:	dfbffffe 	.word	0xdfbffffe

080094fc <_fflush_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	690b      	ldr	r3, [r1, #16]
 8009500:	4605      	mov	r5, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b913      	cbnz	r3, 800950c <_fflush_r+0x10>
 8009506:	2500      	movs	r5, #0
 8009508:	4628      	mov	r0, r5
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	b118      	cbz	r0, 8009516 <_fflush_r+0x1a>
 800950e:	6a03      	ldr	r3, [r0, #32]
 8009510:	b90b      	cbnz	r3, 8009516 <_fflush_r+0x1a>
 8009512:	f7ff f959 	bl	80087c8 <__sinit>
 8009516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f3      	beq.n	8009506 <_fflush_r+0xa>
 800951e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009520:	07d0      	lsls	r0, r2, #31
 8009522:	d404      	bmi.n	800952e <_fflush_r+0x32>
 8009524:	0599      	lsls	r1, r3, #22
 8009526:	d402      	bmi.n	800952e <_fflush_r+0x32>
 8009528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800952a:	f7ff fb6c 	bl	8008c06 <__retarget_lock_acquire_recursive>
 800952e:	4628      	mov	r0, r5
 8009530:	4621      	mov	r1, r4
 8009532:	f7ff ff5d 	bl	80093f0 <__sflush_r>
 8009536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009538:	07da      	lsls	r2, r3, #31
 800953a:	4605      	mov	r5, r0
 800953c:	d4e4      	bmi.n	8009508 <_fflush_r+0xc>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	059b      	lsls	r3, r3, #22
 8009542:	d4e1      	bmi.n	8009508 <_fflush_r+0xc>
 8009544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009546:	f7ff fb5f 	bl	8008c08 <__retarget_lock_release_recursive>
 800954a:	e7dd      	b.n	8009508 <_fflush_r+0xc>

0800954c <fiprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b503      	push	{r0, r1, lr}
 8009550:	4601      	mov	r1, r0
 8009552:	ab03      	add	r3, sp, #12
 8009554:	4805      	ldr	r0, [pc, #20]	; (800956c <fiprintf+0x20>)
 8009556:	f853 2b04 	ldr.w	r2, [r3], #4
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	f7ff fc9d 	bl	8008e9c <_vfiprintf_r>
 8009562:	b002      	add	sp, #8
 8009564:	f85d eb04 	ldr.w	lr, [sp], #4
 8009568:	b003      	add	sp, #12
 800956a:	4770      	bx	lr
 800956c:	200000dc 	.word	0x200000dc

08009570 <_getc_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	460c      	mov	r4, r1
 8009574:	4605      	mov	r5, r0
 8009576:	b118      	cbz	r0, 8009580 <_getc_r+0x10>
 8009578:	6a03      	ldr	r3, [r0, #32]
 800957a:	b90b      	cbnz	r3, 8009580 <_getc_r+0x10>
 800957c:	f7ff f924 	bl	80087c8 <__sinit>
 8009580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009582:	07d8      	lsls	r0, r3, #31
 8009584:	d405      	bmi.n	8009592 <_getc_r+0x22>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	0599      	lsls	r1, r3, #22
 800958a:	d402      	bmi.n	8009592 <_getc_r+0x22>
 800958c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958e:	f7ff fb3a 	bl	8008c06 <__retarget_lock_acquire_recursive>
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	3b01      	subs	r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	da0f      	bge.n	80095bc <_getc_r+0x4c>
 800959c:	4628      	mov	r0, r5
 800959e:	4621      	mov	r1, r4
 80095a0:	f000 f8a7 	bl	80096f2 <__srget_r>
 80095a4:	4605      	mov	r5, r0
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	07da      	lsls	r2, r3, #31
 80095aa:	d405      	bmi.n	80095b8 <_getc_r+0x48>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	059b      	lsls	r3, r3, #22
 80095b0:	d402      	bmi.n	80095b8 <_getc_r+0x48>
 80095b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b4:	f7ff fb28 	bl	8008c08 <__retarget_lock_release_recursive>
 80095b8:	4628      	mov	r0, r5
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	781d      	ldrb	r5, [r3, #0]
 80095c4:	e7ef      	b.n	80095a6 <_getc_r+0x36>

080095c6 <__swhatbuf_r>:
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	460c      	mov	r4, r1
 80095ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ce:	2900      	cmp	r1, #0
 80095d0:	b096      	sub	sp, #88	; 0x58
 80095d2:	4615      	mov	r5, r2
 80095d4:	461e      	mov	r6, r3
 80095d6:	da0d      	bge.n	80095f4 <__swhatbuf_r+0x2e>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095de:	f04f 0100 	mov.w	r1, #0
 80095e2:	bf0c      	ite	eq
 80095e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095e8:	2340      	movne	r3, #64	; 0x40
 80095ea:	2000      	movs	r0, #0
 80095ec:	6031      	str	r1, [r6, #0]
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	b016      	add	sp, #88	; 0x58
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	466a      	mov	r2, sp
 80095f6:	f000 f929 	bl	800984c <_fstat_r>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	dbec      	blt.n	80095d8 <__swhatbuf_r+0x12>
 80095fe:	9901      	ldr	r1, [sp, #4]
 8009600:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009604:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009608:	4259      	negs	r1, r3
 800960a:	4159      	adcs	r1, r3
 800960c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009610:	e7eb      	b.n	80095ea <__swhatbuf_r+0x24>

08009612 <__smakebuf_r>:
 8009612:	898b      	ldrh	r3, [r1, #12]
 8009614:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009616:	079d      	lsls	r5, r3, #30
 8009618:	4606      	mov	r6, r0
 800961a:	460c      	mov	r4, r1
 800961c:	d507      	bpl.n	800962e <__smakebuf_r+0x1c>
 800961e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	2301      	movs	r3, #1
 8009628:	6163      	str	r3, [r4, #20]
 800962a:	b002      	add	sp, #8
 800962c:	bd70      	pop	{r4, r5, r6, pc}
 800962e:	ab01      	add	r3, sp, #4
 8009630:	466a      	mov	r2, sp
 8009632:	f7ff ffc8 	bl	80095c6 <__swhatbuf_r>
 8009636:	9900      	ldr	r1, [sp, #0]
 8009638:	4605      	mov	r5, r0
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff fb78 	bl	8008d30 <_malloc_r>
 8009640:	b948      	cbnz	r0, 8009656 <__smakebuf_r+0x44>
 8009642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009646:	059a      	lsls	r2, r3, #22
 8009648:	d4ef      	bmi.n	800962a <__smakebuf_r+0x18>
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	f043 0302 	orr.w	r3, r3, #2
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	e7e3      	b.n	800961e <__smakebuf_r+0xc>
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	6020      	str	r0, [r4, #0]
 800965a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	6120      	str	r0, [r4, #16]
 8009668:	b15b      	cbz	r3, 8009682 <__smakebuf_r+0x70>
 800966a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966e:	4630      	mov	r0, r6
 8009670:	f000 f8fe 	bl	8009870 <_isatty_r>
 8009674:	b128      	cbz	r0, 8009682 <__smakebuf_r+0x70>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	f043 0301 	orr.w	r3, r3, #1
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	431d      	orrs	r5, r3
 8009686:	81a5      	strh	r5, [r4, #12]
 8009688:	e7cf      	b.n	800962a <__smakebuf_r+0x18>

0800968a <_putc_r>:
 800968a:	b570      	push	{r4, r5, r6, lr}
 800968c:	460d      	mov	r5, r1
 800968e:	4614      	mov	r4, r2
 8009690:	4606      	mov	r6, r0
 8009692:	b118      	cbz	r0, 800969c <_putc_r+0x12>
 8009694:	6a03      	ldr	r3, [r0, #32]
 8009696:	b90b      	cbnz	r3, 800969c <_putc_r+0x12>
 8009698:	f7ff f896 	bl	80087c8 <__sinit>
 800969c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800969e:	07d8      	lsls	r0, r3, #31
 80096a0:	d405      	bmi.n	80096ae <_putc_r+0x24>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	0599      	lsls	r1, r3, #22
 80096a6:	d402      	bmi.n	80096ae <_putc_r+0x24>
 80096a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096aa:	f7ff faac 	bl	8008c06 <__retarget_lock_acquire_recursive>
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	da05      	bge.n	80096c4 <_putc_r+0x3a>
 80096b8:	69a2      	ldr	r2, [r4, #24]
 80096ba:	4293      	cmp	r3, r2
 80096bc:	db12      	blt.n	80096e4 <_putc_r+0x5a>
 80096be:	b2eb      	uxtb	r3, r5
 80096c0:	2b0a      	cmp	r3, #10
 80096c2:	d00f      	beq.n	80096e4 <_putc_r+0x5a>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	701d      	strb	r5, [r3, #0]
 80096cc:	b2ed      	uxtb	r5, r5
 80096ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d0:	07da      	lsls	r2, r3, #31
 80096d2:	d405      	bmi.n	80096e0 <_putc_r+0x56>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	059b      	lsls	r3, r3, #22
 80096d8:	d402      	bmi.n	80096e0 <_putc_r+0x56>
 80096da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096dc:	f7ff fa94 	bl	8008c08 <__retarget_lock_release_recursive>
 80096e0:	4628      	mov	r0, r5
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	4629      	mov	r1, r5
 80096e6:	4622      	mov	r2, r4
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 f81a 	bl	8009722 <__swbuf_r>
 80096ee:	4605      	mov	r5, r0
 80096f0:	e7ed      	b.n	80096ce <_putc_r+0x44>

080096f2 <__srget_r>:
 80096f2:	b538      	push	{r3, r4, r5, lr}
 80096f4:	460c      	mov	r4, r1
 80096f6:	4605      	mov	r5, r0
 80096f8:	b118      	cbz	r0, 8009702 <__srget_r+0x10>
 80096fa:	6a03      	ldr	r3, [r0, #32]
 80096fc:	b90b      	cbnz	r3, 8009702 <__srget_r+0x10>
 80096fe:	f7ff f863 	bl	80087c8 <__sinit>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f8e9 	bl	80098dc <__srefill_r>
 800970a:	b938      	cbnz	r0, 800971c <__srget_r+0x2a>
 800970c:	6863      	ldr	r3, [r4, #4]
 800970e:	3b01      	subs	r3, #1
 8009710:	6063      	str	r3, [r4, #4]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	6022      	str	r2, [r4, #0]
 8009718:	7818      	ldrb	r0, [r3, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e7fb      	b.n	800971a <__srget_r+0x28>

08009722 <__swbuf_r>:
 8009722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009724:	460e      	mov	r6, r1
 8009726:	4614      	mov	r4, r2
 8009728:	4605      	mov	r5, r0
 800972a:	b118      	cbz	r0, 8009734 <__swbuf_r+0x12>
 800972c:	6a03      	ldr	r3, [r0, #32]
 800972e:	b90b      	cbnz	r3, 8009734 <__swbuf_r+0x12>
 8009730:	f7ff f84a 	bl	80087c8 <__sinit>
 8009734:	69a3      	ldr	r3, [r4, #24]
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	071a      	lsls	r2, r3, #28
 800973c:	d525      	bpl.n	800978a <__swbuf_r+0x68>
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	b31b      	cbz	r3, 800978a <__swbuf_r+0x68>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	1a98      	subs	r0, r3, r2
 8009748:	6963      	ldr	r3, [r4, #20]
 800974a:	b2f6      	uxtb	r6, r6
 800974c:	4283      	cmp	r3, r0
 800974e:	4637      	mov	r7, r6
 8009750:	dc04      	bgt.n	800975c <__swbuf_r+0x3a>
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f7ff fed1 	bl	80094fc <_fflush_r>
 800975a:	b9e0      	cbnz	r0, 8009796 <__swbuf_r+0x74>
 800975c:	68a3      	ldr	r3, [r4, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	701e      	strb	r6, [r3, #0]
 800976a:	6962      	ldr	r2, [r4, #20]
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	429a      	cmp	r2, r3
 8009770:	d004      	beq.n	800977c <__swbuf_r+0x5a>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	07db      	lsls	r3, r3, #31
 8009776:	d506      	bpl.n	8009786 <__swbuf_r+0x64>
 8009778:	2e0a      	cmp	r6, #10
 800977a:	d104      	bne.n	8009786 <__swbuf_r+0x64>
 800977c:	4621      	mov	r1, r4
 800977e:	4628      	mov	r0, r5
 8009780:	f7ff febc 	bl	80094fc <_fflush_r>
 8009784:	b938      	cbnz	r0, 8009796 <__swbuf_r+0x74>
 8009786:	4638      	mov	r0, r7
 8009788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978a:	4621      	mov	r1, r4
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f805 	bl	800979c <__swsetup_r>
 8009792:	2800      	cmp	r0, #0
 8009794:	d0d5      	beq.n	8009742 <__swbuf_r+0x20>
 8009796:	f04f 37ff 	mov.w	r7, #4294967295
 800979a:	e7f4      	b.n	8009786 <__swbuf_r+0x64>

0800979c <__swsetup_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4b2a      	ldr	r3, [pc, #168]	; (8009848 <__swsetup_r+0xac>)
 80097a0:	4605      	mov	r5, r0
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	460c      	mov	r4, r1
 80097a6:	b118      	cbz	r0, 80097b0 <__swsetup_r+0x14>
 80097a8:	6a03      	ldr	r3, [r0, #32]
 80097aa:	b90b      	cbnz	r3, 80097b0 <__swsetup_r+0x14>
 80097ac:	f7ff f80c 	bl	80087c8 <__sinit>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097b6:	0718      	lsls	r0, r3, #28
 80097b8:	d422      	bmi.n	8009800 <__swsetup_r+0x64>
 80097ba:	06d9      	lsls	r1, r3, #27
 80097bc:	d407      	bmi.n	80097ce <__swsetup_r+0x32>
 80097be:	2309      	movs	r3, #9
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097c6:	81a3      	strh	r3, [r4, #12]
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295
 80097cc:	e034      	b.n	8009838 <__swsetup_r+0x9c>
 80097ce:	0758      	lsls	r0, r3, #29
 80097d0:	d512      	bpl.n	80097f8 <__swsetup_r+0x5c>
 80097d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d4:	b141      	cbz	r1, 80097e8 <__swsetup_r+0x4c>
 80097d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097da:	4299      	cmp	r1, r3
 80097dc:	d002      	beq.n	80097e4 <__swsetup_r+0x48>
 80097de:	4628      	mov	r0, r5
 80097e0:	f7ff fa32 	bl	8008c48 <_free_r>
 80097e4:	2300      	movs	r3, #0
 80097e6:	6363      	str	r3, [r4, #52]	; 0x34
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	2300      	movs	r3, #0
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f043 0308 	orr.w	r3, r3, #8
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	6923      	ldr	r3, [r4, #16]
 8009802:	b94b      	cbnz	r3, 8009818 <__swsetup_r+0x7c>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800980a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980e:	d003      	beq.n	8009818 <__swsetup_r+0x7c>
 8009810:	4621      	mov	r1, r4
 8009812:	4628      	mov	r0, r5
 8009814:	f7ff fefd 	bl	8009612 <__smakebuf_r>
 8009818:	89a0      	ldrh	r0, [r4, #12]
 800981a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981e:	f010 0301 	ands.w	r3, r0, #1
 8009822:	d00a      	beq.n	800983a <__swsetup_r+0x9e>
 8009824:	2300      	movs	r3, #0
 8009826:	60a3      	str	r3, [r4, #8]
 8009828:	6963      	ldr	r3, [r4, #20]
 800982a:	425b      	negs	r3, r3
 800982c:	61a3      	str	r3, [r4, #24]
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	b943      	cbnz	r3, 8009844 <__swsetup_r+0xa8>
 8009832:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009836:	d1c4      	bne.n	80097c2 <__swsetup_r+0x26>
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	0781      	lsls	r1, r0, #30
 800983c:	bf58      	it	pl
 800983e:	6963      	ldrpl	r3, [r4, #20]
 8009840:	60a3      	str	r3, [r4, #8]
 8009842:	e7f4      	b.n	800982e <__swsetup_r+0x92>
 8009844:	2000      	movs	r0, #0
 8009846:	e7f7      	b.n	8009838 <__swsetup_r+0x9c>
 8009848:	200000dc 	.word	0x200000dc

0800984c <_fstat_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d07      	ldr	r5, [pc, #28]	; (800986c <_fstat_r+0x20>)
 8009850:	2300      	movs	r3, #0
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	f7f8 f90f 	bl	8001a7c <_fstat>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d102      	bne.n	8009868 <_fstat_r+0x1c>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b103      	cbz	r3, 8009868 <_fstat_r+0x1c>
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	bf00      	nop
 800986c:	2000042c 	.word	0x2000042c

08009870 <_isatty_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d06      	ldr	r5, [pc, #24]	; (800988c <_isatty_r+0x1c>)
 8009874:	2300      	movs	r3, #0
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f8 f86c 	bl	8001958 <_isatty>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_isatty_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_isatty_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	2000042c 	.word	0x2000042c

08009890 <_sbrk_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d06      	ldr	r5, [pc, #24]	; (80098ac <_sbrk_r+0x1c>)
 8009894:	2300      	movs	r3, #0
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7f8 fb00 	bl	8001ea0 <_sbrk>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_sbrk_r+0x1a>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_sbrk_r+0x1a>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	2000042c 	.word	0x2000042c

080098b0 <abort>:
 80098b0:	b508      	push	{r3, lr}
 80098b2:	2006      	movs	r0, #6
 80098b4:	f000 f8b2 	bl	8009a1c <raise>
 80098b8:	2001      	movs	r0, #1
 80098ba:	f7f8 fae7 	bl	8001e8c <_exit>
	...

080098c0 <lflush>:
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	f003 0309 	and.w	r3, r3, #9
 80098c6:	2b09      	cmp	r3, #9
 80098c8:	d103      	bne.n	80098d2 <lflush+0x12>
 80098ca:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <lflush+0x18>)
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f7ff be15 	b.w	80094fc <_fflush_r>
 80098d2:	2000      	movs	r0, #0
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	200000dc 	.word	0x200000dc

080098dc <__srefill_r>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	460c      	mov	r4, r1
 80098e0:	4605      	mov	r5, r0
 80098e2:	b118      	cbz	r0, 80098ec <__srefill_r+0x10>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <__srefill_r+0x10>
 80098e8:	f7fe ff6e 	bl	80087c8 <__sinit>
 80098ec:	2300      	movs	r3, #0
 80098ee:	6063      	str	r3, [r4, #4]
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f6:	069e      	lsls	r6, r3, #26
 80098f8:	d502      	bpl.n	8009900 <__srefill_r+0x24>
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	e05c      	b.n	80099ba <__srefill_r+0xde>
 8009900:	0758      	lsls	r0, r3, #29
 8009902:	d448      	bmi.n	8009996 <__srefill_r+0xba>
 8009904:	06d9      	lsls	r1, r3, #27
 8009906:	d405      	bmi.n	8009914 <__srefill_r+0x38>
 8009908:	2309      	movs	r3, #9
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	e7f2      	b.n	80098fa <__srefill_r+0x1e>
 8009914:	071a      	lsls	r2, r3, #28
 8009916:	d50b      	bpl.n	8009930 <__srefill_r+0x54>
 8009918:	4621      	mov	r1, r4
 800991a:	4628      	mov	r0, r5
 800991c:	f7ff fdee 	bl	80094fc <_fflush_r>
 8009920:	2800      	cmp	r0, #0
 8009922:	d1ea      	bne.n	80098fa <__srefill_r+0x1e>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	60a0      	str	r0, [r4, #8]
 8009928:	f023 0308 	bic.w	r3, r3, #8
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	61a0      	str	r0, [r4, #24]
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f043 0304 	orr.w	r3, r3, #4
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	6923      	ldr	r3, [r4, #16]
 800993a:	b91b      	cbnz	r3, 8009944 <__srefill_r+0x68>
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f7ff fe67 	bl	8009612 <__smakebuf_r>
 8009944:	89a6      	ldrh	r6, [r4, #12]
 8009946:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800994a:	07b3      	lsls	r3, r6, #30
 800994c:	d00f      	beq.n	800996e <__srefill_r+0x92>
 800994e:	2301      	movs	r3, #1
 8009950:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <__srefill_r+0xe4>)
 8009952:	491c      	ldr	r1, [pc, #112]	; (80099c4 <__srefill_r+0xe8>)
 8009954:	481c      	ldr	r0, [pc, #112]	; (80099c8 <__srefill_r+0xec>)
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	f006 0609 	and.w	r6, r6, #9
 800995c:	f7fe ff4c 	bl	80087f8 <_fwalk_sglue>
 8009960:	2e09      	cmp	r6, #9
 8009962:	81a7      	strh	r7, [r4, #12]
 8009964:	d103      	bne.n	800996e <__srefill_r+0x92>
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff fd41 	bl	80093f0 <__sflush_r>
 800996e:	6922      	ldr	r2, [r4, #16]
 8009970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009972:	6963      	ldr	r3, [r4, #20]
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	2800      	cmp	r0, #0
 800997e:	6060      	str	r0, [r4, #4]
 8009980:	dc1c      	bgt.n	80099bc <__srefill_r+0xe0>
 8009982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009986:	bf17      	itett	ne
 8009988:	2200      	movne	r2, #0
 800998a:	f043 0320 	orreq.w	r3, r3, #32
 800998e:	6062      	strne	r2, [r4, #4]
 8009990:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009994:	e7bc      	b.n	8009910 <__srefill_r+0x34>
 8009996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009998:	2900      	cmp	r1, #0
 800999a:	d0cd      	beq.n	8009938 <__srefill_r+0x5c>
 800999c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a0:	4299      	cmp	r1, r3
 80099a2:	d002      	beq.n	80099aa <__srefill_r+0xce>
 80099a4:	4628      	mov	r0, r5
 80099a6:	f7ff f94f 	bl	8008c48 <_free_r>
 80099aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099ac:	6063      	str	r3, [r4, #4]
 80099ae:	2000      	movs	r0, #0
 80099b0:	6360      	str	r0, [r4, #52]	; 0x34
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0c0      	beq.n	8009938 <__srefill_r+0x5c>
 80099b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099bc:	2000      	movs	r0, #0
 80099be:	e7fc      	b.n	80099ba <__srefill_r+0xde>
 80099c0:	20000084 	.word	0x20000084
 80099c4:	080098c1 	.word	0x080098c1
 80099c8:	20000090 	.word	0x20000090

080099cc <_raise_r>:
 80099cc:	291f      	cmp	r1, #31
 80099ce:	b538      	push	{r3, r4, r5, lr}
 80099d0:	4604      	mov	r4, r0
 80099d2:	460d      	mov	r5, r1
 80099d4:	d904      	bls.n	80099e0 <_raise_r+0x14>
 80099d6:	2316      	movs	r3, #22
 80099d8:	6003      	str	r3, [r0, #0]
 80099da:	f04f 30ff 	mov.w	r0, #4294967295
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80099e2:	b112      	cbz	r2, 80099ea <_raise_r+0x1e>
 80099e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099e8:	b94b      	cbnz	r3, 80099fe <_raise_r+0x32>
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f830 	bl	8009a50 <_getpid_r>
 80099f0:	462a      	mov	r2, r5
 80099f2:	4601      	mov	r1, r0
 80099f4:	4620      	mov	r0, r4
 80099f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099fa:	f000 b817 	b.w	8009a2c <_kill_r>
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d00a      	beq.n	8009a18 <_raise_r+0x4c>
 8009a02:	1c59      	adds	r1, r3, #1
 8009a04:	d103      	bne.n	8009a0e <_raise_r+0x42>
 8009a06:	2316      	movs	r3, #22
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	e7e7      	b.n	80099de <_raise_r+0x12>
 8009a0e:	2400      	movs	r4, #0
 8009a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a14:	4628      	mov	r0, r5
 8009a16:	4798      	blx	r3
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e7e0      	b.n	80099de <_raise_r+0x12>

08009a1c <raise>:
 8009a1c:	4b02      	ldr	r3, [pc, #8]	; (8009a28 <raise+0xc>)
 8009a1e:	4601      	mov	r1, r0
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	f7ff bfd3 	b.w	80099cc <_raise_r>
 8009a26:	bf00      	nop
 8009a28:	200000dc 	.word	0x200000dc

08009a2c <_kill_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4d07      	ldr	r5, [pc, #28]	; (8009a4c <_kill_r+0x20>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	4611      	mov	r1, r2
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	f7f8 fa17 	bl	8001e6c <_kill>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	d102      	bne.n	8009a48 <_kill_r+0x1c>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	b103      	cbz	r3, 8009a48 <_kill_r+0x1c>
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	bd38      	pop	{r3, r4, r5, pc}
 8009a4a:	bf00      	nop
 8009a4c:	2000042c 	.word	0x2000042c

08009a50 <_getpid_r>:
 8009a50:	f7f8 ba04 	b.w	8001e5c <_getpid>

08009a54 <_init>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	bf00      	nop
 8009a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5a:	bc08      	pop	{r3}
 8009a5c:	469e      	mov	lr, r3
 8009a5e:	4770      	bx	lr

08009a60 <_fini>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr
