
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089bc  080089bc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089c4  080089c4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089c4  080089c4  000189c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080089cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200000a8  08008a74  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08008a74  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abc1  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000399d  00000000  00000000  0003acdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001212  00000000  00000000  0003fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ef5  00000000  00000000  00040ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bdd2  00000000  00000000  00066ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4326  00000000  00000000  00082cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006efc  00000000  00000000  00166fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800866c 	.word	0x0800866c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800866c 	.word	0x0800866c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f004 fa0b 	bl	80049b8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f004 f921 	bl	80047f2 <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f006 ff4e 	bl	800745c <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f006 ff46 	bl	800745c <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f006 ff43 	bl	800745c <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	20000134 	.word	0x20000134
 80005e8:	08008684 	.word	0x08008684
 80005ec:	08008694 	.word	0x08008694
 80005f0:	080086a4 	.word	0x080086a4

080005f4 <help_command>:
	{"tsl237",tsl237_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f006 ff2d 	bl	800745c <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f006 ff2a 	bl	800745c <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f006 ff27 	bl	800745c <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f006 ff24 	bl	800745c <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f006 ff21 	bl	800745c <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	080086d4 	.word	0x080086d4
 8000628:	080086ec 	.word	0x080086ec
 800062c:	080086f4 	.word	0x080086f4
 8000630:	080086fc 	.word	0x080086fc
 8000634:	08008704 	.word	0x08008704

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lof_command+0x1c>)
 8000646:	f002 fdf3 	bl	8003230 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lon_command+0x1c>)
 8000666:	f002 fde3 	bl	8003230 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <test_command+0x40>)
 8000682:	f006 feeb 	bl	800745c <iprintf>
	if (arguments) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <test_command+0x44>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f006 fff8 	bl	8007684 <strtok>
 8000694:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000696:	e008      	b.n	80006aa <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <test_command+0x48>)
 800069c:	f006 fede 	bl	800745c <iprintf>
			pt = strtok (NULL, ",");
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <test_command+0x44>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f006 ffee 	bl	8007684 <strtok>
 80006a8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <test_command+0x20>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	0800870c 	.word	0x0800870c
 80006bc:	0800871c 	.word	0x0800871c
 80006c0:	08008720 	.word	0x08008720

080006c4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01f      	beq.n	8000712 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006d2:	492a      	ldr	r1, [pc, #168]	; (800077c <ts_command+0xb8>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f006 ffd5 	bl	8007684 <strtok>
 80006da:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e0:	e014      	b.n	800070c <ts_command+0x48>
			if (pt != NULL) {
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <ts_command+0x42>
				t[i] = atoi(pt);
 80006e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ea:	f006 fd5c 	bl	80071a6 <atoi>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	3330      	adds	r3, #48	; 0x30
 80006f6:	443b      	add	r3, r7
 80006f8:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <ts_command+0xb8>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f006 ffc0 	bl	8007684 <strtok>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	3301      	adds	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	2b02      	cmp	r3, #2
 8000710:	dde7      	ble.n	80006e2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ts_command+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db26      	blt.n	800076c <ts_command+0xa8>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b17      	cmp	r3, #23
 8000722:	dc23      	bgt.n	800076c <ts_command+0xa8>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <ts_command+0xa8>
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db1d      	blt.n	800076c <ts_command+0xa8>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b3b      	cmp	r3, #59	; 0x3b
 8000734:	dc1a      	bgt.n	800076c <ts_command+0xa8>
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d017      	beq.n	800076c <ts_command+0xa8>
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	db14      	blt.n	800076c <ts_command+0xa8>
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	dc11      	bgt.n	800076c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ts_command+0xbc>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <ts_command+0xc0>)
 8000766:	f003 ffa7 	bl	80046b8 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800076a:	e003      	b.n	8000774 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <ts_command+0xc4>)
 800076e:	f006 fe75 	bl	800745c <iprintf>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	0800871c 	.word	0x0800871c
 8000780:	200000c4 	.word	0x200000c4
 8000784:	20000134 	.word	0x20000134
 8000788:	08008728 	.word	0x08008728

0800078c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800079a:	4924      	ldr	r1, [pc, #144]	; (800082c <ds_command+0xa0>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f006 ff71 	bl	8007684 <strtok>
 80007a2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e014      	b.n	80007d4 <ds_command+0x48>
			if (pt != NULL) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <ds_command+0x42>
				d[i] = atoi(pt);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f006 fcf8 	bl	80071a6 <atoi>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007c4:	4919      	ldr	r1, [pc, #100]	; (800082c <ds_command+0xa0>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f006 ff5c 	bl	8007684 <strtok>
 80007cc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dde7      	ble.n	80007aa <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01d      	beq.n	800081c <ds_command+0x90>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd1a      	ble.n	800081c <ds_command+0x90>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	dc17      	bgt.n	800081c <ds_command+0x90>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d014      	beq.n	800081c <ds_command+0x90>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d011      	beq.n	800081c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ds_command+0xa4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <ds_command+0xa8>)
 8000816:	f004 f848 	bl	80048aa <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800081a:	e003      	b.n	8000824 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <ds_command+0xac>)
 800081e:	f006 fe1d 	bl	800745c <iprintf>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800871c 	.word	0x0800871c
 8000830:	200000c4 	.word	0x200000c4
 8000834:	20000134 	.word	0x20000134
 8000838:	08008728 	.word	0x08008728

0800083c <tsl237_command>:

extern float tsl237_clock_frequency;

void __attribute__((weak)) tsl237_command(char *arguments) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  int freqInt = tsl237_clock_frequency * 1000;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <tsl237_command+0x5c>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800089c <tsl237_command+0x60>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000856:	ee17 3a90 	vmov	r3, s15
 800085a:	617b      	str	r3, [r7, #20]
  int freqFirst = freqInt / 1000;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <tsl237_command+0x64>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	1192      	asrs	r2, r2, #6
 8000866:	17db      	asrs	r3, r3, #31
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	613b      	str	r3, [r7, #16]
  int freqSecond = freqInt % 1000;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <tsl237_command+0x64>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1191      	asrs	r1, r2, #6
 8000876:	17da      	asrs	r2, r3, #31
 8000878:	1a8a      	subs	r2, r1, r2
 800087a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087e:	fb01 f202 	mul.w	r2, r1, r2
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  printf("clock_freq: %d.%d\n\r", freqFirst, freqSecond);
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	6939      	ldr	r1, [r7, #16]
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <tsl237_command+0x68>)
 800088c:	f006 fde6 	bl	800745c <iprintf>
}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000274 	.word	0x20000274
 800089c:	447a0000 	.word	0x447a0000
 80008a0:	10624dd3 	.word	0x10624dd3
 80008a4:	08008730 	.word	0x08008730

080008a8 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 80008b4:	482e      	ldr	r0, [pc, #184]	; (8000970 <get_commands+0xc8>)
 80008b6:	f000 fc67 	bl	8001188 <dequeue>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 80008be:	e03a      	b.n	8000936 <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d027      	beq.n	8000916 <get_commands+0x6e>
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b0d      	cmp	r3, #13
 80008ca:	d024      	beq.n	8000916 <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	2b7f      	cmp	r3, #127	; 0x7f
 80008d0:	d10c      	bne.n	80008ec <get_commands+0x44>
        if (counter > 0) {
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <get_commands+0xcc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <get_commands+0x76>
            printf("\b \b");
 80008da:	4827      	ldr	r0, [pc, #156]	; (8000978 <get_commands+0xd0>)
 80008dc:	f006 fdbe 	bl	800745c <iprintf>
            counter--;
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <get_commands+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <get_commands+0xcc>)
 80008e8:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80008ea:	e018      	b.n	800091e <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f006 fdc6 	bl	8007480 <putchar>
        command_buf[counter++]=ch;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <get_commands+0xcc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	491e      	ldr	r1, [pc, #120]	; (8000974 <get_commands+0xcc>)
 80008fc:	600a      	str	r2, [r1, #0]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	7bfa      	ldrb	r2, [r7, #15]
 8000904:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <get_commands+0xcc>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b1d      	cmp	r3, #29
 800090c:	d907      	bls.n	800091e <get_commands+0x76>
          mode=COMPLETE;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <get_commands+0xd4>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
          break;
 8000914:	e012      	b.n	800093c <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <get_commands+0xd4>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
      break;
 800091c:	e00e      	b.n	800093c <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 800091e:	bf00      	nop
    }
    mask = disable();
 8000920:	f000 f8b8 	bl	8000a94 <disable>
 8000924:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <get_commands+0xc8>)
 8000928:	f000 fc2e 	bl	8001188 <dequeue>
 800092c:	4603      	mov	r3, r0
 800092e:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 8000930:	68b8      	ldr	r0, [r7, #8]
 8000932:	f000 f8c2 	bl	8000aba <restore>
  while (ch!=0) {
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1c1      	bne.n	80008c0 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <get_commands+0xd4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d110      	bne.n	8000966 <get_commands+0xbe>
    command_buf[counter] = 0;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <get_commands+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <get_commands+0xd8>)
 8000952:	f006 fd83 	bl	800745c <iprintf>
    counter = 0;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <get_commands+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <get_commands+0xd4>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
    return(1);
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <get_commands+0xc0>
  }
  else {
    return(0);
 8000966:	2300      	movs	r3, #0
  }
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000022c 	.word	0x2000022c
 8000974:	200000c8 	.word	0x200000c8
 8000978:	08008744 	.word	0x08008744
 800097c:	200000cc 	.word	0x200000cc
 8000980:	08008748 	.word	0x08008748

08000984 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <parse_command+0x1e>
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <parse_command+0x1e>
     (!command) ||
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <parse_command+0x24>
     (!args)) {
    return (-1);
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e01e      	b.n	80009e6 <parse_command+0x62>
  }
  *command = line;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	601a      	str	r2, [r3, #0]
  p = line;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 80009b2:	e00b      	b.n	80009cc <parse_command+0x48>
    if (!*p) {
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <parse_command+0x42>
      *args = '\0';
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
      return(0);
 80009c2:	2300      	movs	r3, #0
 80009c4:	e00f      	b.n	80009e6 <parse_command+0x62>
    }
    p++;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b2c      	cmp	r3, #44	; 0x2c
 80009d2:	d1ef      	bne.n	80009b4 <parse_command+0x30>
  }
  *p++ = '\0';
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	617a      	str	r2, [r7, #20]
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  *args = p;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	601a      	str	r2, [r3, #0]
  return (0);
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	371c      	adds	r7, #28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <execute_command+0x98>)
 80009fe:	617b      	str	r3, [r7, #20]
  int success = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <execute_command+0x1c>
    return (-1);
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e038      	b.n	8000a82 <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffb2 	bl	8000984 <parse_command>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a26:	d121      	bne.n	8000a6c <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000a28:	4819      	ldr	r0, [pc, #100]	; (8000a90 <execute_command+0x9c>)
 8000a2a:	f006 fd17 	bl	800745c <iprintf>
    return (-1);
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e026      	b.n	8000a82 <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fbc7 	bl	80001d0 <strcmp>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10e      	bne.n	8000a66 <execute_command+0x72>
      if (!p->cmd_function) {
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <execute_command+0x62>
        return (-1);
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	e015      	b.n	8000a82 <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4798      	blx	r3
      success = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
      break;
 8000a64:	e006      	b.n	8000a74 <execute_command+0x80>
    }
    p++;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3308      	adds	r3, #8
 8000a6a:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1df      	bne.n	8000a34 <execute_command+0x40>
  }
  if (success) {
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <execute_command+0x8a>
    return (0);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e001      	b.n	8000a82 <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	0800874c 	.word	0x0800874c

08000a94 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8000aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8000aa4:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000aa6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <restore>:

void restore(uint32_t priority_mask) {
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f383 8810 	msr	PRIMASK, r3
}
 8000acc:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b089      	sub	sp, #36	; 0x24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	e853 3f00 	ldrex	r3, [r3]
 8000aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	f043 0320 	orr.w	r3, r3, #32
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	61ba      	str	r2, [r7, #24]
 8000afc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000afe:	6979      	ldr	r1, [r7, #20]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	e841 2300 	strex	r3, r2, [r1]
 8000b06:	613b      	str	r3, [r7, #16]
   return(result);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1e9      	bne.n	8000ae2 <LL_USART_EnableIT_RXNE+0x8>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  static uint32_t last = 0;
  uint32_t current;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7f1b      	ldrb	r3, [r3, #28]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d11c      	bne.n	8000b66 <HAL_TIM_IC_CaptureCallback+0x4a>
    current = htim->Instance->CCR1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	60fb      	str	r3, [r7, #12]
    if (last <= current) {
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d306      	bcc.n	8000b4c <HAL_TIM_IC_CaptureCallback+0x30>
      period = current - last;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e009      	b.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x44>
    }
    else {
      period = TIM2->ARR - last + current;
 8000b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b5e:	6013      	str	r3, [r2, #0]
    }
    last = current;
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6013      	str	r3, [r2, #0]
  }
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000278 	.word	0x20000278
 8000b78:	2000026c 	.word	0x2000026c

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000b82:	4835      	ldr	r0, [pc, #212]	; (8000c58 <main+0xdc>)
 8000b84:	f000 fab3 	bl	80010ee <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fe55 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f87e 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f000 fa5e 	bl	8001050 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b94:	f000 fa2c 	bl	8000ff0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000b98:	f000 f940 	bl	8000e1c <MX_RTC_Init>
  MX_TIM2_Init();
 8000b9c:	f000 f9d0 	bl	8000f40 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ba0:	f000 f8d8 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000ba4:	482d      	ldr	r0, [pc, #180]	; (8000c5c <main+0xe0>)
 8000ba6:	f000 fb19 	bl	80011dc <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000baa:	482d      	ldr	r0, [pc, #180]	; (8000c60 <main+0xe4>)
 8000bac:	f7ff ff95 	bl	8000ada <LL_USART_EnableIT_RXNE>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000bb0:	463a      	mov	r2, r7
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	482b      	ldr	r0, [pc, #172]	; (8000c64 <main+0xe8>)
 8000bb8:	f004 fb38 	bl	800522c <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000bbc:	482a      	ldr	r0, [pc, #168]	; (8000c68 <main+0xec>)
 8000bbe:	f006 fc4d 	bl	800745c <iprintf>

  prompt();
 8000bc2:	f7ff fce3 	bl	800058c <prompt>
  while (1)
  {
	  HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f000 feaa 	bl	8001920 <HAL_Delay>
	  tsl237_clock_period = (1/(float)SystemCoreClock) * (float) period;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <main+0xf0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	ee07 3a90 	vmov	s15, r3
 8000bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <main+0xf4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <main+0xf8>)
 8000bf2:	edc3 7a00 	vstr	s15, [r3]
	  tsl237_clock_frequency = 1/tsl237_clock_period;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <main+0xf8>)
 8000bf8:	ed93 7a00 	vldr	s14, [r3]
 8000bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <main+0xfc>)
 8000c06:	edc3 7a00 	vstr	s15, [r3]

	  if (get_commands(command)) {
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0x100>)
 8000c0c:	f7ff fe4c 	bl	80008a8 <get_commands>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0d7      	beq.n	8000bc6 <main+0x4a>
		  command_length = 16;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <main+0x104>)
 8000c18:	2210      	movs	r2, #16
 8000c1a:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <main+0x104>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d011      	beq.n	8000c4a <main+0xce>
			  if(execute_command(command)) {
 8000c26:	4815      	ldr	r0, [pc, #84]	; (8000c7c <main+0x100>)
 8000c28:	f7ff fee4 	bl	80009f4 <execute_command>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <main+0xc2>
				  printf("NOK\n\r");
 8000c32:	4814      	ldr	r0, [pc, #80]	; (8000c84 <main+0x108>)
 8000c34:	f006 fc12 	bl	800745c <iprintf>
				  prompt();
 8000c38:	f7ff fca8 	bl	800058c <prompt>
 8000c3c:	e7c3      	b.n	8000bc6 <main+0x4a>
			  }
			  else {
				  printf("OK\n\r");
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <main+0x10c>)
 8000c40:	f006 fc0c 	bl	800745c <iprintf>
				  prompt();
 8000c44:	f7ff fca2 	bl	800058c <prompt>
 8000c48:	e7bd      	b.n	8000bc6 <main+0x4a>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <main+0x108>)
 8000c4c:	f006 fc06 	bl	800745c <iprintf>
			  prompt();
 8000c50:	f7ff fc9c 	bl	800058c <prompt>
	  HAL_Delay(100);
 8000c54:	e7b7      	b.n	8000bc6 <main+0x4a>
 8000c56:	bf00      	nop
 8000c58:	2000022c 	.word	0x2000022c
 8000c5c:	200001a4 	.word	0x200001a4
 8000c60:	40004400 	.word	0x40004400
 8000c64:	20000158 	.word	0x20000158
 8000c68:	08008768 	.word	0x08008768
 8000c6c:	20000040 	.word	0x20000040
 8000c70:	2000026c 	.word	0x2000026c
 8000c74:	20000270 	.word	0x20000270
 8000c78:	20000274 	.word	0x20000274
 8000c7c:	20000254 	.word	0x20000254
 8000c80:	20000264 	.word	0x20000264
 8000c84:	08008780 	.word	0x08008780
 8000c88:	08008788 	.word	0x08008788

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	; 0x58
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2244      	movs	r2, #68	; 0x44
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 fce9 	bl	8007672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb2:	f002 faf3 	bl	800329c <HAL_PWREx_ControlVoltageScaling>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cbc:	f000 fa12 	bl	80010e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cc0:	f002 face 	bl	8003260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SystemClock_Config+0xc4>)
 8000cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cca:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <SystemClock_Config+0xc4>)
 8000ccc:	f023 0318 	bic.w	r3, r3, #24
 8000cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000cd4:	231c      	movs	r3, #28
 8000cd6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ce8:	2360      	movs	r3, #96	; 0x60
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fb1b 	bl	8003348 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d18:	f000 f9e4 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2303      	movs	r3, #3
 8000d22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2101      	movs	r1, #1
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 ff1b 	bl	8003b70 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d40:	f000 f9d0 	bl	80010e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d44:	f003 fb2e 	bl	80043a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d48:	bf00      	nop
 8000d4a:	3758      	adds	r7, #88	; 0x58
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000

08000d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d6c:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <MX_ADC1_Init+0xc0>)
 8000d6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000dcc:	f000 ff7e 	bl	8001ccc <HAL_ADC_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000dd6:	f000 f985 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_ADC1_Init+0xc4>)
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dde:	2306      	movs	r3, #6
 8000de0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de6:	237f      	movs	r3, #127	; 0x7f
 8000de8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dea:	2304      	movs	r3, #4
 8000dec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0xbc>)
 8000df8:	f001 fa7c 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e02:	f000 f96f 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000d0 	.word	0x200000d0
 8000e14:	50040000 	.word	0x50040000
 8000e18:	c7520000 	.word	0xc7520000

08000e1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b092      	sub	sp, #72	; 0x48
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	222c      	movs	r2, #44	; 0x2c
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fc18 	bl	8007672 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e42:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e44:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <MX_RTC_Init+0x11c>)
 8000e46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e50:	227f      	movs	r2, #127	; 0x7f
 8000e52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e72:	4830      	ldr	r0, [pc, #192]	; (8000f34 <MX_RTC_Init+0x118>)
 8000e74:	f003 fb98 	bl	80045a8 <HAL_RTC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e7e:	f000 f931 	bl	80010e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <MX_RTC_Init+0x118>)
 8000ea6:	f003 fc07 	bl	80046b8 <HAL_RTC_SetTime>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000eb0:	f000 f918 	bl	80010e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_RTC_Init+0x118>)
 8000ed6:	f003 fce8 	bl	80048aa <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000ee0:	f000 f900 	bl	80010e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000eec:	2330      	movs	r3, #48	; 0x30
 8000eee:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_RTC_Init+0x120>)
 8000efe:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_RTC_Init+0x118>)
 8000f1c:	f003 fd9a 	bl	8004a54 <HAL_RTC_SetAlarm_IT>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000f26:	f000 f8dd 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3748      	adds	r7, #72	; 0x48
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000134 	.word	0x20000134
 8000f38:	40002800 	.word	0x40002800
 8000f3c:	80808000 	.word	0x80808000

08000f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <MX_TIM2_Init+0xac>)
 8000f88:	f003 ffca 	bl	8004f20 <HAL_TIM_IC_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f92:	f000 f8a7 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_TIM2_Init+0xac>)
 8000fa6:	f004 ff43 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000fb0:	f000 f898 	bl	80010e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <MX_TIM2_Init+0xac>)
 8000fcc:	f004 fbe0 	bl	8005790 <HAL_TIM_IC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fd6:	f000 f885 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM2_Init+0xac>)
 8000fde:	f003 fff7 	bl	8004fd0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000158 	.word	0x20000158

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <MX_USART2_UART_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001034:	f004 ff80 	bl	8005f38 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800103e:	f000 f851 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001a4 	.word	0x200001a4
 800104c:	40004400 	.word	0x40004400

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_GPIO_Init+0x8c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_GPIO_Init+0x8c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_GPIO_Init+0x8c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_GPIO_Init+0x8c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_GPIO_Init+0x8c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_GPIO_Init+0x8c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_GPIO_Init+0x8c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <MX_GPIO_Init+0x8c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_GPIO_Init+0x8c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x90>)
 80010b4:	f002 f8bc 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010b8:	2308      	movs	r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_GPIO_Init+0x90>)
 80010d0:	f001 ff44 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>

080010ee <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 80010f6:	f7ff fccd 	bl	8000a94 <disable>
 80010fa:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  restore(mask);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fcd6 	bl	8000aba <restore>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001126:	f7ff fcb5 	bl	8000a94 <disable>
 800112a:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	425a      	negs	r2, r3
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	bf58      	it	pl
 800113e:	4253      	negpl	r3, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6852      	ldr	r2, [r2, #4]
 8001144:	4293      	cmp	r3, r2
 8001146:	d014      	beq.n	8001172 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	425a      	negs	r2, r3
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	f002 021f 	and.w	r2, r2, #31
 8001164:	bf58      	it	pl
 8001166:	4253      	negpl	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
    return_val=0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e002      	b.n	8001178 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f7ff fc9e 	bl	8000aba <restore>
  return (return_val);
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001194:	f7ff fc7e 	bl	8000a94 <disable>
 8001198:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d011      	beq.n	80011ca <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7a1b      	ldrb	r3, [r3, #8]
 80011b0:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	425a      	negs	r2, r3
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	f002 021f 	and.w	r2, r2, #31
 80011c2:	bf58      	it	pl
 80011c4:	4253      	negpl	r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 80011ca:	68b8      	ldr	r0, [r7, #8]
 80011cc:	f7ff fc75 	bl	8000aba <restore>
  return(return_val);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <RetargetInit+0x28>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <RetargetInit+0x2c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6898      	ldr	r0, [r3, #8]
 80011f0:	2300      	movs	r3, #0
 80011f2:	2202      	movs	r2, #2
 80011f4:	2100      	movs	r1, #0
 80011f6:	f006 f94b 	bl	8007490 <setvbuf>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000027c 	.word	0x2000027c
 8001208:	200000a4 	.word	0x200000a4

0800120c <_isatty>:

int _isatty(int fd) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db04      	blt.n	8001224 <_isatty+0x18>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b02      	cmp	r3, #2
 800121e:	dc01      	bgt.n	8001224 <_isatty+0x18>
    return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e005      	b.n	8001230 <_isatty+0x24>

  errno = EBADF;
 8001224:	f006 fad0 	bl	80077c8 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	2209      	movs	r2, #9
 800122c:	601a      	str	r2, [r3, #0]
  return 0;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_write>:

int _write(int fd, char* ptr, int len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <_write+0x18>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d111      	bne.n	8001274 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <_write+0x54>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b29a      	uxth	r2, r3
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	f004 feb9 	bl	8005fd4 <HAL_UART_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <_write+0x38>
      return len;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	e008      	b.n	8001282 <_write+0x4a>
    else
      return EIO;
 8001270:	2305      	movs	r3, #5
 8001272:	e006      	b.n	8001282 <_write+0x4a>
  }
  errno = EBADF;
 8001274:	f006 faa8 	bl	80077c8 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	2209      	movs	r2, #9
 800127c:	601a      	str	r2, [r3, #0]
  return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000027c 	.word	0x2000027c

08001290 <_close>:

int _close(int fd) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db04      	blt.n	80012a8 <_close+0x18>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	dc01      	bgt.n	80012a8 <_close+0x18>
    return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e006      	b.n	80012b6 <_close+0x26>

  errno = EBADF;
 80012a8:	f006 fa8e 	bl	80077c8 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2209      	movs	r2, #9
 80012b0:	601a      	str	r2, [r3, #0]
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80012ca:	f006 fa7d 	bl	80077c8 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2209      	movs	r2, #9
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_read>:

int _read(int fd, char* ptr, int len) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d110      	bne.n	8001314 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <_read+0x4c>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	2201      	movs	r2, #1
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	f004 fef3 	bl	80060e8 <HAL_UART_Receive>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <_read+0x30>
      return 1;
 800130c:	2301      	movs	r3, #1
 800130e:	e008      	b.n	8001322 <_read+0x42>
    else
      return EIO;
 8001310:	2305      	movs	r3, #5
 8001312:	e006      	b.n	8001322 <_read+0x42>
  }
  errno = EBADF;
 8001314:	f006 fa58 	bl	80077c8 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	2209      	movs	r2, #9
 800131c:	601a      	str	r2, [r3, #0]
  return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000027c 	.word	0x2000027c

08001330 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db08      	blt.n	8001352 <_fstat+0x22>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	dc05      	bgt.n	8001352 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134c:	605a      	str	r2, [r3, #4]
    return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e005      	b.n	800135e <_fstat+0x2e>
  }

  errno = EBADF;
 8001352:	f006 fa39 	bl	80077c8 <__errno>
 8001356:	4603      	mov	r3, r0
 8001358:	2209      	movs	r2, #9
 800135a:	601a      	str	r2, [r3, #0]
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x44>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x44>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6593      	str	r3, [r2, #88]	; 0x58
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b098      	sub	sp, #96	; 0x60
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2254      	movs	r2, #84	; 0x54
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 f956 	bl	8007672 <memset>
  if(hadc->Instance==ADC1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_ADC_MspInit+0x90>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d132      	bne.n	8001436 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013da:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013e4:	2310      	movs	r3, #16
 80013e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fdda 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800140a:	f7ff fe6b 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_ADC_MspInit+0x94>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_ADC_MspInit+0x94>)
 8001414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_ADC_MspInit+0x94>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2012      	movs	r0, #18
 800142c:	f001 fc51 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001430:	2012      	movs	r0, #18
 8001432:	f001 fc6a 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3760      	adds	r7, #96	; 0x60
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	50040000 	.word	0x50040000
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b098      	sub	sp, #96	; 0x60
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2254      	movs	r2, #84	; 0x54
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f006 f90a 	bl	8007672 <memset>
  if(hrtc->Instance==RTC)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_RTC_MspInit+0x68>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d11f      	bne.n	80014a8 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fd9d 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001484:	f7ff fe2e 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RTC_MspInit+0x6c>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_RTC_MspInit+0x6c>)
 8001490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2029      	movs	r0, #41	; 0x29
 800149e:	f001 fc18 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014a2:	2029      	movs	r0, #41	; 0x29
 80014a4:	f001 fc31 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3760      	adds	r7, #96	; 0x60
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40002800 	.word	0x40002800
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d130      	bne.n	800153c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_TIM_IC_MspInit+0x8c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800150a:	2320      	movs	r3, #32
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151a:	2301      	movs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f001 fd18 	bl	8002f5c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	201c      	movs	r0, #28
 8001532:	f001 fbce 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001536:	201c      	movs	r0, #28
 8001538:	f001 fbe7 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09e      	sub	sp, #120	; 0x78
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2254      	movs	r2, #84	; 0x54
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f006 f882 	bl	8007672 <memset>
  if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d150      	bne.n	800161a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fd17 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff fda8 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_UART_MspInit+0xe0>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_UART_MspInit+0xe0>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015c4:	2304      	movs	r3, #4
 80015c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d4:	2307      	movs	r3, #7
 80015d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f001 fcbb 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015f8:	2303      	movs	r3, #3
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f001 fca9 	bl	8002f5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	f001 fb5f 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001614:	2026      	movs	r0, #38	; 0x26
 8001616:	f001 fb78 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3778      	adds	r7, #120	; 0x78
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f932 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <ADC1_IRQHandler+0x10>)
 8001686:	f000 fc63 	bl	8001f50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000d0 	.word	0x200000d0

08001694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM2_IRQHandler+0x10>)
 800169a:	f003 ff77 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000158 	.word	0x20000158

080016a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <USART2_IRQHandler+0x40>)
 80016ae:	f004 fde5 	bl	800627c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 80016b2:	f005 fecb 	bl	800744c <getchar>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <USART2_IRQHandler+0x44>)
 80016bc:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <USART2_IRQHandler+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <USART2_IRQHandler+0x48>)
 80016c6:	f7ff fd26 	bl	8001116 <enqueue>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <USART2_IRQHandler+0x48>)
 80016d2:	f7ff fd59 	bl	8001188 <dequeue>
      enqueue(&buf,ch);
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <USART2_IRQHandler+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <USART2_IRQHandler+0x48>)
 80016de:	f7ff fd1a 	bl	8001116 <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001a4 	.word	0x200001a4
 80016ec:	20000280 	.word	0x20000280
 80016f0:	2000022c 	.word	0x2000022c

080016f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <RTC_Alarm_IRQHandler+0x14>)
 80016fa:	f003 fae7 	bl	8004ccc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <RTC_Alarm_IRQHandler+0x18>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000134 	.word	0x20000134
 800170c:	20000268 	.word	0x20000268

08001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_kill>:

int _kill(int pid, int sig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800172a:	f006 f84d 	bl	80077c8 <__errno>
 800172e:	4603      	mov	r3, r0
 8001730:	2216      	movs	r2, #22
 8001732:	601a      	str	r2, [r3, #0]
  return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_exit>:

void _exit (int status)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001752:	e7fe      	b.n	8001752 <_exit+0x12>

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f006 f820 	bl	80077c8 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20010000 	.word	0x20010000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000284 	.word	0x20000284
 80017bc:	200003d8 	.word	0x200003d8

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f005 ffdf 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff f9b1 	bl	8000b7c <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001828:	080089cc 	.word	0x080089cc
  ldr r2, =_sbss
 800182c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001830:	200003d8 	.word	0x200003d8

08001834 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <CAN1_RX0_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f001 fa3b 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fd86 	bl	8001368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d023      	beq.n	80018c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_InitTick+0x70>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fa47 	bl	8002d26 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d809      	bhi.n	80018b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f001 fa11 	bl	8002cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x74>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e001      	b.n	80018c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000048 	.word	0x20000048
 80018d8:	20000040 	.word	0x20000040
 80018dc:	20000044 	.word	0x20000044

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000048 	.word	0x20000048
 8001904:	20000288 	.word	0x20000288

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000288 	.word	0x20000288

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000048 	.word	0x20000048

08001968 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3360      	adds	r3, #96	; 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <LL_ADC_SetOffset+0x44>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	03fff000 	.word	0x03fff000

08001a18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3360      	adds	r3, #96	; 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3360      	adds	r3, #96	; 0x60
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3330      	adds	r3, #48	; 0x30
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	211f      	movs	r1, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 011f 	and.w	r1, r3, #31
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0e5b      	lsrs	r3, r3, #25
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0d1b      	lsrs	r3, r3, #20
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0d1b      	lsrs	r3, r3, #20
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0318 	and.w	r3, r3, #24
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b98:	40d9      	lsrs	r1, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	0007ffff 	.word	0x0007ffff

08001bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6093      	str	r3, [r2, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_IsEnabled+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_IsEnabled+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e126      	b.n	8001f34 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fb5b 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff67 	bl	8001be0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff4d 	bl	8001bbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff82 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff66 	bl	8001c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_ADC_Init+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <HAL_ADC_Init+0x274>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff64 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff75 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8001d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80bf 	bne.w	8001f22 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80bb 	bne.w	8001f22 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff49 	bl	8001c58 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dcc:	485d      	ldr	r0, [pc, #372]	; (8001f44 <HAL_ADC_Init+0x278>)
 8001dce:	f7ff ff43 	bl	8001c58 <LL_ADC_IsEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	485a      	ldr	r0, [pc, #360]	; (8001f48 <HAL_ADC_Init+0x27c>)
 8001de0:	f7ff fdc2 	bl	8001968 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e5b      	ldrb	r3, [r3, #25]
 8001de8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001df4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	3b01      	subs	r3, #1
 8001e18:	045b      	lsls	r3, r3, #17
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <HAL_ADC_Init+0x280>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff25 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 8001e5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d13d      	bne.n	8001ede <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d13a      	bne.n	8001ede <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e74:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e84:	f023 0302 	bic.w	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d118      	bne.n	8001ece <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eb8:	4311      	orrs	r1, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	e007      	b.n	8001ede <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10c      	bne.n	8001f00 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f023 010f 	bic.w	r1, r3, #15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
 8001efe:	e007      	b.n	8001f10 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020f 	bic.w	r2, r2, #15
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f023 0303 	bic.w	r3, r3, #3
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f20:	e007      	b.n	8001f32 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000040 	.word	0x20000040
 8001f40:	053e2d63 	.word	0x053e2d63
 8001f44:	50040000 	.word	0x50040000
 8001f48:	50040300 	.word	0x50040300
 8001f4c:	fff0c007 	.word	0xfff0c007

08001f50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d017      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x56>
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fdb5 	bl	8002b08 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_IRQHandler+0x6a>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05e      	beq.n	8002082 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d059      	beq.n	8002082 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd45 	bl	8001a7a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03e      	beq.n	8002074 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d135      	bne.n	8002074 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d12e      	bne.n	8002074 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fe2f 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11a      	bne.n	800205c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020c 	bic.w	r2, r2, #12
 8002034:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
 800205a:	e00b      	b.n	8002074 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f91f 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_ADC_IRQHandler+0x146>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800209c:	2b00      	cmp	r3, #0
 800209e:	d072      	beq.n	8002186 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06d      	beq.n	8002186 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd16 	bl	8001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020cc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fcd1 	bl	8001a7a <LL_ADC_REG_IsTriggerSourceSWStart>
 80020d8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d047      	beq.n	8002178 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_ADC_IRQHandler+0x1b2>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03f      	beq.n	8002178 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d13a      	bne.n	8002178 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d133      	bne.n	8002178 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d12e      	bne.n	8002178 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fdc0 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11a      	bne.n	8002160 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002138:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
 800215e:	e00b      	b.n	8002178 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fc9d 	bl	8002ab8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2260      	movs	r2, #96	; 0x60
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d011      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x264>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f890 	bl	80022cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_ADC_IRQHandler+0x294>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fc83 	bl	8002ae0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d012      	beq.n	8002214 <HAL_ADC_IRQHandler+0x2c4>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fc75 	bl	8002af4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d02a      	beq.n	8002274 <HAL_ADC_IRQHandler+0x324>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d025      	beq.n	8002274 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002230:	2301      	movs	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	e008      	b.n	8002248 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10e      	bne.n	800226c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f83a 	bl	80022e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2210      	movs	r2, #16
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x360>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	f043 0208 	orr.w	r2, r3, #8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fc0e 	bl	8002acc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0b6      	sub	sp, #216	; 0xd8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x22>
 8002312:	2302      	movs	r3, #2
 8002314:	e3bb      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x79a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fcab 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 83a0 	bne.w	8002a70 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	3b02      	subs	r3, #2
 8002346:	2b03      	cmp	r3, #3
 8002348:	d81b      	bhi.n	8002382 <HAL_ADC_ConfigChannel+0x8e>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_ADC_ConfigChannel+0x5c>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002361 	.word	0x08002361
 8002354:	08002369 	.word	0x08002369
 8002358:	08002371 	.word	0x08002371
 800235c:	08002379 	.word	0x08002379
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002360:	230c      	movs	r3, #12
 8002362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002366:	e010      	b.n	800238a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002368:	2312      	movs	r3, #18
 800236a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800236e:	e00c      	b.n	800238a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002370:	2318      	movs	r3, #24
 8002372:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002376:	e008      	b.n	800238a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002382:	2306      	movs	r3, #6
 8002384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002388:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002398:	f7ff fb82 	bl	8001aa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fc6c 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 80023a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fc78 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 80023b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 81a4 	bne.w	800270a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 819f 	bne.w	800270a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	461a      	mov	r2, r3
 80023da:	f7ff fba0 	bl	8001b1e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d00a      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002410:	f7ff fade 	bl	80019d0 <LL_ADC_SetOffset>
 8002414:	e179      	b.n	800270a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fafb 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x14e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff faf0 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	e01e      	b.n	8002480 <HAL_ADC_ConfigChannel+0x18c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fae5 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e004      	b.n	800247e <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x1a4>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	e018      	b.n	80024ca <HAL_ADC_ConfigChannel+0x1d6>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80024ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80024b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e004      	b.n	80024ca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80024c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fab4 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fa98 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x214>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fa8d 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	e01e      	b.n	8002546 <HAL_ADC_ConfigChannel+0x252>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa82 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800252a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800252e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e004      	b.n	8002544 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800253a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_ADC_ConfigChannel+0x26a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	e018      	b.n	8002590 <HAL_ADC_ConfigChannel+0x29c>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800257a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e004      	b.n	8002590 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fa51 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fa35 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x2da>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fa2a 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	e01e      	b.n	800260c <HAL_ADC_ConfigChannel+0x318>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fa1f 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80025ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80025f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x330>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	e014      	b.n	800264e <HAL_ADC_ConfigChannel+0x35a>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e004      	b.n	800264e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800264e:	429a      	cmp	r2, r3
 8002650:	d106      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f9f2 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2103      	movs	r1, #3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f9d6 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800266c:	4603      	mov	r3, r0
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <HAL_ADC_ConfigChannel+0x398>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2103      	movs	r1, #3
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f9cb 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	f003 021f 	and.w	r2, r3, #31
 800268a:	e017      	b.n	80026bc <HAL_ADC_ConfigChannel+0x3c8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2103      	movs	r1, #3
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f9c0 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80026a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80026b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x3e0>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	e011      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x404>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80026e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2103      	movs	r1, #3
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f99d 	bl	8001a44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff faa2 	bl	8001c58 <LL_ADC_IsEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 8140 	bne.w	800299c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	461a      	mov	r2, r3
 800272a:	f7ff fa23 	bl	8001b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a8f      	ldr	r2, [pc, #572]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	f040 8131 	bne.w	800299c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x46e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2b09      	cmp	r3, #9
 8002758:	bf94      	ite	ls
 800275a:	2301      	movls	r3, #1
 800275c:	2300      	movhi	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	e019      	b.n	8002796 <HAL_ADC_ConfigChannel+0x4a2>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800277a:	2320      	movs	r3, #32
 800277c:	e003      	b.n	8002786 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800277e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b09      	cmp	r3, #9
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002796:	2b00      	cmp	r3, #0
 8002798:	d079      	beq.n	800288e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x4c2>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	3301      	adds	r3, #1
 80027ae:	069b      	lsls	r3, r3, #26
 80027b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b4:	e015      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4ee>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80027c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80027c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80027d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	069b      	lsls	r3, r3, #26
 80027de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x50e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0e9b      	lsrs	r3, r3, #26
 80027f4:	3301      	adds	r3, #1
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	e017      	b.n	8002832 <HAL_ADC_ConfigChannel+0x53e>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800281e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	ea42 0103 	orr.w	r1, r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x564>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	3301      	adds	r3, #1
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	051b      	lsls	r3, r3, #20
 8002856:	e018      	b.n	800288a <HAL_ADC_ConfigChannel+0x596>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288a:	430b      	orrs	r3, r1
 800288c:	e081      	b.n	8002992 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x5b6>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	3301      	adds	r3, #1
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a8:	e015      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x5e2>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	069b      	lsls	r3, r3, #26
 80028d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x602>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	3301      	adds	r3, #1
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	e017      	b.n	8002926 <HAL_ADC_ConfigChannel+0x632>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	61bb      	str	r3, [r7, #24]
  return result;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	ea42 0103 	orr.w	r1, r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x65e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	051b      	lsls	r3, r3, #20
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002950:	e01e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x69c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	60fb      	str	r3, [r7, #12]
  return result;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e006      	b.n	800297c <HAL_ADC_ConfigChannel+0x688>
 800296e:	bf00      	nop
 8002970:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	3b1e      	subs	r3, #30
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002990:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002996:	4619      	mov	r1, r3
 8002998:	f7ff f8c1 	bl	8001b1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_ADC_ConfigChannel+0x7a4>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d06c      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a8:	483c      	ldr	r0, [pc, #240]	; (8002a9c <HAL_ADC_ConfigChannel+0x7a8>)
 80029aa:	f7ff f803 	bl	80019b4 <LL_ADC_GetCommonPathInternalCh>
 80029ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7ac>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d127      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d121      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a35      	ldr	r2, [pc, #212]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7b0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d157      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029da:	4619      	mov	r1, r3
 80029dc:	482f      	ldr	r0, [pc, #188]	; (8002a9c <HAL_ADC_ConfigChannel+0x7a8>)
 80029de:	f7fe ffd6 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7b4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_ADC_ConfigChannel+0x7b8>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a0a:	e03a      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d12a      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a34:	4619      	mov	r1, r3
 8002a36:	4819      	ldr	r0, [pc, #100]	; (8002a9c <HAL_ADC_ConfigChannel+0x7a8>)
 8002a38:	f7fe ffa9 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3c:	e021      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d11c      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d116      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a66:	4619      	mov	r1, r3
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <HAL_ADC_ConfigChannel+0x7a8>)
 8002a6a:	f7fe ff90 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
 8002a6e:	e008      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	37d8      	adds	r7, #216	; 0xd8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	80080000 	.word	0x80080000
 8002a9c:	50040300 	.word	0x50040300
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	50040000 	.word	0x50040000
 8002aa8:	20000040 	.word	0x20000040
 8002aac:	053e2d63 	.word	0x053e2d63
 8002ab0:	cb840000 	.word	0xcb840000
 8002ab4:	80000001 	.word	0x80000001

08002ab8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	; 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f7ff ff8e 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff29 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff3e 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff8e 	bl	8002c10 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff31 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Start_IT+0x20>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e04b      	b.n	8002df6 <HAL_DMA_Start_IT+0xb8>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d13a      	bne.n	8002de8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8b0 	bl	8002efc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 020e 	orr.w	r2, r2, #14
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e00f      	b.n	8002dd6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0204 	bic.w	r2, r2, #4
 8002dc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 020a 	orr.w	r2, r2, #10
 8002dd4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e005      	b.n	8002df4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d008      	beq.n	8002e28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e022      	b.n	8002e6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 020e 	bic.w	r2, r2, #14
 8002e36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f003 021c 	and.w	r2, r3, #28
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d005      	beq.n	8002e9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2204      	movs	r2, #4
 8002e96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e029      	b.n	8002ef2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 020e 	bic.w	r2, r2, #14
 8002eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f003 021c 	and.w	r2, r3, #28
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
    }
  }
  return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f003 021c 	and.w	r2, r3, #28
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f3e:	e007      	b.n	8002f50 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6a:	e148      	b.n	80031fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 813a 	beq.w	80031f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d005      	beq.n	8002f9c <HAL_GPIO_Init+0x40>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d130      	bne.n	8002ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 0201 	and.w	r2, r3, #1
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b03      	cmp	r3, #3
 8003008:	d017      	beq.n	800303a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d123      	bne.n	800308e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	6939      	ldr	r1, [r7, #16]
 800308a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8094 	beq.w	80031f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d0:	4b52      	ldr	r3, [pc, #328]	; (800321c <HAL_GPIO_Init+0x2c0>)
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	4a51      	ldr	r2, [pc, #324]	; (800321c <HAL_GPIO_Init+0x2c0>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6613      	str	r3, [r2, #96]	; 0x60
 80030dc:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_GPIO_Init+0x2c0>)
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030e8:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <HAL_GPIO_Init+0x2c4>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003112:	d00d      	beq.n	8003130 <HAL_GPIO_Init+0x1d4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a43      	ldr	r2, [pc, #268]	; (8003224 <HAL_GPIO_Init+0x2c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <HAL_GPIO_Init+0x1d0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a42      	ldr	r2, [pc, #264]	; (8003228 <HAL_GPIO_Init+0x2cc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_GPIO_Init+0x1cc>
 8003124:	2302      	movs	r3, #2
 8003126:	e004      	b.n	8003132 <HAL_GPIO_Init+0x1d6>
 8003128:	2307      	movs	r3, #7
 800312a:	e002      	b.n	8003132 <HAL_GPIO_Init+0x1d6>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_GPIO_Init+0x1d6>
 8003130:	2300      	movs	r3, #0
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	f002 0203 	and.w	r2, r2, #3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4093      	lsls	r3, r2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003142:	4937      	ldr	r1, [pc, #220]	; (8003220 <HAL_GPIO_Init+0x2c4>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_GPIO_Init+0x2d0>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003174:	4a2d      	ldr	r2, [pc, #180]	; (800322c <HAL_GPIO_Init+0x2d0>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_GPIO_Init+0x2d0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	3301      	adds	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f aeaf 	bne.w	8002f6c <HAL_GPIO_Init+0x10>
  }
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40021000 	.word	0x40021000
 8003220:	40010000 	.word	0x40010000
 8003224:	48000400 	.word	0x48000400
 8003228:	48000800 	.word	0x48000800
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800324c:	e002      	b.n	8003254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000

08003280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_PWREx_GetVoltageRange+0x18>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032aa:	d130      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d038      	beq.n	800332c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2232      	movs	r2, #50	; 0x32
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0c9b      	lsrs	r3, r3, #18
 80032dc:	3301      	adds	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e0:	e002      	b.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d102      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f2      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d110      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e00f      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	d007      	beq.n	800332c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800332a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40007000 	.word	0x40007000
 8003340:	20000040 	.word	0x20000040
 8003344:	431bde83 	.word	0x431bde83

08003348 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 bc02 	b.w	8003b60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335c:	4b96      	ldr	r3, [pc, #600]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003366:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80e4 	beq.w	8003546 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_RCC_OscConfig+0x4c>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	f040 808b 	bne.w	80034a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 8087 	bne.w	80034a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003394:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x64>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e3d9      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_RCC_OscConfig+0x7e>
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c4:	e005      	b.n	80033d2 <HAL_RCC_OscConfig+0x8a>
 80033c6:	4b7c      	ldr	r3, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d223      	bcs.n	800341e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fd8c 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e3ba      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ea:	4b73      	ldr	r3, [pc, #460]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a72      	ldr	r2, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	496d      	ldr	r1, [pc, #436]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003408:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	4968      	ldr	r1, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e025      	b.n	800346a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341e:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4960      	ldr	r1, [pc, #384]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800343c:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	495b      	ldr	r1, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fd4c 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e37a      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800346a:	f000 fc81 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	4950      	ldr	r1, [pc, #320]	; (80035bc <HAL_RCC_OscConfig+0x274>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a4e      	ldr	r2, [pc, #312]	; (80035c0 <HAL_RCC_OscConfig+0x278>)
 8003488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f9ea 	bl	8001868 <HAL_InitTick>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d052      	beq.n	8003544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	e35e      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d032      	beq.n	8003510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a42      	ldr	r2, [pc, #264]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fa27 	bl	8001908 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034be:	f7fe fa23 	bl	8001908 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e347      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a35      	ldr	r2, [pc, #212]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4930      	ldr	r1, [pc, #192]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	492b      	ldr	r1, [pc, #172]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
 800350e:	e01a      	b.n	8003546 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800351c:	f7fe f9f4 	bl	8001908 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003524:	f7fe f9f0 	bl	8001908 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e314      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1dc>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d073      	beq.n	800363a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d005      	beq.n	8003564 <HAL_RCC_OscConfig+0x21c>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d10e      	bne.n	800357c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d10b      	bne.n	800357c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d063      	beq.n	8003638 <HAL_RCC_OscConfig+0x2f0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d15f      	bne.n	8003638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e2f1      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d106      	bne.n	8003594 <HAL_RCC_OscConfig+0x24c>
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e025      	b.n	80035e0 <HAL_RCC_OscConfig+0x298>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359c:	d114      	bne.n	80035c8 <HAL_RCC_OscConfig+0x280>
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e013      	b.n	80035e0 <HAL_RCC_OscConfig+0x298>
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08008790 	.word	0x08008790
 80035c0:	20000040 	.word	0x20000040
 80035c4:	20000044 	.word	0x20000044
 80035c8:	4ba0      	ldr	r3, [pc, #640]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a9f      	ldr	r2, [pc, #636]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b9d      	ldr	r3, [pc, #628]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a9c      	ldr	r2, [pc, #624]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f98e 	bl	8001908 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe f98a 	bl	8001908 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e2ae      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	4b92      	ldr	r3, [pc, #584]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2a8>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe f97a 	bl	8001908 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe f976 	bl	8001908 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e29a      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x2d0>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d060      	beq.n	8003708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x310>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d119      	bne.n	8003686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d116      	bne.n	8003686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003658:	4b7c      	ldr	r3, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x328>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e277      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	061b      	lsls	r3, r3, #24
 800367e:	4973      	ldr	r1, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003684:	e040      	b.n	8003708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d023      	beq.n	80036d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368e:	4b6f      	ldr	r3, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6e      	ldr	r2, [pc, #440]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe f935 	bl	8001908 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fe f931 	bl	8001908 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e255      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b62      	ldr	r3, [pc, #392]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	061b      	lsls	r3, r3, #24
 80036ce:	495f      	ldr	r1, [pc, #380]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	e018      	b.n	8003708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5c      	ldr	r2, [pc, #368]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe f911 	bl	8001908 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fe f90d 	bl	8001908 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e231      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03c      	beq.n	800378e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003722:	4a4a      	ldr	r2, [pc, #296]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe f8ec 	bl	8001908 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe f8e8 	bl	8001908 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e20c      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ef      	beq.n	8003734 <HAL_RCC_OscConfig+0x3ec>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	4a3b      	ldr	r2, [pc, #236]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe f8cf 	bl	8001908 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe f8cb 	bl	8001908 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1ef      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80a6 	beq.w	80038e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379c:	2300      	movs	r3, #0
 800379e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10d      	bne.n	80037c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	4a26      	ldr	r2, [pc, #152]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCC_OscConfig+0x504>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_RCC_OscConfig+0x508>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d118      	bne.n	8003806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d4:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_RCC_OscConfig+0x508>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_RCC_OscConfig+0x508>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e0:	f7fe f892 	bl	8001908 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fe f88e 	bl	8001908 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1b2      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_RCC_OscConfig+0x508>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0x4d8>
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381e:	e029      	b.n	8003874 <HAL_RCC_OscConfig+0x52c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d115      	bne.n	8003854 <HAL_RCC_OscConfig+0x50c>
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_OscConfig+0x504>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003848:	e014      	b.n	8003874 <HAL_RCC_OscConfig+0x52c>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	4b9a      	ldr	r3, [pc, #616]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a99      	ldr	r2, [pc, #612]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003864:	4b96      	ldr	r3, [pc, #600]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4a95      	ldr	r2, [pc, #596]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d016      	beq.n	80038aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe f844 	bl	8001908 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003882:	e00a      	b.n	800389a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fe f840 	bl	8001908 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e162      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ed      	beq.n	8003884 <HAL_RCC_OscConfig+0x53c>
 80038a8:	e015      	b.n	80038d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe f82d 	bl	8001908 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe f829 	bl	8001908 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e14b      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c8:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ed      	bne.n	80038b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d6:	7ffb      	ldrb	r3, [r7, #31]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d03c      	beq.n	800396e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01c      	beq.n	8003936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038fc:	4b70      	ldr	r3, [pc, #448]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 80038fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003902:	4a6f      	ldr	r2, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fffc 	bl	8001908 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003914:	f7fd fff8 	bl	8001908 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e11c      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003926:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <HAL_RCC_OscConfig+0x5cc>
 8003934:	e01b      	b.n	800396e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393c:	4a60      	ldr	r2, [pc, #384]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fd ffdf 	bl	8001908 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800394e:	f7fd ffdb 	bl	8001908 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0ff      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003960:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ef      	bne.n	800394e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80f3 	beq.w	8003b5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	2b02      	cmp	r3, #2
 800397e:	f040 80c9 	bne.w	8003b14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003982:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0203 	and.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	429a      	cmp	r2, r3
 8003994:	d12c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	3b01      	subs	r3, #1
 80039a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d123      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d11b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d113      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d109      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d06b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d062      	beq.n	8003abc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039f6:	4b32      	ldr	r3, [pc, #200]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0ac      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a12:	f7fd ff79 	bl	8001908 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd ff75 	bl	8001908 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e099      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x77c>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a52:	0212      	lsls	r2, r2, #8
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a5a:	0852      	lsrs	r2, r2, #1
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0552      	lsls	r2, r2, #21
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0652      	lsls	r2, r2, #25
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a72:	06d2      	lsls	r2, r2, #27
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4912      	ldr	r1, [pc, #72]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a94:	f7fd ff38 	bl	8001908 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd ff34 	bl	8001908 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e058      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aba:	e050      	b.n	8003b5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04f      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d144      	bne.n	8003b5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aec:	f7fd ff0c 	bl	8001908 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd ff08 	bl	8001908 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e02c      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x7ac>
 8003b12:	e024      	b.n	8003b5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d01f      	beq.n	8003b5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fd feef 	bl	8001908 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fd feeb 	bl	8001908 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	4905      	ldr	r1, [pc, #20]	; (8003b68 <HAL_RCC_OscConfig+0x820>)
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x824>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60cb      	str	r3, [r1, #12]
 8003b58:	e001      	b.n	8003b5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	feeefffc 	.word	0xfeeefffc

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0e7      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b72      	ldr	r3, [pc, #456]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	4970      	ldr	r1, [pc, #448]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b6e      	ldr	r3, [pc, #440]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0cf      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d908      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4960      	ldr	r1, [pc, #384]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d04c      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d121      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0a6      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0e:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d115      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e09a      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e08e      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c36:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e086      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4943      	ldr	r1, [pc, #268]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c58:	f7fd fe56 	bl	8001908 <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fd fe52 	bl	8001908 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e06e      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d208      	bcs.n	8003cb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	492b      	ldr	r1, [pc, #172]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d210      	bcs.n	8003ce6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc4:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 0207 	bic.w	r2, r3, #7
 8003ccc:	4923      	ldr	r1, [pc, #140]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e036      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4918      	ldr	r1, [pc, #96]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4910      	ldr	r1, [pc, #64]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d24:	f000 f824 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	490b      	ldr	r1, [pc, #44]	; (8003d64 <HAL_RCC_ClockConfig+0x1f4>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x1fc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fd8d 	bl	8001868 <HAL_InitTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d52:	7afb      	ldrb	r3, [r7, #11]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08008790 	.word	0x08008790
 8003d68:	20000040 	.word	0x20000040
 8003d6c:	20000044 	.word	0x20000044

08003d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x34>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d121      	bne.n	8003de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d11e      	bne.n	8003de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e005      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dcc:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d102      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df4:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d134      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d003      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0xac>
 8003e14:	e005      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e18:	617b      	str	r3, [r7, #20]
      break;
 8003e1a:	e005      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e1e:	617b      	str	r3, [r7, #20]
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	617b      	str	r3, [r7, #20]
      break;
 8003e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	3301      	adds	r3, #1
 8003e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	fb03 f202 	mul.w	r2, r3, r2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	0e5b      	lsrs	r3, r3, #25
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e68:	69bb      	ldr	r3, [r7, #24]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	080087a8 	.word	0x080087a8
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	007a1200 	.word	0x007a1200

08003e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000040 	.word	0x20000040

08003ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ea4:	f7ff fff0 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	080087a0 	.word	0x080087a0

08003ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ed0:	f7ff ffda 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0adb      	lsrs	r3, r3, #11
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	080087a0 	.word	0x080087a0

08003ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f10:	f7ff f9b6 	bl	8003280 <HAL_PWREx_GetVoltageRange>
 8003f14:	6178      	str	r0, [r7, #20]
 8003f16:	e014      	b.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f30:	f7ff f9a6 	bl	8003280 <HAL_PWREx_GetVoltageRange>
 8003f34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d10b      	bne.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b80      	cmp	r3, #128	; 0x80
 8003f4e:	d919      	bls.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2ba0      	cmp	r3, #160	; 0xa0
 8003f54:	d902      	bls.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f56:	2302      	movs	r3, #2
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e013      	b.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e010      	b.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d902      	bls.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f68:	2303      	movs	r3, #3
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e00a      	b.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d102      	bne.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f74:	2302      	movs	r3, #2
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	e004      	b.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b70      	cmp	r3, #112	; 0x70
 8003f7e:	d101      	bne.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f80:	2301      	movs	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 0207 	bic.w	r2, r3, #7
 8003f8c:	4909      	ldr	r1, [pc, #36]	; (8003fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40022000 	.word	0x40022000

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d031      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fdc:	d01a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe2:	d814      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fec:	d10f      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	4a5c      	ldr	r2, [pc, #368]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffa:	e00c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f9de 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	74fb      	strb	r3, [r7, #19]
      break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401c:	4b51      	ldr	r3, [pc, #324]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	494e      	ldr	r1, [pc, #312]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 809e 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4a3f      	ldr	r2, [pc, #252]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a39      	ldr	r2, [pc, #228]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004088:	f7fd fc3e 	bl	8001908 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fc3a 	bl	8001908 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
        break;
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a4:	4b30      	ldr	r3, [pc, #192]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d15a      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b6:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d019      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d016      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fbfa 	bl	8001908 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	e00b      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd fbf6 	bl	8001908 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d902      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	74fb      	strb	r3, [r7, #19]
            break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ec      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004152:	4904      	ldr	r1, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004170:	7c7b      	ldrb	r3, [r7, #17]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d105      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b8a      	ldr	r3, [pc, #552]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	4a89      	ldr	r2, [pc, #548]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004180:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418e:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f023 0203 	bic.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4980      	ldr	r1, [pc, #512]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b0:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 020c 	bic.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	4978      	ldr	r1, [pc, #480]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	496f      	ldr	r1, [pc, #444]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	4967      	ldr	r1, [pc, #412]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004216:	4b62      	ldr	r3, [pc, #392]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	495e      	ldr	r1, [pc, #376]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4956      	ldr	r1, [pc, #344]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425a:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427c:	4b48      	ldr	r3, [pc, #288]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4945      	ldr	r1, [pc, #276]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429a:	d106      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a6:	60d3      	str	r3, [r2, #12]
 80042a8:	e011      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b2:	d10c      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f882 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d028      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	492d      	ldr	r1, [pc, #180]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f8:	d106      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004304:	60d3      	str	r3, [r2, #12]
 8004306:	e011      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004310:	d10c      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f853 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01c      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004356:	d10c      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f830 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004394:	7cbb      	ldrb	r3, [r7, #18]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043d2:	4b74      	ldr	r3, [pc, #464]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043de:	4b71      	ldr	r3, [pc, #452]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d10d      	bne.n	800440a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
       ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043f6:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
       ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d047      	beq.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e044      	b.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d018      	beq.n	800444a <RCCEx_PLLSAI1_Config+0x86>
 8004418:	2b03      	cmp	r3, #3
 800441a:	d825      	bhi.n	8004468 <RCCEx_PLLSAI1_Config+0xa4>
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0x62>
 8004420:	2b02      	cmp	r3, #2
 8004422:	d009      	beq.n	8004438 <RCCEx_PLLSAI1_Config+0x74>
 8004424:	e020      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11d      	bne.n	800446e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e01a      	b.n	800446e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004438:	4b5a      	ldr	r3, [pc, #360]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004448:	e013      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444a:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004456:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004466:	e006      	b.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e004      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004476:	bf00      	nop
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800447e:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	430b      	orrs	r3, r1
 8004494:	4943      	ldr	r1, [pc, #268]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d17c      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044a0:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fd fa2c 	bl	8001908 <HAL_GetTick>
 80044b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b2:	e009      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b4:	f7fd fa28 	bl	8001908 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	73fb      	strb	r3, [r7, #15]
        break;
 80044c6:	e005      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ef      	bne.n	80044b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15f      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d110      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e0:	4b30      	ldr	r3, [pc, #192]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	0211      	lsls	r1, r2, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	06d2      	lsls	r2, r2, #27
 80044f8:	430a      	orrs	r2, r1
 80044fa:	492a      	ldr	r1, [pc, #168]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	610b      	str	r3, [r1, #16]
 8004500:	e027      	b.n	8004552 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d112      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6892      	ldr	r2, [r2, #8]
 8004518:	0211      	lsls	r1, r2, #8
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6912      	ldr	r2, [r2, #16]
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	3a01      	subs	r2, #1
 8004522:	0552      	lsls	r2, r2, #21
 8004524:	430a      	orrs	r2, r1
 8004526:	491f      	ldr	r1, [pc, #124]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
 800452c:	e011      	b.n	8004552 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004536:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	0211      	lsls	r1, r2, #8
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6952      	ldr	r2, [r2, #20]
 8004544:	0852      	lsrs	r2, r2, #1
 8004546:	3a01      	subs	r2, #1
 8004548:	0652      	lsls	r2, r2, #25
 800454a:	430a      	orrs	r2, r1
 800454c:	4915      	ldr	r1, [pc, #84]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800455c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fd f9d3 	bl	8001908 <HAL_GetTick>
 8004562:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004564:	e009      	b.n	800457a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004566:	f7fd f9cf 	bl	8001908 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d902      	bls.n	800457a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	73fb      	strb	r3, [r7, #15]
          break;
 8004578:	e005      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ef      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	4903      	ldr	r1, [pc, #12]	; (80045a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d079      	beq.n	80046ae <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc ff3a 	bl	8001448 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d058      	beq.n	800469c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	22ca      	movs	r2, #202	; 0xca
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2253      	movs	r2, #83	; 0x53
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fbda 	bl	8004db4 <RTC_EnterInitMode>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d127      	bne.n	800465a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68d2      	ldr	r2, [r2, #12]
 8004644:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6919      	ldr	r1, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fbde 	bl	8004e1c <RTC_ExitInitMode>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d113      	bne.n	8004692 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0203 	bic.w	r2, r2, #3
 8004678:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
 800469a:	e001      	b.n	80046a0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_RTC_SetTime+0x1a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e08b      	b.n	80047ea <HAL_RTC_SetTime+0x132>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ca      	movs	r2, #202	; 0xca
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2253      	movs	r2, #83	; 0x53
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fb5e 	bl	8004db4 <RTC_EnterInitMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d163      	bne.n	80047ca <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d126      	bne.n	8004756 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fbb9 	bl	8004e98 <RTC_ByteToBcd2>
 8004726:	4603      	mov	r3, r0
 8004728:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fbb2 	bl	8004e98 <RTC_ByteToBcd2>
 8004734:	4603      	mov	r3, r0
 8004736:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004738:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	789b      	ldrb	r3, [r3, #2]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fbaa 	bl	8004e98 <RTC_ByteToBcd2>
 8004744:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004746:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e018      	b.n	8004788 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004776:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800477c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	78db      	ldrb	r3, [r3, #3]
 8004782:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004792:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004796:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fb2b 	bl	8004e1c <RTC_ExitInitMode>
 80047c6:	4603      	mov	r3, r0
 80047c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}

080047f2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004820:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004824:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	0d9b      	lsrs	r3, r3, #22
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11a      	bne.n	80048a0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fb32 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb29 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb20 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048aa:	b590      	push	{r4, r7, lr}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_RTC_SetDate+0x1a>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e075      	b.n	80049b0 <HAL_RTC_SetDate+0x106>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_RTC_SetDate+0x4e>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	f023 0310 	bic.w	r3, r3, #16
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	330a      	adds	r3, #10
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11c      	bne.n	8004938 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fac8 	bl	8004e98 <RTC_ByteToBcd2>
 8004908:	4603      	mov	r3, r0
 800490a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fac1 	bl	8004e98 <RTC_ByteToBcd2>
 8004916:	4603      	mov	r3, r0
 8004918:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800491a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	789b      	ldrb	r3, [r3, #2]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fab9 	bl	8004e98 <RTC_ByteToBcd2>
 8004926:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004928:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e00e      	b.n	8004956 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004944:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800494a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	22ca      	movs	r2, #202	; 0xca
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2253      	movs	r2, #83	; 0x53
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fa24 	bl	8004db4 <RTC_EnterInitMode>
 800496c:	4603      	mov	r3, r0
 800496e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004984:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fa48 	bl	8004e1c <RTC_ExitInitMode>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}

080049b8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	0b5b      	lsrs	r3, r3, #13
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11a      	bne.n	8004a48 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fa5e 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fa55 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fa4c 	bl	8004ed8 <RTC_Bcd2ToByte>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_RTC_SetAlarm_IT+0x1a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e127      	b.n	8004cbe <HAL_RTC_SetAlarm_IT+0x26a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d137      	bne.n	8004af4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f9fb 	bl	8004e98 <RTC_ByteToBcd2>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f9f4 	bl	8004e98 <RTC_ByteToBcd2>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ab4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f9ec 	bl	8004e98 <RTC_ByteToBcd2>
 8004ac0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ac2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	78db      	ldrb	r3, [r3, #3]
 8004aca:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004acc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f9de 	bl	8004e98 <RTC_ByteToBcd2>
 8004adc:	4603      	mov	r3, r0
 8004ade:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ae0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ae8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e023      	b.n	8004b3c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b14:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	78db      	ldrb	r3, [r3, #3]
 8004b20:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b2a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	22ca      	movs	r2, #202	; 0xca
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2253      	movs	r2, #83	; 0x53
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b60:	d14a      	bne.n	8004bf8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004b82:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004b84:	f7fc fec0 	bl	8001908 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b8a:	e015      	b.n	8004bb8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b8c:	f7fc febc 	bl	8001908 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9a:	d90d      	bls.n	8004bb8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e082      	b.n	8004cbe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0e2      	beq.n	8004b8c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	e049      	b.n	8004c8c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c06:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004c18:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004c1a:	f7fc fe75 	bl	8001908 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c20:	e015      	b.n	8004c4e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c22:	f7fc fe71 	bl	8001908 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c30:	d90d      	bls.n	8004c4e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	22ff      	movs	r2, #255	; 0xff
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e037      	b.n	8004cbe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0e2      	beq.n	8004c22 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	; 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004cd6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004cda:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d012      	beq.n	8004d10 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004d08:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f824 	bl	8004d58 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004d3c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8e4 	bl	8004f0c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <HAL_RTC_WaitForSynchro+0x44>)
 8004d7a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004d7c:	f7fc fdc4 	bl	8001908 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d82:	e009      	b.n	8004d98 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d84:	f7fc fdc0 	bl	8001908 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d92:	d901      	bls.n	8004d98 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e007      	b.n	8004da8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	0003ff5f 	.word	0x0003ff5f

08004db4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d120      	bne.n	8004e10 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004dd8:	f7fc fd96 	bl	8001908 <HAL_GetTick>
 8004ddc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dde:	e00d      	b.n	8004dfc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004de0:	f7fc fd92 	bl	8001908 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dee:	d905      	bls.n	8004dfc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2203      	movs	r2, #3
 8004df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <RTC_EnterInitMode+0x5c>
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d1e7      	bne.n	8004de0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e32:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10c      	bne.n	8004e5a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff93 	bl	8004d6c <HAL_RTC_WaitForSynchro>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01e      	beq.n	8004e8a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	73fb      	strb	r3, [r7, #15]
 8004e58:	e017      	b.n	8004e8a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4a0d      	ldr	r2, [pc, #52]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e60:	f023 0320 	bic.w	r3, r3, #32
 8004e64:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff80 	bl	8004d6c <HAL_RTC_WaitForSynchro>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2203      	movs	r2, #3
 8004e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <RTC_ExitInitMode+0x78>)
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40002800 	.word	0x40002800

08004e98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004eaa:	e005      	b.n	8004eb8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	3b0a      	subs	r3, #10
 8004eb6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	d8f6      	bhi.n	8004eac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b2db      	uxtb	r3, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	4413      	add	r3, r2
 8004efe:	b2db      	uxtb	r3, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e049      	b.n	8004fc6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fc fab6 	bl	80014b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fdd0 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_IC_Start_IT+0x1e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e023      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x66>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIM_IC_Start_IT+0x2e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e01b      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x66>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d104      	bne.n	800500e <HAL_TIM_IC_Start_IT+0x3e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e013      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x66>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d104      	bne.n	800501e <HAL_TIM_IC_Start_IT+0x4e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e00b      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x66>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b10      	cmp	r3, #16
 8005022:	d104      	bne.n	800502e <HAL_TIM_IC_Start_IT+0x5e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e003      	b.n	8005036 <HAL_TIM_IC_Start_IT+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005034:	b2db      	uxtb	r3, r3
 8005036:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_TIM_IC_Start_IT+0x78>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e013      	b.n	8005070 <HAL_TIM_IC_Start_IT+0xa0>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d104      	bne.n	8005058 <HAL_TIM_IC_Start_IT+0x88>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e00b      	b.n	8005070 <HAL_TIM_IC_Start_IT+0xa0>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b08      	cmp	r3, #8
 800505c:	d104      	bne.n	8005068 <HAL_TIM_IC_Start_IT+0x98>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e003      	b.n	8005070 <HAL_TIM_IC_Start_IT+0xa0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800506e:	b2db      	uxtb	r3, r3
 8005070:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005078:	7b7b      	ldrb	r3, [r7, #13]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0c9      	b.n	8005216 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_IC_Start_IT+0xc2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	e023      	b.n	80050da <HAL_TIM_IC_Start_IT+0x10a>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_IC_Start_IT+0xd2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e01b      	b.n	80050da <HAL_TIM_IC_Start_IT+0x10a>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_IC_Start_IT+0xe2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	e013      	b.n	80050da <HAL_TIM_IC_Start_IT+0x10a>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0xf2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c0:	e00b      	b.n	80050da <HAL_TIM_IC_Start_IT+0x10a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_IT+0x102>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	e003      	b.n	80050da <HAL_TIM_IC_Start_IT+0x10a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0x11a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e8:	e013      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x142>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start_IT+0x12a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x142>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_IC_Start_IT+0x13a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005108:	e003      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x142>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d841      	bhi.n	800519c <HAL_TIM_IC_Start_IT+0x1cc>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <HAL_TIM_IC_Start_IT+0x150>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005155 	.word	0x08005155
 8005124:	0800519d 	.word	0x0800519d
 8005128:	0800519d 	.word	0x0800519d
 800512c:	0800519d 	.word	0x0800519d
 8005130:	08005167 	.word	0x08005167
 8005134:	0800519d 	.word	0x0800519d
 8005138:	0800519d 	.word	0x0800519d
 800513c:	0800519d 	.word	0x0800519d
 8005140:	08005179 	.word	0x08005179
 8005144:	0800519d 	.word	0x0800519d
 8005148:	0800519d 	.word	0x0800519d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800518b 	.word	0x0800518b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0202 	orr.w	r2, r2, #2
 8005162:	60da      	str	r2, [r3, #12]
      break;
 8005164:	e01d      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0204 	orr.w	r2, r2, #4
 8005174:	60da      	str	r2, [r3, #12]
      break;
 8005176:	e014      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0208 	orr.w	r2, r2, #8
 8005186:	60da      	str	r2, [r3, #12]
      break;
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0210 	orr.w	r2, r2, #16
 8005198:	60da      	str	r2, [r3, #12]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d135      	bne.n	8005214 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fe17 	bl	8005de4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_TIM_IC_Start_IT+0x250>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_IC_Start_IT+0x204>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_IC_Start_IT+0x204>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a15      	ldr	r2, [pc, #84]	; (8005224 <HAL_TIM_IC_Start_IT+0x254>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d115      	bne.n	8005200 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_TIM_IC_Start_IT+0x258>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d015      	beq.n	8005212 <HAL_TIM_IC_Start_IT+0x242>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d011      	beq.n	8005212 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	e008      	b.n	8005212 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e000      	b.n	8005214 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40014000 	.word	0x40014000
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_DMA+0x22>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	e023      	b.n	8005296 <HAL_TIM_IC_Start_DMA+0x6a>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_DMA+0x32>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e01b      	b.n	8005296 <HAL_TIM_IC_Start_DMA+0x6a>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d104      	bne.n	800526e <HAL_TIM_IC_Start_DMA+0x42>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e013      	b.n	8005296 <HAL_TIM_IC_Start_DMA+0x6a>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d104      	bne.n	800527e <HAL_TIM_IC_Start_DMA+0x52>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e00b      	b.n	8005296 <HAL_TIM_IC_Start_DMA+0x6a>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b10      	cmp	r3, #16
 8005282:	d104      	bne.n	800528e <HAL_TIM_IC_Start_DMA+0x62>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e003      	b.n	8005296 <HAL_TIM_IC_Start_DMA+0x6a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005294:	b2db      	uxtb	r3, r3
 8005296:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <HAL_TIM_IC_Start_DMA+0x7c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e013      	b.n	80052d0 <HAL_TIM_IC_Start_DMA+0xa4>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d104      	bne.n	80052b8 <HAL_TIM_IC_Start_DMA+0x8c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e00b      	b.n	80052d0 <HAL_TIM_IC_Start_DMA+0xa4>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d104      	bne.n	80052c8 <HAL_TIM_IC_Start_DMA+0x9c>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e003      	b.n	80052d0 <HAL_TIM_IC_Start_DMA+0xa4>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80052d2:	7dbb      	ldrb	r3, [r7, #22]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d002      	beq.n	80052de <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80052d8:	7d7b      	ldrb	r3, [r7, #21]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	e143      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d153      	bne.n	8005390 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80052e8:	7d7b      	ldrb	r3, [r7, #21]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d150      	bne.n	8005390 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_TIM_IC_Start_DMA+0xce>
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e135      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_IC_Start_DMA+0xe2>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530c:	e023      	b.n	8005356 <HAL_TIM_IC_Start_DMA+0x12a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_IC_Start_DMA+0xf2>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	e01b      	b.n	8005356 <HAL_TIM_IC_Start_DMA+0x12a>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start_DMA+0x102>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	e013      	b.n	8005356 <HAL_TIM_IC_Start_DMA+0x12a>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_DMA+0x112>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800533c:	e00b      	b.n	8005356 <HAL_TIM_IC_Start_DMA+0x12a>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_DMA+0x122>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534c:	e003      	b.n	8005356 <HAL_TIM_IC_Start_DMA+0x12a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_TIM_IC_Start_DMA+0x13a>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8005364:	e016      	b.n	8005394 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d104      	bne.n	8005376 <HAL_TIM_IC_Start_DMA+0x14a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8005374:	e00e      	b.n	8005394 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d104      	bne.n	8005386 <HAL_TIM_IC_Start_DMA+0x15a>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8005384:	e006      	b.n	8005394 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 800538e:	e001      	b.n	8005394 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0ea      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fd21 	bl	8005de4 <TIM_CCxChannelCmd>

  switch (Channel)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	f200 80ad 	bhi.w	8005504 <HAL_TIM_IC_Start_DMA+0x2d8>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <HAL_TIM_IC_Start_DMA+0x184>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	08005505 	.word	0x08005505
 80053b8:	08005505 	.word	0x08005505
 80053bc:	08005505 	.word	0x08005505
 80053c0:	0800542d 	.word	0x0800542d
 80053c4:	08005505 	.word	0x08005505
 80053c8:	08005505 	.word	0x08005505
 80053cc:	08005505 	.word	0x08005505
 80053d0:	08005475 	.word	0x08005475
 80053d4:	08005505 	.word	0x08005505
 80053d8:	08005505 	.word	0x08005505
 80053dc:	08005505 	.word	0x08005505
 80053e0:	080054bd 	.word	0x080054bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4a62      	ldr	r2, [pc, #392]	; (8005574 <HAL_TIM_IC_Start_DMA+0x348>)
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	4a61      	ldr	r2, [pc, #388]	; (8005578 <HAL_TIM_IC_Start_DMA+0x34c>)
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	4a60      	ldr	r2, [pc, #384]	; (800557c <HAL_TIM_IC_Start_DMA+0x350>)
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3334      	adds	r3, #52	; 0x34
 8005406:	4619      	mov	r1, r3
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	887b      	ldrh	r3, [r7, #2]
 800540c:	f7fd fc97 	bl	8002d3e <HAL_DMA_Start_IT>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0a7      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	60da      	str	r2, [r3, #12]
      break;
 800542a:	e06e      	b.n	800550a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	4a50      	ldr	r2, [pc, #320]	; (8005574 <HAL_TIM_IC_Start_DMA+0x348>)
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	4a4f      	ldr	r2, [pc, #316]	; (8005578 <HAL_TIM_IC_Start_DMA+0x34c>)
 800543a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	4a4e      	ldr	r2, [pc, #312]	; (800557c <HAL_TIM_IC_Start_DMA+0x350>)
 8005442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3338      	adds	r3, #56	; 0x38
 800544e:	4619      	mov	r1, r3
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	f7fd fc73 	bl	8002d3e <HAL_DMA_Start_IT>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e083      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005470:	60da      	str	r2, [r3, #12]
      break;
 8005472:	e04a      	b.n	800550a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4a3e      	ldr	r2, [pc, #248]	; (8005574 <HAL_TIM_IC_Start_DMA+0x348>)
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a3d      	ldr	r2, [pc, #244]	; (8005578 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005482:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <HAL_TIM_IC_Start_DMA+0x350>)
 800548a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	333c      	adds	r3, #60	; 0x3c
 8005496:	4619      	mov	r1, r3
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	f7fd fc4f 	bl	8002d3e <HAL_DMA_Start_IT>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e05f      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b8:	60da      	str	r2, [r3, #12]
      break;
 80054ba:	e026      	b.n	800550a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <HAL_TIM_IC_Start_DMA+0x348>)
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <HAL_TIM_IC_Start_DMA+0x34c>)
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4a2a      	ldr	r2, [pc, #168]	; (800557c <HAL_TIM_IC_Start_DMA+0x350>)
 80054d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3340      	adds	r3, #64	; 0x40
 80054de:	4619      	mov	r1, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	887b      	ldrh	r3, [r7, #2]
 80054e4:	f7fd fc2b 	bl	8002d3e <HAL_DMA_Start_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03b      	b.n	800556a <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005500:	60da      	str	r2, [r3, #12]
      break;
 8005502:	e002      	b.n	800550a <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	75fb      	strb	r3, [r7, #23]
      break;
 8005508:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <HAL_TIM_IC_Start_DMA+0x354>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_TIM_IC_Start_DMA+0x2fc>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d004      	beq.n	8005528 <HAL_TIM_IC_Start_DMA+0x2fc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_TIM_IC_Start_DMA+0x358>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d115      	bne.n	8005554 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <HAL_TIM_IC_Start_DMA+0x35c>)
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b06      	cmp	r3, #6
 8005538:	d015      	beq.n	8005566 <HAL_TIM_IC_Start_DMA+0x33a>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d011      	beq.n	8005566 <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	e008      	b.n	8005566 <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e000      	b.n	8005568 <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	080059d3 	.word	0x080059d3
 8005578:	08005a9b 	.word	0x08005a9b
 800557c:	08005941 	.word	0x08005941
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40014000 	.word	0x40014000
 8005588:	00010007 	.word	0x00010007

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb faa0 	bl	8000b1c <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f97c 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f98d 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb fa7a 	bl	8000b1c <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f956 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f967 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb fa54 	bl	8000b1c <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f930 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f941 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fb fa2e 	bl	8000b1c <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f90a 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f91b 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8e8 	bl	80058c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbfa 	bl	8005f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fbf2 	bl	8005f24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f8da 	bl	8005918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0220 	mvn.w	r2, #32
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fbba 	bl	8005efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e088      	b.n	80058c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80057cc:	f000 f9fe 	bl	8005bcc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 020c 	bic.w	r2, r2, #12
 80057de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
 80057f2:	e060      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d11c      	bne.n	8005834 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800580a:	f000 fa35 	bl	8005c78 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800581c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6999      	ldr	r1, [r3, #24]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	021a      	lsls	r2, r3, #8
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	619a      	str	r2, [r3, #24]
 8005832:	e040      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11b      	bne.n	8005872 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800584a:	f000 fa52 	bl	8005cf2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 020c 	bic.w	r2, r2, #12
 800585c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69d9      	ldr	r1, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	61da      	str	r2, [r3, #28]
 8005870:	e021      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b0c      	cmp	r3, #12
 8005876:	d11c      	bne.n	80058b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005888:	f000 fa6f 	bl	8005d6a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800589a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69d9      	ldr	r1, [r3, #28]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	021a      	lsls	r2, r3, #8
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	61da      	str	r2, [r3, #28]
 80058b0:	e001      	b.n	80058b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005966:	e02a      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d107      	bne.n	8005982 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005980:	e01d      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2204      	movs	r2, #4
 8005990:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599a:	e010      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d107      	bne.n	80059b6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2208      	movs	r2, #8
 80059aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059b4:	e003      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ffb4 	bl	800592c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10f      	bne.n	8005a0a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d146      	bne.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a08:	e03d      	b.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d10f      	bne.n	8005a34 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2202      	movs	r2, #2
 8005a18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d131      	bne.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a32:	e028      	b.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d10f      	bne.n	8005a5e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2204      	movs	r2, #4
 8005a42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11c      	bne.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a5c:	e013      	b.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d10e      	bne.n	8005a86 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7fb f848 	bl	8000b1c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	771a      	strb	r2, [r3, #28]
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d103      	bne.n	8005aba <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	771a      	strb	r2, [r3, #28]
 8005ab8:	e019      	b.n	8005aee <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d103      	bne.n	8005acc <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	771a      	strb	r2, [r3, #28]
 8005aca:	e010      	b.n	8005aee <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d103      	bne.n	8005ade <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
 8005adc:	e007      	b.n	8005aee <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d102      	bne.n	8005aee <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2208      	movs	r2, #8
 8005aec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fefe 	bl	80058f0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	771a      	strb	r2, [r3, #28]
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2a      	ldr	r2, [pc, #168]	; (8005bc0 <TIM_Base_SetConfig+0xbc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0x20>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b22:	d108      	bne.n	8005b36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <TIM_Base_SetConfig+0xbc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0x52>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0x52>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <TIM_Base_SetConfig+0xc0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0x52>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <TIM_Base_SetConfig+0xc4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <TIM_Base_SetConfig+0xbc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_Base_SetConfig+0xa0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0b      	ldr	r2, [pc, #44]	; (8005bc4 <TIM_Base_SetConfig+0xc0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_Base_SetConfig+0xa0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <TIM_Base_SetConfig+0xc4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d103      	bne.n	8005bac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400

08005bcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <TIM_TI1_SetConfig+0xa4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_TI1_SetConfig+0x3e>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d003      	beq.n	8005c0a <TIM_TI1_SetConfig+0x3e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <TIM_TI1_SetConfig+0xa8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d101      	bne.n	8005c0e <TIM_TI1_SetConfig+0x42>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <TIM_TI1_SetConfig+0x44>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e003      	b.n	8005c2e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f023 030a 	bic.w	r3, r3, #10
 8005c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 030a 	and.w	r3, r3, #10
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40014000 	.word	0x40014000

08005c78 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f023 0210 	bic.w	r2, r3, #16
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	031b      	lsls	r3, r3, #12
 8005dc2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e04f      	b.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d10c      	bne.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40014000 	.word	0x40014000

08005efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e040      	b.n	8005fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb faf4 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 feb2 	bl	8006ce8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fc83 	bl	8006890 <UART_SetConfig>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e01b      	b.n	8005fcc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 ff31 	bl	8006e2c <UART_CheckIdleState>
 8005fca:	4603      	mov	r3, r0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d178      	bne.n	80060de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Transmit+0x24>
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e071      	b.n	80060e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2221      	movs	r2, #33	; 0x21
 8006008:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800600a:	f7fb fc7d 	bl	8001908 <HAL_GetTick>
 800600e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006028:	d108      	bne.n	800603c <HAL_UART_Transmit+0x68>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e003      	b.n	8006044 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006044:	e030      	b.n	80060a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2200      	movs	r2, #0
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 ff93 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e03c      	b.n	80060e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	881a      	ldrh	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006078:	b292      	uxth	r2, r2
 800607a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	3302      	adds	r3, #2
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e008      	b.n	8006096 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b292      	uxth	r2, r2
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1c8      	bne.n	8006046 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 ff5c 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e005      	b.n	80060e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fe:	2b20      	cmp	r3, #32
 8006100:	f040 80b6 	bne.w	8006270 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_UART_Receive+0x28>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0ae      	b.n	8006272 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2222      	movs	r2, #34	; 0x22
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800612a:	f7fb fbed 	bl	8001908 <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006148:	d10e      	bne.n	8006168 <HAL_UART_Receive+0x80>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d105      	bne.n	800615e <HAL_UART_Receive+0x76>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800615c:	e02d      	b.n	80061ba <HAL_UART_Receive+0xd2>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006166:	e028      	b.n	80061ba <HAL_UART_Receive+0xd2>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10d      	bne.n	800618c <HAL_UART_Receive+0xa4>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_UART_Receive+0x9a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	22ff      	movs	r2, #255	; 0xff
 800617c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006180:	e01b      	b.n	80061ba <HAL_UART_Receive+0xd2>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	227f      	movs	r2, #127	; 0x7f
 8006186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618a:	e016      	b.n	80061ba <HAL_UART_Receive+0xd2>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006194:	d10d      	bne.n	80061b2 <HAL_UART_Receive+0xca>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_UART_Receive+0xc0>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	227f      	movs	r2, #127	; 0x7f
 80061a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061a6:	e008      	b.n	80061ba <HAL_UART_Receive+0xd2>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	223f      	movs	r2, #63	; 0x3f
 80061ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b0:	e003      	b.n	80061ba <HAL_UART_Receive+0xd2>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d108      	bne.n	80061de <HAL_UART_Receive+0xf6>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e003      	b.n	80061e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80061e6:	e037      	b.n	8006258 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2120      	movs	r1, #32
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fec2 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e033      	b.n	8006272 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006216:	b29a      	uxth	r2, r3
 8006218:	8a7b      	ldrh	r3, [r7, #18]
 800621a:	4013      	ands	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	3302      	adds	r3, #2
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	e00d      	b.n	8006246 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006230:	b29b      	uxth	r3, r3
 8006232:	b2da      	uxtb	r2, r3
 8006234:	8a7b      	ldrh	r3, [r7, #18]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	4013      	ands	r3, r2
 800623a:	b2da      	uxtb	r2, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1c1      	bne.n	80061e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b0ba      	sub	sp, #232	; 0xe8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80062aa:	4013      	ands	r3, r2
 80062ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d115      	bne.n	80062e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 82ae 	beq.w	8006836 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
      }
      return;
 80062e2:	e2a8      	b.n	8006836 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8117 	beq.w	800651c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062fe:	4b85      	ldr	r3, [pc, #532]	; (8006514 <HAL_UART_IRQHandler+0x298>)
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 810a 	beq.w	800651c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d011      	beq.n	8006338 <HAL_UART_IRQHandler+0xbc>
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800632e:	f043 0201 	orr.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d011      	beq.n	8006368 <HAL_UART_IRQHandler+0xec>
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2202      	movs	r2, #2
 8006356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635e:	f043 0204 	orr.w	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <HAL_UART_IRQHandler+0x11c>
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2204      	movs	r2, #4
 8006386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800638e:	f043 0202 	orr.w	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ca:	f043 0208 	orr.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d012      	beq.n	8006406 <HAL_UART_IRQHandler+0x18a>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8214 	beq.w	800683a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d005      	beq.n	800645e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04f      	beq.n	80064fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fdf3 	bl	800704a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d141      	bne.n	80064f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800648c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800649e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d9      	bne.n	8006472 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <HAL_UART_IRQHandler+0x29c>)
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fcd1 	bl	8002e7a <HAL_DMA_Abort_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00f      	b.n	800650e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b8 	bl	8006864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e00b      	b.n	800650e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9b4 	bl	8006864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e007      	b.n	800650e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9b0 	bl	8006864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800650c:	e195      	b.n	800683a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650e:	bf00      	nop
    return;
 8006510:	e193      	b.n	800683a <HAL_UART_IRQHandler+0x5be>
 8006512:	bf00      	nop
 8006514:	04000120 	.word	0x04000120
 8006518:	08007113 	.word	0x08007113

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 814e 	bne.w	80067c2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8147 	beq.w	80067c2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8140 	beq.w	80067c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2210      	movs	r2, #16
 8006548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	f040 80b8 	bne.w	80066ca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006566:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8167 	beq.w	800683e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800657a:	429a      	cmp	r2, r3
 800657c:	f080 815f 	bcs.w	800683e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 8086 	bne.w	80066a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1da      	bne.n	800659c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800660a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800660e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800661c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e1      	bne.n	80065e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800664c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e3      	bne.n	8006622 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800668a:	65bb      	str	r3, [r7, #88]	; 0x58
 800668c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e4      	bne.n	8006668 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fc fbab 	bl	8002dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8d8 	bl	8006878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066c8:	e0b9      	b.n	800683e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80ab 	beq.w	8006842 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80066ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a6 	beq.w	8006842 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800671e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e4      	bne.n	80066f6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	623b      	str	r3, [r7, #32]
   return(result);
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006750:	633a      	str	r2, [r7, #48]	; 0x30
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e3      	bne.n	800672c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	60fb      	str	r3, [r7, #12]
   return(result);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f023 0310 	bic.w	r3, r3, #16
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	617b      	str	r3, [r7, #20]
   return(result);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e4      	bne.n	8006778 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f85c 	bl	8006878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067c0:	e03f      	b.n	8006842 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <HAL_UART_IRQHandler+0x570>
 80067ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fcd4 	bl	8007192 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ea:	e02d      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01c      	beq.n	8006846 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
    return;
 8006814:	e017      	b.n	8006846 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <HAL_UART_IRQHandler+0x5cc>
 8006822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fc85 	bl	800713e <UART_EndTransmit_IT>
    return;
 8006834:	e008      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006836:	bf00      	nop
 8006838:	e006      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
    return;
 800683a:	bf00      	nop
 800683c:	e004      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
      return;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006846:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006848:	37e8      	adds	r7, #232	; 0xe8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006894:	b08a      	sub	sp, #40	; 0x28
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4bb4      	ldr	r3, [pc, #720]	; (8006b90 <UART_SetConfig+0x300>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4aa9      	ldr	r2, [pc, #676]	; (8006b94 <UART_SetConfig+0x304>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f8:	4313      	orrs	r3, r2
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4aa0      	ldr	r2, [pc, #640]	; (8006b98 <UART_SetConfig+0x308>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d126      	bne.n	8006968 <UART_SetConfig+0xd8>
 800691a:	4ba0      	ldr	r3, [pc, #640]	; (8006b9c <UART_SetConfig+0x30c>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	2b03      	cmp	r3, #3
 8006926:	d81b      	bhi.n	8006960 <UART_SetConfig+0xd0>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0xa0>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006941 	.word	0x08006941
 8006934:	08006951 	.word	0x08006951
 8006938:	08006949 	.word	0x08006949
 800693c:	08006959 	.word	0x08006959
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e080      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006948:	2302      	movs	r3, #2
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e07c      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006950:	2304      	movs	r3, #4
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e078      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006958:	2308      	movs	r3, #8
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e074      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006960:	2310      	movs	r3, #16
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006966:	e070      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a8c      	ldr	r2, [pc, #560]	; (8006ba0 <UART_SetConfig+0x310>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d138      	bne.n	80069e4 <UART_SetConfig+0x154>
 8006972:	4b8a      	ldr	r3, [pc, #552]	; (8006b9c <UART_SetConfig+0x30c>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d82d      	bhi.n	80069dc <UART_SetConfig+0x14c>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <UART_SetConfig+0xf8>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069bd 	.word	0x080069bd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069cd 	.word	0x080069cd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069c5 	.word	0x080069c5
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	2300      	movs	r3, #0
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c2:	e042      	b.n	8006a4a <UART_SetConfig+0x1ba>
 80069c4:	2302      	movs	r3, #2
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ca:	e03e      	b.n	8006a4a <UART_SetConfig+0x1ba>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d2:	e03a      	b.n	8006a4a <UART_SetConfig+0x1ba>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e036      	b.n	8006a4a <UART_SetConfig+0x1ba>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e032      	b.n	8006a4a <UART_SetConfig+0x1ba>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a6a      	ldr	r2, [pc, #424]	; (8006b94 <UART_SetConfig+0x304>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d12a      	bne.n	8006a44 <UART_SetConfig+0x1b4>
 80069ee:	4b6b      	ldr	r3, [pc, #428]	; (8006b9c <UART_SetConfig+0x30c>)
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069fc:	d01a      	beq.n	8006a34 <UART_SetConfig+0x1a4>
 80069fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a02:	d81b      	bhi.n	8006a3c <UART_SetConfig+0x1ac>
 8006a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a08:	d00c      	beq.n	8006a24 <UART_SetConfig+0x194>
 8006a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0e:	d815      	bhi.n	8006a3c <UART_SetConfig+0x1ac>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <UART_SetConfig+0x18c>
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a18:	d008      	beq.n	8006a2c <UART_SetConfig+0x19c>
 8006a1a:	e00f      	b.n	8006a3c <UART_SetConfig+0x1ac>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a22:	e012      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006a24:	2302      	movs	r3, #2
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2a:	e00e      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	e00a      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e006      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e002      	b.n	8006a4a <UART_SetConfig+0x1ba>
 8006a44:	2310      	movs	r3, #16
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a51      	ldr	r2, [pc, #324]	; (8006b94 <UART_SetConfig+0x304>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d17a      	bne.n	8006b4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d824      	bhi.n	8006aa6 <UART_SetConfig+0x216>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0x1d4>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006aa7 	.word	0x08006aa7
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006aa7 	.word	0x08006aa7
 8006a74:	08006a97 	.word	0x08006a97
 8006a78:	08006aa7 	.word	0x08006aa7
 8006a7c:	08006aa7 	.word	0x08006aa7
 8006a80:	08006aa7 	.word	0x08006aa7
 8006a84:	08006a9f 	.word	0x08006a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a88:	f7fd fa0a 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8006a8c:	61f8      	str	r0, [r7, #28]
        break;
 8006a8e:	e010      	b.n	8006ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a90:	4b44      	ldr	r3, [pc, #272]	; (8006ba4 <UART_SetConfig+0x314>)
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e00d      	b.n	8006ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a96:	f7fd f96b 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8006a9a:	61f8      	str	r0, [r7, #28]
        break;
 8006a9c:	e009      	b.n	8006ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa2:	61fb      	str	r3, [r7, #28]
        break;
 8006aa4:	e005      	b.n	8006ab2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8107 	beq.w	8006cc8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d305      	bcc.n	8006ad6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d903      	bls.n	8006ade <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006adc:	e0f4      	b.n	8006cc8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	461c      	mov	r4, r3
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	022b      	lsls	r3, r5, #8
 8006af0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006af4:	0222      	lsls	r2, r4, #8
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	6849      	ldr	r1, [r1, #4]
 8006afa:	0849      	lsrs	r1, r1, #1
 8006afc:	2000      	movs	r0, #0
 8006afe:	4688      	mov	r8, r1
 8006b00:	4681      	mov	r9, r0
 8006b02:	eb12 0a08 	adds.w	sl, r2, r8
 8006b06:	eb43 0b09 	adc.w	fp, r3, r9
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 fbb8 	bl	8000290 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4613      	mov	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2e:	d308      	bcc.n	8006b42 <UART_SetConfig+0x2b2>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b36:	d204      	bcs.n	8006b42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	e0c2      	b.n	8006cc8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b48:	e0be      	b.n	8006cc8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b52:	d16a      	bne.n	8006c2a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d834      	bhi.n	8006bc6 <UART_SetConfig+0x336>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x2d4>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006bb1 	.word	0x08006bb1
 8006b70:	08006bc7 	.word	0x08006bc7
 8006b74:	08006bb7 	.word	0x08006bb7
 8006b78:	08006bc7 	.word	0x08006bc7
 8006b7c:	08006bc7 	.word	0x08006bc7
 8006b80:	08006bc7 	.word	0x08006bc7
 8006b84:	08006bbf 	.word	0x08006bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fd f98a 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	61f8      	str	r0, [r7, #28]
        break;
 8006b8e:	e020      	b.n	8006bd2 <UART_SetConfig+0x342>
 8006b90:	efff69f3 	.word	0xefff69f3
 8006b94:	40008000 	.word	0x40008000
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fd f990 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8006bac:	61f8      	str	r0, [r7, #28]
        break;
 8006bae:	e010      	b.n	8006bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb0:	4b4c      	ldr	r3, [pc, #304]	; (8006ce4 <UART_SetConfig+0x454>)
 8006bb2:	61fb      	str	r3, [r7, #28]
        break;
 8006bb4:	e00d      	b.n	8006bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb6:	f7fd f8db 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8006bba:	61f8      	str	r0, [r7, #28]
        break;
 8006bbc:	e009      	b.n	8006bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc2:	61fb      	str	r3, [r7, #28]
        break;
 8006bc4:	e005      	b.n	8006bd2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d077      	beq.n	8006cc8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	005a      	lsls	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	441a      	add	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d916      	bls.n	8006c22 <UART_SetConfig+0x392>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfa:	d212      	bcs.n	8006c22 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f023 030f 	bic.w	r3, r3, #15
 8006c04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	8afb      	ldrh	r3, [r7, #22]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	8afa      	ldrh	r2, [r7, #22]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e052      	b.n	8006cc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c28:	e04e      	b.n	8006cc8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d827      	bhi.n	8006c82 <UART_SetConfig+0x3f2>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x3a8>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006c83 	.word	0x08006c83
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c7b 	.word	0x08006c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd f920 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8006c60:	61f8      	str	r0, [r7, #28]
        break;
 8006c62:	e014      	b.n	8006c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fd f932 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8006c68:	61f8      	str	r0, [r7, #28]
        break;
 8006c6a:	e010      	b.n	8006c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <UART_SetConfig+0x454>)
 8006c6e:	61fb      	str	r3, [r7, #28]
        break;
 8006c70:	e00d      	b.n	8006c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c72:	f7fd f87d 	bl	8003d70 <HAL_RCC_GetSysClockFreq>
 8006c76:	61f8      	str	r0, [r7, #28]
        break;
 8006c78:	e009      	b.n	8006c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7e:	61fb      	str	r3, [r7, #28]
        break;
 8006c80:	e005      	b.n	8006c8e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d019      	beq.n	8006cc8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	085a      	lsrs	r2, r3, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	d909      	bls.n	8006cc2 <UART_SetConfig+0x432>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d205      	bcs.n	8006cc2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	e002      	b.n	8006cc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	; 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce2:	bf00      	nop
 8006ce4:	00f42400 	.word	0x00f42400

08006ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de6:	d10a      	bne.n	8006dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b098      	sub	sp, #96	; 0x60
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e3c:	f7fa fd64 	bl	8001908 <HAL_GetTick>
 8006e40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d12e      	bne.n	8006eae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f88c 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d021      	beq.n	8006eae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e062      	b.n	8006f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d149      	bne.n	8006f50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f856 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d03c      	beq.n	8006f50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e6      	bne.n	8006ed6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f28:	61fa      	str	r2, [r7, #28]
 8006f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	617b      	str	r3, [r7, #20]
   return(result);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e011      	b.n	8006f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3758      	adds	r7, #88	; 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	e049      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d045      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f96:	f7fa fcb7 	bl	8001908 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e048      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d031      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d110      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f838 	bl	800704a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e029      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffc:	d111      	bne.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f81e 	bl	800704a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e00f      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	429a      	cmp	r2, r3
 800703e:	d0a6      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704a:	b480      	push	{r7}
 800704c:	b095      	sub	sp, #84	; 0x54
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	643b      	str	r3, [r7, #64]	; 0x40
 8007072:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	61fb      	str	r3, [r7, #28]
   return(result);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	64bb      	str	r3, [r7, #72]	; 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d118      	bne.n	80070f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0310 	bic.w	r3, r3, #16
 80070d4:	647b      	str	r3, [r7, #68]	; 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007106:	bf00      	nop
 8007108:	3754      	adds	r7, #84	; 0x54
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fb97 	bl	8006864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b088      	sub	sp, #32
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	60bb      	str	r3, [r7, #8]
   return(result);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715a:	61fb      	str	r3, [r7, #28]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	613b      	str	r3, [r7, #16]
   return(result);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fb63 	bl	8006850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <atoi>:
 80071a6:	220a      	movs	r2, #10
 80071a8:	2100      	movs	r1, #0
 80071aa:	f000 b883 	b.w	80072b4 <strtol>
	...

080071b0 <_strtol_l.constprop.0>:
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b6:	d001      	beq.n	80071bc <_strtol_l.constprop.0+0xc>
 80071b8:	2b24      	cmp	r3, #36	; 0x24
 80071ba:	d906      	bls.n	80071ca <_strtol_l.constprop.0+0x1a>
 80071bc:	f000 fb04 	bl	80077c8 <__errno>
 80071c0:	2316      	movs	r3, #22
 80071c2:	6003      	str	r3, [r0, #0]
 80071c4:	2000      	movs	r0, #0
 80071c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072b0 <_strtol_l.constprop.0+0x100>
 80071ce:	460d      	mov	r5, r1
 80071d0:	462e      	mov	r6, r5
 80071d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071d6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80071da:	f017 0708 	ands.w	r7, r7, #8
 80071de:	d1f7      	bne.n	80071d0 <_strtol_l.constprop.0+0x20>
 80071e0:	2c2d      	cmp	r4, #45	; 0x2d
 80071e2:	d132      	bne.n	800724a <_strtol_l.constprop.0+0x9a>
 80071e4:	782c      	ldrb	r4, [r5, #0]
 80071e6:	2701      	movs	r7, #1
 80071e8:	1cb5      	adds	r5, r6, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d05b      	beq.n	80072a6 <_strtol_l.constprop.0+0xf6>
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d109      	bne.n	8007206 <_strtol_l.constprop.0+0x56>
 80071f2:	2c30      	cmp	r4, #48	; 0x30
 80071f4:	d107      	bne.n	8007206 <_strtol_l.constprop.0+0x56>
 80071f6:	782c      	ldrb	r4, [r5, #0]
 80071f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071fc:	2c58      	cmp	r4, #88	; 0x58
 80071fe:	d14d      	bne.n	800729c <_strtol_l.constprop.0+0xec>
 8007200:	786c      	ldrb	r4, [r5, #1]
 8007202:	2310      	movs	r3, #16
 8007204:	3502      	adds	r5, #2
 8007206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800720a:	f108 38ff 	add.w	r8, r8, #4294967295
 800720e:	f04f 0e00 	mov.w	lr, #0
 8007212:	fbb8 f9f3 	udiv	r9, r8, r3
 8007216:	4676      	mov	r6, lr
 8007218:	fb03 8a19 	mls	sl, r3, r9, r8
 800721c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007220:	f1bc 0f09 	cmp.w	ip, #9
 8007224:	d816      	bhi.n	8007254 <_strtol_l.constprop.0+0xa4>
 8007226:	4664      	mov	r4, ip
 8007228:	42a3      	cmp	r3, r4
 800722a:	dd24      	ble.n	8007276 <_strtol_l.constprop.0+0xc6>
 800722c:	f1be 3fff 	cmp.w	lr, #4294967295
 8007230:	d008      	beq.n	8007244 <_strtol_l.constprop.0+0x94>
 8007232:	45b1      	cmp	r9, r6
 8007234:	d31c      	bcc.n	8007270 <_strtol_l.constprop.0+0xc0>
 8007236:	d101      	bne.n	800723c <_strtol_l.constprop.0+0x8c>
 8007238:	45a2      	cmp	sl, r4
 800723a:	db19      	blt.n	8007270 <_strtol_l.constprop.0+0xc0>
 800723c:	fb06 4603 	mla	r6, r6, r3, r4
 8007240:	f04f 0e01 	mov.w	lr, #1
 8007244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007248:	e7e8      	b.n	800721c <_strtol_l.constprop.0+0x6c>
 800724a:	2c2b      	cmp	r4, #43	; 0x2b
 800724c:	bf04      	itt	eq
 800724e:	782c      	ldrbeq	r4, [r5, #0]
 8007250:	1cb5      	addeq	r5, r6, #2
 8007252:	e7ca      	b.n	80071ea <_strtol_l.constprop.0+0x3a>
 8007254:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007258:	f1bc 0f19 	cmp.w	ip, #25
 800725c:	d801      	bhi.n	8007262 <_strtol_l.constprop.0+0xb2>
 800725e:	3c37      	subs	r4, #55	; 0x37
 8007260:	e7e2      	b.n	8007228 <_strtol_l.constprop.0+0x78>
 8007262:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007266:	f1bc 0f19 	cmp.w	ip, #25
 800726a:	d804      	bhi.n	8007276 <_strtol_l.constprop.0+0xc6>
 800726c:	3c57      	subs	r4, #87	; 0x57
 800726e:	e7db      	b.n	8007228 <_strtol_l.constprop.0+0x78>
 8007270:	f04f 3eff 	mov.w	lr, #4294967295
 8007274:	e7e6      	b.n	8007244 <_strtol_l.constprop.0+0x94>
 8007276:	f1be 3fff 	cmp.w	lr, #4294967295
 800727a:	d105      	bne.n	8007288 <_strtol_l.constprop.0+0xd8>
 800727c:	2322      	movs	r3, #34	; 0x22
 800727e:	6003      	str	r3, [r0, #0]
 8007280:	4646      	mov	r6, r8
 8007282:	b942      	cbnz	r2, 8007296 <_strtol_l.constprop.0+0xe6>
 8007284:	4630      	mov	r0, r6
 8007286:	e79e      	b.n	80071c6 <_strtol_l.constprop.0+0x16>
 8007288:	b107      	cbz	r7, 800728c <_strtol_l.constprop.0+0xdc>
 800728a:	4276      	negs	r6, r6
 800728c:	2a00      	cmp	r2, #0
 800728e:	d0f9      	beq.n	8007284 <_strtol_l.constprop.0+0xd4>
 8007290:	f1be 0f00 	cmp.w	lr, #0
 8007294:	d000      	beq.n	8007298 <_strtol_l.constprop.0+0xe8>
 8007296:	1e69      	subs	r1, r5, #1
 8007298:	6011      	str	r1, [r2, #0]
 800729a:	e7f3      	b.n	8007284 <_strtol_l.constprop.0+0xd4>
 800729c:	2430      	movs	r4, #48	; 0x30
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1b1      	bne.n	8007206 <_strtol_l.constprop.0+0x56>
 80072a2:	2308      	movs	r3, #8
 80072a4:	e7af      	b.n	8007206 <_strtol_l.constprop.0+0x56>
 80072a6:	2c30      	cmp	r4, #48	; 0x30
 80072a8:	d0a5      	beq.n	80071f6 <_strtol_l.constprop.0+0x46>
 80072aa:	230a      	movs	r3, #10
 80072ac:	e7ab      	b.n	8007206 <_strtol_l.constprop.0+0x56>
 80072ae:	bf00      	nop
 80072b0:	080087d9 	.word	0x080087d9

080072b4 <strtol>:
 80072b4:	4613      	mov	r3, r2
 80072b6:	460a      	mov	r2, r1
 80072b8:	4601      	mov	r1, r0
 80072ba:	4802      	ldr	r0, [pc, #8]	; (80072c4 <strtol+0x10>)
 80072bc:	6800      	ldr	r0, [r0, #0]
 80072be:	f7ff bf77 	b.w	80071b0 <_strtol_l.constprop.0>
 80072c2:	bf00      	nop
 80072c4:	200000a4 	.word	0x200000a4

080072c8 <std>:
 80072c8:	2300      	movs	r3, #0
 80072ca:	b510      	push	{r4, lr}
 80072cc:	4604      	mov	r4, r0
 80072ce:	e9c0 3300 	strd	r3, r3, [r0]
 80072d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072d6:	6083      	str	r3, [r0, #8]
 80072d8:	8181      	strh	r1, [r0, #12]
 80072da:	6643      	str	r3, [r0, #100]	; 0x64
 80072dc:	81c2      	strh	r2, [r0, #14]
 80072de:	6183      	str	r3, [r0, #24]
 80072e0:	4619      	mov	r1, r3
 80072e2:	2208      	movs	r2, #8
 80072e4:	305c      	adds	r0, #92	; 0x5c
 80072e6:	f000 f9c4 	bl	8007672 <memset>
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <std+0x58>)
 80072ec:	6263      	str	r3, [r4, #36]	; 0x24
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <std+0x5c>)
 80072f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <std+0x60>)
 80072f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <std+0x64>)
 80072f8:	6323      	str	r3, [r4, #48]	; 0x30
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <std+0x68>)
 80072fc:	6224      	str	r4, [r4, #32]
 80072fe:	429c      	cmp	r4, r3
 8007300:	d006      	beq.n	8007310 <std+0x48>
 8007302:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007306:	4294      	cmp	r4, r2
 8007308:	d002      	beq.n	8007310 <std+0x48>
 800730a:	33d0      	adds	r3, #208	; 0xd0
 800730c:	429c      	cmp	r4, r3
 800730e:	d105      	bne.n	800731c <std+0x54>
 8007310:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007318:	f000 ba80 	b.w	800781c <__retarget_lock_init_recursive>
 800731c:	bd10      	pop	{r4, pc}
 800731e:	bf00      	nop
 8007320:	080075ed 	.word	0x080075ed
 8007324:	0800760f 	.word	0x0800760f
 8007328:	08007647 	.word	0x08007647
 800732c:	0800766b 	.word	0x0800766b
 8007330:	2000028c 	.word	0x2000028c

08007334 <stdio_exit_handler>:
 8007334:	4a02      	ldr	r2, [pc, #8]	; (8007340 <stdio_exit_handler+0xc>)
 8007336:	4903      	ldr	r1, [pc, #12]	; (8007344 <stdio_exit_handler+0x10>)
 8007338:	4803      	ldr	r0, [pc, #12]	; (8007348 <stdio_exit_handler+0x14>)
 800733a:	f000 b869 	b.w	8007410 <_fwalk_sglue>
 800733e:	bf00      	nop
 8007340:	2000004c 	.word	0x2000004c
 8007344:	08008115 	.word	0x08008115
 8007348:	20000058 	.word	0x20000058

0800734c <cleanup_stdio>:
 800734c:	6841      	ldr	r1, [r0, #4]
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <cleanup_stdio+0x34>)
 8007350:	4299      	cmp	r1, r3
 8007352:	b510      	push	{r4, lr}
 8007354:	4604      	mov	r4, r0
 8007356:	d001      	beq.n	800735c <cleanup_stdio+0x10>
 8007358:	f000 fedc 	bl	8008114 <_fflush_r>
 800735c:	68a1      	ldr	r1, [r4, #8]
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <cleanup_stdio+0x38>)
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <cleanup_stdio+0x1e>
 8007364:	4620      	mov	r0, r4
 8007366:	f000 fed5 	bl	8008114 <_fflush_r>
 800736a:	68e1      	ldr	r1, [r4, #12]
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <cleanup_stdio+0x3c>)
 800736e:	4299      	cmp	r1, r3
 8007370:	d004      	beq.n	800737c <cleanup_stdio+0x30>
 8007372:	4620      	mov	r0, r4
 8007374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007378:	f000 becc 	b.w	8008114 <_fflush_r>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	2000028c 	.word	0x2000028c
 8007384:	200002f4 	.word	0x200002f4
 8007388:	2000035c 	.word	0x2000035c

0800738c <global_stdio_init.part.0>:
 800738c:	b510      	push	{r4, lr}
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <global_stdio_init.part.0+0x30>)
 8007390:	4c0b      	ldr	r4, [pc, #44]	; (80073c0 <global_stdio_init.part.0+0x34>)
 8007392:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <global_stdio_init.part.0+0x38>)
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	4620      	mov	r0, r4
 8007398:	2200      	movs	r2, #0
 800739a:	2104      	movs	r1, #4
 800739c:	f7ff ff94 	bl	80072c8 <std>
 80073a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073a4:	2201      	movs	r2, #1
 80073a6:	2109      	movs	r1, #9
 80073a8:	f7ff ff8e 	bl	80072c8 <std>
 80073ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073b0:	2202      	movs	r2, #2
 80073b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b6:	2112      	movs	r1, #18
 80073b8:	f7ff bf86 	b.w	80072c8 <std>
 80073bc:	200003c4 	.word	0x200003c4
 80073c0:	2000028c 	.word	0x2000028c
 80073c4:	08007335 	.word	0x08007335

080073c8 <__sfp_lock_acquire>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__sfp_lock_acquire+0x8>)
 80073ca:	f000 ba28 	b.w	800781e <__retarget_lock_acquire_recursive>
 80073ce:	bf00      	nop
 80073d0:	200003cd 	.word	0x200003cd

080073d4 <__sfp_lock_release>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__sfp_lock_release+0x8>)
 80073d6:	f000 ba23 	b.w	8007820 <__retarget_lock_release_recursive>
 80073da:	bf00      	nop
 80073dc:	200003cd 	.word	0x200003cd

080073e0 <__sinit>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	4604      	mov	r4, r0
 80073e4:	f7ff fff0 	bl	80073c8 <__sfp_lock_acquire>
 80073e8:	6a23      	ldr	r3, [r4, #32]
 80073ea:	b11b      	cbz	r3, 80073f4 <__sinit+0x14>
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f0:	f7ff bff0 	b.w	80073d4 <__sfp_lock_release>
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <__sinit+0x28>)
 80073f6:	6223      	str	r3, [r4, #32]
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <__sinit+0x2c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f5      	bne.n	80073ec <__sinit+0xc>
 8007400:	f7ff ffc4 	bl	800738c <global_stdio_init.part.0>
 8007404:	e7f2      	b.n	80073ec <__sinit+0xc>
 8007406:	bf00      	nop
 8007408:	0800734d 	.word	0x0800734d
 800740c:	200003c4 	.word	0x200003c4

08007410 <_fwalk_sglue>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4607      	mov	r7, r0
 8007416:	4688      	mov	r8, r1
 8007418:	4614      	mov	r4, r2
 800741a:	2600      	movs	r6, #0
 800741c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007420:	f1b9 0901 	subs.w	r9, r9, #1
 8007424:	d505      	bpl.n	8007432 <_fwalk_sglue+0x22>
 8007426:	6824      	ldr	r4, [r4, #0]
 8007428:	2c00      	cmp	r4, #0
 800742a:	d1f7      	bne.n	800741c <_fwalk_sglue+0xc>
 800742c:	4630      	mov	r0, r6
 800742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d907      	bls.n	8007448 <_fwalk_sglue+0x38>
 8007438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800743c:	3301      	adds	r3, #1
 800743e:	d003      	beq.n	8007448 <_fwalk_sglue+0x38>
 8007440:	4629      	mov	r1, r5
 8007442:	4638      	mov	r0, r7
 8007444:	47c0      	blx	r8
 8007446:	4306      	orrs	r6, r0
 8007448:	3568      	adds	r5, #104	; 0x68
 800744a:	e7e9      	b.n	8007420 <_fwalk_sglue+0x10>

0800744c <getchar>:
 800744c:	4b02      	ldr	r3, [pc, #8]	; (8007458 <getchar+0xc>)
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	6841      	ldr	r1, [r0, #4]
 8007452:	f000 be99 	b.w	8008188 <_getc_r>
 8007456:	bf00      	nop
 8007458:	200000a4 	.word	0x200000a4

0800745c <iprintf>:
 800745c:	b40f      	push	{r0, r1, r2, r3}
 800745e:	b507      	push	{r0, r1, r2, lr}
 8007460:	4906      	ldr	r1, [pc, #24]	; (800747c <iprintf+0x20>)
 8007462:	ab04      	add	r3, sp, #16
 8007464:	6808      	ldr	r0, [r1, #0]
 8007466:	f853 2b04 	ldr.w	r2, [r3], #4
 800746a:	6881      	ldr	r1, [r0, #8]
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	f000 fb21 	bl	8007ab4 <_vfiprintf_r>
 8007472:	b003      	add	sp, #12
 8007474:	f85d eb04 	ldr.w	lr, [sp], #4
 8007478:	b004      	add	sp, #16
 800747a:	4770      	bx	lr
 800747c:	200000a4 	.word	0x200000a4

08007480 <putchar>:
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <putchar+0xc>)
 8007482:	4601      	mov	r1, r0
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	6882      	ldr	r2, [r0, #8]
 8007488:	f000 bf0b 	b.w	80082a2 <_putc_r>
 800748c:	200000a4 	.word	0x200000a4

08007490 <setvbuf>:
 8007490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007494:	461d      	mov	r5, r3
 8007496:	4b54      	ldr	r3, [pc, #336]	; (80075e8 <setvbuf+0x158>)
 8007498:	681f      	ldr	r7, [r3, #0]
 800749a:	4604      	mov	r4, r0
 800749c:	460e      	mov	r6, r1
 800749e:	4690      	mov	r8, r2
 80074a0:	b127      	cbz	r7, 80074ac <setvbuf+0x1c>
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	b913      	cbnz	r3, 80074ac <setvbuf+0x1c>
 80074a6:	4638      	mov	r0, r7
 80074a8:	f7ff ff9a 	bl	80073e0 <__sinit>
 80074ac:	f1b8 0f02 	cmp.w	r8, #2
 80074b0:	d006      	beq.n	80074c0 <setvbuf+0x30>
 80074b2:	f1b8 0f01 	cmp.w	r8, #1
 80074b6:	f200 8094 	bhi.w	80075e2 <setvbuf+0x152>
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	f2c0 8091 	blt.w	80075e2 <setvbuf+0x152>
 80074c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c2:	07da      	lsls	r2, r3, #31
 80074c4:	d405      	bmi.n	80074d2 <setvbuf+0x42>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	059b      	lsls	r3, r3, #22
 80074ca:	d402      	bmi.n	80074d2 <setvbuf+0x42>
 80074cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ce:	f000 f9a6 	bl	800781e <__retarget_lock_acquire_recursive>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4638      	mov	r0, r7
 80074d6:	f000 fe1d 	bl	8008114 <_fflush_r>
 80074da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074dc:	b141      	cbz	r1, 80074f0 <setvbuf+0x60>
 80074de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e2:	4299      	cmp	r1, r3
 80074e4:	d002      	beq.n	80074ec <setvbuf+0x5c>
 80074e6:	4638      	mov	r0, r7
 80074e8:	f000 f9ba 	bl	8007860 <_free_r>
 80074ec:	2300      	movs	r3, #0
 80074ee:	6363      	str	r3, [r4, #52]	; 0x34
 80074f0:	2300      	movs	r3, #0
 80074f2:	61a3      	str	r3, [r4, #24]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	0618      	lsls	r0, r3, #24
 80074fa:	d503      	bpl.n	8007504 <setvbuf+0x74>
 80074fc:	6921      	ldr	r1, [r4, #16]
 80074fe:	4638      	mov	r0, r7
 8007500:	f000 f9ae 	bl	8007860 <_free_r>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	f1b8 0f02 	cmp.w	r8, #2
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	d05f      	beq.n	80075d6 <setvbuf+0x146>
 8007516:	ab01      	add	r3, sp, #4
 8007518:	466a      	mov	r2, sp
 800751a:	4621      	mov	r1, r4
 800751c:	4638      	mov	r0, r7
 800751e:	f000 fe5e 	bl	80081de <__swhatbuf_r>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	4318      	orrs	r0, r3
 8007526:	81a0      	strh	r0, [r4, #12]
 8007528:	bb2d      	cbnz	r5, 8007576 <setvbuf+0xe6>
 800752a:	9d00      	ldr	r5, [sp, #0]
 800752c:	4628      	mov	r0, r5
 800752e:	f000 f9e3 	bl	80078f8 <malloc>
 8007532:	4606      	mov	r6, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	d150      	bne.n	80075da <setvbuf+0x14a>
 8007538:	f8dd 9000 	ldr.w	r9, [sp]
 800753c:	45a9      	cmp	r9, r5
 800753e:	d13e      	bne.n	80075be <setvbuf+0x12e>
 8007540:	f04f 35ff 	mov.w	r5, #4294967295
 8007544:	2200      	movs	r2, #0
 8007546:	60a2      	str	r2, [r4, #8]
 8007548:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800754c:	6022      	str	r2, [r4, #0]
 800754e:	6122      	str	r2, [r4, #16]
 8007550:	2201      	movs	r2, #1
 8007552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007556:	6162      	str	r2, [r4, #20]
 8007558:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	07d1      	lsls	r1, r2, #31
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	d404      	bmi.n	800756e <setvbuf+0xde>
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d402      	bmi.n	800756e <setvbuf+0xde>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f000 f959 	bl	8007820 <__retarget_lock_release_recursive>
 800756e:	4628      	mov	r0, r5
 8007570:	b003      	add	sp, #12
 8007572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007576:	2e00      	cmp	r6, #0
 8007578:	d0d8      	beq.n	800752c <setvbuf+0x9c>
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	b913      	cbnz	r3, 8007584 <setvbuf+0xf4>
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff ff2e 	bl	80073e0 <__sinit>
 8007584:	f1b8 0f01 	cmp.w	r8, #1
 8007588:	bf08      	it	eq
 800758a:	89a3      	ldrheq	r3, [r4, #12]
 800758c:	6026      	str	r6, [r4, #0]
 800758e:	bf04      	itt	eq
 8007590:	f043 0301 	orreq.w	r3, r3, #1
 8007594:	81a3      	strheq	r3, [r4, #12]
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f013 0208 	ands.w	r2, r3, #8
 800759c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80075a0:	d01d      	beq.n	80075de <setvbuf+0x14e>
 80075a2:	07da      	lsls	r2, r3, #31
 80075a4:	bf41      	itttt	mi
 80075a6:	2200      	movmi	r2, #0
 80075a8:	426d      	negmi	r5, r5
 80075aa:	60a2      	strmi	r2, [r4, #8]
 80075ac:	61a5      	strmi	r5, [r4, #24]
 80075ae:	bf58      	it	pl
 80075b0:	60a5      	strpl	r5, [r4, #8]
 80075b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80075b4:	f015 0501 	ands.w	r5, r5, #1
 80075b8:	d0d4      	beq.n	8007564 <setvbuf+0xd4>
 80075ba:	2500      	movs	r5, #0
 80075bc:	e7d7      	b.n	800756e <setvbuf+0xde>
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 f99a 	bl	80078f8 <malloc>
 80075c4:	4606      	mov	r6, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d0ba      	beq.n	8007540 <setvbuf+0xb0>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	464d      	mov	r5, r9
 80075d4:	e7d1      	b.n	800757a <setvbuf+0xea>
 80075d6:	2500      	movs	r5, #0
 80075d8:	e7b4      	b.n	8007544 <setvbuf+0xb4>
 80075da:	46a9      	mov	r9, r5
 80075dc:	e7f5      	b.n	80075ca <setvbuf+0x13a>
 80075de:	60a2      	str	r2, [r4, #8]
 80075e0:	e7e7      	b.n	80075b2 <setvbuf+0x122>
 80075e2:	f04f 35ff 	mov.w	r5, #4294967295
 80075e6:	e7c2      	b.n	800756e <setvbuf+0xde>
 80075e8:	200000a4 	.word	0x200000a4

080075ec <__sread>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	f000 f8c4 	bl	8007780 <_read_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	bfab      	itete	ge
 80075fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007600:	181b      	addge	r3, r3, r0
 8007602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007606:	bfac      	ite	ge
 8007608:	6563      	strge	r3, [r4, #84]	; 0x54
 800760a:	81a3      	strhlt	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__swrite>:
 800760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	461f      	mov	r7, r3
 8007614:	898b      	ldrh	r3, [r1, #12]
 8007616:	05db      	lsls	r3, r3, #23
 8007618:	4605      	mov	r5, r0
 800761a:	460c      	mov	r4, r1
 800761c:	4616      	mov	r6, r2
 800761e:	d505      	bpl.n	800762c <__swrite+0x1e>
 8007620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007624:	2302      	movs	r3, #2
 8007626:	2200      	movs	r2, #0
 8007628:	f000 f898 	bl	800775c <_lseek_r>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007642:	f000 b8af 	b.w	80077a4 <_write_r>

08007646 <__sseek>:
 8007646:	b510      	push	{r4, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764e:	f000 f885 	bl	800775c <_lseek_r>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	bf15      	itete	ne
 8007658:	6560      	strne	r0, [r4, #84]	; 0x54
 800765a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800765e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007662:	81a3      	strheq	r3, [r4, #12]
 8007664:	bf18      	it	ne
 8007666:	81a3      	strhne	r3, [r4, #12]
 8007668:	bd10      	pop	{r4, pc}

0800766a <__sclose>:
 800766a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766e:	f000 b865 	b.w	800773c <_close_r>

08007672 <memset>:
 8007672:	4402      	add	r2, r0
 8007674:	4603      	mov	r3, r0
 8007676:	4293      	cmp	r3, r2
 8007678:	d100      	bne.n	800767c <memset+0xa>
 800767a:	4770      	bx	lr
 800767c:	f803 1b01 	strb.w	r1, [r3], #1
 8007680:	e7f9      	b.n	8007676 <memset+0x4>
	...

08007684 <strtok>:
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <strtok+0x5c>)
 8007686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007688:	681e      	ldr	r6, [r3, #0]
 800768a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800768c:	4605      	mov	r5, r0
 800768e:	b9fc      	cbnz	r4, 80076d0 <strtok+0x4c>
 8007690:	2050      	movs	r0, #80	; 0x50
 8007692:	9101      	str	r1, [sp, #4]
 8007694:	f000 f930 	bl	80078f8 <malloc>
 8007698:	9901      	ldr	r1, [sp, #4]
 800769a:	6470      	str	r0, [r6, #68]	; 0x44
 800769c:	4602      	mov	r2, r0
 800769e:	b920      	cbnz	r0, 80076aa <strtok+0x26>
 80076a0:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <strtok+0x60>)
 80076a2:	4811      	ldr	r0, [pc, #68]	; (80076e8 <strtok+0x64>)
 80076a4:	215b      	movs	r1, #91	; 0x5b
 80076a6:	f000 f8bd 	bl	8007824 <__assert_func>
 80076aa:	e9c0 4400 	strd	r4, r4, [r0]
 80076ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80076b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80076b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80076ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80076be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80076c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80076c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80076ca:	6184      	str	r4, [r0, #24]
 80076cc:	7704      	strb	r4, [r0, #28]
 80076ce:	6244      	str	r4, [r0, #36]	; 0x24
 80076d0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80076d2:	2301      	movs	r3, #1
 80076d4:	4628      	mov	r0, r5
 80076d6:	b002      	add	sp, #8
 80076d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076dc:	f000 b806 	b.w	80076ec <__strtok_r>
 80076e0:	200000a4 	.word	0x200000a4
 80076e4:	080088d9 	.word	0x080088d9
 80076e8:	080088f0 	.word	0x080088f0

080076ec <__strtok_r>:
 80076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ee:	b908      	cbnz	r0, 80076f4 <__strtok_r+0x8>
 80076f0:	6810      	ldr	r0, [r2, #0]
 80076f2:	b188      	cbz	r0, 8007718 <__strtok_r+0x2c>
 80076f4:	4604      	mov	r4, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076fc:	460f      	mov	r7, r1
 80076fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007702:	b91e      	cbnz	r6, 800770c <__strtok_r+0x20>
 8007704:	b965      	cbnz	r5, 8007720 <__strtok_r+0x34>
 8007706:	6015      	str	r5, [r2, #0]
 8007708:	4628      	mov	r0, r5
 800770a:	e005      	b.n	8007718 <__strtok_r+0x2c>
 800770c:	42b5      	cmp	r5, r6
 800770e:	d1f6      	bne.n	80076fe <__strtok_r+0x12>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f0      	bne.n	80076f6 <__strtok_r+0xa>
 8007714:	6014      	str	r4, [r2, #0]
 8007716:	7003      	strb	r3, [r0, #0]
 8007718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800771a:	461c      	mov	r4, r3
 800771c:	e00c      	b.n	8007738 <__strtok_r+0x4c>
 800771e:	b915      	cbnz	r5, 8007726 <__strtok_r+0x3a>
 8007720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007724:	460e      	mov	r6, r1
 8007726:	f816 5b01 	ldrb.w	r5, [r6], #1
 800772a:	42ab      	cmp	r3, r5
 800772c:	d1f7      	bne.n	800771e <__strtok_r+0x32>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f3      	beq.n	800771a <__strtok_r+0x2e>
 8007732:	2300      	movs	r3, #0
 8007734:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	e7ed      	b.n	8007718 <__strtok_r+0x2c>

0800773c <_close_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d06      	ldr	r5, [pc, #24]	; (8007758 <_close_r+0x1c>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	f7f9 fda2 	bl	8001290 <_close>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_close_r+0x1a>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_close_r+0x1a>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200003c8 	.word	0x200003c8

0800775c <_lseek_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_lseek_r+0x20>)
 8007760:	4604      	mov	r4, r0
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	f7f9 fda7 	bl	80012be <_lseek>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_lseek_r+0x1e>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_lseek_r+0x1e>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	200003c8 	.word	0x200003c8

08007780 <_read_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_read_r+0x20>)
 8007784:	4604      	mov	r4, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7f9 fda6 	bl	80012e0 <_read>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_read_r+0x1e>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_read_r+0x1e>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	200003c8 	.word	0x200003c8

080077a4 <_write_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d07      	ldr	r5, [pc, #28]	; (80077c4 <_write_r+0x20>)
 80077a8:	4604      	mov	r4, r0
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	2200      	movs	r2, #0
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f7f9 fd40 	bl	8001238 <_write>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_write_r+0x1e>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_write_r+0x1e>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	200003c8 	.word	0x200003c8

080077c8 <__errno>:
 80077c8:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <__errno+0x8>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200000a4 	.word	0x200000a4

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4d0d      	ldr	r5, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1b64      	subs	r4, r4, r5
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2600      	movs	r6, #0
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f000 ff40 	bl	800866c <_init>
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2600      	movs	r6, #0
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	080089c4 	.word	0x080089c4
 8007810:	080089c4 	.word	0x080089c4
 8007814:	080089c4 	.word	0x080089c4
 8007818:	080089c8 	.word	0x080089c8

0800781c <__retarget_lock_init_recursive>:
 800781c:	4770      	bx	lr

0800781e <__retarget_lock_acquire_recursive>:
 800781e:	4770      	bx	lr

08007820 <__retarget_lock_release_recursive>:
 8007820:	4770      	bx	lr
	...

08007824 <__assert_func>:
 8007824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007826:	4614      	mov	r4, r2
 8007828:	461a      	mov	r2, r3
 800782a:	4b09      	ldr	r3, [pc, #36]	; (8007850 <__assert_func+0x2c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4605      	mov	r5, r0
 8007830:	68d8      	ldr	r0, [r3, #12]
 8007832:	b14c      	cbz	r4, 8007848 <__assert_func+0x24>
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <__assert_func+0x30>)
 8007836:	9100      	str	r1, [sp, #0]
 8007838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800783c:	4906      	ldr	r1, [pc, #24]	; (8007858 <__assert_func+0x34>)
 800783e:	462b      	mov	r3, r5
 8007840:	f000 fc90 	bl	8008164 <fiprintf>
 8007844:	f000 fe40 	bl	80084c8 <abort>
 8007848:	4b04      	ldr	r3, [pc, #16]	; (800785c <__assert_func+0x38>)
 800784a:	461c      	mov	r4, r3
 800784c:	e7f3      	b.n	8007836 <__assert_func+0x12>
 800784e:	bf00      	nop
 8007850:	200000a4 	.word	0x200000a4
 8007854:	0800894a 	.word	0x0800894a
 8007858:	08008957 	.word	0x08008957
 800785c:	08008985 	.word	0x08008985

08007860 <_free_r>:
 8007860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007862:	2900      	cmp	r1, #0
 8007864:	d044      	beq.n	80078f0 <_free_r+0x90>
 8007866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f1a1 0404 	sub.w	r4, r1, #4
 8007872:	bfb8      	it	lt
 8007874:	18e4      	addlt	r4, r4, r3
 8007876:	f000 f8e7 	bl	8007a48 <__malloc_lock>
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <_free_r+0x94>)
 800787c:	9801      	ldr	r0, [sp, #4]
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	b933      	cbnz	r3, 8007890 <_free_r+0x30>
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	b003      	add	sp, #12
 8007888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800788c:	f000 b8e2 	b.w	8007a54 <__malloc_unlock>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d908      	bls.n	80078a6 <_free_r+0x46>
 8007894:	6825      	ldr	r5, [r4, #0]
 8007896:	1961      	adds	r1, r4, r5
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1949      	addeq	r1, r1, r5
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	e7ed      	b.n	8007882 <_free_r+0x22>
 80078a6:	461a      	mov	r2, r3
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b10b      	cbz	r3, 80078b0 <_free_r+0x50>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d9fa      	bls.n	80078a6 <_free_r+0x46>
 80078b0:	6811      	ldr	r1, [r2, #0]
 80078b2:	1855      	adds	r5, r2, r1
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d10b      	bne.n	80078d0 <_free_r+0x70>
 80078b8:	6824      	ldr	r4, [r4, #0]
 80078ba:	4421      	add	r1, r4
 80078bc:	1854      	adds	r4, r2, r1
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	d1e0      	bne.n	8007886 <_free_r+0x26>
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	440c      	add	r4, r1
 80078cc:	6014      	str	r4, [r2, #0]
 80078ce:	e7da      	b.n	8007886 <_free_r+0x26>
 80078d0:	d902      	bls.n	80078d8 <_free_r+0x78>
 80078d2:	230c      	movs	r3, #12
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	e7d6      	b.n	8007886 <_free_r+0x26>
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	1961      	adds	r1, r4, r5
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf04      	itt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	bf04      	itt	eq
 80078e8:	1949      	addeq	r1, r1, r5
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	6054      	str	r4, [r2, #4]
 80078ee:	e7ca      	b.n	8007886 <_free_r+0x26>
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	200003d0 	.word	0x200003d0

080078f8 <malloc>:
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <malloc+0xc>)
 80078fa:	4601      	mov	r1, r0
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	f000 b823 	b.w	8007948 <_malloc_r>
 8007902:	bf00      	nop
 8007904:	200000a4 	.word	0x200000a4

08007908 <sbrk_aligned>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4e0e      	ldr	r6, [pc, #56]	; (8007944 <sbrk_aligned+0x3c>)
 800790c:	460c      	mov	r4, r1
 800790e:	6831      	ldr	r1, [r6, #0]
 8007910:	4605      	mov	r5, r0
 8007912:	b911      	cbnz	r1, 800791a <sbrk_aligned+0x12>
 8007914:	f000 fdc8 	bl	80084a8 <_sbrk_r>
 8007918:	6030      	str	r0, [r6, #0]
 800791a:	4621      	mov	r1, r4
 800791c:	4628      	mov	r0, r5
 800791e:	f000 fdc3 	bl	80084a8 <_sbrk_r>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	d00a      	beq.n	800793c <sbrk_aligned+0x34>
 8007926:	1cc4      	adds	r4, r0, #3
 8007928:	f024 0403 	bic.w	r4, r4, #3
 800792c:	42a0      	cmp	r0, r4
 800792e:	d007      	beq.n	8007940 <sbrk_aligned+0x38>
 8007930:	1a21      	subs	r1, r4, r0
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fdb8 	bl	80084a8 <_sbrk_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d101      	bne.n	8007940 <sbrk_aligned+0x38>
 800793c:	f04f 34ff 	mov.w	r4, #4294967295
 8007940:	4620      	mov	r0, r4
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	200003d4 	.word	0x200003d4

08007948 <_malloc_r>:
 8007948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800794c:	1ccd      	adds	r5, r1, #3
 800794e:	f025 0503 	bic.w	r5, r5, #3
 8007952:	3508      	adds	r5, #8
 8007954:	2d0c      	cmp	r5, #12
 8007956:	bf38      	it	cc
 8007958:	250c      	movcc	r5, #12
 800795a:	2d00      	cmp	r5, #0
 800795c:	4607      	mov	r7, r0
 800795e:	db01      	blt.n	8007964 <_malloc_r+0x1c>
 8007960:	42a9      	cmp	r1, r5
 8007962:	d905      	bls.n	8007970 <_malloc_r+0x28>
 8007964:	230c      	movs	r3, #12
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	2600      	movs	r6, #0
 800796a:	4630      	mov	r0, r6
 800796c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a44 <_malloc_r+0xfc>
 8007974:	f000 f868 	bl	8007a48 <__malloc_lock>
 8007978:	f8d8 3000 	ldr.w	r3, [r8]
 800797c:	461c      	mov	r4, r3
 800797e:	bb5c      	cbnz	r4, 80079d8 <_malloc_r+0x90>
 8007980:	4629      	mov	r1, r5
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff ffc0 	bl	8007908 <sbrk_aligned>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	4604      	mov	r4, r0
 800798c:	d155      	bne.n	8007a3a <_malloc_r+0xf2>
 800798e:	f8d8 4000 	ldr.w	r4, [r8]
 8007992:	4626      	mov	r6, r4
 8007994:	2e00      	cmp	r6, #0
 8007996:	d145      	bne.n	8007a24 <_malloc_r+0xdc>
 8007998:	2c00      	cmp	r4, #0
 800799a:	d048      	beq.n	8007a2e <_malloc_r+0xe6>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	4631      	mov	r1, r6
 80079a0:	4638      	mov	r0, r7
 80079a2:	eb04 0903 	add.w	r9, r4, r3
 80079a6:	f000 fd7f 	bl	80084a8 <_sbrk_r>
 80079aa:	4581      	cmp	r9, r0
 80079ac:	d13f      	bne.n	8007a2e <_malloc_r+0xe6>
 80079ae:	6821      	ldr	r1, [r4, #0]
 80079b0:	1a6d      	subs	r5, r5, r1
 80079b2:	4629      	mov	r1, r5
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff ffa7 	bl	8007908 <sbrk_aligned>
 80079ba:	3001      	adds	r0, #1
 80079bc:	d037      	beq.n	8007a2e <_malloc_r+0xe6>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	442b      	add	r3, r5
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	f8d8 3000 	ldr.w	r3, [r8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d038      	beq.n	8007a3e <_malloc_r+0xf6>
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	42a2      	cmp	r2, r4
 80079d0:	d12b      	bne.n	8007a2a <_malloc_r+0xe2>
 80079d2:	2200      	movs	r2, #0
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	e00f      	b.n	80079f8 <_malloc_r+0xb0>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	d41f      	bmi.n	8007a1e <_malloc_r+0xd6>
 80079de:	2a0b      	cmp	r2, #11
 80079e0:	d917      	bls.n	8007a12 <_malloc_r+0xca>
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	6059      	strne	r1, [r3, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	bf08      	it	eq
 80079f0:	f8c8 1000 	streq.w	r1, [r8]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4638      	mov	r0, r7
 80079fa:	f104 060b 	add.w	r6, r4, #11
 80079fe:	f000 f829 	bl	8007a54 <__malloc_unlock>
 8007a02:	f026 0607 	bic.w	r6, r6, #7
 8007a06:	1d23      	adds	r3, r4, #4
 8007a08:	1af2      	subs	r2, r6, r3
 8007a0a:	d0ae      	beq.n	800796a <_malloc_r+0x22>
 8007a0c:	1b9b      	subs	r3, r3, r6
 8007a0e:	50a3      	str	r3, [r4, r2]
 8007a10:	e7ab      	b.n	800796a <_malloc_r+0x22>
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	6862      	ldr	r2, [r4, #4]
 8007a16:	d1dd      	bne.n	80079d4 <_malloc_r+0x8c>
 8007a18:	f8c8 2000 	str.w	r2, [r8]
 8007a1c:	e7ec      	b.n	80079f8 <_malloc_r+0xb0>
 8007a1e:	4623      	mov	r3, r4
 8007a20:	6864      	ldr	r4, [r4, #4]
 8007a22:	e7ac      	b.n	800797e <_malloc_r+0x36>
 8007a24:	4634      	mov	r4, r6
 8007a26:	6876      	ldr	r6, [r6, #4]
 8007a28:	e7b4      	b.n	8007994 <_malloc_r+0x4c>
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	e7cc      	b.n	80079c8 <_malloc_r+0x80>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	603b      	str	r3, [r7, #0]
 8007a32:	4638      	mov	r0, r7
 8007a34:	f000 f80e 	bl	8007a54 <__malloc_unlock>
 8007a38:	e797      	b.n	800796a <_malloc_r+0x22>
 8007a3a:	6025      	str	r5, [r4, #0]
 8007a3c:	e7dc      	b.n	80079f8 <_malloc_r+0xb0>
 8007a3e:	605b      	str	r3, [r3, #4]
 8007a40:	deff      	udf	#255	; 0xff
 8007a42:	bf00      	nop
 8007a44:	200003d0 	.word	0x200003d0

08007a48 <__malloc_lock>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__malloc_lock+0x8>)
 8007a4a:	f7ff bee8 	b.w	800781e <__retarget_lock_acquire_recursive>
 8007a4e:	bf00      	nop
 8007a50:	200003cc 	.word	0x200003cc

08007a54 <__malloc_unlock>:
 8007a54:	4801      	ldr	r0, [pc, #4]	; (8007a5c <__malloc_unlock+0x8>)
 8007a56:	f7ff bee3 	b.w	8007820 <__retarget_lock_release_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	200003cc 	.word	0x200003cc

08007a60 <__sfputc_r>:
 8007a60:	6893      	ldr	r3, [r2, #8]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	b410      	push	{r4}
 8007a68:	6093      	str	r3, [r2, #8]
 8007a6a:	da08      	bge.n	8007a7e <__sfputc_r+0x1e>
 8007a6c:	6994      	ldr	r4, [r2, #24]
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	db01      	blt.n	8007a76 <__sfputc_r+0x16>
 8007a72:	290a      	cmp	r1, #10
 8007a74:	d103      	bne.n	8007a7e <__sfputc_r+0x1e>
 8007a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7a:	f000 bc5e 	b.w	800833a <__swbuf_r>
 8007a7e:	6813      	ldr	r3, [r2, #0]
 8007a80:	1c58      	adds	r0, r3, #1
 8007a82:	6010      	str	r0, [r2, #0]
 8007a84:	7019      	strb	r1, [r3, #0]
 8007a86:	4608      	mov	r0, r1
 8007a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <__sfputs_r>:
 8007a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a90:	4606      	mov	r6, r0
 8007a92:	460f      	mov	r7, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	18d5      	adds	r5, r2, r3
 8007a98:	42ac      	cmp	r4, r5
 8007a9a:	d101      	bne.n	8007aa0 <__sfputs_r+0x12>
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e007      	b.n	8007ab0 <__sfputs_r+0x22>
 8007aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa4:	463a      	mov	r2, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff ffda 	bl	8007a60 <__sfputc_r>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d1f3      	bne.n	8007a98 <__sfputs_r+0xa>
 8007ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ab4 <_vfiprintf_r>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	460d      	mov	r5, r1
 8007aba:	b09d      	sub	sp, #116	; 0x74
 8007abc:	4614      	mov	r4, r2
 8007abe:	4698      	mov	r8, r3
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	b118      	cbz	r0, 8007acc <_vfiprintf_r+0x18>
 8007ac4:	6a03      	ldr	r3, [r0, #32]
 8007ac6:	b90b      	cbnz	r3, 8007acc <_vfiprintf_r+0x18>
 8007ac8:	f7ff fc8a 	bl	80073e0 <__sinit>
 8007acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ace:	07d9      	lsls	r1, r3, #31
 8007ad0:	d405      	bmi.n	8007ade <_vfiprintf_r+0x2a>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	059a      	lsls	r2, r3, #22
 8007ad6:	d402      	bmi.n	8007ade <_vfiprintf_r+0x2a>
 8007ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ada:	f7ff fea0 	bl	800781e <__retarget_lock_acquire_recursive>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	071b      	lsls	r3, r3, #28
 8007ae2:	d501      	bpl.n	8007ae8 <_vfiprintf_r+0x34>
 8007ae4:	692b      	ldr	r3, [r5, #16]
 8007ae6:	b99b      	cbnz	r3, 8007b10 <_vfiprintf_r+0x5c>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 fc62 	bl	80083b4 <__swsetup_r>
 8007af0:	b170      	cbz	r0, 8007b10 <_vfiprintf_r+0x5c>
 8007af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af4:	07dc      	lsls	r4, r3, #31
 8007af6:	d504      	bpl.n	8007b02 <_vfiprintf_r+0x4e>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	b01d      	add	sp, #116	; 0x74
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	89ab      	ldrh	r3, [r5, #12]
 8007b04:	0598      	lsls	r0, r3, #22
 8007b06:	d4f7      	bmi.n	8007af8 <_vfiprintf_r+0x44>
 8007b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0a:	f7ff fe89 	bl	8007820 <__retarget_lock_release_recursive>
 8007b0e:	e7f3      	b.n	8007af8 <_vfiprintf_r+0x44>
 8007b10:	2300      	movs	r3, #0
 8007b12:	9309      	str	r3, [sp, #36]	; 0x24
 8007b14:	2320      	movs	r3, #32
 8007b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1e:	2330      	movs	r3, #48	; 0x30
 8007b20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007cd4 <_vfiprintf_r+0x220>
 8007b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b28:	f04f 0901 	mov.w	r9, #1
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	469a      	mov	sl, r3
 8007b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b34:	b10a      	cbz	r2, 8007b3a <_vfiprintf_r+0x86>
 8007b36:	2a25      	cmp	r2, #37	; 0x25
 8007b38:	d1f9      	bne.n	8007b2e <_vfiprintf_r+0x7a>
 8007b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3e:	d00b      	beq.n	8007b58 <_vfiprintf_r+0xa4>
 8007b40:	465b      	mov	r3, fp
 8007b42:	4622      	mov	r2, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7ff ffa1 	bl	8007a8e <__sfputs_r>
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f000 80a9 	beq.w	8007ca4 <_vfiprintf_r+0x1f0>
 8007b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b54:	445a      	add	r2, fp
 8007b56:	9209      	str	r2, [sp, #36]	; 0x24
 8007b58:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a1 	beq.w	8007ca4 <_vfiprintf_r+0x1f0>
 8007b62:	2300      	movs	r3, #0
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6c:	f10a 0a01 	add.w	sl, sl, #1
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b78:	931a      	str	r3, [sp, #104]	; 0x68
 8007b7a:	4654      	mov	r4, sl
 8007b7c:	2205      	movs	r2, #5
 8007b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b82:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_vfiprintf_r+0x220>)
 8007b84:	f7f8 fb34 	bl	80001f0 <memchr>
 8007b88:	9a04      	ldr	r2, [sp, #16]
 8007b8a:	b9d8      	cbnz	r0, 8007bc4 <_vfiprintf_r+0x110>
 8007b8c:	06d1      	lsls	r1, r2, #27
 8007b8e:	bf44      	itt	mi
 8007b90:	2320      	movmi	r3, #32
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	0713      	lsls	r3, r2, #28
 8007b98:	bf44      	itt	mi
 8007b9a:	232b      	movmi	r3, #43	; 0x2b
 8007b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba6:	d015      	beq.n	8007bd4 <_vfiprintf_r+0x120>
 8007ba8:	9a07      	ldr	r2, [sp, #28]
 8007baa:	4654      	mov	r4, sl
 8007bac:	2000      	movs	r0, #0
 8007bae:	f04f 0c0a 	mov.w	ip, #10
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb8:	3b30      	subs	r3, #48	; 0x30
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d94d      	bls.n	8007c5a <_vfiprintf_r+0x1a6>
 8007bbe:	b1b0      	cbz	r0, 8007bee <_vfiprintf_r+0x13a>
 8007bc0:	9207      	str	r2, [sp, #28]
 8007bc2:	e014      	b.n	8007bee <_vfiprintf_r+0x13a>
 8007bc4:	eba0 0308 	sub.w	r3, r0, r8
 8007bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	46a2      	mov	sl, r4
 8007bd2:	e7d2      	b.n	8007b7a <_vfiprintf_r+0xc6>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	1d19      	adds	r1, r3, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	9103      	str	r1, [sp, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bfbb      	ittet	lt
 8007be0:	425b      	neglt	r3, r3
 8007be2:	f042 0202 	orrlt.w	r2, r2, #2
 8007be6:	9307      	strge	r3, [sp, #28]
 8007be8:	9307      	strlt	r3, [sp, #28]
 8007bea:	bfb8      	it	lt
 8007bec:	9204      	strlt	r2, [sp, #16]
 8007bee:	7823      	ldrb	r3, [r4, #0]
 8007bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf2:	d10c      	bne.n	8007c0e <_vfiprintf_r+0x15a>
 8007bf4:	7863      	ldrb	r3, [r4, #1]
 8007bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf8:	d134      	bne.n	8007c64 <_vfiprintf_r+0x1b0>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	9203      	str	r2, [sp, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfb8      	it	lt
 8007c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c0a:	3402      	adds	r4, #2
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ce4 <_vfiprintf_r+0x230>
 8007c12:	7821      	ldrb	r1, [r4, #0]
 8007c14:	2203      	movs	r2, #3
 8007c16:	4650      	mov	r0, sl
 8007c18:	f7f8 faea 	bl	80001f0 <memchr>
 8007c1c:	b138      	cbz	r0, 8007c2e <_vfiprintf_r+0x17a>
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	eba0 000a 	sub.w	r0, r0, sl
 8007c24:	2240      	movs	r2, #64	; 0x40
 8007c26:	4082      	lsls	r2, r0
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	3401      	adds	r4, #1
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c32:	4829      	ldr	r0, [pc, #164]	; (8007cd8 <_vfiprintf_r+0x224>)
 8007c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c38:	2206      	movs	r2, #6
 8007c3a:	f7f8 fad9 	bl	80001f0 <memchr>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d03f      	beq.n	8007cc2 <_vfiprintf_r+0x20e>
 8007c42:	4b26      	ldr	r3, [pc, #152]	; (8007cdc <_vfiprintf_r+0x228>)
 8007c44:	bb1b      	cbnz	r3, 8007c8e <_vfiprintf_r+0x1da>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	3307      	adds	r3, #7
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	3308      	adds	r3, #8
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	443b      	add	r3, r7
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	e768      	b.n	8007b2c <_vfiprintf_r+0x78>
 8007c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c5e:	460c      	mov	r4, r1
 8007c60:	2001      	movs	r0, #1
 8007c62:	e7a6      	b.n	8007bb2 <_vfiprintf_r+0xfe>
 8007c64:	2300      	movs	r3, #0
 8007c66:	3401      	adds	r4, #1
 8007c68:	9305      	str	r3, [sp, #20]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f04f 0c0a 	mov.w	ip, #10
 8007c70:	4620      	mov	r0, r4
 8007c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c76:	3a30      	subs	r2, #48	; 0x30
 8007c78:	2a09      	cmp	r2, #9
 8007c7a:	d903      	bls.n	8007c84 <_vfiprintf_r+0x1d0>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0c6      	beq.n	8007c0e <_vfiprintf_r+0x15a>
 8007c80:	9105      	str	r1, [sp, #20]
 8007c82:	e7c4      	b.n	8007c0e <_vfiprintf_r+0x15a>
 8007c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c88:	4604      	mov	r4, r0
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e7f0      	b.n	8007c70 <_vfiprintf_r+0x1bc>
 8007c8e:	ab03      	add	r3, sp, #12
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	462a      	mov	r2, r5
 8007c94:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <_vfiprintf_r+0x22c>)
 8007c96:	a904      	add	r1, sp, #16
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f3af 8000 	nop.w
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	1c78      	adds	r0, r7, #1
 8007ca2:	d1d6      	bne.n	8007c52 <_vfiprintf_r+0x19e>
 8007ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca6:	07d9      	lsls	r1, r3, #31
 8007ca8:	d405      	bmi.n	8007cb6 <_vfiprintf_r+0x202>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	059a      	lsls	r2, r3, #22
 8007cae:	d402      	bmi.n	8007cb6 <_vfiprintf_r+0x202>
 8007cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cb2:	f7ff fdb5 	bl	8007820 <__retarget_lock_release_recursive>
 8007cb6:	89ab      	ldrh	r3, [r5, #12]
 8007cb8:	065b      	lsls	r3, r3, #25
 8007cba:	f53f af1d 	bmi.w	8007af8 <_vfiprintf_r+0x44>
 8007cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cc0:	e71c      	b.n	8007afc <_vfiprintf_r+0x48>
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <_vfiprintf_r+0x22c>)
 8007cca:	a904      	add	r1, sp, #16
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f000 f879 	bl	8007dc4 <_printf_i>
 8007cd2:	e7e4      	b.n	8007c9e <_vfiprintf_r+0x1ea>
 8007cd4:	08008986 	.word	0x08008986
 8007cd8:	08008990 	.word	0x08008990
 8007cdc:	00000000 	.word	0x00000000
 8007ce0:	08007a8f 	.word	0x08007a8f
 8007ce4:	0800898c 	.word	0x0800898c

08007ce8 <_printf_common>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4616      	mov	r6, r2
 8007cee:	4699      	mov	r9, r3
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bfb8      	it	lt
 8007cfc:	4613      	movlt	r3, r2
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b10a      	cbz	r2, 8007d0e <_printf_common+0x26>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	0699      	lsls	r1, r3, #26
 8007d12:	bf42      	ittt	mi
 8007d14:	6833      	ldrmi	r3, [r6, #0]
 8007d16:	3302      	addmi	r3, #2
 8007d18:	6033      	strmi	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	f015 0506 	ands.w	r5, r5, #6
 8007d20:	d106      	bne.n	8007d30 <_printf_common+0x48>
 8007d22:	f104 0a19 	add.w	sl, r4, #25
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6832      	ldr	r2, [r6, #0]
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc26      	bgt.n	8007d7e <_printf_common+0x96>
 8007d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d34:	1e13      	subs	r3, r2, #0
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	bf18      	it	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	0692      	lsls	r2, r2, #26
 8007d3e:	d42b      	bmi.n	8007d98 <_printf_common+0xb0>
 8007d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d01e      	beq.n	8007d8c <_printf_common+0xa4>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	6922      	ldr	r2, [r4, #16]
 8007d52:	f003 0306 	and.w	r3, r3, #6
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	bf02      	ittt	eq
 8007d5a:	68e5      	ldreq	r5, [r4, #12]
 8007d5c:	6833      	ldreq	r3, [r6, #0]
 8007d5e:	1aed      	subeq	r5, r5, r3
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	bf0c      	ite	eq
 8007d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d68:	2500      	movne	r5, #0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfc4      	itt	gt
 8007d6e:	1a9b      	subgt	r3, r3, r2
 8007d70:	18ed      	addgt	r5, r5, r3
 8007d72:	2600      	movs	r6, #0
 8007d74:	341a      	adds	r4, #26
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	d11a      	bne.n	8007db0 <_printf_common+0xc8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e008      	b.n	8007d90 <_printf_common+0xa8>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4652      	mov	r2, sl
 8007d82:	4649      	mov	r1, r9
 8007d84:	4638      	mov	r0, r7
 8007d86:	47c0      	blx	r8
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d103      	bne.n	8007d94 <_printf_common+0xac>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7c6      	b.n	8007d26 <_printf_common+0x3e>
 8007d98:	18e1      	adds	r1, r4, r3
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	2030      	movs	r0, #48	; 0x30
 8007d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007da2:	4422      	add	r2, r4
 8007da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7c7      	b.n	8007d40 <_printf_common+0x58>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4622      	mov	r2, r4
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa4>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d9      	b.n	8007d76 <_printf_common+0x8e>
	...

08007dc4 <_printf_i>:
 8007dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	7e0f      	ldrb	r7, [r1, #24]
 8007dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dcc:	2f78      	cmp	r7, #120	; 0x78
 8007dce:	4691      	mov	r9, r2
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dda:	d807      	bhi.n	8007dec <_printf_i+0x28>
 8007ddc:	2f62      	cmp	r7, #98	; 0x62
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x32>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f000 80d4 	beq.w	8007f8e <_printf_i+0x1ca>
 8007de6:	2f58      	cmp	r7, #88	; 0x58
 8007de8:	f000 80c0 	beq.w	8007f6c <_printf_i+0x1a8>
 8007dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007df4:	e03a      	b.n	8007e6c <_printf_i+0xa8>
 8007df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dfa:	2b15      	cmp	r3, #21
 8007dfc:	d8f6      	bhi.n	8007dec <_printf_i+0x28>
 8007dfe:	a101      	add	r1, pc, #4	; (adr r1, 8007e04 <_printf_i+0x40>)
 8007e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e71 	.word	0x08007e71
 8007e0c:	08007ded 	.word	0x08007ded
 8007e10:	08007ded 	.word	0x08007ded
 8007e14:	08007ded 	.word	0x08007ded
 8007e18:	08007ded 	.word	0x08007ded
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ded 	.word	0x08007ded
 8007e24:	08007ded 	.word	0x08007ded
 8007e28:	08007ded 	.word	0x08007ded
 8007e2c:	08007ded 	.word	0x08007ded
 8007e30:	08007f75 	.word	0x08007f75
 8007e34:	08007e9d 	.word	0x08007e9d
 8007e38:	08007f2f 	.word	0x08007f2f
 8007e3c:	08007ded 	.word	0x08007ded
 8007e40:	08007ded 	.word	0x08007ded
 8007e44:	08007f97 	.word	0x08007f97
 8007e48:	08007ded 	.word	0x08007ded
 8007e4c:	08007e9d 	.word	0x08007e9d
 8007e50:	08007ded 	.word	0x08007ded
 8007e54:	08007ded 	.word	0x08007ded
 8007e58:	08007f37 	.word	0x08007f37
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	602a      	str	r2, [r5, #0]
 8007e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e09f      	b.n	8007fb0 <_printf_i+0x1ec>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	0607      	lsls	r7, r0, #24
 8007e76:	f103 0104 	add.w	r1, r3, #4
 8007e7a:	6029      	str	r1, [r5, #0]
 8007e7c:	d501      	bpl.n	8007e82 <_printf_i+0xbe>
 8007e7e:	681e      	ldr	r6, [r3, #0]
 8007e80:	e003      	b.n	8007e8a <_printf_i+0xc6>
 8007e82:	0646      	lsls	r6, r0, #25
 8007e84:	d5fb      	bpl.n	8007e7e <_printf_i+0xba>
 8007e86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	da03      	bge.n	8007e96 <_printf_i+0xd2>
 8007e8e:	232d      	movs	r3, #45	; 0x2d
 8007e90:	4276      	negs	r6, r6
 8007e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e96:	485a      	ldr	r0, [pc, #360]	; (8008000 <_printf_i+0x23c>)
 8007e98:	230a      	movs	r3, #10
 8007e9a:	e012      	b.n	8007ec2 <_printf_i+0xfe>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	1d19      	adds	r1, r3, #4
 8007ea2:	6029      	str	r1, [r5, #0]
 8007ea4:	0605      	lsls	r5, r0, #24
 8007ea6:	d501      	bpl.n	8007eac <_printf_i+0xe8>
 8007ea8:	681e      	ldr	r6, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <_printf_i+0xee>
 8007eac:	0641      	lsls	r1, r0, #25
 8007eae:	d5fb      	bpl.n	8007ea8 <_printf_i+0xe4>
 8007eb0:	881e      	ldrh	r6, [r3, #0]
 8007eb2:	4853      	ldr	r0, [pc, #332]	; (8008000 <_printf_i+0x23c>)
 8007eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8007eb6:	bf0c      	ite	eq
 8007eb8:	2308      	moveq	r3, #8
 8007eba:	230a      	movne	r3, #10
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ec2:	6865      	ldr	r5, [r4, #4]
 8007ec4:	60a5      	str	r5, [r4, #8]
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	bfa2      	ittt	ge
 8007eca:	6821      	ldrge	r1, [r4, #0]
 8007ecc:	f021 0104 	bicge.w	r1, r1, #4
 8007ed0:	6021      	strge	r1, [r4, #0]
 8007ed2:	b90e      	cbnz	r6, 8007ed8 <_printf_i+0x114>
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	d04b      	beq.n	8007f70 <_printf_i+0x1ac>
 8007ed8:	4615      	mov	r5, r2
 8007eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ede:	fb03 6711 	mls	r7, r3, r1, r6
 8007ee2:	5dc7      	ldrb	r7, [r0, r7]
 8007ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ee8:	4637      	mov	r7, r6
 8007eea:	42bb      	cmp	r3, r7
 8007eec:	460e      	mov	r6, r1
 8007eee:	d9f4      	bls.n	8007eda <_printf_i+0x116>
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d10b      	bne.n	8007f0c <_printf_i+0x148>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	07de      	lsls	r6, r3, #31
 8007ef8:	d508      	bpl.n	8007f0c <_printf_i+0x148>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	6861      	ldr	r1, [r4, #4]
 8007efe:	4299      	cmp	r1, r3
 8007f00:	bfde      	ittt	le
 8007f02:	2330      	movle	r3, #48	; 0x30
 8007f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f0c:	1b52      	subs	r2, r2, r5
 8007f0e:	6122      	str	r2, [r4, #16]
 8007f10:	f8cd a000 	str.w	sl, [sp]
 8007f14:	464b      	mov	r3, r9
 8007f16:	aa03      	add	r2, sp, #12
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7ff fee4 	bl	8007ce8 <_printf_common>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d14a      	bne.n	8007fba <_printf_i+0x1f6>
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	b004      	add	sp, #16
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	f043 0320 	orr.w	r3, r3, #32
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	4833      	ldr	r0, [pc, #204]	; (8008004 <_printf_i+0x240>)
 8007f38:	2778      	movs	r7, #120	; 0x78
 8007f3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	6829      	ldr	r1, [r5, #0]
 8007f42:	061f      	lsls	r7, r3, #24
 8007f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f48:	d402      	bmi.n	8007f50 <_printf_i+0x18c>
 8007f4a:	065f      	lsls	r7, r3, #25
 8007f4c:	bf48      	it	mi
 8007f4e:	b2b6      	uxthmi	r6, r6
 8007f50:	07df      	lsls	r7, r3, #31
 8007f52:	bf48      	it	mi
 8007f54:	f043 0320 	orrmi.w	r3, r3, #32
 8007f58:	6029      	str	r1, [r5, #0]
 8007f5a:	bf48      	it	mi
 8007f5c:	6023      	strmi	r3, [r4, #0]
 8007f5e:	b91e      	cbnz	r6, 8007f68 <_printf_i+0x1a4>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	f023 0320 	bic.w	r3, r3, #32
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	2310      	movs	r3, #16
 8007f6a:	e7a7      	b.n	8007ebc <_printf_i+0xf8>
 8007f6c:	4824      	ldr	r0, [pc, #144]	; (8008000 <_printf_i+0x23c>)
 8007f6e:	e7e4      	b.n	8007f3a <_printf_i+0x176>
 8007f70:	4615      	mov	r5, r2
 8007f72:	e7bd      	b.n	8007ef0 <_printf_i+0x12c>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6826      	ldr	r6, [r4, #0]
 8007f78:	6961      	ldr	r1, [r4, #20]
 8007f7a:	1d18      	adds	r0, r3, #4
 8007f7c:	6028      	str	r0, [r5, #0]
 8007f7e:	0635      	lsls	r5, r6, #24
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	d501      	bpl.n	8007f88 <_printf_i+0x1c4>
 8007f84:	6019      	str	r1, [r3, #0]
 8007f86:	e002      	b.n	8007f8e <_printf_i+0x1ca>
 8007f88:	0670      	lsls	r0, r6, #25
 8007f8a:	d5fb      	bpl.n	8007f84 <_printf_i+0x1c0>
 8007f8c:	8019      	strh	r1, [r3, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	4615      	mov	r5, r2
 8007f94:	e7bc      	b.n	8007f10 <_printf_i+0x14c>
 8007f96:	682b      	ldr	r3, [r5, #0]
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	602a      	str	r2, [r5, #0]
 8007f9c:	681d      	ldr	r5, [r3, #0]
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7f8 f924 	bl	80001f0 <memchr>
 8007fa8:	b108      	cbz	r0, 8007fae <_printf_i+0x1ea>
 8007faa:	1b40      	subs	r0, r0, r5
 8007fac:	6060      	str	r0, [r4, #4]
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb8:	e7aa      	b.n	8007f10 <_printf_i+0x14c>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	47d0      	blx	sl
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d0ad      	beq.n	8007f24 <_printf_i+0x160>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	d413      	bmi.n	8007ff6 <_printf_i+0x232>
 8007fce:	68e0      	ldr	r0, [r4, #12]
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	4298      	cmp	r0, r3
 8007fd4:	bfb8      	it	lt
 8007fd6:	4618      	movlt	r0, r3
 8007fd8:	e7a6      	b.n	8007f28 <_printf_i+0x164>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4632      	mov	r2, r6
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	47d0      	blx	sl
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d09d      	beq.n	8007f24 <_printf_i+0x160>
 8007fe8:	3501      	adds	r5, #1
 8007fea:	68e3      	ldr	r3, [r4, #12]
 8007fec:	9903      	ldr	r1, [sp, #12]
 8007fee:	1a5b      	subs	r3, r3, r1
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	dcf2      	bgt.n	8007fda <_printf_i+0x216>
 8007ff4:	e7eb      	b.n	8007fce <_printf_i+0x20a>
 8007ff6:	2500      	movs	r5, #0
 8007ff8:	f104 0619 	add.w	r6, r4, #25
 8007ffc:	e7f5      	b.n	8007fea <_printf_i+0x226>
 8007ffe:	bf00      	nop
 8008000:	08008997 	.word	0x08008997
 8008004:	080089a8 	.word	0x080089a8

08008008 <__sflush_r>:
 8008008:	898a      	ldrh	r2, [r1, #12]
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	4605      	mov	r5, r0
 8008010:	0710      	lsls	r0, r2, #28
 8008012:	460c      	mov	r4, r1
 8008014:	d458      	bmi.n	80080c8 <__sflush_r+0xc0>
 8008016:	684b      	ldr	r3, [r1, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc05      	bgt.n	8008028 <__sflush_r+0x20>
 800801c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc02      	bgt.n	8008028 <__sflush_r+0x20>
 8008022:	2000      	movs	r0, #0
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800802a:	2e00      	cmp	r6, #0
 800802c:	d0f9      	beq.n	8008022 <__sflush_r+0x1a>
 800802e:	2300      	movs	r3, #0
 8008030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008034:	682f      	ldr	r7, [r5, #0]
 8008036:	6a21      	ldr	r1, [r4, #32]
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	d032      	beq.n	80080a2 <__sflush_r+0x9a>
 800803c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	075a      	lsls	r2, r3, #29
 8008042:	d505      	bpl.n	8008050 <__sflush_r+0x48>
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	1ac0      	subs	r0, r0, r3
 8008048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800804a:	b10b      	cbz	r3, 8008050 <__sflush_r+0x48>
 800804c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800804e:	1ac0      	subs	r0, r0, r3
 8008050:	2300      	movs	r3, #0
 8008052:	4602      	mov	r2, r0
 8008054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008056:	6a21      	ldr	r1, [r4, #32]
 8008058:	4628      	mov	r0, r5
 800805a:	47b0      	blx	r6
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	d106      	bne.n	8008070 <__sflush_r+0x68>
 8008062:	6829      	ldr	r1, [r5, #0]
 8008064:	291d      	cmp	r1, #29
 8008066:	d82b      	bhi.n	80080c0 <__sflush_r+0xb8>
 8008068:	4a29      	ldr	r2, [pc, #164]	; (8008110 <__sflush_r+0x108>)
 800806a:	410a      	asrs	r2, r1
 800806c:	07d6      	lsls	r6, r2, #31
 800806e:	d427      	bmi.n	80080c0 <__sflush_r+0xb8>
 8008070:	2200      	movs	r2, #0
 8008072:	6062      	str	r2, [r4, #4]
 8008074:	04d9      	lsls	r1, r3, #19
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	6022      	str	r2, [r4, #0]
 800807a:	d504      	bpl.n	8008086 <__sflush_r+0x7e>
 800807c:	1c42      	adds	r2, r0, #1
 800807e:	d101      	bne.n	8008084 <__sflush_r+0x7c>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b903      	cbnz	r3, 8008086 <__sflush_r+0x7e>
 8008084:	6560      	str	r0, [r4, #84]	; 0x54
 8008086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008088:	602f      	str	r7, [r5, #0]
 800808a:	2900      	cmp	r1, #0
 800808c:	d0c9      	beq.n	8008022 <__sflush_r+0x1a>
 800808e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008092:	4299      	cmp	r1, r3
 8008094:	d002      	beq.n	800809c <__sflush_r+0x94>
 8008096:	4628      	mov	r0, r5
 8008098:	f7ff fbe2 	bl	8007860 <_free_r>
 800809c:	2000      	movs	r0, #0
 800809e:	6360      	str	r0, [r4, #52]	; 0x34
 80080a0:	e7c0      	b.n	8008024 <__sflush_r+0x1c>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b0      	blx	r6
 80080a8:	1c41      	adds	r1, r0, #1
 80080aa:	d1c8      	bne.n	800803e <__sflush_r+0x36>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0c5      	beq.n	800803e <__sflush_r+0x36>
 80080b2:	2b1d      	cmp	r3, #29
 80080b4:	d001      	beq.n	80080ba <__sflush_r+0xb2>
 80080b6:	2b16      	cmp	r3, #22
 80080b8:	d101      	bne.n	80080be <__sflush_r+0xb6>
 80080ba:	602f      	str	r7, [r5, #0]
 80080bc:	e7b1      	b.n	8008022 <__sflush_r+0x1a>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7ad      	b.n	8008024 <__sflush_r+0x1c>
 80080c8:	690f      	ldr	r7, [r1, #16]
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	d0a9      	beq.n	8008022 <__sflush_r+0x1a>
 80080ce:	0793      	lsls	r3, r2, #30
 80080d0:	680e      	ldr	r6, [r1, #0]
 80080d2:	bf08      	it	eq
 80080d4:	694b      	ldreq	r3, [r1, #20]
 80080d6:	600f      	str	r7, [r1, #0]
 80080d8:	bf18      	it	ne
 80080da:	2300      	movne	r3, #0
 80080dc:	eba6 0807 	sub.w	r8, r6, r7
 80080e0:	608b      	str	r3, [r1, #8]
 80080e2:	f1b8 0f00 	cmp.w	r8, #0
 80080e6:	dd9c      	ble.n	8008022 <__sflush_r+0x1a>
 80080e8:	6a21      	ldr	r1, [r4, #32]
 80080ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080ec:	4643      	mov	r3, r8
 80080ee:	463a      	mov	r2, r7
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b0      	blx	r6
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dc06      	bgt.n	8008106 <__sflush_r+0xfe>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e78e      	b.n	8008024 <__sflush_r+0x1c>
 8008106:	4407      	add	r7, r0
 8008108:	eba8 0800 	sub.w	r8, r8, r0
 800810c:	e7e9      	b.n	80080e2 <__sflush_r+0xda>
 800810e:	bf00      	nop
 8008110:	dfbffffe 	.word	0xdfbffffe

08008114 <_fflush_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	690b      	ldr	r3, [r1, #16]
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b913      	cbnz	r3, 8008124 <_fflush_r+0x10>
 800811e:	2500      	movs	r5, #0
 8008120:	4628      	mov	r0, r5
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	b118      	cbz	r0, 800812e <_fflush_r+0x1a>
 8008126:	6a03      	ldr	r3, [r0, #32]
 8008128:	b90b      	cbnz	r3, 800812e <_fflush_r+0x1a>
 800812a:	f7ff f959 	bl	80073e0 <__sinit>
 800812e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f3      	beq.n	800811e <_fflush_r+0xa>
 8008136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008138:	07d0      	lsls	r0, r2, #31
 800813a:	d404      	bmi.n	8008146 <_fflush_r+0x32>
 800813c:	0599      	lsls	r1, r3, #22
 800813e:	d402      	bmi.n	8008146 <_fflush_r+0x32>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f7ff fb6c 	bl	800781e <__retarget_lock_acquire_recursive>
 8008146:	4628      	mov	r0, r5
 8008148:	4621      	mov	r1, r4
 800814a:	f7ff ff5d 	bl	8008008 <__sflush_r>
 800814e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008150:	07da      	lsls	r2, r3, #31
 8008152:	4605      	mov	r5, r0
 8008154:	d4e4      	bmi.n	8008120 <_fflush_r+0xc>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	059b      	lsls	r3, r3, #22
 800815a:	d4e1      	bmi.n	8008120 <_fflush_r+0xc>
 800815c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800815e:	f7ff fb5f 	bl	8007820 <__retarget_lock_release_recursive>
 8008162:	e7dd      	b.n	8008120 <_fflush_r+0xc>

08008164 <fiprintf>:
 8008164:	b40e      	push	{r1, r2, r3}
 8008166:	b503      	push	{r0, r1, lr}
 8008168:	4601      	mov	r1, r0
 800816a:	ab03      	add	r3, sp, #12
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <fiprintf+0x20>)
 800816e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	f7ff fc9d 	bl	8007ab4 <_vfiprintf_r>
 800817a:	b002      	add	sp, #8
 800817c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008180:	b003      	add	sp, #12
 8008182:	4770      	bx	lr
 8008184:	200000a4 	.word	0x200000a4

08008188 <_getc_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	460c      	mov	r4, r1
 800818c:	4605      	mov	r5, r0
 800818e:	b118      	cbz	r0, 8008198 <_getc_r+0x10>
 8008190:	6a03      	ldr	r3, [r0, #32]
 8008192:	b90b      	cbnz	r3, 8008198 <_getc_r+0x10>
 8008194:	f7ff f924 	bl	80073e0 <__sinit>
 8008198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800819a:	07d8      	lsls	r0, r3, #31
 800819c:	d405      	bmi.n	80081aa <_getc_r+0x22>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	0599      	lsls	r1, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_getc_r+0x22>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f7ff fb3a 	bl	800781e <__retarget_lock_acquire_recursive>
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	da0f      	bge.n	80081d4 <_getc_r+0x4c>
 80081b4:	4628      	mov	r0, r5
 80081b6:	4621      	mov	r1, r4
 80081b8:	f000 f8a7 	bl	800830a <__srget_r>
 80081bc:	4605      	mov	r5, r0
 80081be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c0:	07da      	lsls	r2, r3, #31
 80081c2:	d405      	bmi.n	80081d0 <_getc_r+0x48>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	059b      	lsls	r3, r3, #22
 80081c8:	d402      	bmi.n	80081d0 <_getc_r+0x48>
 80081ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081cc:	f7ff fb28 	bl	8007820 <__retarget_lock_release_recursive>
 80081d0:	4628      	mov	r0, r5
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	781d      	ldrb	r5, [r3, #0]
 80081dc:	e7ef      	b.n	80081be <_getc_r+0x36>

080081de <__swhatbuf_r>:
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	460c      	mov	r4, r1
 80081e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e6:	2900      	cmp	r1, #0
 80081e8:	b096      	sub	sp, #88	; 0x58
 80081ea:	4615      	mov	r5, r2
 80081ec:	461e      	mov	r6, r3
 80081ee:	da0d      	bge.n	800820c <__swhatbuf_r+0x2e>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081f6:	f04f 0100 	mov.w	r1, #0
 80081fa:	bf0c      	ite	eq
 80081fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008200:	2340      	movne	r3, #64	; 0x40
 8008202:	2000      	movs	r0, #0
 8008204:	6031      	str	r1, [r6, #0]
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	b016      	add	sp, #88	; 0x58
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	466a      	mov	r2, sp
 800820e:	f000 f929 	bl	8008464 <_fstat_r>
 8008212:	2800      	cmp	r0, #0
 8008214:	dbec      	blt.n	80081f0 <__swhatbuf_r+0x12>
 8008216:	9901      	ldr	r1, [sp, #4]
 8008218:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800821c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008220:	4259      	negs	r1, r3
 8008222:	4159      	adcs	r1, r3
 8008224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008228:	e7eb      	b.n	8008202 <__swhatbuf_r+0x24>

0800822a <__smakebuf_r>:
 800822a:	898b      	ldrh	r3, [r1, #12]
 800822c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800822e:	079d      	lsls	r5, r3, #30
 8008230:	4606      	mov	r6, r0
 8008232:	460c      	mov	r4, r1
 8008234:	d507      	bpl.n	8008246 <__smakebuf_r+0x1c>
 8008236:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	2301      	movs	r3, #1
 8008240:	6163      	str	r3, [r4, #20]
 8008242:	b002      	add	sp, #8
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	ab01      	add	r3, sp, #4
 8008248:	466a      	mov	r2, sp
 800824a:	f7ff ffc8 	bl	80081de <__swhatbuf_r>
 800824e:	9900      	ldr	r1, [sp, #0]
 8008250:	4605      	mov	r5, r0
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff fb78 	bl	8007948 <_malloc_r>
 8008258:	b948      	cbnz	r0, 800826e <__smakebuf_r+0x44>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	059a      	lsls	r2, r3, #22
 8008260:	d4ef      	bmi.n	8008242 <__smakebuf_r+0x18>
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	e7e3      	b.n	8008236 <__smakebuf_r+0xc>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	6020      	str	r0, [r4, #0]
 8008272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	9b00      	ldr	r3, [sp, #0]
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	6120      	str	r0, [r4, #16]
 8008280:	b15b      	cbz	r3, 800829a <__smakebuf_r+0x70>
 8008282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f8fe 	bl	8008488 <_isatty_r>
 800828c:	b128      	cbz	r0, 800829a <__smakebuf_r+0x70>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	431d      	orrs	r5, r3
 800829e:	81a5      	strh	r5, [r4, #12]
 80082a0:	e7cf      	b.n	8008242 <__smakebuf_r+0x18>

080082a2 <_putc_r>:
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	460d      	mov	r5, r1
 80082a6:	4614      	mov	r4, r2
 80082a8:	4606      	mov	r6, r0
 80082aa:	b118      	cbz	r0, 80082b4 <_putc_r+0x12>
 80082ac:	6a03      	ldr	r3, [r0, #32]
 80082ae:	b90b      	cbnz	r3, 80082b4 <_putc_r+0x12>
 80082b0:	f7ff f896 	bl	80073e0 <__sinit>
 80082b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082b6:	07d8      	lsls	r0, r3, #31
 80082b8:	d405      	bmi.n	80082c6 <_putc_r+0x24>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0599      	lsls	r1, r3, #22
 80082be:	d402      	bmi.n	80082c6 <_putc_r+0x24>
 80082c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c2:	f7ff faac 	bl	800781e <__retarget_lock_acquire_recursive>
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	60a3      	str	r3, [r4, #8]
 80082ce:	da05      	bge.n	80082dc <_putc_r+0x3a>
 80082d0:	69a2      	ldr	r2, [r4, #24]
 80082d2:	4293      	cmp	r3, r2
 80082d4:	db12      	blt.n	80082fc <_putc_r+0x5a>
 80082d6:	b2eb      	uxtb	r3, r5
 80082d8:	2b0a      	cmp	r3, #10
 80082da:	d00f      	beq.n	80082fc <_putc_r+0x5a>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	6022      	str	r2, [r4, #0]
 80082e2:	701d      	strb	r5, [r3, #0]
 80082e4:	b2ed      	uxtb	r5, r5
 80082e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e8:	07da      	lsls	r2, r3, #31
 80082ea:	d405      	bmi.n	80082f8 <_putc_r+0x56>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	059b      	lsls	r3, r3, #22
 80082f0:	d402      	bmi.n	80082f8 <_putc_r+0x56>
 80082f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082f4:	f7ff fa94 	bl	8007820 <__retarget_lock_release_recursive>
 80082f8:	4628      	mov	r0, r5
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	4629      	mov	r1, r5
 80082fe:	4622      	mov	r2, r4
 8008300:	4630      	mov	r0, r6
 8008302:	f000 f81a 	bl	800833a <__swbuf_r>
 8008306:	4605      	mov	r5, r0
 8008308:	e7ed      	b.n	80082e6 <_putc_r+0x44>

0800830a <__srget_r>:
 800830a:	b538      	push	{r3, r4, r5, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	4605      	mov	r5, r0
 8008310:	b118      	cbz	r0, 800831a <__srget_r+0x10>
 8008312:	6a03      	ldr	r3, [r0, #32]
 8008314:	b90b      	cbnz	r3, 800831a <__srget_r+0x10>
 8008316:	f7ff f863 	bl	80073e0 <__sinit>
 800831a:	4621      	mov	r1, r4
 800831c:	4628      	mov	r0, r5
 800831e:	f000 f8e9 	bl	80084f4 <__srefill_r>
 8008322:	b938      	cbnz	r0, 8008334 <__srget_r+0x2a>
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	3b01      	subs	r3, #1
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	6022      	str	r2, [r4, #0]
 8008330:	7818      	ldrb	r0, [r3, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	e7fb      	b.n	8008332 <__srget_r+0x28>

0800833a <__swbuf_r>:
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	460e      	mov	r6, r1
 800833e:	4614      	mov	r4, r2
 8008340:	4605      	mov	r5, r0
 8008342:	b118      	cbz	r0, 800834c <__swbuf_r+0x12>
 8008344:	6a03      	ldr	r3, [r0, #32]
 8008346:	b90b      	cbnz	r3, 800834c <__swbuf_r+0x12>
 8008348:	f7ff f84a 	bl	80073e0 <__sinit>
 800834c:	69a3      	ldr	r3, [r4, #24]
 800834e:	60a3      	str	r3, [r4, #8]
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	071a      	lsls	r2, r3, #28
 8008354:	d525      	bpl.n	80083a2 <__swbuf_r+0x68>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	b31b      	cbz	r3, 80083a2 <__swbuf_r+0x68>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	1a98      	subs	r0, r3, r2
 8008360:	6963      	ldr	r3, [r4, #20]
 8008362:	b2f6      	uxtb	r6, r6
 8008364:	4283      	cmp	r3, r0
 8008366:	4637      	mov	r7, r6
 8008368:	dc04      	bgt.n	8008374 <__swbuf_r+0x3a>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff fed1 	bl	8008114 <_fflush_r>
 8008372:	b9e0      	cbnz	r0, 80083ae <__swbuf_r+0x74>
 8008374:	68a3      	ldr	r3, [r4, #8]
 8008376:	3b01      	subs	r3, #1
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	701e      	strb	r6, [r3, #0]
 8008382:	6962      	ldr	r2, [r4, #20]
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	429a      	cmp	r2, r3
 8008388:	d004      	beq.n	8008394 <__swbuf_r+0x5a>
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	07db      	lsls	r3, r3, #31
 800838e:	d506      	bpl.n	800839e <__swbuf_r+0x64>
 8008390:	2e0a      	cmp	r6, #10
 8008392:	d104      	bne.n	800839e <__swbuf_r+0x64>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f7ff febc 	bl	8008114 <_fflush_r>
 800839c:	b938      	cbnz	r0, 80083ae <__swbuf_r+0x74>
 800839e:	4638      	mov	r0, r7
 80083a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a2:	4621      	mov	r1, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 f805 	bl	80083b4 <__swsetup_r>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0d5      	beq.n	800835a <__swbuf_r+0x20>
 80083ae:	f04f 37ff 	mov.w	r7, #4294967295
 80083b2:	e7f4      	b.n	800839e <__swbuf_r+0x64>

080083b4 <__swsetup_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <__swsetup_r+0xac>)
 80083b8:	4605      	mov	r5, r0
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	460c      	mov	r4, r1
 80083be:	b118      	cbz	r0, 80083c8 <__swsetup_r+0x14>
 80083c0:	6a03      	ldr	r3, [r0, #32]
 80083c2:	b90b      	cbnz	r3, 80083c8 <__swsetup_r+0x14>
 80083c4:	f7ff f80c 	bl	80073e0 <__sinit>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ce:	0718      	lsls	r0, r3, #28
 80083d0:	d422      	bmi.n	8008418 <__swsetup_r+0x64>
 80083d2:	06d9      	lsls	r1, r3, #27
 80083d4:	d407      	bmi.n	80083e6 <__swsetup_r+0x32>
 80083d6:	2309      	movs	r3, #9
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	e034      	b.n	8008450 <__swsetup_r+0x9c>
 80083e6:	0758      	lsls	r0, r3, #29
 80083e8:	d512      	bpl.n	8008410 <__swsetup_r+0x5c>
 80083ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ec:	b141      	cbz	r1, 8008400 <__swsetup_r+0x4c>
 80083ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083f2:	4299      	cmp	r1, r3
 80083f4:	d002      	beq.n	80083fc <__swsetup_r+0x48>
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7ff fa32 	bl	8007860 <_free_r>
 80083fc:	2300      	movs	r3, #0
 80083fe:	6363      	str	r3, [r4, #52]	; 0x34
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	2300      	movs	r3, #0
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	b94b      	cbnz	r3, 8008430 <__swsetup_r+0x7c>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d003      	beq.n	8008430 <__swsetup_r+0x7c>
 8008428:	4621      	mov	r1, r4
 800842a:	4628      	mov	r0, r5
 800842c:	f7ff fefd 	bl	800822a <__smakebuf_r>
 8008430:	89a0      	ldrh	r0, [r4, #12]
 8008432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008436:	f010 0301 	ands.w	r3, r0, #1
 800843a:	d00a      	beq.n	8008452 <__swsetup_r+0x9e>
 800843c:	2300      	movs	r3, #0
 800843e:	60a3      	str	r3, [r4, #8]
 8008440:	6963      	ldr	r3, [r4, #20]
 8008442:	425b      	negs	r3, r3
 8008444:	61a3      	str	r3, [r4, #24]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	b943      	cbnz	r3, 800845c <__swsetup_r+0xa8>
 800844a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800844e:	d1c4      	bne.n	80083da <__swsetup_r+0x26>
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	0781      	lsls	r1, r0, #30
 8008454:	bf58      	it	pl
 8008456:	6963      	ldrpl	r3, [r4, #20]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	e7f4      	b.n	8008446 <__swsetup_r+0x92>
 800845c:	2000      	movs	r0, #0
 800845e:	e7f7      	b.n	8008450 <__swsetup_r+0x9c>
 8008460:	200000a4 	.word	0x200000a4

08008464 <_fstat_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_fstat_r+0x20>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f8 ff5d 	bl	8001330 <_fstat>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_fstat_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_fstat_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	200003c8 	.word	0x200003c8

08008488 <_isatty_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d06      	ldr	r5, [pc, #24]	; (80084a4 <_isatty_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f8 feba 	bl	800120c <_isatty>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_isatty_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_isatty_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	200003c8 	.word	0x200003c8

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	; (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f9 f94e 	bl	8001754 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200003c8 	.word	0x200003c8

080084c8 <abort>:
 80084c8:	b508      	push	{r3, lr}
 80084ca:	2006      	movs	r0, #6
 80084cc:	f000 f8b2 	bl	8008634 <raise>
 80084d0:	2001      	movs	r0, #1
 80084d2:	f7f9 f935 	bl	8001740 <_exit>
	...

080084d8 <lflush>:
 80084d8:	898b      	ldrh	r3, [r1, #12]
 80084da:	f003 0309 	and.w	r3, r3, #9
 80084de:	2b09      	cmp	r3, #9
 80084e0:	d103      	bne.n	80084ea <lflush+0x12>
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <lflush+0x18>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f7ff be15 	b.w	8008114 <_fflush_r>
 80084ea:	2000      	movs	r0, #0
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200000a4 	.word	0x200000a4

080084f4 <__srefill_r>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	460c      	mov	r4, r1
 80084f8:	4605      	mov	r5, r0
 80084fa:	b118      	cbz	r0, 8008504 <__srefill_r+0x10>
 80084fc:	6a03      	ldr	r3, [r0, #32]
 80084fe:	b90b      	cbnz	r3, 8008504 <__srefill_r+0x10>
 8008500:	f7fe ff6e 	bl	80073e0 <__sinit>
 8008504:	2300      	movs	r3, #0
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800850e:	069e      	lsls	r6, r3, #26
 8008510:	d502      	bpl.n	8008518 <__srefill_r+0x24>
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	e05c      	b.n	80085d2 <__srefill_r+0xde>
 8008518:	0758      	lsls	r0, r3, #29
 800851a:	d448      	bmi.n	80085ae <__srefill_r+0xba>
 800851c:	06d9      	lsls	r1, r3, #27
 800851e:	d405      	bmi.n	800852c <__srefill_r+0x38>
 8008520:	2309      	movs	r3, #9
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e7f2      	b.n	8008512 <__srefill_r+0x1e>
 800852c:	071a      	lsls	r2, r3, #28
 800852e:	d50b      	bpl.n	8008548 <__srefill_r+0x54>
 8008530:	4621      	mov	r1, r4
 8008532:	4628      	mov	r0, r5
 8008534:	f7ff fdee 	bl	8008114 <_fflush_r>
 8008538:	2800      	cmp	r0, #0
 800853a:	d1ea      	bne.n	8008512 <__srefill_r+0x1e>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	60a0      	str	r0, [r4, #8]
 8008540:	f023 0308 	bic.w	r3, r3, #8
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	61a0      	str	r0, [r4, #24]
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f043 0304 	orr.w	r3, r3, #4
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	b91b      	cbnz	r3, 800855c <__srefill_r+0x68>
 8008554:	4621      	mov	r1, r4
 8008556:	4628      	mov	r0, r5
 8008558:	f7ff fe67 	bl	800822a <__smakebuf_r>
 800855c:	89a6      	ldrh	r6, [r4, #12]
 800855e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008562:	07b3      	lsls	r3, r6, #30
 8008564:	d00f      	beq.n	8008586 <__srefill_r+0x92>
 8008566:	2301      	movs	r3, #1
 8008568:	4a1b      	ldr	r2, [pc, #108]	; (80085d8 <__srefill_r+0xe4>)
 800856a:	491c      	ldr	r1, [pc, #112]	; (80085dc <__srefill_r+0xe8>)
 800856c:	481c      	ldr	r0, [pc, #112]	; (80085e0 <__srefill_r+0xec>)
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	f006 0609 	and.w	r6, r6, #9
 8008574:	f7fe ff4c 	bl	8007410 <_fwalk_sglue>
 8008578:	2e09      	cmp	r6, #9
 800857a:	81a7      	strh	r7, [r4, #12]
 800857c:	d103      	bne.n	8008586 <__srefill_r+0x92>
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f7ff fd41 	bl	8008008 <__sflush_r>
 8008586:	6922      	ldr	r2, [r4, #16]
 8008588:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800858a:	6963      	ldr	r3, [r4, #20]
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	6022      	str	r2, [r4, #0]
 8008590:	4628      	mov	r0, r5
 8008592:	47b0      	blx	r6
 8008594:	2800      	cmp	r0, #0
 8008596:	6060      	str	r0, [r4, #4]
 8008598:	dc1c      	bgt.n	80085d4 <__srefill_r+0xe0>
 800859a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859e:	bf17      	itett	ne
 80085a0:	2200      	movne	r2, #0
 80085a2:	f043 0320 	orreq.w	r3, r3, #32
 80085a6:	6062      	strne	r2, [r4, #4]
 80085a8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80085ac:	e7bc      	b.n	8008528 <__srefill_r+0x34>
 80085ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b0:	2900      	cmp	r1, #0
 80085b2:	d0cd      	beq.n	8008550 <__srefill_r+0x5c>
 80085b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d002      	beq.n	80085c2 <__srefill_r+0xce>
 80085bc:	4628      	mov	r0, r5
 80085be:	f7ff f94f 	bl	8007860 <_free_r>
 80085c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	2000      	movs	r0, #0
 80085c8:	6360      	str	r0, [r4, #52]	; 0x34
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0c0      	beq.n	8008550 <__srefill_r+0x5c>
 80085ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7fc      	b.n	80085d2 <__srefill_r+0xde>
 80085d8:	2000004c 	.word	0x2000004c
 80085dc:	080084d9 	.word	0x080084d9
 80085e0:	20000058 	.word	0x20000058

080085e4 <_raise_r>:
 80085e4:	291f      	cmp	r1, #31
 80085e6:	b538      	push	{r3, r4, r5, lr}
 80085e8:	4604      	mov	r4, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	d904      	bls.n	80085f8 <_raise_r+0x14>
 80085ee:	2316      	movs	r3, #22
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085fa:	b112      	cbz	r2, 8008602 <_raise_r+0x1e>
 80085fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008600:	b94b      	cbnz	r3, 8008616 <_raise_r+0x32>
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f830 	bl	8008668 <_getpid_r>
 8008608:	462a      	mov	r2, r5
 800860a:	4601      	mov	r1, r0
 800860c:	4620      	mov	r0, r4
 800860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008612:	f000 b817 	b.w	8008644 <_kill_r>
 8008616:	2b01      	cmp	r3, #1
 8008618:	d00a      	beq.n	8008630 <_raise_r+0x4c>
 800861a:	1c59      	adds	r1, r3, #1
 800861c:	d103      	bne.n	8008626 <_raise_r+0x42>
 800861e:	2316      	movs	r3, #22
 8008620:	6003      	str	r3, [r0, #0]
 8008622:	2001      	movs	r0, #1
 8008624:	e7e7      	b.n	80085f6 <_raise_r+0x12>
 8008626:	2400      	movs	r4, #0
 8008628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800862c:	4628      	mov	r0, r5
 800862e:	4798      	blx	r3
 8008630:	2000      	movs	r0, #0
 8008632:	e7e0      	b.n	80085f6 <_raise_r+0x12>

08008634 <raise>:
 8008634:	4b02      	ldr	r3, [pc, #8]	; (8008640 <raise+0xc>)
 8008636:	4601      	mov	r1, r0
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	f7ff bfd3 	b.w	80085e4 <_raise_r>
 800863e:	bf00      	nop
 8008640:	200000a4 	.word	0x200000a4

08008644 <_kill_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d07      	ldr	r5, [pc, #28]	; (8008664 <_kill_r+0x20>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f7f9 f865 	bl	8001720 <_kill>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d102      	bne.n	8008660 <_kill_r+0x1c>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	b103      	cbz	r3, 8008660 <_kill_r+0x1c>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	200003c8 	.word	0x200003c8

08008668 <_getpid_r>:
 8008668:	f7f9 b852 	b.w	8001710 <_getpid>

0800866c <_init>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr

08008678 <_fini>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr
