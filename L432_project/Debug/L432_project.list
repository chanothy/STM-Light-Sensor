
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005218  08005218  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005220  08005220  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  08005290  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005290  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df7f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b6  00000000  00000000  0002e05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084b  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021616  00000000  00000000  00031953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e231  00000000  00000000  00052f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27b9  00000000  00000000  0006119a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035e4  00000000  00000000  00123954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00126f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005104 	.word	0x08005104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005104 	.word	0x08005104

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000576:	f3ef 8310 	mrs	r3, PRIMASK
 800057a:	603b      	str	r3, [r7, #0]
  return(result);
 800057c:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 800057e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <restore>:

void restore(uint32_t priority_mask) {
 8000592:	b480      	push	{r7}
 8000594:	b085      	sub	sp, #20
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f383 8810 	msr	PRIMASK, r3
}
 80005a4:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b089      	sub	sp, #36	; 0x24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	e853 3f00 	ldrex	r3, [r3]
 80005c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	61fb      	str	r3, [r7, #28]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	69fa      	ldr	r2, [r7, #28]
 80005d2:	61ba      	str	r2, [r7, #24]
 80005d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005d6:	6979      	ldr	r1, [r7, #20]
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	e841 2300 	strex	r3, r2, [r1]
 80005de:	613b      	str	r3, [r7, #16]
   return(result);
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1e9      	bne.n	80005ba <LL_USART_EnableIT_RXNE+0x8>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3724      	adds	r7, #36	; 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	init_queue(&buf);
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x30>)
 80005fa:	f000 f8fc 	bl	80007f6 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fc24 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f817 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8a7 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f875 	bl	80006f8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x34>)
 8000610:	f000 f98a 	bl	8000928 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x38>)
 8000616:	f7ff ffcc 	bl	80005b2 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x3c>)
 800061c:	f003 fc86 	bl	8003f2c <iprintf>

  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x2c>
 8000622:	bf00      	nop
 8000624:	2000010c 	.word	0x2000010c
 8000628:	20000084 	.word	0x20000084
 800062c:	40004400 	.word	0x40004400
 8000630:	0800511c 	.word	0x0800511c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fca2 	bl	8003f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065a:	f000 ff9b 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000664:	f000 f8c2 	bl	80007ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000668:	f000 ff76 	bl	8001558 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xc0>)
 800066e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xc0>)
 8000674:	f023 0318 	bic.w	r3, r3, #24
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800067c:	2314      	movs	r3, #20
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000694:	2301      	movs	r3, #1
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ffc5 	bl	8001640 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f896 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fbc5 	bl	8001e68 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006e4:	f000 f882 	bl	80007ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e8:	f001 ffd8 	bl	800269c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 f8b0 	bl	80028a0 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f851 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0x8c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_GPIO_Init+0x8c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0x8c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0x8c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x8c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0x8c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_GPIO_Init+0x8c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_GPIO_Init+0x8c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_GPIO_Init+0x8c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0x90>)
 80007bc:	f000 feb4 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007c0:	2308      	movs	r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0x90>)
 80007d8:	f000 fd3c 	bl	8001254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>

080007f6 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 80007fe:	f7ff feb5 	bl	800056c <disable>
 8000802:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  restore(mask);
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f7ff febe 	bl	8000592 <restore>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 800082e:	f7ff fe9d 	bl	800056c <disable>
 8000832:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	425a      	negs	r2, r3
 800083c:	f003 031f 	and.w	r3, r3, #31
 8000840:	f002 021f 	and.w	r2, r2, #31
 8000844:	bf58      	it	pl
 8000846:	4253      	negpl	r3, r2
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6852      	ldr	r2, [r2, #4]
 800084c:	4293      	cmp	r3, r2
 800084e:	d014      	beq.n	800087a <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	78fa      	ldrb	r2, [r7, #3]
 800085a:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	425a      	negs	r2, r3
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	f002 021f 	and.w	r2, r2, #31
 800086c:	bf58      	it	pl
 800086e:	4253      	negpl	r3, r2
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e002      	b.n	8000880 <enqueue+0x62>
  }
  else {
    return_val=-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087e:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000880:	68b8      	ldr	r0, [r7, #8]
 8000882:	f7ff fe86 	bl	8000592 <restore>
  return (return_val);
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 800089c:	f7ff fe66 	bl	800056c <disable>
 80008a0:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d011      	beq.n	80008d2 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	425a      	negs	r2, r3
 80008c2:	f003 031f 	and.w	r3, r3, #31
 80008c6:	f002 021f 	and.w	r2, r2, #31
 80008ca:	bf58      	it	pl
 80008cc:	4253      	negpl	r3, r2
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f7ff fe5d 	bl	8000592 <restore>
  return(return_val);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	b2db      	uxtb	r3, r3
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <head>:
  }
  restore(mask);
  return (retval);
}

int head(queue_t *buf) { // checks where the head pointer is
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	int res = -1;
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f0:	60fb      	str	r3, [r7, #12]
	res = buf->head;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60fb      	str	r3, [r7, #12]
	return (res);
 80008f8:	68fb      	ldr	r3, [r7, #12]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <tail>:

int tail(queue_t *buf) { // checks where the head pointer is
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	int res = -1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000912:	60fb      	str	r3, [r7, #12]
	res = buf->tail;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	60fb      	str	r3, [r7, #12]
	return (res);
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <RetargetInit+0x28>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <RetargetInit+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6898      	ldr	r0, [r3, #8]
 800093c:	2300      	movs	r3, #0
 800093e:	2202      	movs	r2, #2
 8000940:	2100      	movs	r1, #0
 8000942:	f003 f8e5 	bl	8003b10 <setvbuf>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000144 	.word	0x20000144
 8000954:	20000064 	.word	0x20000064

08000958 <_isatty>:

int _isatty(int fd) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db04      	blt.n	8000970 <_isatty+0x18>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b02      	cmp	r3, #2
 800096a:	dc01      	bgt.n	8000970 <_isatty+0x18>
    return 1;
 800096c:	2301      	movs	r3, #1
 800096e:	e005      	b.n	800097c <_isatty+0x24>

  errno = EBADF;
 8000970:	f003 fb36 	bl	8003fe0 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	2209      	movs	r2, #9
 8000978:	601a      	str	r2, [r3, #0]
  return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_write>:

int _write(int fd, char* ptr, int len) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d002      	beq.n	800099c <_write+0x18>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d111      	bne.n	80009c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <_write+0x54>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	f001 ffc7 	bl	800293c <HAL_UART_Transmit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <_write+0x38>
      return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	e008      	b.n	80009ce <_write+0x4a>
    else
      return EIO;
 80009bc:	2305      	movs	r3, #5
 80009be:	e006      	b.n	80009ce <_write+0x4a>
  }
  errno = EBADF;
 80009c0:	f003 fb0e 	bl	8003fe0 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2209      	movs	r2, #9
 80009c8:	601a      	str	r2, [r3, #0]
  return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000144 	.word	0x20000144

080009dc <_close>:

int _close(int fd) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db04      	blt.n	80009f4 <_close+0x18>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	dc01      	bgt.n	80009f4 <_close+0x18>
    return 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e006      	b.n	8000a02 <_close+0x26>

  errno = EBADF;
 80009f4:	f003 faf4 	bl	8003fe0 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2209      	movs	r2, #9
 80009fc:	601a      	str	r2, [r3, #0]
  return -1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000a16:	f003 fae3 	bl	8003fe0 <__errno>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2209      	movs	r2, #9
 8000a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_read>:

int _read(int fd, char* ptr, int len) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d110      	bne.n	8000a60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <_read+0x4c>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a46:	2201      	movs	r2, #1
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	f002 f801 	bl	8002a50 <HAL_UART_Receive>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <_read+0x30>
      return 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e008      	b.n	8000a6e <_read+0x42>
    else
      return EIO;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	e006      	b.n	8000a6e <_read+0x42>
  }
  errno = EBADF;
 8000a60:	f003 fabe 	bl	8003fe0 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2209      	movs	r2, #9
 8000a68:	601a      	str	r2, [r3, #0]
  return -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000144 	.word	0x20000144

08000a7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db08      	blt.n	8000a9e <_fstat+0x22>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	dc05      	bgt.n	8000a9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a98:	605a      	str	r2, [r3, #4]
    return 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e005      	b.n	8000aaa <_fstat+0x2e>
  }

  errno = EBADF;
 8000a9e:	f003 fa9f 	bl	8003fe0 <__errno>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	601a      	str	r2, [r3, #0]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09e      	sub	sp, #120	; 0x78
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2254      	movs	r2, #84	; 0x54
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fa35 	bl	8003f8c <memset>
  if(huart->Instance==USART2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <HAL_UART_MspInit+0xdc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d150      	bne.n	8000bce <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fbb9 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff fe52 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b52:	6593      	str	r3, [r2, #88]	; 0x58
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0xe0>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f000 fb5d 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bac:	2303      	movs	r3, #3
 8000bae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f000 fb4b 	bl	8001254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f000 fa91 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc8:	2026      	movs	r0, #38	; 0x26
 8000bca:	f000 faaa 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3778      	adds	r7, #120	; 0x78
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f962 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c3a:	483e      	ldr	r0, [pc, #248]	; (8000d34 <USART2_IRQHandler+0x100>)
 8000c3c:	f001 ffd2 	bl	8002be4 <HAL_UART_IRQHandler>
  static uint32_t counter = 0;

  char ch;
  uint8_t data;

  const char *led_on = "LON";
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <USART2_IRQHandler+0x104>)
 8000c42:	61bb      	str	r3, [r7, #24]
  const char *led_off = "LOF";
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <USART2_IRQHandler+0x108>)
 8000c46:	617b      	str	r3, [r7, #20]

  ch = getchar();
 8000c48:	f003 f906 	bl	8003e58 <getchar>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	74fb      	strb	r3, [r7, #19]

  if (ch=='\r' || ch == '\n') {
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	2b0d      	cmp	r3, #13
 8000c54:	d002      	beq.n	8000c5c <USART2_IRQHandler+0x28>
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	2b0a      	cmp	r3, #10
 8000c5a:	d15d      	bne.n	8000d18 <USART2_IRQHandler+0xe4>
	  printf("\r\nHead / Tail: %d %d\n\r",head(&buf),tail(&buf)); //print where the ptrs are
 8000c5c:	4838      	ldr	r0, [pc, #224]	; (8000d40 <USART2_IRQHandler+0x10c>)
 8000c5e:	f7ff fe41 	bl	80008e4 <head>
 8000c62:	4604      	mov	r4, r0
 8000c64:	4836      	ldr	r0, [pc, #216]	; (8000d40 <USART2_IRQHandler+0x10c>)
 8000c66:	f7ff fe4e 	bl	8000906 <tail>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4621      	mov	r1, r4
 8000c70:	4834      	ldr	r0, [pc, #208]	; (8000d44 <USART2_IRQHandler+0x110>)
 8000c72:	f003 f95b 	bl	8003f2c <iprintf>
	  data = dequeue(&buf);
 8000c76:	4832      	ldr	r0, [pc, #200]	; (8000d40 <USART2_IRQHandler+0x10c>)
 8000c78:	f7ff fe0a 	bl	8000890 <dequeue>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	77fb      	strb	r3, [r7, #31]
	  while (data!=0) {
 8000c80:	e00e      	b.n	8000ca0 <USART2_IRQHandler+0x6c>
		  command[counter] = data;
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <USART2_IRQHandler+0x114>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4931      	ldr	r1, [pc, #196]	; (8000d4c <USART2_IRQHandler+0x118>)
 8000c88:	7ffa      	ldrb	r2, [r7, #31]
 8000c8a:	54ca      	strb	r2, [r1, r3]
		  counter++;
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <USART2_IRQHandler+0x114>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <USART2_IRQHandler+0x114>)
 8000c94:	6013      	str	r3, [r2, #0]
		  data = dequeue(&buf);
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <USART2_IRQHandler+0x10c>)
 8000c98:	f7ff fdfa 	bl	8000890 <dequeue>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	77fb      	strb	r3, [r7, #31]
	  while (data!=0) {
 8000ca0:	7ffb      	ldrb	r3, [r7, #31]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ed      	bne.n	8000c82 <USART2_IRQHandler+0x4e>
	  }
	  //printf("\n\r");
	  char command_str[17]; // Assuming command has a maximum length of 16 bytes
	  snprintf(command_str, sizeof(command_str), "%s", command); //turns command into str
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <USART2_IRQHandler+0x118>)
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <USART2_IRQHandler+0x11c>)
 8000cac:	2111      	movs	r1, #17
 8000cae:	f002 ffdd 	bl	8003c6c <sniprintf>
	  printf("Command String: %s\n\r", command_str);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <USART2_IRQHandler+0x120>)
 8000cb8:	f003 f938 	bl	8003f2c <iprintf>

	  if (strstr(command_str,led_on) != NULL) {
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 f94d 	bl	8003f60 <strstr>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d008      	beq.n	8000cde <USART2_IRQHandler+0xaa>
		  printf("led_on\n\r");
 8000ccc:	4822      	ldr	r0, [pc, #136]	; (8000d58 <USART2_IRQHandler+0x124>)
 8000cce:	f003 f92d 	bl	8003f2c <iprintf>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <USART2_IRQHandler+0x128>)
 8000cd8:	f000 fc26 	bl	8001528 <HAL_GPIO_WritePin>
 8000cdc:	e013      	b.n	8000d06 <USART2_IRQHandler+0xd2>
	  }
	  else if (strstr(command_str,led_off) != NULL) {
 8000cde:	463b      	mov	r3, r7
 8000ce0:	6979      	ldr	r1, [r7, #20]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 f93c 	bl	8003f60 <strstr>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d008      	beq.n	8000d00 <USART2_IRQHandler+0xcc>
		  printf("led_off\n\r");
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <USART2_IRQHandler+0x12c>)
 8000cf0:	f003 f91c 	bl	8003f2c <iprintf>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <USART2_IRQHandler+0x128>)
 8000cfa:	f000 fc15 	bl	8001528 <HAL_GPIO_WritePin>
 8000cfe:	e002      	b.n	8000d06 <USART2_IRQHandler+0xd2>
	  }
	  else {
		  printf("invalid_command\n\r");
 8000d00:	4818      	ldr	r0, [pc, #96]	; (8000d64 <USART2_IRQHandler+0x130>)
 8000d02:	f003 f913 	bl	8003f2c <iprintf>
	  }
	  memset(command, 0, sizeof(command));
 8000d06:	2210      	movs	r2, #16
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <USART2_IRQHandler+0x118>)
 8000d0c:	f003 f93e 	bl	8003f8c <memset>
	  counter = 0;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <USART2_IRQHandler+0x114>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
  if (ch=='\r' || ch == '\n') {
 8000d16:	e009      	b.n	8000d2c <USART2_IRQHandler+0xf8>
  }
  else {
	  putchar(ch);
 8000d18:	7cfb      	ldrb	r3, [r7, #19]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f918 	bl	8003f50 <putchar>
	  enqueue(&buf,ch);
 8000d20:	7cfb      	ldrb	r3, [r7, #19]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <USART2_IRQHandler+0x10c>)
 8000d26:	f7ff fd7a 	bl	800081e <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000084 	.word	0x20000084
 8000d38:	08005134 	.word	0x08005134
 8000d3c:	08005138 	.word	0x08005138
 8000d40:	2000010c 	.word	0x2000010c
 8000d44:	0800513c 	.word	0x0800513c
 8000d48:	20000148 	.word	0x20000148
 8000d4c:	20000134 	.word	0x20000134
 8000d50:	08005154 	.word	0x08005154
 8000d54:	08005158 	.word	0x08005158
 8000d58:	08005170 	.word	0x08005170
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	0800517c 	.word	0x0800517c
 8000d64:	08005188 	.word	0x08005188

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 f922 	bl	8003fe0 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20010000 	.word	0x20010000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	2000014c 	.word	0x2000014c
 8000dd0:	200002a0 	.word	0x200002a0

08000dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 f8e1 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fbe3 	bl	80005f4 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e3c:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 8000e40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e44:	200002a0 	.word	0x200002a0

08000e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f93d 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f80e 	bl	8000e7c <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff fe22 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_InitTick+0x70>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f949 	bl	800113e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d809      	bhi.n	8000ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f913 	bl	80010ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_InitTick+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e007      	b.n	8000edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e004      	b.n	8000edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e001      	b.n	8000edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000150 	.word	0x20000150

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000150 	.word	0x20000150

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2204      	movs	r2, #4
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e022      	b.n	80011c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 020e 	bic.w	r2, r2, #14
 800118e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f003 021c 	and.w	r2, r3, #28
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d005      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2204      	movs	r2, #4
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e029      	b.n	800124a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 020e 	bic.w	r2, r2, #14
 8001204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f003 021c 	and.w	r2, r3, #28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
    }
  }
  return status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e148      	b.n	80014f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 813a 	beq.w	80014f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8094 	beq.w	80014f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_GPIO_Init+0x2c0>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x2c0>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6613      	str	r3, [r2, #96]	; 0x60
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x2c0>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_GPIO_Init+0x2c4>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140a:	d00d      	beq.n	8001428 <HAL_GPIO_Init+0x1d4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_GPIO_Init+0x2c8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_Init+0x1d0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a42      	ldr	r2, [pc, #264]	; (8001520 <HAL_GPIO_Init+0x2cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_GPIO_Init+0x1cc>
 800141c:	2302      	movs	r3, #2
 800141e:	e004      	b.n	800142a <HAL_GPIO_Init+0x1d6>
 8001420:	2307      	movs	r3, #7
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x1d6>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_GPIO_Init+0x1d6>
 8001428:	2300      	movs	r3, #0
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	f002 0203 	and.w	r2, r2, #3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	4093      	lsls	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143a:	4937      	ldr	r1, [pc, #220]	; (8001518 <HAL_GPIO_Init+0x2c4>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800146c:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c0:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f aeaf 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	48000400 	.word	0x48000400
 8001520:	48000800 	.word	0x48000800
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_PWREx_GetVoltageRange+0x18>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a2:	d130      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b0:	d038      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9b      	lsrs	r3, r3, #18
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d8:	e002      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d102      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001600:	d110      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e00f      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001612:	d007      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000
 8001638:	20000000 	.word	0x20000000
 800163c:	431bde83 	.word	0x431bde83

08001640 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f000 bc02 	b.w	8001e58 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165e:	4b94      	ldr	r3, [pc, #592]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80e4 	beq.w	800183e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_RCC_OscConfig+0x4c>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	f040 808b 	bne.w	800179a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 8087 	bne.w	800179a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x64>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e3d9      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_RCC_OscConfig+0x7e>
 80016b4:	4b7e      	ldr	r3, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016bc:	e005      	b.n	80016ca <HAL_RCC_OscConfig+0x8a>
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d223      	bcs.n	8001716 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fd8c 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3ba      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	496d      	ldr	r1, [pc, #436]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001700:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4968      	ldr	r1, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e025      	b.n	8001762 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001716:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4960      	ldr	r1, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	495b      	ldr	r1, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd4c 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e37a      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001762:	f000 fc81 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	4950      	ldr	r1, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x278>)
 8001780:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb78 	bl	8000e7c <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d052      	beq.n	800183c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	e35e      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d032      	beq.n	8001808 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a42      	ldr	r2, [pc, #264]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fbb5 	bl	8000f1c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b6:	f7ff fbb1 	bl	8000f1c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e347      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a35      	ldr	r2, [pc, #212]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4930      	ldr	r1, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	492b      	ldr	r1, [pc, #172]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e01a      	b.n	800183e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb82 	bl	8000f1c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181c:	f7ff fb7e 	bl	8000f1c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e314      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1dc>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d073      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x21c>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d10e      	bne.n	8001874 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d10b      	bne.n	8001874 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d063      	beq.n	8001930 <HAL_RCC_OscConfig+0x2f0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d15f      	bne.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e2f1      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x24c>
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e025      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d114      	bne.n	80018c0 <HAL_RCC_OscConfig+0x280>
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a02      	ldr	r2, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	0800519c 	.word	0x0800519c
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004
 80018c0:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9f      	ldr	r2, [pc, #636]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9c      	ldr	r2, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb1c 	bl	8000f1c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb18 	bl	8000f1c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e2ae      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2a8>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fb08 	bl	8000f1c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fb04 	bl	8000f1c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e29a      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x2d0>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d060      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x310>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d119      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d116      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x328>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e277      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4973      	ldr	r1, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e040      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d023      	beq.n	80019ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fac3 	bl	8000f1c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fabf 	bl	8000f1c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e255      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	495f      	ldr	r1, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff fa9f 	bl	8000f1c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fa9b 	bl	8000f1c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e231      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fa7a 	bl	8000f1c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fa76 	bl	8000f1c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e20c      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ef      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3ec>
 8001a4c:	e01b      	b.n	8001a86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a54:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa5d 	bl	8000f1c <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fa59 	bl	8000f1c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1ef      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a6 	beq.w	8001be0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fa20 	bl	8000f1c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7ff fa1c 	bl	8000f1c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1b2      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d8>
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e029      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_OscConfig+0x50c>
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	4b9a      	ldr	r3, [pc, #616]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a99      	ldr	r2, [pc, #612]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	4b96      	ldr	r3, [pc, #600]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a95      	ldr	r2, [pc, #596]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f9d2 	bl	8000f1c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f9ce 	bl	8000f1c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e162      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b89      	ldr	r3, [pc, #548]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ed      	beq.n	8001b7c <HAL_RCC_OscConfig+0x53c>
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f9bb 	bl	8000f1c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f9b7 	bl	8000f1c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e14b      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ed      	bne.n	8001baa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf4:	4b70      	ldr	r3, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfa:	4a6f      	ldr	r2, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f98a 	bl	8000f1c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0c:	f7ff f986 	bl	8000f1c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e11c      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1e:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_RCC_OscConfig+0x5cc>
 8001c2c:	e01b      	b.n	8001c66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c34:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f96d 	bl	8000f1c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c46:	f7ff f969 	bl	8000f1c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0ff      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c58:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80f3 	beq.w	8001e56 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	f040 80c9 	bne.w	8001e0c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c7a:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d123      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d11b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d113      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d06b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d062      	beq.n	8001db4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0ac      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2d      	ldr	r2, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d0a:	f7ff f907 	bl	8000f1c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff f903 	bl	8000f1c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e099      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x77c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d40:	3a01      	subs	r2, #1
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d4a:	0212      	lsls	r2, r2, #8
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d52:	0852      	lsrs	r2, r2, #1
 8001d54:	3a01      	subs	r2, #1
 8001d56:	0552      	lsls	r2, r2, #21
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d5e:	0852      	lsrs	r2, r2, #1
 8001d60:	3a01      	subs	r2, #1
 8001d62:	0652      	lsls	r2, r2, #25
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d6a:	06d2      	lsls	r2, r2, #27
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	4912      	ldr	r1, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d8c:	f7ff f8c6 	bl	8000f1c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff f8c2 	bl	8000f1c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e058      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCC_OscConfig+0x778>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db2:	e050      	b.n	8001e56 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04f      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d144      	bne.n	8001e56 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de4:	f7ff f89a 	bl	8000f1c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f896 	bl	8000f1c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e02c      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x7ac>
 8001e0a:	e024      	b.n	8001e56 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d01f      	beq.n	8001e52 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f87d 	bl	8000f1c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f879 	bl	8000f1c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4905      	ldr	r1, [pc, #20]	; (8001e60 <HAL_RCC_OscConfig+0x820>)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x824>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
 8001e50:	e001      	b.n	8001e56 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	feeefffc 	.word	0xfeeefffc

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0e7      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d910      	bls.n	8001eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b72      	ldr	r3, [pc, #456]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4970      	ldr	r1, [pc, #448]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0cf      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d010      	beq.n	8001eda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d908      	bls.n	8001eda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4960      	ldr	r1, [pc, #384]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d04c      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d121      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0a6      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d115      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e09a      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e08e      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e086      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4943      	ldr	r1, [pc, #268]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe ffe4 	bl	8000f1c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe ffe0 	bl	8000f1c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e06e      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d208      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	492b      	ldr	r1, [pc, #172]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d210      	bcs.n	8001fde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 0207 	bic.w	r2, r3, #7
 8001fc4:	4923      	ldr	r1, [pc, #140]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e036      	b.n	800204c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4918      	ldr	r1, [pc, #96]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4910      	ldr	r1, [pc, #64]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201c:	f000 f824 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1f4>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1f8>)
 800203a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1fc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe ff1b 	bl	8000e7c <HAL_InitTick>
 8002046:	4603      	mov	r3, r0
 8002048:	72fb      	strb	r3, [r7, #11]

  return status;
 800204a:	7afb      	ldrb	r3, [r7, #11]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40022000 	.word	0x40022000
 8002058:	40021000 	.word	0x40021000
 800205c:	0800519c 	.word	0x0800519c
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x34>
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d121      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d11e      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020c4:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_GetSysClockFreq+0x110>)
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e004      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_GetSysClockFreq+0x114>)
 80020ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d134      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0xa6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xac>
 800210c:	e005      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCC_GetSysClockFreq+0x110>)
 8002110:	617b      	str	r3, [r7, #20]
      break;
 8002112:	e005      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_GetSysClockFreq+0x114>)
 8002116:	617b      	str	r3, [r7, #20]
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	617b      	str	r3, [r7, #20]
      break;
 800211e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	fb03 f202 	mul.w	r2, r3, r2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_GetSysClockFreq+0x108>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	0e5b      	lsrs	r3, r3, #25
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	3301      	adds	r3, #1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002160:	69bb      	ldr	r3, [r7, #24]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	080051b4 	.word	0x080051b4
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200

08002180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800219c:	f7ff fff0 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	080051ac 	.word	0x080051ac

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c8:	f7ff ffda 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080051ac 	.word	0x080051ac

080021f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002208:	f7ff f9b6 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 800220c:	6178      	str	r0, [r7, #20]
 800220e:	e014      	b.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f9a6 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d10b      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d919      	bls.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2ba0      	cmp	r3, #160	; 0xa0
 800224c:	d902      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e013      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e010      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d902      	bls.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002260:	2303      	movs	r3, #3
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e00a      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d102      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e004      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b70      	cmp	r3, #112	; 0x70
 8002276:	d101      	bne.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0207 	bic.w	r2, r3, #7
 8002284:	4909      	ldr	r1, [pc, #36]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d031      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d4:	d01a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022da:	d814      	bhi.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e4:	d10f      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022e6:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f2:	e00c      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f9de 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002304:	e003      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	74fb      	strb	r3, [r7, #19]
      break;
 800230a:	e000      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800230c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002314:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	494e      	ldr	r1, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232a:	e001      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 809e 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	4a3f      	ldr	r2, [pc, #252]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a39      	ldr	r2, [pc, #228]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002380:	f7fe fdcc 	bl	8000f1c <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002386:	e009      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe fdc8 	bl	8000f1c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d902      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	74fb      	strb	r3, [r7, #19]
        break;
 800239a:	e005      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d15a      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d019      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fd88 	bl	8000f1c <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240e:	e00b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fd84 	bl	8000f1c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d902      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	74fb      	strb	r3, [r7, #19]
            break;
 8002426:	e006      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ec      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002452:	e009      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
 8002458:	e006      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002468:	7c7b      	ldrb	r3, [r7, #17]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	4a89      	ldr	r2, [pc, #548]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002486:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 0203 	bic.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4980      	ldr	r1, [pc, #512]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a8:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 020c 	bic.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	4978      	ldr	r1, [pc, #480]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ca:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	496f      	ldr	r1, [pc, #444]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	4967      	ldr	r1, [pc, #412]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	495e      	ldr	r1, [pc, #376]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	4956      	ldr	r1, [pc, #344]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d028      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002574:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4945      	ldr	r1, [pc, #276]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002592:	d106      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e011      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f882 	bl	80026bc <RCCEx_PLLSAI1_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d028      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	492d      	ldr	r1, [pc, #180]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f0:	d106      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fc:	60d3      	str	r3, [r2, #12]
 80025fe:	e011      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002608:	d10c      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f853 	bl	80026bc <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01c      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264e:	d10c      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f830 	bl	80026bc <RCCEx_PLLSAI1_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800268c:	7cbb      	ldrb	r3, [r7, #18]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000

080026bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d018      	beq.n	8002708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026d6:	4b71      	ldr	r3, [pc, #452]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0203 	and.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ee:	4b6b      	ldr	r3, [pc, #428]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
       ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d047      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e044      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d018      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x86>
 8002710:	2b03      	cmp	r3, #3
 8002712:	d825      	bhi.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d002      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x62>
 8002718:	2b02      	cmp	r3, #2
 800271a:	d009      	beq.n	8002730 <RCCEx_PLLSAI1_Config+0x74>
 800271c:	e020      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800271e:	4b5f      	ldr	r3, [pc, #380]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11d      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e01a      	b.n	8002766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e013      	b.n	800276a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002742:	4b56      	ldr	r3, [pc, #344]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800274e:	4b53      	ldr	r3, [pc, #332]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800275e:	e006      	b.n	800276e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e004      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	430b      	orrs	r3, r1
 800278c:	4943      	ldr	r1, [pc, #268]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d17c      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3f      	ldr	r2, [pc, #252]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fbba 	bl	8000f1c <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027aa:	e009      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe fbb6 	bl	8000f1c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]
        break;
 80027be:	e005      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ef      	bne.n	80027ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d15f      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d110      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d8:	4b30      	ldr	r3, [pc, #192]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	0211      	lsls	r1, r2, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	06d2      	lsls	r2, r2, #27
 80027f0:	430a      	orrs	r2, r1
 80027f2:	492a      	ldr	r1, [pc, #168]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	610b      	str	r3, [r1, #16]
 80027f8:	e027      	b.n	800284a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d112      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002808:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6892      	ldr	r2, [r2, #8]
 8002810:	0211      	lsls	r1, r2, #8
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6912      	ldr	r2, [r2, #16]
 8002816:	0852      	lsrs	r2, r2, #1
 8002818:	3a01      	subs	r2, #1
 800281a:	0552      	lsls	r2, r2, #21
 800281c:	430a      	orrs	r2, r1
 800281e:	491f      	ldr	r1, [pc, #124]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	610b      	str	r3, [r1, #16]
 8002824:	e011      	b.n	800284a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800282e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	0211      	lsls	r1, r2, #8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6952      	ldr	r2, [r2, #20]
 800283c:	0852      	lsrs	r2, r2, #1
 800283e:	3a01      	subs	r2, #1
 8002840:	0652      	lsls	r2, r2, #25
 8002842:	430a      	orrs	r2, r1
 8002844:	4915      	ldr	r1, [pc, #84]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002846:	4313      	orrs	r3, r2
 8002848:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002854:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe fb61 	bl	8000f1c <HAL_GetTick>
 800285a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800285c:	e009      	b.n	8002872 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800285e:	f7fe fb5d 	bl	8000f1c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	73fb      	strb	r3, [r7, #15]
          break;
 8002870:	e005      	b.n	800287e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <RCCEx_PLLSAI1_Config+0x1e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e040      	b.n	8002934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f91a 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 feb2 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fc83 	bl	80031f8 <UART_SetConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e01b      	b.n	8002934 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 ff31 	bl	8003794 <UART_CheckIdleState>
 8002932:	4603      	mov	r3, r0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002950:	2b20      	cmp	r3, #32
 8002952:	d178      	bne.n	8002a46 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_UART_Transmit+0x24>
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e071      	b.n	8002a48 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002972:	f7fe fad3 	bl	8000f1c <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d108      	bne.n	80029a4 <HAL_UART_Transmit+0x68>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e003      	b.n	80029ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029ac:	e030      	b.n	8002a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 ff93 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e03c      	b.n	8002a48 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	b292      	uxth	r2, r2
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	3302      	adds	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e008      	b.n	80029fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b292      	uxth	r2, r2
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1c8      	bne.n	80029ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2140      	movs	r1, #64	; 0x40
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 ff5c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e005      	b.n	8002a48 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	f040 80b6 	bne.w	8002bd8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Receive+0x28>
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ae      	b.n	8002bda <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2222      	movs	r2, #34	; 0x22
 8002a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fa43 	bl	8000f1c <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_UART_Receive+0x80>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_Receive+0x76>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ac4:	e02d      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ace:	e028      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_UART_Receive+0xa4>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_UART_Receive+0x9a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	; 0xff
 8002ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ae8:	e01b      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	227f      	movs	r2, #127	; 0x7f
 8002aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af2:	e016      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afc:	d10d      	bne.n	8002b1a <HAL_UART_Receive+0xca>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Receive+0xc0>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	227f      	movs	r2, #127	; 0x7f
 8002b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b0e:	e008      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	223f      	movs	r2, #63	; 0x3f
 8002b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b18:	e003      	b.n	8002b22 <HAL_UART_Receive+0xd2>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b28:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b32:	d108      	bne.n	8002b46 <HAL_UART_Receive+0xf6>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e003      	b.n	8002b4e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b4e:	e037      	b.n	8002bc0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2120      	movs	r1, #32
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fec2 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e033      	b.n	8002bda <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10c      	bne.n	8002b92 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	8a7b      	ldrh	r3, [r7, #18]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e00d      	b.n	8002bae <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	8a7b      	ldrh	r3, [r7, #18]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1c1      	bne.n	8002b50 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ba      	sub	sp, #232	; 0xe8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c12:	4013      	ands	r3, r2
 8002c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 82ae 	beq.w	800319e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
      }
      return;
 8002c4a:	e2a8      	b.n	800319e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8117 	beq.w	8002e84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c66:	4b85      	ldr	r3, [pc, #532]	; (8002e7c <HAL_UART_IRQHandler+0x298>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 810a 	beq.w	8002e84 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d011      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xbc>
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d011      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xec>
 8002cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc6:	f043 0204 	orr.w	r2, r3, #4
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d011      	beq.n	8002d00 <HAL_UART_IRQHandler+0x11c>
 8002cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2204      	movs	r2, #4
 8002cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d32:	f043 0208 	orr.w	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <HAL_UART_IRQHandler+0x18a>
 8002d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8214 	beq.w	80031a2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04f      	beq.n	8002e66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fdf3 	bl	80039b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d141      	bne.n	8002e5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1d9      	bne.n	8002dda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_UART_IRQHandler+0x29c>)
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f9c9 	bl	80011d2 <HAL_DMA_Abort_IT>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d017      	beq.n	8002e76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	e00f      	b.n	8002e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f9b8 	bl	80031cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	e00b      	b.n	8002e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9b4 	bl	80031cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e007      	b.n	8002e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9b0 	bl	80031cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e74:	e195      	b.n	80031a2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e76:	bf00      	nop
    return;
 8002e78:	e193      	b.n	80031a2 <HAL_UART_IRQHandler+0x5be>
 8002e7a:	bf00      	nop
 8002e7c:	04000120 	.word	0x04000120
 8002e80:	08003a7b 	.word	0x08003a7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 814e 	bne.w	800312a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8147 	beq.w	800312a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8140 	beq.w	800312a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	f040 80b8 	bne.w	8003032 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ece:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8167 	beq.w	80031a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	f080 815f 	bcs.w	80031a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 8086 	bne.w	8003010 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1da      	bne.n	8002f04 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3308      	adds	r3, #8
 8002f54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e1      	bne.n	8002f4e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3308      	adds	r3, #8
 8002f90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e3      	bne.n	8002f8a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	f023 0310 	bic.w	r3, r3, #16
 8002fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e4      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe f8a3 	bl	8001156 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003022:	b29b      	uxth	r3, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8d8 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003030:	e0b9      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800303e:	b29b      	uxth	r3, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80ab 	beq.w	80031aa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a6 	beq.w	80031aa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e4      	bne.n	800305e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	623b      	str	r3, [r7, #32]
   return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3308      	adds	r3, #8
 80030b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030b8:	633a      	str	r2, [r7, #48]	; 0x30
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e3      	bne.n	8003094 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	617b      	str	r3, [r7, #20]
   return(result);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800311c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f85c 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003128:	e03f      	b.n	80031aa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <HAL_UART_IRQHandler+0x570>
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800314a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fcd4 	bl	8003afa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003152:	e02d      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    }
    return;
 800317c:	e017      	b.n	80031ae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fc85 	bl	8003aa6 <UART_EndTransmit_IT>
    return;
 800319c:	e008      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800319e:	bf00      	nop
 80031a0:	e006      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80031ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031b0:	37e8      	adds	r7, #232	; 0xe8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop

080031b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b08a      	sub	sp, #40	; 0x28
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4313      	orrs	r3, r2
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4bb4      	ldr	r3, [pc, #720]	; (80034f8 <UART_SetConfig+0x300>)
 8003228:	4013      	ands	r3, r2
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003230:	430b      	orrs	r3, r1
 8003232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4aa9      	ldr	r2, [pc, #676]	; (80034fc <UART_SetConfig+0x304>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	4313      	orrs	r3, r2
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4aa0      	ldr	r2, [pc, #640]	; (8003500 <UART_SetConfig+0x308>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d126      	bne.n	80032d0 <UART_SetConfig+0xd8>
 8003282:	4ba0      	ldr	r3, [pc, #640]	; (8003504 <UART_SetConfig+0x30c>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b03      	cmp	r3, #3
 800328e:	d81b      	bhi.n	80032c8 <UART_SetConfig+0xd0>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0xa0>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b9 	.word	0x080032b9
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032c1 	.word	0x080032c1
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e080      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e07c      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e078      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e074      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e070      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a8c      	ldr	r2, [pc, #560]	; (8003508 <UART_SetConfig+0x310>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d138      	bne.n	800334c <UART_SetConfig+0x154>
 80032da:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <UART_SetConfig+0x30c>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d82d      	bhi.n	8003344 <UART_SetConfig+0x14c>
 80032e8:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0xf8>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003345 	.word	0x08003345
 80032f8:	08003345 	.word	0x08003345
 80032fc:	08003345 	.word	0x08003345
 8003300:	08003335 	.word	0x08003335
 8003304:	08003345 	.word	0x08003345
 8003308:	08003345 	.word	0x08003345
 800330c:	08003345 	.word	0x08003345
 8003310:	0800332d 	.word	0x0800332d
 8003314:	08003345 	.word	0x08003345
 8003318:	08003345 	.word	0x08003345
 800331c:	08003345 	.word	0x08003345
 8003320:	0800333d 	.word	0x0800333d
 8003324:	2300      	movs	r3, #0
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e042      	b.n	80033b2 <UART_SetConfig+0x1ba>
 800332c:	2302      	movs	r3, #2
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e03e      	b.n	80033b2 <UART_SetConfig+0x1ba>
 8003334:	2304      	movs	r3, #4
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	e03a      	b.n	80033b2 <UART_SetConfig+0x1ba>
 800333c:	2308      	movs	r3, #8
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003342:	e036      	b.n	80033b2 <UART_SetConfig+0x1ba>
 8003344:	2310      	movs	r3, #16
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334a:	e032      	b.n	80033b2 <UART_SetConfig+0x1ba>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6a      	ldr	r2, [pc, #424]	; (80034fc <UART_SetConfig+0x304>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12a      	bne.n	80033ac <UART_SetConfig+0x1b4>
 8003356:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <UART_SetConfig+0x30c>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003364:	d01a      	beq.n	800339c <UART_SetConfig+0x1a4>
 8003366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800336a:	d81b      	bhi.n	80033a4 <UART_SetConfig+0x1ac>
 800336c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003370:	d00c      	beq.n	800338c <UART_SetConfig+0x194>
 8003372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003376:	d815      	bhi.n	80033a4 <UART_SetConfig+0x1ac>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <UART_SetConfig+0x18c>
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003380:	d008      	beq.n	8003394 <UART_SetConfig+0x19c>
 8003382:	e00f      	b.n	80033a4 <UART_SetConfig+0x1ac>
 8003384:	2300      	movs	r3, #0
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e012      	b.n	80033b2 <UART_SetConfig+0x1ba>
 800338c:	2302      	movs	r3, #2
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003392:	e00e      	b.n	80033b2 <UART_SetConfig+0x1ba>
 8003394:	2304      	movs	r3, #4
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e00a      	b.n	80033b2 <UART_SetConfig+0x1ba>
 800339c:	2308      	movs	r3, #8
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e006      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80033a4:	2310      	movs	r3, #16
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e002      	b.n	80033b2 <UART_SetConfig+0x1ba>
 80033ac:	2310      	movs	r3, #16
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a51      	ldr	r2, [pc, #324]	; (80034fc <UART_SetConfig+0x304>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d17a      	bne.n	80034b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d824      	bhi.n	800340e <UART_SetConfig+0x216>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0x1d4>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033f9 	.word	0x080033f9
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	080033ff 	.word	0x080033ff
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	0800340f 	.word	0x0800340f
 80033e8:	0800340f 	.word	0x0800340f
 80033ec:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7fe fed2 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80033f4:	61f8      	str	r0, [r7, #28]
        break;
 80033f6:	e010      	b.n	800341a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b44      	ldr	r3, [pc, #272]	; (800350c <UART_SetConfig+0x314>)
 80033fa:	61fb      	str	r3, [r7, #28]
        break;
 80033fc:	e00d      	b.n	800341a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7fe fe33 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8003402:	61f8      	str	r0, [r7, #28]
        break;
 8003404:	e009      	b.n	800341a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	61fb      	str	r3, [r7, #28]
        break;
 800340c:	e005      	b.n	800341a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8107 	beq.w	8003630 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d305      	bcc.n	800343e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	429a      	cmp	r2, r3
 800343c:	d903      	bls.n	8003446 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003444:	e0f4      	b.n	8003630 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2200      	movs	r2, #0
 800344a:	461c      	mov	r4, r3
 800344c:	4615      	mov	r5, r2
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	022b      	lsls	r3, r5, #8
 8003458:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800345c:	0222      	lsls	r2, r4, #8
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	0849      	lsrs	r1, r1, #1
 8003464:	2000      	movs	r0, #0
 8003466:	4688      	mov	r8, r1
 8003468:	4681      	mov	r9, r0
 800346a:	eb12 0a08 	adds.w	sl, r2, r8
 800346e:	eb43 0b09 	adc.w	fp, r3, r9
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	4650      	mov	r0, sl
 8003482:	4659      	mov	r1, fp
 8003484:	f7fc fef4 	bl	8000270 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003496:	d308      	bcc.n	80034aa <UART_SetConfig+0x2b2>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d204      	bcs.n	80034aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e0c2      	b.n	8003630 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034b0:	e0be      	b.n	8003630 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d16a      	bne.n	8003592 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d834      	bhi.n	800352e <UART_SetConfig+0x336>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x2d4>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003519 	.word	0x08003519
 80034d8:	0800352f 	.word	0x0800352f
 80034dc:	0800351f 	.word	0x0800351f
 80034e0:	0800352f 	.word	0x0800352f
 80034e4:	0800352f 	.word	0x0800352f
 80034e8:	0800352f 	.word	0x0800352f
 80034ec:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fe52 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e020      	b.n	800353a <UART_SetConfig+0x342>
 80034f8:	efff69f3 	.word	0xefff69f3
 80034fc:	40008000 	.word	0x40008000
 8003500:	40013800 	.word	0x40013800
 8003504:	40021000 	.word	0x40021000
 8003508:	40004400 	.word	0x40004400
 800350c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7fe fe58 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8003514:	61f8      	str	r0, [r7, #28]
        break;
 8003516:	e010      	b.n	800353a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b4c      	ldr	r3, [pc, #304]	; (800364c <UART_SetConfig+0x454>)
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe fda3 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8003522:	61f8      	str	r0, [r7, #28]
        break;
 8003524:	e009      	b.n	800353a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e005      	b.n	800353a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003538:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d077      	beq.n	8003630 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005a      	lsls	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d916      	bls.n	800358a <UART_SetConfig+0x392>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	d212      	bcs.n	800358a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f023 030f 	bic.w	r3, r3, #15
 800356c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	b29a      	uxth	r2, r3
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	4313      	orrs	r3, r2
 800357e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	8afa      	ldrh	r2, [r7, #22]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e052      	b.n	8003630 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003590:	e04e      	b.n	8003630 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003596:	2b08      	cmp	r3, #8
 8003598:	d827      	bhi.n	80035ea <UART_SetConfig+0x3f2>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <UART_SetConfig+0x3a8>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035cd 	.word	0x080035cd
 80035a8:	080035d5 	.word	0x080035d5
 80035ac:	080035eb 	.word	0x080035eb
 80035b0:	080035db 	.word	0x080035db
 80035b4:	080035eb 	.word	0x080035eb
 80035b8:	080035eb 	.word	0x080035eb
 80035bc:	080035eb 	.word	0x080035eb
 80035c0:	080035e3 	.word	0x080035e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c4:	f7fe fde8 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 80035c8:	61f8      	str	r0, [r7, #28]
        break;
 80035ca:	e014      	b.n	80035f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7fe fdfa 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80035d0:	61f8      	str	r0, [r7, #28]
        break;
 80035d2:	e010      	b.n	80035f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <UART_SetConfig+0x454>)
 80035d6:	61fb      	str	r3, [r7, #28]
        break;
 80035d8:	e00d      	b.n	80035f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035da:	f7fe fd45 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80035de:	61f8      	str	r0, [r7, #28]
        break;
 80035e0:	e009      	b.n	80035f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e6:	61fb      	str	r3, [r7, #28]
        break;
 80035e8:	e005      	b.n	80035f6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035f4:	bf00      	nop
    }

    if (pclk != 0U)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d019      	beq.n	8003630 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	085a      	lsrs	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	d909      	bls.n	800362a <UART_SetConfig+0x432>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d205      	bcs.n	800362a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	e002      	b.n	8003630 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800363c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364a:	bf00      	nop
 800364c:	00f42400 	.word	0x00f42400

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b098      	sub	sp, #96	; 0x60
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd fbba 	bl	8000f1c <HAL_GetTick>
 80037a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d12e      	bne.n	8003816 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e6:	653b      	str	r3, [r7, #80]	; 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
 80037f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e062      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d149      	bne.n	80038b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f856 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	623b      	str	r3, [r7, #32]
   return(result);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
 800385e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	617b      	str	r3, [r7, #20]
   return(result);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e011      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3758      	adds	r7, #88	; 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e049      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fc:	d045      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd fb0d 	bl	8000f1c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e048      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d031      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b08      	cmp	r3, #8
 8003932:	d110      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2208      	movs	r2, #8
 800393a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f838 	bl	80039b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2208      	movs	r2, #8
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e029      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d111      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f81e 	bl	80039b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00f      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d0a6      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b095      	sub	sp, #84	; 0x54
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
 80039da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e6      	bne.n	80039ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3308      	adds	r3, #8
 80039f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d118      	bne.n	8003a5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	613b      	str	r3, [r7, #16]
   return(result);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e6      	bne.n	8003a28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a6e:	bf00      	nop
 8003a70:	3754      	adds	r7, #84	; 0x54
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fb97 	bl	80031cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6979      	ldr	r1, [r7, #20]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e6      	bne.n	8003aae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fb63 	bl	80031b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af2:	bf00      	nop
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <setvbuf>:
 8003b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b14:	461d      	mov	r5, r3
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <setvbuf+0x158>)
 8003b18:	681f      	ldr	r7, [r3, #0]
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460e      	mov	r6, r1
 8003b1e:	4690      	mov	r8, r2
 8003b20:	b127      	cbz	r7, 8003b2c <setvbuf+0x1c>
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	b913      	cbnz	r3, 8003b2c <setvbuf+0x1c>
 8003b26:	4638      	mov	r0, r7
 8003b28:	f000 f960 	bl	8003dec <__sinit>
 8003b2c:	f1b8 0f02 	cmp.w	r8, #2
 8003b30:	d006      	beq.n	8003b40 <setvbuf+0x30>
 8003b32:	f1b8 0f01 	cmp.w	r8, #1
 8003b36:	f200 8094 	bhi.w	8003c62 <setvbuf+0x152>
 8003b3a:	2d00      	cmp	r5, #0
 8003b3c:	f2c0 8091 	blt.w	8003c62 <setvbuf+0x152>
 8003b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b42:	07da      	lsls	r2, r3, #31
 8003b44:	d405      	bmi.n	8003b52 <setvbuf+0x42>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	059b      	lsls	r3, r3, #22
 8003b4a:	d402      	bmi.n	8003b52 <setvbuf+0x42>
 8003b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b4e:	f000 fa72 	bl	8004036 <__retarget_lock_acquire_recursive>
 8003b52:	4621      	mov	r1, r4
 8003b54:	4638      	mov	r0, r7
 8003b56:	f001 f817 	bl	8004b88 <_fflush_r>
 8003b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b5c:	b141      	cbz	r1, 8003b70 <setvbuf+0x60>
 8003b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d002      	beq.n	8003b6c <setvbuf+0x5c>
 8003b66:	4638      	mov	r0, r7
 8003b68:	f000 fa68 	bl	800403c <_free_r>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6363      	str	r3, [r4, #52]	; 0x34
 8003b70:	2300      	movs	r3, #0
 8003b72:	61a3      	str	r3, [r4, #24]
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	0618      	lsls	r0, r3, #24
 8003b7a:	d503      	bpl.n	8003b84 <setvbuf+0x74>
 8003b7c:	6921      	ldr	r1, [r4, #16]
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f000 fa5c 	bl	800403c <_free_r>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f1b8 0f02 	cmp.w	r8, #2
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	d05f      	beq.n	8003c56 <setvbuf+0x146>
 8003b96:	ab01      	add	r3, sp, #4
 8003b98:	466a      	mov	r2, sp
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f000 f963 	bl	8003e68 <__swhatbuf_r>
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	4318      	orrs	r0, r3
 8003ba6:	81a0      	strh	r0, [r4, #12]
 8003ba8:	bb2d      	cbnz	r5, 8003bf6 <setvbuf+0xe6>
 8003baa:	9d00      	ldr	r5, [sp, #0]
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 fd2d 	bl	800460c <malloc>
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d150      	bne.n	8003c5a <setvbuf+0x14a>
 8003bb8:	f8dd 9000 	ldr.w	r9, [sp]
 8003bbc:	45a9      	cmp	r9, r5
 8003bbe:	d13e      	bne.n	8003c3e <setvbuf+0x12e>
 8003bc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	60a2      	str	r2, [r4, #8]
 8003bc8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003bcc:	6022      	str	r2, [r4, #0]
 8003bce:	6122      	str	r2, [r4, #16]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd6:	6162      	str	r2, [r4, #20]
 8003bd8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	07d1      	lsls	r1, r2, #31
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	d404      	bmi.n	8003bee <setvbuf+0xde>
 8003be4:	059b      	lsls	r3, r3, #22
 8003be6:	d402      	bmi.n	8003bee <setvbuf+0xde>
 8003be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bea:	f000 fa25 	bl	8004038 <__retarget_lock_release_recursive>
 8003bee:	4628      	mov	r0, r5
 8003bf0:	b003      	add	sp, #12
 8003bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bf6:	2e00      	cmp	r6, #0
 8003bf8:	d0d8      	beq.n	8003bac <setvbuf+0x9c>
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	b913      	cbnz	r3, 8003c04 <setvbuf+0xf4>
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f000 f8f4 	bl	8003dec <__sinit>
 8003c04:	f1b8 0f01 	cmp.w	r8, #1
 8003c08:	bf08      	it	eq
 8003c0a:	89a3      	ldrheq	r3, [r4, #12]
 8003c0c:	6026      	str	r6, [r4, #0]
 8003c0e:	bf04      	itt	eq
 8003c10:	f043 0301 	orreq.w	r3, r3, #1
 8003c14:	81a3      	strheq	r3, [r4, #12]
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f013 0208 	ands.w	r2, r3, #8
 8003c1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003c20:	d01d      	beq.n	8003c5e <setvbuf+0x14e>
 8003c22:	07da      	lsls	r2, r3, #31
 8003c24:	bf41      	itttt	mi
 8003c26:	2200      	movmi	r2, #0
 8003c28:	426d      	negmi	r5, r5
 8003c2a:	60a2      	strmi	r2, [r4, #8]
 8003c2c:	61a5      	strmi	r5, [r4, #24]
 8003c2e:	bf58      	it	pl
 8003c30:	60a5      	strpl	r5, [r4, #8]
 8003c32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003c34:	f015 0501 	ands.w	r5, r5, #1
 8003c38:	d0d4      	beq.n	8003be4 <setvbuf+0xd4>
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	e7d7      	b.n	8003bee <setvbuf+0xde>
 8003c3e:	4648      	mov	r0, r9
 8003c40:	f000 fce4 	bl	800460c <malloc>
 8003c44:	4606      	mov	r6, r0
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d0ba      	beq.n	8003bc0 <setvbuf+0xb0>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	81a3      	strh	r3, [r4, #12]
 8003c52:	464d      	mov	r5, r9
 8003c54:	e7d1      	b.n	8003bfa <setvbuf+0xea>
 8003c56:	2500      	movs	r5, #0
 8003c58:	e7b4      	b.n	8003bc4 <setvbuf+0xb4>
 8003c5a:	46a9      	mov	r9, r5
 8003c5c:	e7f5      	b.n	8003c4a <setvbuf+0x13a>
 8003c5e:	60a2      	str	r2, [r4, #8]
 8003c60:	e7e7      	b.n	8003c32 <setvbuf+0x122>
 8003c62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c66:	e7c2      	b.n	8003bee <setvbuf+0xde>
 8003c68:	20000064 	.word	0x20000064

08003c6c <sniprintf>:
 8003c6c:	b40c      	push	{r2, r3}
 8003c6e:	b530      	push	{r4, r5, lr}
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <sniprintf+0x64>)
 8003c72:	1e0c      	subs	r4, r1, #0
 8003c74:	681d      	ldr	r5, [r3, #0]
 8003c76:	b09d      	sub	sp, #116	; 0x74
 8003c78:	da08      	bge.n	8003c8c <sniprintf+0x20>
 8003c7a:	238b      	movs	r3, #139	; 0x8b
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c82:	b01d      	add	sp, #116	; 0x74
 8003c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c88:	b002      	add	sp, #8
 8003c8a:	4770      	bx	lr
 8003c8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c94:	bf14      	ite	ne
 8003c96:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003c9a:	4623      	moveq	r3, r4
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	9307      	str	r3, [sp, #28]
 8003ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca4:	9002      	str	r0, [sp, #8]
 8003ca6:	9006      	str	r0, [sp, #24]
 8003ca8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cae:	ab21      	add	r3, sp, #132	; 0x84
 8003cb0:	a902      	add	r1, sp, #8
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	f000 fa67 	bl	8004188 <_svfiprintf_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	bfbc      	itt	lt
 8003cbe:	238b      	movlt	r3, #139	; 0x8b
 8003cc0:	602b      	strlt	r3, [r5, #0]
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d0dd      	beq.n	8003c82 <sniprintf+0x16>
 8003cc6:	9b02      	ldr	r3, [sp, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e7d9      	b.n	8003c82 <sniprintf+0x16>
 8003cce:	bf00      	nop
 8003cd0:	20000064 	.word	0x20000064

08003cd4 <std>:
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	4604      	mov	r4, r0
 8003cda:	e9c0 3300 	strd	r3, r3, [r0]
 8003cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ce2:	6083      	str	r3, [r0, #8]
 8003ce4:	8181      	strh	r1, [r0, #12]
 8003ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ce8:	81c2      	strh	r2, [r0, #14]
 8003cea:	6183      	str	r3, [r0, #24]
 8003cec:	4619      	mov	r1, r3
 8003cee:	2208      	movs	r2, #8
 8003cf0:	305c      	adds	r0, #92	; 0x5c
 8003cf2:	f000 f94b 	bl	8003f8c <memset>
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <std+0x58>)
 8003cf8:	6263      	str	r3, [r4, #36]	; 0x24
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <std+0x5c>)
 8003cfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <std+0x60>)
 8003d00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <std+0x64>)
 8003d04:	6323      	str	r3, [r4, #48]	; 0x30
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <std+0x68>)
 8003d08:	6224      	str	r4, [r4, #32]
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d006      	beq.n	8003d1c <std+0x48>
 8003d0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d12:	4294      	cmp	r4, r2
 8003d14:	d002      	beq.n	8003d1c <std+0x48>
 8003d16:	33d0      	adds	r3, #208	; 0xd0
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d105      	bne.n	8003d28 <std+0x54>
 8003d1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f000 b986 	b.w	8004034 <__retarget_lock_init_recursive>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08004bf1 	.word	0x08004bf1
 8003d30:	08004c13 	.word	0x08004c13
 8003d34:	08004c4b 	.word	0x08004c4b
 8003d38:	08004c6f 	.word	0x08004c6f
 8003d3c:	20000154 	.word	0x20000154

08003d40 <stdio_exit_handler>:
 8003d40:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <stdio_exit_handler+0xc>)
 8003d42:	4903      	ldr	r1, [pc, #12]	; (8003d50 <stdio_exit_handler+0x10>)
 8003d44:	4803      	ldr	r0, [pc, #12]	; (8003d54 <stdio_exit_handler+0x14>)
 8003d46:	f000 b869 	b.w	8003e1c <_fwalk_sglue>
 8003d4a:	bf00      	nop
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	08004b89 	.word	0x08004b89
 8003d54:	20000018 	.word	0x20000018

08003d58 <cleanup_stdio>:
 8003d58:	6841      	ldr	r1, [r0, #4]
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <cleanup_stdio+0x34>)
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	4604      	mov	r4, r0
 8003d62:	d001      	beq.n	8003d68 <cleanup_stdio+0x10>
 8003d64:	f000 ff10 	bl	8004b88 <_fflush_r>
 8003d68:	68a1      	ldr	r1, [r4, #8]
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <cleanup_stdio+0x38>)
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	d002      	beq.n	8003d76 <cleanup_stdio+0x1e>
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 ff09 	bl	8004b88 <_fflush_r>
 8003d76:	68e1      	ldr	r1, [r4, #12]
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <cleanup_stdio+0x3c>)
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d004      	beq.n	8003d88 <cleanup_stdio+0x30>
 8003d7e:	4620      	mov	r0, r4
 8003d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d84:	f000 bf00 	b.w	8004b88 <_fflush_r>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000154 	.word	0x20000154
 8003d90:	200001bc 	.word	0x200001bc
 8003d94:	20000224 	.word	0x20000224

08003d98 <global_stdio_init.part.0>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <global_stdio_init.part.0+0x30>)
 8003d9c:	4c0b      	ldr	r4, [pc, #44]	; (8003dcc <global_stdio_init.part.0+0x34>)
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <global_stdio_init.part.0+0x38>)
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	4620      	mov	r0, r4
 8003da4:	2200      	movs	r2, #0
 8003da6:	2104      	movs	r1, #4
 8003da8:	f7ff ff94 	bl	8003cd4 <std>
 8003dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003db0:	2201      	movs	r2, #1
 8003db2:	2109      	movs	r1, #9
 8003db4:	f7ff ff8e 	bl	8003cd4 <std>
 8003db8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc2:	2112      	movs	r1, #18
 8003dc4:	f7ff bf86 	b.w	8003cd4 <std>
 8003dc8:	2000028c 	.word	0x2000028c
 8003dcc:	20000154 	.word	0x20000154
 8003dd0:	08003d41 	.word	0x08003d41

08003dd4 <__sfp_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sfp_lock_acquire+0x8>)
 8003dd6:	f000 b92e 	b.w	8004036 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000291 	.word	0x20000291

08003de0 <__sfp_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__sfp_lock_release+0x8>)
 8003de2:	f000 b929 	b.w	8004038 <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000291 	.word	0x20000291

08003dec <__sinit>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	f7ff fff0 	bl	8003dd4 <__sfp_lock_acquire>
 8003df4:	6a23      	ldr	r3, [r4, #32]
 8003df6:	b11b      	cbz	r3, 8003e00 <__sinit+0x14>
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f7ff bff0 	b.w	8003de0 <__sfp_lock_release>
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <__sinit+0x28>)
 8003e02:	6223      	str	r3, [r4, #32]
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <__sinit+0x2c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f5      	bne.n	8003df8 <__sinit+0xc>
 8003e0c:	f7ff ffc4 	bl	8003d98 <global_stdio_init.part.0>
 8003e10:	e7f2      	b.n	8003df8 <__sinit+0xc>
 8003e12:	bf00      	nop
 8003e14:	08003d59 	.word	0x08003d59
 8003e18:	2000028c 	.word	0x2000028c

08003e1c <_fwalk_sglue>:
 8003e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e20:	4607      	mov	r7, r0
 8003e22:	4688      	mov	r8, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	2600      	movs	r6, #0
 8003e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e30:	d505      	bpl.n	8003e3e <_fwalk_sglue+0x22>
 8003e32:	6824      	ldr	r4, [r4, #0]
 8003e34:	2c00      	cmp	r4, #0
 8003e36:	d1f7      	bne.n	8003e28 <_fwalk_sglue+0xc>
 8003e38:	4630      	mov	r0, r6
 8003e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d907      	bls.n	8003e54 <_fwalk_sglue+0x38>
 8003e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	d003      	beq.n	8003e54 <_fwalk_sglue+0x38>
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c0      	blx	r8
 8003e52:	4306      	orrs	r6, r0
 8003e54:	3568      	adds	r5, #104	; 0x68
 8003e56:	e7e9      	b.n	8003e2c <_fwalk_sglue+0x10>

08003e58 <getchar>:
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <getchar+0xc>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	6841      	ldr	r1, [r0, #4]
 8003e5e:	f000 bf39 	b.w	8004cd4 <_getc_r>
 8003e62:	bf00      	nop
 8003e64:	20000064 	.word	0x20000064

08003e68 <__swhatbuf_r>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e70:	2900      	cmp	r1, #0
 8003e72:	b096      	sub	sp, #88	; 0x58
 8003e74:	4615      	mov	r5, r2
 8003e76:	461e      	mov	r6, r3
 8003e78:	da0d      	bge.n	8003e96 <__swhatbuf_r+0x2e>
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	bf0c      	ite	eq
 8003e86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003e8a:	2340      	movne	r3, #64	; 0x40
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	6031      	str	r1, [r6, #0]
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	b016      	add	sp, #88	; 0x58
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	466a      	mov	r2, sp
 8003e98:	f000 f880 	bl	8003f9c <_fstat_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	dbec      	blt.n	8003e7a <__swhatbuf_r+0x12>
 8003ea0:	9901      	ldr	r1, [sp, #4]
 8003ea2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003ea6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003eaa:	4259      	negs	r1, r3
 8003eac:	4159      	adcs	r1, r3
 8003eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb2:	e7eb      	b.n	8003e8c <__swhatbuf_r+0x24>

08003eb4 <__smakebuf_r>:
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eb8:	079d      	lsls	r5, r3, #30
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	d507      	bpl.n	8003ed0 <__smakebuf_r+0x1c>
 8003ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6163      	str	r3, [r4, #20]
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	ab01      	add	r3, sp, #4
 8003ed2:	466a      	mov	r2, sp
 8003ed4:	f7ff ffc8 	bl	8003e68 <__swhatbuf_r>
 8003ed8:	9900      	ldr	r1, [sp, #0]
 8003eda:	4605      	mov	r5, r0
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 fbbd 	bl	800465c <_malloc_r>
 8003ee2:	b948      	cbnz	r0, 8003ef8 <__smakebuf_r+0x44>
 8003ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d4ef      	bmi.n	8003ecc <__smakebuf_r+0x18>
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	e7e3      	b.n	8003ec0 <__smakebuf_r+0xc>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	6020      	str	r0, [r4, #0]
 8003efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	9b00      	ldr	r3, [sp, #0]
 8003f04:	6163      	str	r3, [r4, #20]
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	6120      	str	r0, [r4, #16]
 8003f0a:	b15b      	cbz	r3, 8003f24 <__smakebuf_r+0x70>
 8003f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f10:	4630      	mov	r0, r6
 8003f12:	f000 f855 	bl	8003fc0 <_isatty_r>
 8003f16:	b128      	cbz	r0, 8003f24 <__smakebuf_r+0x70>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	431d      	orrs	r5, r3
 8003f28:	81a5      	strh	r5, [r4, #12]
 8003f2a:	e7cf      	b.n	8003ecc <__smakebuf_r+0x18>

08003f2c <iprintf>:
 8003f2c:	b40f      	push	{r0, r1, r2, r3}
 8003f2e:	b507      	push	{r0, r1, r2, lr}
 8003f30:	4906      	ldr	r1, [pc, #24]	; (8003f4c <iprintf+0x20>)
 8003f32:	ab04      	add	r3, sp, #16
 8003f34:	6808      	ldr	r0, [r1, #0]
 8003f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f3a:	6881      	ldr	r1, [r0, #8]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	f000 fa4b 	bl	80043d8 <_vfiprintf_r>
 8003f42:	b003      	add	sp, #12
 8003f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f48:	b004      	add	sp, #16
 8003f4a:	4770      	bx	lr
 8003f4c:	20000064 	.word	0x20000064

08003f50 <putchar>:
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <putchar+0xc>)
 8003f52:	4601      	mov	r1, r0
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	6882      	ldr	r2, [r0, #8]
 8003f58:	f000 bf7c 	b.w	8004e54 <_putc_r>
 8003f5c:	20000064 	.word	0x20000064

08003f60 <strstr>:
 8003f60:	780a      	ldrb	r2, [r1, #0]
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	b96a      	cbnz	r2, 8003f82 <strstr+0x22>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d109      	bne.n	8003f80 <strstr+0x20>
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	4605      	mov	r5, r0
 8003f70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f6      	beq.n	8003f66 <strstr+0x6>
 8003f78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	d0f7      	beq.n	8003f70 <strstr+0x10>
 8003f80:	3001      	adds	r0, #1
 8003f82:	7803      	ldrb	r3, [r0, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ef      	bne.n	8003f68 <strstr+0x8>
 8003f88:	4618      	mov	r0, r3
 8003f8a:	e7ec      	b.n	8003f66 <strstr+0x6>

08003f8c <memset>:
 8003f8c:	4402      	add	r2, r0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d100      	bne.n	8003f96 <memset+0xa>
 8003f94:	4770      	bx	lr
 8003f96:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9a:	e7f9      	b.n	8003f90 <memset+0x4>

08003f9c <_fstat_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_fstat_r+0x20>)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	f7fc fd67 	bl	8000a7c <_fstat>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d102      	bne.n	8003fb8 <_fstat_r+0x1c>
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	b103      	cbz	r3, 8003fb8 <_fstat_r+0x1c>
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000029c 	.word	0x2000029c

08003fc0 <_isatty_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_isatty_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fc fcc4 	bl	8000958 <_isatty>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_isatty_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_isatty_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	2000029c 	.word	0x2000029c

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000064 	.word	0x20000064

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4d0d      	ldr	r5, [pc, #52]	; (8004024 <__libc_init_array+0x38>)
 8003ff0:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff2:	1b64      	subs	r4, r4, r5
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	4d0b      	ldr	r5, [pc, #44]	; (800402c <__libc_init_array+0x40>)
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	; (8004030 <__libc_init_array+0x44>)
 8004000:	f001 f880 	bl	8005104 <_init>
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	2600      	movs	r6, #0
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f855 3b04 	ldr.w	r3, [r5], #4
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f855 3b04 	ldr.w	r3, [r5], #4
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08005220 	.word	0x08005220
 8004028:	08005220 	.word	0x08005220
 800402c:	08005220 	.word	0x08005220
 8004030:	08005224 	.word	0x08005224

08004034 <__retarget_lock_init_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_acquire_recursive>:
 8004036:	4770      	bx	lr

08004038 <__retarget_lock_release_recursive>:
 8004038:	4770      	bx	lr
	...

0800403c <_free_r>:
 800403c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800403e:	2900      	cmp	r1, #0
 8004040:	d044      	beq.n	80040cc <_free_r+0x90>
 8004042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004046:	9001      	str	r0, [sp, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f1a1 0404 	sub.w	r4, r1, #4
 800404e:	bfb8      	it	lt
 8004050:	18e4      	addlt	r4, r4, r3
 8004052:	f000 fdc1 	bl	8004bd8 <__malloc_lock>
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <_free_r+0x94>)
 8004058:	9801      	ldr	r0, [sp, #4]
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	b933      	cbnz	r3, 800406c <_free_r+0x30>
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	6014      	str	r4, [r2, #0]
 8004062:	b003      	add	sp, #12
 8004064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004068:	f000 bdbc 	b.w	8004be4 <__malloc_unlock>
 800406c:	42a3      	cmp	r3, r4
 800406e:	d908      	bls.n	8004082 <_free_r+0x46>
 8004070:	6825      	ldr	r5, [r4, #0]
 8004072:	1961      	adds	r1, r4, r5
 8004074:	428b      	cmp	r3, r1
 8004076:	bf01      	itttt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	1949      	addeq	r1, r1, r5
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	e7ed      	b.n	800405e <_free_r+0x22>
 8004082:	461a      	mov	r2, r3
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b10b      	cbz	r3, 800408c <_free_r+0x50>
 8004088:	42a3      	cmp	r3, r4
 800408a:	d9fa      	bls.n	8004082 <_free_r+0x46>
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	1855      	adds	r5, r2, r1
 8004090:	42a5      	cmp	r5, r4
 8004092:	d10b      	bne.n	80040ac <_free_r+0x70>
 8004094:	6824      	ldr	r4, [r4, #0]
 8004096:	4421      	add	r1, r4
 8004098:	1854      	adds	r4, r2, r1
 800409a:	42a3      	cmp	r3, r4
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	d1e0      	bne.n	8004062 <_free_r+0x26>
 80040a0:	681c      	ldr	r4, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6053      	str	r3, [r2, #4]
 80040a6:	440c      	add	r4, r1
 80040a8:	6014      	str	r4, [r2, #0]
 80040aa:	e7da      	b.n	8004062 <_free_r+0x26>
 80040ac:	d902      	bls.n	80040b4 <_free_r+0x78>
 80040ae:	230c      	movs	r3, #12
 80040b0:	6003      	str	r3, [r0, #0]
 80040b2:	e7d6      	b.n	8004062 <_free_r+0x26>
 80040b4:	6825      	ldr	r5, [r4, #0]
 80040b6:	1961      	adds	r1, r4, r5
 80040b8:	428b      	cmp	r3, r1
 80040ba:	bf04      	itt	eq
 80040bc:	6819      	ldreq	r1, [r3, #0]
 80040be:	685b      	ldreq	r3, [r3, #4]
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	bf04      	itt	eq
 80040c4:	1949      	addeq	r1, r1, r5
 80040c6:	6021      	streq	r1, [r4, #0]
 80040c8:	6054      	str	r4, [r2, #4]
 80040ca:	e7ca      	b.n	8004062 <_free_r+0x26>
 80040cc:	b003      	add	sp, #12
 80040ce:	bd30      	pop	{r4, r5, pc}
 80040d0:	20000294 	.word	0x20000294

080040d4 <__ssputs_r>:
 80040d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d8:	688e      	ldr	r6, [r1, #8]
 80040da:	461f      	mov	r7, r3
 80040dc:	42be      	cmp	r6, r7
 80040de:	680b      	ldr	r3, [r1, #0]
 80040e0:	4682      	mov	sl, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	4690      	mov	r8, r2
 80040e6:	d82c      	bhi.n	8004142 <__ssputs_r+0x6e>
 80040e8:	898a      	ldrh	r2, [r1, #12]
 80040ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040ee:	d026      	beq.n	800413e <__ssputs_r+0x6a>
 80040f0:	6965      	ldr	r5, [r4, #20]
 80040f2:	6909      	ldr	r1, [r1, #16]
 80040f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040f8:	eba3 0901 	sub.w	r9, r3, r1
 80040fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004100:	1c7b      	adds	r3, r7, #1
 8004102:	444b      	add	r3, r9
 8004104:	106d      	asrs	r5, r5, #1
 8004106:	429d      	cmp	r5, r3
 8004108:	bf38      	it	cc
 800410a:	461d      	movcc	r5, r3
 800410c:	0553      	lsls	r3, r2, #21
 800410e:	d527      	bpl.n	8004160 <__ssputs_r+0x8c>
 8004110:	4629      	mov	r1, r5
 8004112:	f000 faa3 	bl	800465c <_malloc_r>
 8004116:	4606      	mov	r6, r0
 8004118:	b360      	cbz	r0, 8004174 <__ssputs_r+0xa0>
 800411a:	6921      	ldr	r1, [r4, #16]
 800411c:	464a      	mov	r2, r9
 800411e:	f000 ff55 	bl	8004fcc <memcpy>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	6126      	str	r6, [r4, #16]
 8004130:	6165      	str	r5, [r4, #20]
 8004132:	444e      	add	r6, r9
 8004134:	eba5 0509 	sub.w	r5, r5, r9
 8004138:	6026      	str	r6, [r4, #0]
 800413a:	60a5      	str	r5, [r4, #8]
 800413c:	463e      	mov	r6, r7
 800413e:	42be      	cmp	r6, r7
 8004140:	d900      	bls.n	8004144 <__ssputs_r+0x70>
 8004142:	463e      	mov	r6, r7
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	4632      	mov	r2, r6
 8004148:	4641      	mov	r1, r8
 800414a:	f000 fecf 	bl	8004eec <memmove>
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	4433      	add	r3, r6
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	2000      	movs	r0, #0
 800415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004160:	462a      	mov	r2, r5
 8004162:	f000 fd88 	bl	8004c76 <_realloc_r>
 8004166:	4606      	mov	r6, r0
 8004168:	2800      	cmp	r0, #0
 800416a:	d1e0      	bne.n	800412e <__ssputs_r+0x5a>
 800416c:	6921      	ldr	r1, [r4, #16]
 800416e:	4650      	mov	r0, sl
 8004170:	f7ff ff64 	bl	800403c <_free_r>
 8004174:	230c      	movs	r3, #12
 8004176:	f8ca 3000 	str.w	r3, [sl]
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004186:	e7e9      	b.n	800415c <__ssputs_r+0x88>

08004188 <_svfiprintf_r>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	4698      	mov	r8, r3
 800418e:	898b      	ldrh	r3, [r1, #12]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	b09d      	sub	sp, #116	; 0x74
 8004194:	4607      	mov	r7, r0
 8004196:	460d      	mov	r5, r1
 8004198:	4614      	mov	r4, r2
 800419a:	d50e      	bpl.n	80041ba <_svfiprintf_r+0x32>
 800419c:	690b      	ldr	r3, [r1, #16]
 800419e:	b963      	cbnz	r3, 80041ba <_svfiprintf_r+0x32>
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	f000 fa5b 	bl	800465c <_malloc_r>
 80041a6:	6028      	str	r0, [r5, #0]
 80041a8:	6128      	str	r0, [r5, #16]
 80041aa:	b920      	cbnz	r0, 80041b6 <_svfiprintf_r+0x2e>
 80041ac:	230c      	movs	r3, #12
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b4:	e0d0      	b.n	8004358 <_svfiprintf_r+0x1d0>
 80041b6:	2340      	movs	r3, #64	; 0x40
 80041b8:	616b      	str	r3, [r5, #20]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9309      	str	r3, [sp, #36]	; 0x24
 80041be:	2320      	movs	r3, #32
 80041c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c8:	2330      	movs	r3, #48	; 0x30
 80041ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004370 <_svfiprintf_r+0x1e8>
 80041ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041d2:	f04f 0901 	mov.w	r9, #1
 80041d6:	4623      	mov	r3, r4
 80041d8:	469a      	mov	sl, r3
 80041da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041de:	b10a      	cbz	r2, 80041e4 <_svfiprintf_r+0x5c>
 80041e0:	2a25      	cmp	r2, #37	; 0x25
 80041e2:	d1f9      	bne.n	80041d8 <_svfiprintf_r+0x50>
 80041e4:	ebba 0b04 	subs.w	fp, sl, r4
 80041e8:	d00b      	beq.n	8004202 <_svfiprintf_r+0x7a>
 80041ea:	465b      	mov	r3, fp
 80041ec:	4622      	mov	r2, r4
 80041ee:	4629      	mov	r1, r5
 80041f0:	4638      	mov	r0, r7
 80041f2:	f7ff ff6f 	bl	80040d4 <__ssputs_r>
 80041f6:	3001      	adds	r0, #1
 80041f8:	f000 80a9 	beq.w	800434e <_svfiprintf_r+0x1c6>
 80041fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041fe:	445a      	add	r2, fp
 8004200:	9209      	str	r2, [sp, #36]	; 0x24
 8004202:	f89a 3000 	ldrb.w	r3, [sl]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80a1 	beq.w	800434e <_svfiprintf_r+0x1c6>
 800420c:	2300      	movs	r3, #0
 800420e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004216:	f10a 0a01 	add.w	sl, sl, #1
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	9307      	str	r3, [sp, #28]
 800421e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004222:	931a      	str	r3, [sp, #104]	; 0x68
 8004224:	4654      	mov	r4, sl
 8004226:	2205      	movs	r2, #5
 8004228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422c:	4850      	ldr	r0, [pc, #320]	; (8004370 <_svfiprintf_r+0x1e8>)
 800422e:	f7fb ffcf 	bl	80001d0 <memchr>
 8004232:	9a04      	ldr	r2, [sp, #16]
 8004234:	b9d8      	cbnz	r0, 800426e <_svfiprintf_r+0xe6>
 8004236:	06d0      	lsls	r0, r2, #27
 8004238:	bf44      	itt	mi
 800423a:	2320      	movmi	r3, #32
 800423c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004240:	0711      	lsls	r1, r2, #28
 8004242:	bf44      	itt	mi
 8004244:	232b      	movmi	r3, #43	; 0x2b
 8004246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800424a:	f89a 3000 	ldrb.w	r3, [sl]
 800424e:	2b2a      	cmp	r3, #42	; 0x2a
 8004250:	d015      	beq.n	800427e <_svfiprintf_r+0xf6>
 8004252:	9a07      	ldr	r2, [sp, #28]
 8004254:	4654      	mov	r4, sl
 8004256:	2000      	movs	r0, #0
 8004258:	f04f 0c0a 	mov.w	ip, #10
 800425c:	4621      	mov	r1, r4
 800425e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004262:	3b30      	subs	r3, #48	; 0x30
 8004264:	2b09      	cmp	r3, #9
 8004266:	d94d      	bls.n	8004304 <_svfiprintf_r+0x17c>
 8004268:	b1b0      	cbz	r0, 8004298 <_svfiprintf_r+0x110>
 800426a:	9207      	str	r2, [sp, #28]
 800426c:	e014      	b.n	8004298 <_svfiprintf_r+0x110>
 800426e:	eba0 0308 	sub.w	r3, r0, r8
 8004272:	fa09 f303 	lsl.w	r3, r9, r3
 8004276:	4313      	orrs	r3, r2
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	46a2      	mov	sl, r4
 800427c:	e7d2      	b.n	8004224 <_svfiprintf_r+0x9c>
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	1d19      	adds	r1, r3, #4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	9103      	str	r1, [sp, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	bfbb      	ittet	lt
 800428a:	425b      	neglt	r3, r3
 800428c:	f042 0202 	orrlt.w	r2, r2, #2
 8004290:	9307      	strge	r3, [sp, #28]
 8004292:	9307      	strlt	r3, [sp, #28]
 8004294:	bfb8      	it	lt
 8004296:	9204      	strlt	r2, [sp, #16]
 8004298:	7823      	ldrb	r3, [r4, #0]
 800429a:	2b2e      	cmp	r3, #46	; 0x2e
 800429c:	d10c      	bne.n	80042b8 <_svfiprintf_r+0x130>
 800429e:	7863      	ldrb	r3, [r4, #1]
 80042a0:	2b2a      	cmp	r3, #42	; 0x2a
 80042a2:	d134      	bne.n	800430e <_svfiprintf_r+0x186>
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	1d1a      	adds	r2, r3, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	9203      	str	r2, [sp, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bfb8      	it	lt
 80042b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042b4:	3402      	adds	r4, #2
 80042b6:	9305      	str	r3, [sp, #20]
 80042b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004380 <_svfiprintf_r+0x1f8>
 80042bc:	7821      	ldrb	r1, [r4, #0]
 80042be:	2203      	movs	r2, #3
 80042c0:	4650      	mov	r0, sl
 80042c2:	f7fb ff85 	bl	80001d0 <memchr>
 80042c6:	b138      	cbz	r0, 80042d8 <_svfiprintf_r+0x150>
 80042c8:	9b04      	ldr	r3, [sp, #16]
 80042ca:	eba0 000a 	sub.w	r0, r0, sl
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	4082      	lsls	r2, r0
 80042d2:	4313      	orrs	r3, r2
 80042d4:	3401      	adds	r4, #1
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	4825      	ldr	r0, [pc, #148]	; (8004374 <_svfiprintf_r+0x1ec>)
 80042de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042e2:	2206      	movs	r2, #6
 80042e4:	f7fb ff74 	bl	80001d0 <memchr>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d038      	beq.n	800435e <_svfiprintf_r+0x1d6>
 80042ec:	4b22      	ldr	r3, [pc, #136]	; (8004378 <_svfiprintf_r+0x1f0>)
 80042ee:	bb1b      	cbnz	r3, 8004338 <_svfiprintf_r+0x1b0>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	3307      	adds	r3, #7
 80042f4:	f023 0307 	bic.w	r3, r3, #7
 80042f8:	3308      	adds	r3, #8
 80042fa:	9303      	str	r3, [sp, #12]
 80042fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fe:	4433      	add	r3, r6
 8004300:	9309      	str	r3, [sp, #36]	; 0x24
 8004302:	e768      	b.n	80041d6 <_svfiprintf_r+0x4e>
 8004304:	fb0c 3202 	mla	r2, ip, r2, r3
 8004308:	460c      	mov	r4, r1
 800430a:	2001      	movs	r0, #1
 800430c:	e7a6      	b.n	800425c <_svfiprintf_r+0xd4>
 800430e:	2300      	movs	r3, #0
 8004310:	3401      	adds	r4, #1
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	4619      	mov	r1, r3
 8004316:	f04f 0c0a 	mov.w	ip, #10
 800431a:	4620      	mov	r0, r4
 800431c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004320:	3a30      	subs	r2, #48	; 0x30
 8004322:	2a09      	cmp	r2, #9
 8004324:	d903      	bls.n	800432e <_svfiprintf_r+0x1a6>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0c6      	beq.n	80042b8 <_svfiprintf_r+0x130>
 800432a:	9105      	str	r1, [sp, #20]
 800432c:	e7c4      	b.n	80042b8 <_svfiprintf_r+0x130>
 800432e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004332:	4604      	mov	r4, r0
 8004334:	2301      	movs	r3, #1
 8004336:	e7f0      	b.n	800431a <_svfiprintf_r+0x192>
 8004338:	ab03      	add	r3, sp, #12
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	462a      	mov	r2, r5
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <_svfiprintf_r+0x1f4>)
 8004340:	a904      	add	r1, sp, #16
 8004342:	4638      	mov	r0, r7
 8004344:	f3af 8000 	nop.w
 8004348:	1c42      	adds	r2, r0, #1
 800434a:	4606      	mov	r6, r0
 800434c:	d1d6      	bne.n	80042fc <_svfiprintf_r+0x174>
 800434e:	89ab      	ldrh	r3, [r5, #12]
 8004350:	065b      	lsls	r3, r3, #25
 8004352:	f53f af2d 	bmi.w	80041b0 <_svfiprintf_r+0x28>
 8004356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004358:	b01d      	add	sp, #116	; 0x74
 800435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435e:	ab03      	add	r3, sp, #12
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	462a      	mov	r2, r5
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <_svfiprintf_r+0x1f4>)
 8004366:	a904      	add	r1, sp, #16
 8004368:	4638      	mov	r0, r7
 800436a:	f000 fa65 	bl	8004838 <_printf_i>
 800436e:	e7eb      	b.n	8004348 <_svfiprintf_r+0x1c0>
 8004370:	080051e4 	.word	0x080051e4
 8004374:	080051ee 	.word	0x080051ee
 8004378:	00000000 	.word	0x00000000
 800437c:	080040d5 	.word	0x080040d5
 8004380:	080051ea 	.word	0x080051ea

08004384 <__sfputc_r>:
 8004384:	6893      	ldr	r3, [r2, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	b410      	push	{r4}
 800438c:	6093      	str	r3, [r2, #8]
 800438e:	da08      	bge.n	80043a2 <__sfputc_r+0x1e>
 8004390:	6994      	ldr	r4, [r2, #24]
 8004392:	42a3      	cmp	r3, r4
 8004394:	db01      	blt.n	800439a <__sfputc_r+0x16>
 8004396:	290a      	cmp	r1, #10
 8004398:	d103      	bne.n	80043a2 <__sfputc_r+0x1e>
 800439a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439e:	f000 bcc4 	b.w	8004d2a <__swbuf_r>
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	1c58      	adds	r0, r3, #1
 80043a6:	6010      	str	r0, [r2, #0]
 80043a8:	7019      	strb	r1, [r3, #0]
 80043aa:	4608      	mov	r0, r1
 80043ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <__sfputs_r>:
 80043b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b4:	4606      	mov	r6, r0
 80043b6:	460f      	mov	r7, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	18d5      	adds	r5, r2, r3
 80043bc:	42ac      	cmp	r4, r5
 80043be:	d101      	bne.n	80043c4 <__sfputs_r+0x12>
 80043c0:	2000      	movs	r0, #0
 80043c2:	e007      	b.n	80043d4 <__sfputs_r+0x22>
 80043c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c8:	463a      	mov	r2, r7
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7ff ffda 	bl	8004384 <__sfputc_r>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d1f3      	bne.n	80043bc <__sfputs_r+0xa>
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d8 <_vfiprintf_r>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	460d      	mov	r5, r1
 80043de:	b09d      	sub	sp, #116	; 0x74
 80043e0:	4614      	mov	r4, r2
 80043e2:	4698      	mov	r8, r3
 80043e4:	4606      	mov	r6, r0
 80043e6:	b118      	cbz	r0, 80043f0 <_vfiprintf_r+0x18>
 80043e8:	6a03      	ldr	r3, [r0, #32]
 80043ea:	b90b      	cbnz	r3, 80043f0 <_vfiprintf_r+0x18>
 80043ec:	f7ff fcfe 	bl	8003dec <__sinit>
 80043f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f2:	07d9      	lsls	r1, r3, #31
 80043f4:	d405      	bmi.n	8004402 <_vfiprintf_r+0x2a>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	059a      	lsls	r2, r3, #22
 80043fa:	d402      	bmi.n	8004402 <_vfiprintf_r+0x2a>
 80043fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043fe:	f7ff fe1a 	bl	8004036 <__retarget_lock_acquire_recursive>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	d501      	bpl.n	800440c <_vfiprintf_r+0x34>
 8004408:	692b      	ldr	r3, [r5, #16]
 800440a:	b99b      	cbnz	r3, 8004434 <_vfiprintf_r+0x5c>
 800440c:	4629      	mov	r1, r5
 800440e:	4630      	mov	r0, r6
 8004410:	f000 fcc8 	bl	8004da4 <__swsetup_r>
 8004414:	b170      	cbz	r0, 8004434 <_vfiprintf_r+0x5c>
 8004416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004418:	07dc      	lsls	r4, r3, #31
 800441a:	d504      	bpl.n	8004426 <_vfiprintf_r+0x4e>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004420:	b01d      	add	sp, #116	; 0x74
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	0598      	lsls	r0, r3, #22
 800442a:	d4f7      	bmi.n	800441c <_vfiprintf_r+0x44>
 800442c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800442e:	f7ff fe03 	bl	8004038 <__retarget_lock_release_recursive>
 8004432:	e7f3      	b.n	800441c <_vfiprintf_r+0x44>
 8004434:	2300      	movs	r3, #0
 8004436:	9309      	str	r3, [sp, #36]	; 0x24
 8004438:	2320      	movs	r3, #32
 800443a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800443e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004442:	2330      	movs	r3, #48	; 0x30
 8004444:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80045f8 <_vfiprintf_r+0x220>
 8004448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800444c:	f04f 0901 	mov.w	r9, #1
 8004450:	4623      	mov	r3, r4
 8004452:	469a      	mov	sl, r3
 8004454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004458:	b10a      	cbz	r2, 800445e <_vfiprintf_r+0x86>
 800445a:	2a25      	cmp	r2, #37	; 0x25
 800445c:	d1f9      	bne.n	8004452 <_vfiprintf_r+0x7a>
 800445e:	ebba 0b04 	subs.w	fp, sl, r4
 8004462:	d00b      	beq.n	800447c <_vfiprintf_r+0xa4>
 8004464:	465b      	mov	r3, fp
 8004466:	4622      	mov	r2, r4
 8004468:	4629      	mov	r1, r5
 800446a:	4630      	mov	r0, r6
 800446c:	f7ff ffa1 	bl	80043b2 <__sfputs_r>
 8004470:	3001      	adds	r0, #1
 8004472:	f000 80a9 	beq.w	80045c8 <_vfiprintf_r+0x1f0>
 8004476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004478:	445a      	add	r2, fp
 800447a:	9209      	str	r2, [sp, #36]	; 0x24
 800447c:	f89a 3000 	ldrb.w	r3, [sl]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a1 	beq.w	80045c8 <_vfiprintf_r+0x1f0>
 8004486:	2300      	movs	r3, #0
 8004488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800448c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004490:	f10a 0a01 	add.w	sl, sl, #1
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	9307      	str	r3, [sp, #28]
 8004498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800449c:	931a      	str	r3, [sp, #104]	; 0x68
 800449e:	4654      	mov	r4, sl
 80044a0:	2205      	movs	r2, #5
 80044a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a6:	4854      	ldr	r0, [pc, #336]	; (80045f8 <_vfiprintf_r+0x220>)
 80044a8:	f7fb fe92 	bl	80001d0 <memchr>
 80044ac:	9a04      	ldr	r2, [sp, #16]
 80044ae:	b9d8      	cbnz	r0, 80044e8 <_vfiprintf_r+0x110>
 80044b0:	06d1      	lsls	r1, r2, #27
 80044b2:	bf44      	itt	mi
 80044b4:	2320      	movmi	r3, #32
 80044b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ba:	0713      	lsls	r3, r2, #28
 80044bc:	bf44      	itt	mi
 80044be:	232b      	movmi	r3, #43	; 0x2b
 80044c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c4:	f89a 3000 	ldrb.w	r3, [sl]
 80044c8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ca:	d015      	beq.n	80044f8 <_vfiprintf_r+0x120>
 80044cc:	9a07      	ldr	r2, [sp, #28]
 80044ce:	4654      	mov	r4, sl
 80044d0:	2000      	movs	r0, #0
 80044d2:	f04f 0c0a 	mov.w	ip, #10
 80044d6:	4621      	mov	r1, r4
 80044d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044dc:	3b30      	subs	r3, #48	; 0x30
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d94d      	bls.n	800457e <_vfiprintf_r+0x1a6>
 80044e2:	b1b0      	cbz	r0, 8004512 <_vfiprintf_r+0x13a>
 80044e4:	9207      	str	r2, [sp, #28]
 80044e6:	e014      	b.n	8004512 <_vfiprintf_r+0x13a>
 80044e8:	eba0 0308 	sub.w	r3, r0, r8
 80044ec:	fa09 f303 	lsl.w	r3, r9, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	46a2      	mov	sl, r4
 80044f6:	e7d2      	b.n	800449e <_vfiprintf_r+0xc6>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	1d19      	adds	r1, r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	bfbb      	ittet	lt
 8004504:	425b      	neglt	r3, r3
 8004506:	f042 0202 	orrlt.w	r2, r2, #2
 800450a:	9307      	strge	r3, [sp, #28]
 800450c:	9307      	strlt	r3, [sp, #28]
 800450e:	bfb8      	it	lt
 8004510:	9204      	strlt	r2, [sp, #16]
 8004512:	7823      	ldrb	r3, [r4, #0]
 8004514:	2b2e      	cmp	r3, #46	; 0x2e
 8004516:	d10c      	bne.n	8004532 <_vfiprintf_r+0x15a>
 8004518:	7863      	ldrb	r3, [r4, #1]
 800451a:	2b2a      	cmp	r3, #42	; 0x2a
 800451c:	d134      	bne.n	8004588 <_vfiprintf_r+0x1b0>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9203      	str	r2, [sp, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfb8      	it	lt
 800452a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800452e:	3402      	adds	r4, #2
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004608 <_vfiprintf_r+0x230>
 8004536:	7821      	ldrb	r1, [r4, #0]
 8004538:	2203      	movs	r2, #3
 800453a:	4650      	mov	r0, sl
 800453c:	f7fb fe48 	bl	80001d0 <memchr>
 8004540:	b138      	cbz	r0, 8004552 <_vfiprintf_r+0x17a>
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	eba0 000a 	sub.w	r0, r0, sl
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	4082      	lsls	r2, r0
 800454c:	4313      	orrs	r3, r2
 800454e:	3401      	adds	r4, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004556:	4829      	ldr	r0, [pc, #164]	; (80045fc <_vfiprintf_r+0x224>)
 8004558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800455c:	2206      	movs	r2, #6
 800455e:	f7fb fe37 	bl	80001d0 <memchr>
 8004562:	2800      	cmp	r0, #0
 8004564:	d03f      	beq.n	80045e6 <_vfiprintf_r+0x20e>
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <_vfiprintf_r+0x228>)
 8004568:	bb1b      	cbnz	r3, 80045b2 <_vfiprintf_r+0x1da>
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	3307      	adds	r3, #7
 800456e:	f023 0307 	bic.w	r3, r3, #7
 8004572:	3308      	adds	r3, #8
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004578:	443b      	add	r3, r7
 800457a:	9309      	str	r3, [sp, #36]	; 0x24
 800457c:	e768      	b.n	8004450 <_vfiprintf_r+0x78>
 800457e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004582:	460c      	mov	r4, r1
 8004584:	2001      	movs	r0, #1
 8004586:	e7a6      	b.n	80044d6 <_vfiprintf_r+0xfe>
 8004588:	2300      	movs	r3, #0
 800458a:	3401      	adds	r4, #1
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 0c0a 	mov.w	ip, #10
 8004594:	4620      	mov	r0, r4
 8004596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459a:	3a30      	subs	r2, #48	; 0x30
 800459c:	2a09      	cmp	r2, #9
 800459e:	d903      	bls.n	80045a8 <_vfiprintf_r+0x1d0>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0c6      	beq.n	8004532 <_vfiprintf_r+0x15a>
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	e7c4      	b.n	8004532 <_vfiprintf_r+0x15a>
 80045a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ac:	4604      	mov	r4, r0
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7f0      	b.n	8004594 <_vfiprintf_r+0x1bc>
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	462a      	mov	r2, r5
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <_vfiprintf_r+0x22c>)
 80045ba:	a904      	add	r1, sp, #16
 80045bc:	4630      	mov	r0, r6
 80045be:	f3af 8000 	nop.w
 80045c2:	4607      	mov	r7, r0
 80045c4:	1c78      	adds	r0, r7, #1
 80045c6:	d1d6      	bne.n	8004576 <_vfiprintf_r+0x19e>
 80045c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ca:	07d9      	lsls	r1, r3, #31
 80045cc:	d405      	bmi.n	80045da <_vfiprintf_r+0x202>
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d402      	bmi.n	80045da <_vfiprintf_r+0x202>
 80045d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045d6:	f7ff fd2f 	bl	8004038 <__retarget_lock_release_recursive>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	065b      	lsls	r3, r3, #25
 80045de:	f53f af1d 	bmi.w	800441c <_vfiprintf_r+0x44>
 80045e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e4:	e71c      	b.n	8004420 <_vfiprintf_r+0x48>
 80045e6:	ab03      	add	r3, sp, #12
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	462a      	mov	r2, r5
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <_vfiprintf_r+0x22c>)
 80045ee:	a904      	add	r1, sp, #16
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f921 	bl	8004838 <_printf_i>
 80045f6:	e7e4      	b.n	80045c2 <_vfiprintf_r+0x1ea>
 80045f8:	080051e4 	.word	0x080051e4
 80045fc:	080051ee 	.word	0x080051ee
 8004600:	00000000 	.word	0x00000000
 8004604:	080043b3 	.word	0x080043b3
 8004608:	080051ea 	.word	0x080051ea

0800460c <malloc>:
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <malloc+0xc>)
 800460e:	4601      	mov	r1, r0
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	f000 b823 	b.w	800465c <_malloc_r>
 8004616:	bf00      	nop
 8004618:	20000064 	.word	0x20000064

0800461c <sbrk_aligned>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4e0e      	ldr	r6, [pc, #56]	; (8004658 <sbrk_aligned+0x3c>)
 8004620:	460c      	mov	r4, r1
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	4605      	mov	r5, r0
 8004626:	b911      	cbnz	r1, 800462e <sbrk_aligned+0x12>
 8004628:	f000 fcae 	bl	8004f88 <_sbrk_r>
 800462c:	6030      	str	r0, [r6, #0]
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 fca9 	bl	8004f88 <_sbrk_r>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	d00a      	beq.n	8004650 <sbrk_aligned+0x34>
 800463a:	1cc4      	adds	r4, r0, #3
 800463c:	f024 0403 	bic.w	r4, r4, #3
 8004640:	42a0      	cmp	r0, r4
 8004642:	d007      	beq.n	8004654 <sbrk_aligned+0x38>
 8004644:	1a21      	subs	r1, r4, r0
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fc9e 	bl	8004f88 <_sbrk_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d101      	bne.n	8004654 <sbrk_aligned+0x38>
 8004650:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004654:	4620      	mov	r0, r4
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	20000298 	.word	0x20000298

0800465c <_malloc_r>:
 800465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004660:	1ccd      	adds	r5, r1, #3
 8004662:	f025 0503 	bic.w	r5, r5, #3
 8004666:	3508      	adds	r5, #8
 8004668:	2d0c      	cmp	r5, #12
 800466a:	bf38      	it	cc
 800466c:	250c      	movcc	r5, #12
 800466e:	2d00      	cmp	r5, #0
 8004670:	4607      	mov	r7, r0
 8004672:	db01      	blt.n	8004678 <_malloc_r+0x1c>
 8004674:	42a9      	cmp	r1, r5
 8004676:	d905      	bls.n	8004684 <_malloc_r+0x28>
 8004678:	230c      	movs	r3, #12
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	2600      	movs	r6, #0
 800467e:	4630      	mov	r0, r6
 8004680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004684:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004758 <_malloc_r+0xfc>
 8004688:	f000 faa6 	bl	8004bd8 <__malloc_lock>
 800468c:	f8d8 3000 	ldr.w	r3, [r8]
 8004690:	461c      	mov	r4, r3
 8004692:	bb5c      	cbnz	r4, 80046ec <_malloc_r+0x90>
 8004694:	4629      	mov	r1, r5
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff ffc0 	bl	800461c <sbrk_aligned>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	4604      	mov	r4, r0
 80046a0:	d155      	bne.n	800474e <_malloc_r+0xf2>
 80046a2:	f8d8 4000 	ldr.w	r4, [r8]
 80046a6:	4626      	mov	r6, r4
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	d145      	bne.n	8004738 <_malloc_r+0xdc>
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	d048      	beq.n	8004742 <_malloc_r+0xe6>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	4631      	mov	r1, r6
 80046b4:	4638      	mov	r0, r7
 80046b6:	eb04 0903 	add.w	r9, r4, r3
 80046ba:	f000 fc65 	bl	8004f88 <_sbrk_r>
 80046be:	4581      	cmp	r9, r0
 80046c0:	d13f      	bne.n	8004742 <_malloc_r+0xe6>
 80046c2:	6821      	ldr	r1, [r4, #0]
 80046c4:	1a6d      	subs	r5, r5, r1
 80046c6:	4629      	mov	r1, r5
 80046c8:	4638      	mov	r0, r7
 80046ca:	f7ff ffa7 	bl	800461c <sbrk_aligned>
 80046ce:	3001      	adds	r0, #1
 80046d0:	d037      	beq.n	8004742 <_malloc_r+0xe6>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	442b      	add	r3, r5
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	f8d8 3000 	ldr.w	r3, [r8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d038      	beq.n	8004752 <_malloc_r+0xf6>
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	42a2      	cmp	r2, r4
 80046e4:	d12b      	bne.n	800473e <_malloc_r+0xe2>
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e00f      	b.n	800470c <_malloc_r+0xb0>
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	1b52      	subs	r2, r2, r5
 80046f0:	d41f      	bmi.n	8004732 <_malloc_r+0xd6>
 80046f2:	2a0b      	cmp	r2, #11
 80046f4:	d917      	bls.n	8004726 <_malloc_r+0xca>
 80046f6:	1961      	adds	r1, r4, r5
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	6025      	str	r5, [r4, #0]
 80046fc:	bf18      	it	ne
 80046fe:	6059      	strne	r1, [r3, #4]
 8004700:	6863      	ldr	r3, [r4, #4]
 8004702:	bf08      	it	eq
 8004704:	f8c8 1000 	streq.w	r1, [r8]
 8004708:	5162      	str	r2, [r4, r5]
 800470a:	604b      	str	r3, [r1, #4]
 800470c:	4638      	mov	r0, r7
 800470e:	f104 060b 	add.w	r6, r4, #11
 8004712:	f000 fa67 	bl	8004be4 <__malloc_unlock>
 8004716:	f026 0607 	bic.w	r6, r6, #7
 800471a:	1d23      	adds	r3, r4, #4
 800471c:	1af2      	subs	r2, r6, r3
 800471e:	d0ae      	beq.n	800467e <_malloc_r+0x22>
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	50a3      	str	r3, [r4, r2]
 8004724:	e7ab      	b.n	800467e <_malloc_r+0x22>
 8004726:	42a3      	cmp	r3, r4
 8004728:	6862      	ldr	r2, [r4, #4]
 800472a:	d1dd      	bne.n	80046e8 <_malloc_r+0x8c>
 800472c:	f8c8 2000 	str.w	r2, [r8]
 8004730:	e7ec      	b.n	800470c <_malloc_r+0xb0>
 8004732:	4623      	mov	r3, r4
 8004734:	6864      	ldr	r4, [r4, #4]
 8004736:	e7ac      	b.n	8004692 <_malloc_r+0x36>
 8004738:	4634      	mov	r4, r6
 800473a:	6876      	ldr	r6, [r6, #4]
 800473c:	e7b4      	b.n	80046a8 <_malloc_r+0x4c>
 800473e:	4613      	mov	r3, r2
 8004740:	e7cc      	b.n	80046dc <_malloc_r+0x80>
 8004742:	230c      	movs	r3, #12
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4638      	mov	r0, r7
 8004748:	f000 fa4c 	bl	8004be4 <__malloc_unlock>
 800474c:	e797      	b.n	800467e <_malloc_r+0x22>
 800474e:	6025      	str	r5, [r4, #0]
 8004750:	e7dc      	b.n	800470c <_malloc_r+0xb0>
 8004752:	605b      	str	r3, [r3, #4]
 8004754:	deff      	udf	#255	; 0xff
 8004756:	bf00      	nop
 8004758:	20000294 	.word	0x20000294

0800475c <_printf_common>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4616      	mov	r6, r2
 8004762:	4699      	mov	r9, r3
 8004764:	688a      	ldr	r2, [r1, #8]
 8004766:	690b      	ldr	r3, [r1, #16]
 8004768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800476c:	4293      	cmp	r3, r2
 800476e:	bfb8      	it	lt
 8004770:	4613      	movlt	r3, r2
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004778:	4607      	mov	r7, r0
 800477a:	460c      	mov	r4, r1
 800477c:	b10a      	cbz	r2, 8004782 <_printf_common+0x26>
 800477e:	3301      	adds	r3, #1
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0699      	lsls	r1, r3, #26
 8004786:	bf42      	ittt	mi
 8004788:	6833      	ldrmi	r3, [r6, #0]
 800478a:	3302      	addmi	r3, #2
 800478c:	6033      	strmi	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d106      	bne.n	80047a4 <_printf_common+0x48>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dc26      	bgt.n	80047f2 <_printf_common+0x96>
 80047a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a8:	1e13      	subs	r3, r2, #0
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	0692      	lsls	r2, r2, #26
 80047b2:	d42b      	bmi.n	800480c <_printf_common+0xb0>
 80047b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b8:	4649      	mov	r1, r9
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	3001      	adds	r0, #1
 80047c0:	d01e      	beq.n	8004800 <_printf_common+0xa4>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	6922      	ldr	r2, [r4, #16]
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	bf02      	ittt	eq
 80047ce:	68e5      	ldreq	r5, [r4, #12]
 80047d0:	6833      	ldreq	r3, [r6, #0]
 80047d2:	1aed      	subeq	r5, r5, r3
 80047d4:	68a3      	ldr	r3, [r4, #8]
 80047d6:	bf0c      	ite	eq
 80047d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047dc:	2500      	movne	r5, #0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfc4      	itt	gt
 80047e2:	1a9b      	subgt	r3, r3, r2
 80047e4:	18ed      	addgt	r5, r5, r3
 80047e6:	2600      	movs	r6, #0
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xc8>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4649      	mov	r1, r9
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c0      	blx	r8
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xac>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c6      	b.n	800479a <_printf_common+0x3e>
 800480c:	18e1      	adds	r1, r4, r3
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	2030      	movs	r0, #48	; 0x30
 8004812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004816:	4422      	add	r2, r4
 8004818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800481c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004820:	3302      	adds	r3, #2
 8004822:	e7c7      	b.n	80047b4 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa4>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x8e>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	7e0f      	ldrb	r7, [r1, #24]
 800483e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004840:	2f78      	cmp	r7, #120	; 0x78
 8004842:	4691      	mov	r9, r2
 8004844:	4680      	mov	r8, r0
 8004846:	460c      	mov	r4, r1
 8004848:	469a      	mov	sl, r3
 800484a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	; 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d4 	beq.w	8004a02 <_printf_i+0x1ca>
 800485a:	2f58      	cmp	r7, #88	; 0x58
 800485c:	f000 80c0 	beq.w	80049e0 <_printf_i+0x1a8>
 8004860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a101      	add	r1, pc, #4	; (adr r1, 8004878 <_printf_i+0x40>)
 8004874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049e9 	.word	0x080049e9
 80048a8:	08004911 	.word	0x08004911
 80048ac:	080049a3 	.word	0x080049a3
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a0b 	.word	0x08004a0b
 80048bc:	08004861 	.word	0x08004861
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049ab 	.word	0x080049ab
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	602a      	str	r2, [r5, #0]
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e09f      	b.n	8004a24 <_printf_i+0x1ec>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	0607      	lsls	r7, r0, #24
 80048ea:	f103 0104 	add.w	r1, r3, #4
 80048ee:	6029      	str	r1, [r5, #0]
 80048f0:	d501      	bpl.n	80048f6 <_printf_i+0xbe>
 80048f2:	681e      	ldr	r6, [r3, #0]
 80048f4:	e003      	b.n	80048fe <_printf_i+0xc6>
 80048f6:	0646      	lsls	r6, r0, #25
 80048f8:	d5fb      	bpl.n	80048f2 <_printf_i+0xba>
 80048fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80048fe:	2e00      	cmp	r6, #0
 8004900:	da03      	bge.n	800490a <_printf_i+0xd2>
 8004902:	232d      	movs	r3, #45	; 0x2d
 8004904:	4276      	negs	r6, r6
 8004906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490a:	485a      	ldr	r0, [pc, #360]	; (8004a74 <_printf_i+0x23c>)
 800490c:	230a      	movs	r3, #10
 800490e:	e012      	b.n	8004936 <_printf_i+0xfe>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	1d19      	adds	r1, r3, #4
 8004916:	6029      	str	r1, [r5, #0]
 8004918:	0605      	lsls	r5, r0, #24
 800491a:	d501      	bpl.n	8004920 <_printf_i+0xe8>
 800491c:	681e      	ldr	r6, [r3, #0]
 800491e:	e002      	b.n	8004926 <_printf_i+0xee>
 8004920:	0641      	lsls	r1, r0, #25
 8004922:	d5fb      	bpl.n	800491c <_printf_i+0xe4>
 8004924:	881e      	ldrh	r6, [r3, #0]
 8004926:	4853      	ldr	r0, [pc, #332]	; (8004a74 <_printf_i+0x23c>)
 8004928:	2f6f      	cmp	r7, #111	; 0x6f
 800492a:	bf0c      	ite	eq
 800492c:	2308      	moveq	r3, #8
 800492e:	230a      	movne	r3, #10
 8004930:	2100      	movs	r1, #0
 8004932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004936:	6865      	ldr	r5, [r4, #4]
 8004938:	60a5      	str	r5, [r4, #8]
 800493a:	2d00      	cmp	r5, #0
 800493c:	bfa2      	ittt	ge
 800493e:	6821      	ldrge	r1, [r4, #0]
 8004940:	f021 0104 	bicge.w	r1, r1, #4
 8004944:	6021      	strge	r1, [r4, #0]
 8004946:	b90e      	cbnz	r6, 800494c <_printf_i+0x114>
 8004948:	2d00      	cmp	r5, #0
 800494a:	d04b      	beq.n	80049e4 <_printf_i+0x1ac>
 800494c:	4615      	mov	r5, r2
 800494e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004952:	fb03 6711 	mls	r7, r3, r1, r6
 8004956:	5dc7      	ldrb	r7, [r0, r7]
 8004958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800495c:	4637      	mov	r7, r6
 800495e:	42bb      	cmp	r3, r7
 8004960:	460e      	mov	r6, r1
 8004962:	d9f4      	bls.n	800494e <_printf_i+0x116>
 8004964:	2b08      	cmp	r3, #8
 8004966:	d10b      	bne.n	8004980 <_printf_i+0x148>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	07de      	lsls	r6, r3, #31
 800496c:	d508      	bpl.n	8004980 <_printf_i+0x148>
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	6861      	ldr	r1, [r4, #4]
 8004972:	4299      	cmp	r1, r3
 8004974:	bfde      	ittt	le
 8004976:	2330      	movle	r3, #48	; 0x30
 8004978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800497c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004980:	1b52      	subs	r2, r2, r5
 8004982:	6122      	str	r2, [r4, #16]
 8004984:	f8cd a000 	str.w	sl, [sp]
 8004988:	464b      	mov	r3, r9
 800498a:	aa03      	add	r2, sp, #12
 800498c:	4621      	mov	r1, r4
 800498e:	4640      	mov	r0, r8
 8004990:	f7ff fee4 	bl	800475c <_printf_common>
 8004994:	3001      	adds	r0, #1
 8004996:	d14a      	bne.n	8004a2e <_printf_i+0x1f6>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	b004      	add	sp, #16
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f043 0320 	orr.w	r3, r3, #32
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	4833      	ldr	r0, [pc, #204]	; (8004a78 <_printf_i+0x240>)
 80049ac:	2778      	movs	r7, #120	; 0x78
 80049ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	6829      	ldr	r1, [r5, #0]
 80049b6:	061f      	lsls	r7, r3, #24
 80049b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049bc:	d402      	bmi.n	80049c4 <_printf_i+0x18c>
 80049be:	065f      	lsls	r7, r3, #25
 80049c0:	bf48      	it	mi
 80049c2:	b2b6      	uxthmi	r6, r6
 80049c4:	07df      	lsls	r7, r3, #31
 80049c6:	bf48      	it	mi
 80049c8:	f043 0320 	orrmi.w	r3, r3, #32
 80049cc:	6029      	str	r1, [r5, #0]
 80049ce:	bf48      	it	mi
 80049d0:	6023      	strmi	r3, [r4, #0]
 80049d2:	b91e      	cbnz	r6, 80049dc <_printf_i+0x1a4>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f023 0320 	bic.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	2310      	movs	r3, #16
 80049de:	e7a7      	b.n	8004930 <_printf_i+0xf8>
 80049e0:	4824      	ldr	r0, [pc, #144]	; (8004a74 <_printf_i+0x23c>)
 80049e2:	e7e4      	b.n	80049ae <_printf_i+0x176>
 80049e4:	4615      	mov	r5, r2
 80049e6:	e7bd      	b.n	8004964 <_printf_i+0x12c>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6826      	ldr	r6, [r4, #0]
 80049ec:	6961      	ldr	r1, [r4, #20]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	0635      	lsls	r5, r6, #24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x1c4>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x1ca>
 80049fc:	0670      	lsls	r0, r6, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x1c0>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	4615      	mov	r5, r2
 8004a08:	e7bc      	b.n	8004984 <_printf_i+0x14c>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbda 	bl	80001d0 <memchr>
 8004a1c:	b108      	cbz	r0, 8004a22 <_printf_i+0x1ea>
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	6060      	str	r0, [r4, #4]
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	e7aa      	b.n	8004984 <_printf_i+0x14c>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4649      	mov	r1, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	47d0      	blx	sl
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0ad      	beq.n	8004998 <_printf_i+0x160>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	d413      	bmi.n	8004a6a <_printf_i+0x232>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e7a6      	b.n	800499c <_printf_i+0x164>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d09d      	beq.n	8004998 <_printf_i+0x160>
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9903      	ldr	r1, [sp, #12]
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dcf2      	bgt.n	8004a4e <_printf_i+0x216>
 8004a68:	e7eb      	b.n	8004a42 <_printf_i+0x20a>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	f104 0619 	add.w	r6, r4, #25
 8004a70:	e7f5      	b.n	8004a5e <_printf_i+0x226>
 8004a72:	bf00      	nop
 8004a74:	080051f5 	.word	0x080051f5
 8004a78:	08005206 	.word	0x08005206

08004a7c <__sflush_r>:
 8004a7c:	898a      	ldrh	r2, [r1, #12]
 8004a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	0710      	lsls	r0, r2, #28
 8004a86:	460c      	mov	r4, r1
 8004a88:	d458      	bmi.n	8004b3c <__sflush_r+0xc0>
 8004a8a:	684b      	ldr	r3, [r1, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dc05      	bgt.n	8004a9c <__sflush_r+0x20>
 8004a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dc02      	bgt.n	8004a9c <__sflush_r+0x20>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	d0f9      	beq.n	8004a96 <__sflush_r+0x1a>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004aa8:	682f      	ldr	r7, [r5, #0]
 8004aaa:	6a21      	ldr	r1, [r4, #32]
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	d032      	beq.n	8004b16 <__sflush_r+0x9a>
 8004ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	075a      	lsls	r2, r3, #29
 8004ab6:	d505      	bpl.n	8004ac4 <__sflush_r+0x48>
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	1ac0      	subs	r0, r0, r3
 8004abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004abe:	b10b      	cbz	r3, 8004ac4 <__sflush_r+0x48>
 8004ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ac2:	1ac0      	subs	r0, r0, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aca:	6a21      	ldr	r1, [r4, #32]
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b0      	blx	r6
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	d106      	bne.n	8004ae4 <__sflush_r+0x68>
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	291d      	cmp	r1, #29
 8004ada:	d82b      	bhi.n	8004b34 <__sflush_r+0xb8>
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <__sflush_r+0x108>)
 8004ade:	410a      	asrs	r2, r1
 8004ae0:	07d6      	lsls	r6, r2, #31
 8004ae2:	d427      	bmi.n	8004b34 <__sflush_r+0xb8>
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	6062      	str	r2, [r4, #4]
 8004ae8:	04d9      	lsls	r1, r3, #19
 8004aea:	6922      	ldr	r2, [r4, #16]
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	d504      	bpl.n	8004afa <__sflush_r+0x7e>
 8004af0:	1c42      	adds	r2, r0, #1
 8004af2:	d101      	bne.n	8004af8 <__sflush_r+0x7c>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b903      	cbnz	r3, 8004afa <__sflush_r+0x7e>
 8004af8:	6560      	str	r0, [r4, #84]	; 0x54
 8004afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004afc:	602f      	str	r7, [r5, #0]
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d0c9      	beq.n	8004a96 <__sflush_r+0x1a>
 8004b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b06:	4299      	cmp	r1, r3
 8004b08:	d002      	beq.n	8004b10 <__sflush_r+0x94>
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff fa96 	bl	800403c <_free_r>
 8004b10:	2000      	movs	r0, #0
 8004b12:	6360      	str	r0, [r4, #52]	; 0x34
 8004b14:	e7c0      	b.n	8004a98 <__sflush_r+0x1c>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b0      	blx	r6
 8004b1c:	1c41      	adds	r1, r0, #1
 8004b1e:	d1c8      	bne.n	8004ab2 <__sflush_r+0x36>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0c5      	beq.n	8004ab2 <__sflush_r+0x36>
 8004b26:	2b1d      	cmp	r3, #29
 8004b28:	d001      	beq.n	8004b2e <__sflush_r+0xb2>
 8004b2a:	2b16      	cmp	r3, #22
 8004b2c:	d101      	bne.n	8004b32 <__sflush_r+0xb6>
 8004b2e:	602f      	str	r7, [r5, #0]
 8004b30:	e7b1      	b.n	8004a96 <__sflush_r+0x1a>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e7ad      	b.n	8004a98 <__sflush_r+0x1c>
 8004b3c:	690f      	ldr	r7, [r1, #16]
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	d0a9      	beq.n	8004a96 <__sflush_r+0x1a>
 8004b42:	0793      	lsls	r3, r2, #30
 8004b44:	680e      	ldr	r6, [r1, #0]
 8004b46:	bf08      	it	eq
 8004b48:	694b      	ldreq	r3, [r1, #20]
 8004b4a:	600f      	str	r7, [r1, #0]
 8004b4c:	bf18      	it	ne
 8004b4e:	2300      	movne	r3, #0
 8004b50:	eba6 0807 	sub.w	r8, r6, r7
 8004b54:	608b      	str	r3, [r1, #8]
 8004b56:	f1b8 0f00 	cmp.w	r8, #0
 8004b5a:	dd9c      	ble.n	8004a96 <__sflush_r+0x1a>
 8004b5c:	6a21      	ldr	r1, [r4, #32]
 8004b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b60:	4643      	mov	r3, r8
 8004b62:	463a      	mov	r2, r7
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b0      	blx	r6
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	dc06      	bgt.n	8004b7a <__sflush_r+0xfe>
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b78:	e78e      	b.n	8004a98 <__sflush_r+0x1c>
 8004b7a:	4407      	add	r7, r0
 8004b7c:	eba8 0800 	sub.w	r8, r8, r0
 8004b80:	e7e9      	b.n	8004b56 <__sflush_r+0xda>
 8004b82:	bf00      	nop
 8004b84:	dfbffffe 	.word	0xdfbffffe

08004b88 <_fflush_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	690b      	ldr	r3, [r1, #16]
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	b913      	cbnz	r3, 8004b98 <_fflush_r+0x10>
 8004b92:	2500      	movs	r5, #0
 8004b94:	4628      	mov	r0, r5
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	b118      	cbz	r0, 8004ba2 <_fflush_r+0x1a>
 8004b9a:	6a03      	ldr	r3, [r0, #32]
 8004b9c:	b90b      	cbnz	r3, 8004ba2 <_fflush_r+0x1a>
 8004b9e:	f7ff f925 	bl	8003dec <__sinit>
 8004ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f3      	beq.n	8004b92 <_fflush_r+0xa>
 8004baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bac:	07d0      	lsls	r0, r2, #31
 8004bae:	d404      	bmi.n	8004bba <_fflush_r+0x32>
 8004bb0:	0599      	lsls	r1, r3, #22
 8004bb2:	d402      	bmi.n	8004bba <_fflush_r+0x32>
 8004bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb6:	f7ff fa3e 	bl	8004036 <__retarget_lock_acquire_recursive>
 8004bba:	4628      	mov	r0, r5
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	f7ff ff5d 	bl	8004a7c <__sflush_r>
 8004bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bc4:	07da      	lsls	r2, r3, #31
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	d4e4      	bmi.n	8004b94 <_fflush_r+0xc>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	059b      	lsls	r3, r3, #22
 8004bce:	d4e1      	bmi.n	8004b94 <_fflush_r+0xc>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd2:	f7ff fa31 	bl	8004038 <__retarget_lock_release_recursive>
 8004bd6:	e7dd      	b.n	8004b94 <_fflush_r+0xc>

08004bd8 <__malloc_lock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	; (8004be0 <__malloc_lock+0x8>)
 8004bda:	f7ff ba2c 	b.w	8004036 <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	20000290 	.word	0x20000290

08004be4 <__malloc_unlock>:
 8004be4:	4801      	ldr	r0, [pc, #4]	; (8004bec <__malloc_unlock+0x8>)
 8004be6:	f7ff ba27 	b.w	8004038 <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	20000290 	.word	0x20000290

08004bf0 <__sread>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	f000 f9b4 	bl	8004f64 <_read_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	bfab      	itete	ge
 8004c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c02:	89a3      	ldrhlt	r3, [r4, #12]
 8004c04:	181b      	addge	r3, r3, r0
 8004c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c0a:	bfac      	ite	ge
 8004c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c0e:	81a3      	strhlt	r3, [r4, #12]
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <__swrite>:
 8004c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c16:	461f      	mov	r7, r3
 8004c18:	898b      	ldrh	r3, [r1, #12]
 8004c1a:	05db      	lsls	r3, r3, #23
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	4616      	mov	r6, r2
 8004c22:	d505      	bpl.n	8004c30 <__swrite+0x1e>
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	2302      	movs	r3, #2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f000 f988 	bl	8004f40 <_lseek_r>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4628      	mov	r0, r5
 8004c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c46:	f000 b9af 	b.w	8004fa8 <_write_r>

08004c4a <__sseek>:
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c52:	f000 f975 	bl	8004f40 <_lseek_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	bf15      	itete	ne
 8004c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c66:	81a3      	strheq	r3, [r4, #12]
 8004c68:	bf18      	it	ne
 8004c6a:	81a3      	strhne	r3, [r4, #12]
 8004c6c:	bd10      	pop	{r4, pc}

08004c6e <__sclose>:
 8004c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c72:	f000 b955 	b.w	8004f20 <_close_r>

08004c76 <_realloc_r>:
 8004c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	460e      	mov	r6, r1
 8004c80:	b921      	cbnz	r1, 8004c8c <_realloc_r+0x16>
 8004c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c86:	4611      	mov	r1, r2
 8004c88:	f7ff bce8 	b.w	800465c <_malloc_r>
 8004c8c:	b92a      	cbnz	r2, 8004c9a <_realloc_r+0x24>
 8004c8e:	f7ff f9d5 	bl	800403c <_free_r>
 8004c92:	4625      	mov	r5, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c9a:	f000 f9a5 	bl	8004fe8 <_malloc_usable_size_r>
 8004c9e:	4284      	cmp	r4, r0
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	d802      	bhi.n	8004caa <_realloc_r+0x34>
 8004ca4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ca8:	d812      	bhi.n	8004cd0 <_realloc_r+0x5a>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4640      	mov	r0, r8
 8004cae:	f7ff fcd5 	bl	800465c <_malloc_r>
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d0ed      	beq.n	8004c94 <_realloc_r+0x1e>
 8004cb8:	42bc      	cmp	r4, r7
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	bf28      	it	cs
 8004cc0:	463a      	movcs	r2, r7
 8004cc2:	f000 f983 	bl	8004fcc <memcpy>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4640      	mov	r0, r8
 8004cca:	f7ff f9b7 	bl	800403c <_free_r>
 8004cce:	e7e1      	b.n	8004c94 <_realloc_r+0x1e>
 8004cd0:	4635      	mov	r5, r6
 8004cd2:	e7df      	b.n	8004c94 <_realloc_r+0x1e>

08004cd4 <_getc_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b118      	cbz	r0, 8004ce4 <_getc_r+0x10>
 8004cdc:	6a03      	ldr	r3, [r0, #32]
 8004cde:	b90b      	cbnz	r3, 8004ce4 <_getc_r+0x10>
 8004ce0:	f7ff f884 	bl	8003dec <__sinit>
 8004ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce6:	07d8      	lsls	r0, r3, #31
 8004ce8:	d405      	bmi.n	8004cf6 <_getc_r+0x22>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	0599      	lsls	r1, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_getc_r+0x22>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf2:	f7ff f9a0 	bl	8004036 <__retarget_lock_acquire_recursive>
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	da0f      	bge.n	8004d20 <_getc_r+0x4c>
 8004d00:	4628      	mov	r0, r5
 8004d02:	4621      	mov	r1, r4
 8004d04:	f000 f8da 	bl	8004ebc <__srget_r>
 8004d08:	4605      	mov	r5, r0
 8004d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d0c:	07da      	lsls	r2, r3, #31
 8004d0e:	d405      	bmi.n	8004d1c <_getc_r+0x48>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	059b      	lsls	r3, r3, #22
 8004d14:	d402      	bmi.n	8004d1c <_getc_r+0x48>
 8004d16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d18:	f7ff f98e 	bl	8004038 <__retarget_lock_release_recursive>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	6022      	str	r2, [r4, #0]
 8004d26:	781d      	ldrb	r5, [r3, #0]
 8004d28:	e7ef      	b.n	8004d0a <_getc_r+0x36>

08004d2a <__swbuf_r>:
 8004d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	4614      	mov	r4, r2
 8004d30:	4605      	mov	r5, r0
 8004d32:	b118      	cbz	r0, 8004d3c <__swbuf_r+0x12>
 8004d34:	6a03      	ldr	r3, [r0, #32]
 8004d36:	b90b      	cbnz	r3, 8004d3c <__swbuf_r+0x12>
 8004d38:	f7ff f858 	bl	8003dec <__sinit>
 8004d3c:	69a3      	ldr	r3, [r4, #24]
 8004d3e:	60a3      	str	r3, [r4, #8]
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	071a      	lsls	r2, r3, #28
 8004d44:	d525      	bpl.n	8004d92 <__swbuf_r+0x68>
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	b31b      	cbz	r3, 8004d92 <__swbuf_r+0x68>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	1a98      	subs	r0, r3, r2
 8004d50:	6963      	ldr	r3, [r4, #20]
 8004d52:	b2f6      	uxtb	r6, r6
 8004d54:	4283      	cmp	r3, r0
 8004d56:	4637      	mov	r7, r6
 8004d58:	dc04      	bgt.n	8004d64 <__swbuf_r+0x3a>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f7ff ff13 	bl	8004b88 <_fflush_r>
 8004d62:	b9e0      	cbnz	r0, 8004d9e <__swbuf_r+0x74>
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	701e      	strb	r6, [r3, #0]
 8004d72:	6962      	ldr	r2, [r4, #20]
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d004      	beq.n	8004d84 <__swbuf_r+0x5a>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d506      	bpl.n	8004d8e <__swbuf_r+0x64>
 8004d80:	2e0a      	cmp	r6, #10
 8004d82:	d104      	bne.n	8004d8e <__swbuf_r+0x64>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7ff fefe 	bl	8004b88 <_fflush_r>
 8004d8c:	b938      	cbnz	r0, 8004d9e <__swbuf_r+0x74>
 8004d8e:	4638      	mov	r0, r7
 8004d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f805 	bl	8004da4 <__swsetup_r>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d0d5      	beq.n	8004d4a <__swbuf_r+0x20>
 8004d9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004da2:	e7f4      	b.n	8004d8e <__swbuf_r+0x64>

08004da4 <__swsetup_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <__swsetup_r+0xac>)
 8004da8:	4605      	mov	r5, r0
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	460c      	mov	r4, r1
 8004dae:	b118      	cbz	r0, 8004db8 <__swsetup_r+0x14>
 8004db0:	6a03      	ldr	r3, [r0, #32]
 8004db2:	b90b      	cbnz	r3, 8004db8 <__swsetup_r+0x14>
 8004db4:	f7ff f81a 	bl	8003dec <__sinit>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dbe:	0718      	lsls	r0, r3, #28
 8004dc0:	d422      	bmi.n	8004e08 <__swsetup_r+0x64>
 8004dc2:	06d9      	lsls	r1, r3, #27
 8004dc4:	d407      	bmi.n	8004dd6 <__swsetup_r+0x32>
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd4:	e034      	b.n	8004e40 <__swsetup_r+0x9c>
 8004dd6:	0758      	lsls	r0, r3, #29
 8004dd8:	d512      	bpl.n	8004e00 <__swsetup_r+0x5c>
 8004dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ddc:	b141      	cbz	r1, 8004df0 <__swsetup_r+0x4c>
 8004dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d002      	beq.n	8004dec <__swsetup_r+0x48>
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff f928 	bl	800403c <_free_r>
 8004dec:	2300      	movs	r3, #0
 8004dee:	6363      	str	r3, [r4, #52]	; 0x34
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6923      	ldr	r3, [r4, #16]
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f043 0308 	orr.w	r3, r3, #8
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	b94b      	cbnz	r3, 8004e20 <__swsetup_r+0x7c>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e16:	d003      	beq.n	8004e20 <__swsetup_r+0x7c>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7ff f84a 	bl	8003eb4 <__smakebuf_r>
 8004e20:	89a0      	ldrh	r0, [r4, #12]
 8004e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e26:	f010 0301 	ands.w	r3, r0, #1
 8004e2a:	d00a      	beq.n	8004e42 <__swsetup_r+0x9e>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	6963      	ldr	r3, [r4, #20]
 8004e32:	425b      	negs	r3, r3
 8004e34:	61a3      	str	r3, [r4, #24]
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	b943      	cbnz	r3, 8004e4c <__swsetup_r+0xa8>
 8004e3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e3e:	d1c4      	bne.n	8004dca <__swsetup_r+0x26>
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	0781      	lsls	r1, r0, #30
 8004e44:	bf58      	it	pl
 8004e46:	6963      	ldrpl	r3, [r4, #20]
 8004e48:	60a3      	str	r3, [r4, #8]
 8004e4a:	e7f4      	b.n	8004e36 <__swsetup_r+0x92>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e7f7      	b.n	8004e40 <__swsetup_r+0x9c>
 8004e50:	20000064 	.word	0x20000064

08004e54 <_putc_r>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	460d      	mov	r5, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	b118      	cbz	r0, 8004e66 <_putc_r+0x12>
 8004e5e:	6a03      	ldr	r3, [r0, #32]
 8004e60:	b90b      	cbnz	r3, 8004e66 <_putc_r+0x12>
 8004e62:	f7fe ffc3 	bl	8003dec <__sinit>
 8004e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e68:	07d8      	lsls	r0, r3, #31
 8004e6a:	d405      	bmi.n	8004e78 <_putc_r+0x24>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	0599      	lsls	r1, r3, #22
 8004e70:	d402      	bmi.n	8004e78 <_putc_r+0x24>
 8004e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e74:	f7ff f8df 	bl	8004036 <__retarget_lock_acquire_recursive>
 8004e78:	68a3      	ldr	r3, [r4, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	da05      	bge.n	8004e8e <_putc_r+0x3a>
 8004e82:	69a2      	ldr	r2, [r4, #24]
 8004e84:	4293      	cmp	r3, r2
 8004e86:	db12      	blt.n	8004eae <_putc_r+0x5a>
 8004e88:	b2eb      	uxtb	r3, r5
 8004e8a:	2b0a      	cmp	r3, #10
 8004e8c:	d00f      	beq.n	8004eae <_putc_r+0x5a>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	701d      	strb	r5, [r3, #0]
 8004e96:	b2ed      	uxtb	r5, r5
 8004e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9a:	07da      	lsls	r2, r3, #31
 8004e9c:	d405      	bmi.n	8004eaa <_putc_r+0x56>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	059b      	lsls	r3, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_putc_r+0x56>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f7ff f8c7 	bl	8004038 <__retarget_lock_release_recursive>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ff39 	bl	8004d2a <__swbuf_r>
 8004eb8:	4605      	mov	r5, r0
 8004eba:	e7ed      	b.n	8004e98 <_putc_r+0x44>

08004ebc <__srget_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	b118      	cbz	r0, 8004ecc <__srget_r+0x10>
 8004ec4:	6a03      	ldr	r3, [r0, #32]
 8004ec6:	b90b      	cbnz	r3, 8004ecc <__srget_r+0x10>
 8004ec8:	f7fe ff90 	bl	8003dec <__sinit>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f8a0 	bl	8005014 <__srefill_r>
 8004ed4:	b938      	cbnz	r0, 8004ee6 <__srget_r+0x2a>
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	7818      	ldrb	r0, [r3, #0]
 8004ee4:	bd38      	pop	{r3, r4, r5, pc}
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eea:	e7fb      	b.n	8004ee4 <__srget_r+0x28>

08004eec <memmove>:
 8004eec:	4288      	cmp	r0, r1
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	eb01 0402 	add.w	r4, r1, r2
 8004ef4:	d902      	bls.n	8004efc <memmove+0x10>
 8004ef6:	4284      	cmp	r4, r0
 8004ef8:	4623      	mov	r3, r4
 8004efa:	d807      	bhi.n	8004f0c <memmove+0x20>
 8004efc:	1e43      	subs	r3, r0, #1
 8004efe:	42a1      	cmp	r1, r4
 8004f00:	d008      	beq.n	8004f14 <memmove+0x28>
 8004f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f0a:	e7f8      	b.n	8004efe <memmove+0x12>
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4601      	mov	r1, r0
 8004f10:	428a      	cmp	r2, r1
 8004f12:	d100      	bne.n	8004f16 <memmove+0x2a>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f1e:	e7f7      	b.n	8004f10 <memmove+0x24>

08004f20 <_close_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_close_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fb fd56 	bl	80009dc <_close>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_close_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_close_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	2000029c 	.word	0x2000029c

08004f40 <_lseek_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	; (8004f60 <_lseek_r+0x20>)
 8004f44:	4604      	mov	r4, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fb fd5b 	bl	8000a0a <_lseek>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_lseek_r+0x1e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_lseek_r+0x1e>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	2000029c 	.word	0x2000029c

08004f64 <_read_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	; (8004f84 <_read_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fb fd5a 	bl	8000a2c <_read>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_read_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_read_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	2000029c 	.word	0x2000029c

08004f88 <_sbrk_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d06      	ldr	r5, [pc, #24]	; (8004fa4 <_sbrk_r+0x1c>)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	f7fb fee8 	bl	8000d68 <_sbrk>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_sbrk_r+0x1a>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_sbrk_r+0x1a>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	2000029c 	.word	0x2000029c

08004fa8 <_write_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_write_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fb fce4 	bl	8000984 <_write>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_write_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_write_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	2000029c 	.word	0x2000029c

08004fcc <memcpy>:
 8004fcc:	440a      	add	r2, r1
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fd4:	d100      	bne.n	8004fd8 <memcpy+0xc>
 8004fd6:	4770      	bx	lr
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	d1f9      	bne.n	8004fda <memcpy+0xe>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <_malloc_usable_size_r>:
 8004fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fec:	1f18      	subs	r0, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfbc      	itt	lt
 8004ff2:	580b      	ldrlt	r3, [r1, r0]
 8004ff4:	18c0      	addlt	r0, r0, r3
 8004ff6:	4770      	bx	lr

08004ff8 <lflush>:
 8004ff8:	898b      	ldrh	r3, [r1, #12]
 8004ffa:	f003 0309 	and.w	r3, r3, #9
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d103      	bne.n	800500a <lflush+0x12>
 8005002:	4b03      	ldr	r3, [pc, #12]	; (8005010 <lflush+0x18>)
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f7ff bdbf 	b.w	8004b88 <_fflush_r>
 800500a:	2000      	movs	r0, #0
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000064 	.word	0x20000064

08005014 <__srefill_r>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	4605      	mov	r5, r0
 800501a:	b118      	cbz	r0, 8005024 <__srefill_r+0x10>
 800501c:	6a03      	ldr	r3, [r0, #32]
 800501e:	b90b      	cbnz	r3, 8005024 <__srefill_r+0x10>
 8005020:	f7fe fee4 	bl	8003dec <__sinit>
 8005024:	2300      	movs	r3, #0
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800502e:	069e      	lsls	r6, r3, #26
 8005030:	d502      	bpl.n	8005038 <__srefill_r+0x24>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005036:	e05c      	b.n	80050f2 <__srefill_r+0xde>
 8005038:	0758      	lsls	r0, r3, #29
 800503a:	d448      	bmi.n	80050ce <__srefill_r+0xba>
 800503c:	06d9      	lsls	r1, r3, #27
 800503e:	d405      	bmi.n	800504c <__srefill_r+0x38>
 8005040:	2309      	movs	r3, #9
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7f2      	b.n	8005032 <__srefill_r+0x1e>
 800504c:	071a      	lsls	r2, r3, #28
 800504e:	d50b      	bpl.n	8005068 <__srefill_r+0x54>
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff fd98 	bl	8004b88 <_fflush_r>
 8005058:	2800      	cmp	r0, #0
 800505a:	d1ea      	bne.n	8005032 <__srefill_r+0x1e>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	60a0      	str	r0, [r4, #8]
 8005060:	f023 0308 	bic.w	r3, r3, #8
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	61a0      	str	r0, [r4, #24]
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	b91b      	cbnz	r3, 800507c <__srefill_r+0x68>
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f7fe ff1c 	bl	8003eb4 <__smakebuf_r>
 800507c:	89a6      	ldrh	r6, [r4, #12]
 800507e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005082:	07b3      	lsls	r3, r6, #30
 8005084:	d00f      	beq.n	80050a6 <__srefill_r+0x92>
 8005086:	2301      	movs	r3, #1
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <__srefill_r+0xe4>)
 800508a:	491c      	ldr	r1, [pc, #112]	; (80050fc <__srefill_r+0xe8>)
 800508c:	481c      	ldr	r0, [pc, #112]	; (8005100 <__srefill_r+0xec>)
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	f006 0609 	and.w	r6, r6, #9
 8005094:	f7fe fec2 	bl	8003e1c <_fwalk_sglue>
 8005098:	2e09      	cmp	r6, #9
 800509a:	81a7      	strh	r7, [r4, #12]
 800509c:	d103      	bne.n	80050a6 <__srefill_r+0x92>
 800509e:	4621      	mov	r1, r4
 80050a0:	4628      	mov	r0, r5
 80050a2:	f7ff fceb 	bl	8004a7c <__sflush_r>
 80050a6:	6922      	ldr	r2, [r4, #16]
 80050a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050aa:	6963      	ldr	r3, [r4, #20]
 80050ac:	6a21      	ldr	r1, [r4, #32]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b0      	blx	r6
 80050b4:	2800      	cmp	r0, #0
 80050b6:	6060      	str	r0, [r4, #4]
 80050b8:	dc1c      	bgt.n	80050f4 <__srefill_r+0xe0>
 80050ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050be:	bf17      	itett	ne
 80050c0:	2200      	movne	r2, #0
 80050c2:	f043 0320 	orreq.w	r3, r3, #32
 80050c6:	6062      	strne	r2, [r4, #4]
 80050c8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80050cc:	e7bc      	b.n	8005048 <__srefill_r+0x34>
 80050ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d0:	2900      	cmp	r1, #0
 80050d2:	d0cd      	beq.n	8005070 <__srefill_r+0x5c>
 80050d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d8:	4299      	cmp	r1, r3
 80050da:	d002      	beq.n	80050e2 <__srefill_r+0xce>
 80050dc:	4628      	mov	r0, r5
 80050de:	f7fe ffad 	bl	800403c <_free_r>
 80050e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	2000      	movs	r0, #0
 80050e8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0c0      	beq.n	8005070 <__srefill_r+0x5c>
 80050ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	2000      	movs	r0, #0
 80050f6:	e7fc      	b.n	80050f2 <__srefill_r+0xde>
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	08004ff9 	.word	0x08004ff9
 8005100:	20000018 	.word	0x20000018

08005104 <_init>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr

08005110 <_fini>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr
