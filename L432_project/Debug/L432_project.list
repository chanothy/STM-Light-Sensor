
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008970  08008970  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008978  08008978  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000a8  08008a28  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008a28  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab62  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398b  00000000  00000000  0003ac7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001212  00000000  00000000  0003fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ef5  00000000  00000000  00040f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bdc4  00000000  00000000  00066e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e432c  00000000  00000000  00082c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006efc  00000000  00000000  00166f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008610 	.word	0x08008610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008610 	.word	0x08008610

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f004 f9dd 	bl	800495c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f004 f8f3 	bl	8004796 <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f006 ff20 	bl	8007400 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f006 ff18 	bl	8007400 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f006 ff15 	bl	8007400 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	20000134 	.word	0x20000134
 80005e8:	08008628 	.word	0x08008628
 80005ec:	08008638 	.word	0x08008638
 80005f0:	08008648 	.word	0x08008648

080005f4 <help_command>:
	{"tsl237",tsl237_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f006 feff 	bl	8007400 <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f006 fefc 	bl	8007400 <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f006 fef9 	bl	8007400 <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f006 fef6 	bl	8007400 <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f006 fef3 	bl	8007400 <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08008678 	.word	0x08008678
 8000628:	08008690 	.word	0x08008690
 800062c:	08008698 	.word	0x08008698
 8000630:	080086a0 	.word	0x080086a0
 8000634:	080086a8 	.word	0x080086a8

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lof_command+0x1c>)
 8000646:	f002 fdc5 	bl	80031d4 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lon_command+0x1c>)
 8000666:	f002 fdb5 	bl	80031d4 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <test_command+0x40>)
 8000682:	f006 febd 	bl	8007400 <iprintf>
	if (arguments) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <test_command+0x44>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f006 ffca 	bl	8007628 <strtok>
 8000694:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000696:	e008      	b.n	80006aa <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <test_command+0x48>)
 800069c:	f006 feb0 	bl	8007400 <iprintf>
			pt = strtok (NULL, ",");
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <test_command+0x44>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f006 ffc0 	bl	8007628 <strtok>
 80006a8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <test_command+0x20>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	080086b0 	.word	0x080086b0
 80006bc:	080086c0 	.word	0x080086c0
 80006c0:	080086c4 	.word	0x080086c4

080006c4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01f      	beq.n	8000712 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006d2:	492a      	ldr	r1, [pc, #168]	; (800077c <ts_command+0xb8>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f006 ffa7 	bl	8007628 <strtok>
 80006da:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e0:	e014      	b.n	800070c <ts_command+0x48>
			if (pt != NULL) {
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <ts_command+0x42>
				t[i] = atoi(pt);
 80006e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ea:	f006 fd2e 	bl	800714a <atoi>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	3330      	adds	r3, #48	; 0x30
 80006f6:	443b      	add	r3, r7
 80006f8:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <ts_command+0xb8>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f006 ff92 	bl	8007628 <strtok>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	3301      	adds	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	2b02      	cmp	r3, #2
 8000710:	dde7      	ble.n	80006e2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ts_command+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db26      	blt.n	800076c <ts_command+0xa8>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b17      	cmp	r3, #23
 8000722:	dc23      	bgt.n	800076c <ts_command+0xa8>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <ts_command+0xa8>
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db1d      	blt.n	800076c <ts_command+0xa8>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b3b      	cmp	r3, #59	; 0x3b
 8000734:	dc1a      	bgt.n	800076c <ts_command+0xa8>
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d017      	beq.n	800076c <ts_command+0xa8>
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	db14      	blt.n	800076c <ts_command+0xa8>
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	dc11      	bgt.n	800076c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ts_command+0xbc>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <ts_command+0xc0>)
 8000766:	f003 ff79 	bl	800465c <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800076a:	e003      	b.n	8000774 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <ts_command+0xc4>)
 800076e:	f006 fe47 	bl	8007400 <iprintf>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	080086c0 	.word	0x080086c0
 8000780:	200000c4 	.word	0x200000c4
 8000784:	20000134 	.word	0x20000134
 8000788:	080086cc 	.word	0x080086cc

0800078c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800079a:	4924      	ldr	r1, [pc, #144]	; (800082c <ds_command+0xa0>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f006 ff43 	bl	8007628 <strtok>
 80007a2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e014      	b.n	80007d4 <ds_command+0x48>
			if (pt != NULL) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <ds_command+0x42>
				d[i] = atoi(pt);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f006 fcca 	bl	800714a <atoi>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007c4:	4919      	ldr	r1, [pc, #100]	; (800082c <ds_command+0xa0>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f006 ff2e 	bl	8007628 <strtok>
 80007cc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dde7      	ble.n	80007aa <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01d      	beq.n	800081c <ds_command+0x90>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd1a      	ble.n	800081c <ds_command+0x90>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	dc17      	bgt.n	800081c <ds_command+0x90>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d014      	beq.n	800081c <ds_command+0x90>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d011      	beq.n	800081c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ds_command+0xa4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <ds_command+0xa8>)
 8000816:	f004 f81a 	bl	800484e <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800081a:	e003      	b.n	8000824 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <ds_command+0xac>)
 800081e:	f006 fdef 	bl	8007400 <iprintf>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080086c0 	.word	0x080086c0
 8000830:	200000c4 	.word	0x200000c4
 8000834:	20000134 	.word	0x20000134
 8000838:	080086cc 	.word	0x080086cc
 800083c:	00000000 	.word	0x00000000

08000840 <tsl237_command>:

void __attribute__((weak)) tsl237_command(char *arguments) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  printf("Period %ld\n\r", .23);
 8000848:	a306      	add	r3, pc, #24	; (adr r3, 8000864 <tsl237_command+0x24>)
 800084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <tsl237_command+0x20>)
 8000850:	f006 fdd6 	bl	8007400 <iprintf>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	f3af 8000 	nop.w
 8000860:	080086d4 	.word	0x080086d4
 8000864:	d70a3d71 	.word	0xd70a3d71
 8000868:	3fcd70a3 	.word	0x3fcd70a3

0800086c <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000878:	482e      	ldr	r0, [pc, #184]	; (8000934 <get_commands+0xc8>)
 800087a:	f000 fc57 	bl	800112c <dequeue>
 800087e:	4603      	mov	r3, r0
 8000880:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 8000882:	e03a      	b.n	80008fa <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2b0a      	cmp	r3, #10
 8000888:	d027      	beq.n	80008da <get_commands+0x6e>
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b0d      	cmp	r3, #13
 800088e:	d024      	beq.n	80008da <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	2b7f      	cmp	r3, #127	; 0x7f
 8000894:	d10c      	bne.n	80008b0 <get_commands+0x44>
        if (counter > 0) {
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <get_commands+0xcc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d021      	beq.n	80008e2 <get_commands+0x76>
            printf("\b \b");
 800089e:	4827      	ldr	r0, [pc, #156]	; (800093c <get_commands+0xd0>)
 80008a0:	f006 fdae 	bl	8007400 <iprintf>
            counter--;
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <get_commands+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <get_commands+0xcc>)
 80008ac:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 80008ae:	e018      	b.n	80008e2 <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 fdb6 	bl	8007424 <putchar>
        command_buf[counter++]=ch;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <get_commands+0xcc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	491e      	ldr	r1, [pc, #120]	; (8000938 <get_commands+0xcc>)
 80008c0:	600a      	str	r2, [r1, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	7bfa      	ldrb	r2, [r7, #15]
 80008c8:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <get_commands+0xcc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b1d      	cmp	r3, #29
 80008d0:	d907      	bls.n	80008e2 <get_commands+0x76>
          mode=COMPLETE;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <get_commands+0xd4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
          break;
 80008d8:	e012      	b.n	8000900 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <get_commands+0xd4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
      break;
 80008e0:	e00e      	b.n	8000900 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 80008e2:	bf00      	nop
    }
    mask = disable();
 80008e4:	f000 f8b8 	bl	8000a58 <disable>
 80008e8:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <get_commands+0xc8>)
 80008ec:	f000 fc1e 	bl	800112c <dequeue>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f000 f8c2 	bl	8000a7e <restore>
  while (ch!=0) {
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1c1      	bne.n	8000884 <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <get_commands+0xd4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d110      	bne.n	800092a <get_commands+0xbe>
    command_buf[counter] = 0;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <get_commands+0xcc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <get_commands+0xd8>)
 8000916:	f006 fd73 	bl	8007400 <iprintf>
    counter = 0;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <get_commands+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <get_commands+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
    return(1);
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <get_commands+0xc0>
  }
  else {
    return(0);
 800092a:	2300      	movs	r3, #0
  }
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000022c 	.word	0x2000022c
 8000938:	200000c8 	.word	0x200000c8
 800093c:	080086e4 	.word	0x080086e4
 8000940:	200000cc 	.word	0x200000cc
 8000944:	080086e8 	.word	0x080086e8

08000948 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <parse_command+0x1e>
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <parse_command+0x1e>
     (!command) ||
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <parse_command+0x24>
     (!args)) {
    return (-1);
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e01e      	b.n	80009aa <parse_command+0x62>
  }
  *command = line;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	601a      	str	r2, [r3, #0]
  p = line;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000976:	e00b      	b.n	8000990 <parse_command+0x48>
    if (!*p) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <parse_command+0x42>
      *args = '\0';
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
      return(0);
 8000986:	2300      	movs	r3, #0
 8000988:	e00f      	b.n	80009aa <parse_command+0x62>
    }
    p++;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b2c      	cmp	r3, #44	; 0x2c
 8000996:	d1ef      	bne.n	8000978 <parse_command+0x30>
  }
  *p++ = '\0';
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	617a      	str	r2, [r7, #20]
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  *args = p;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]
  return (0);
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <execute_command+0x98>)
 80009c2:	617b      	str	r3, [r7, #20]
  int success = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]

  if (!line) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <execute_command+0x1c>
    return (-1);
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e038      	b.n	8000a46 <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 80009d4:	f107 0208 	add.w	r2, r7, #8
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb2 	bl	8000948 <parse_command>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ea:	d121      	bne.n	8000a30 <execute_command+0x78>
    printf("Error with parse command\n\r");
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <execute_command+0x9c>)
 80009ee:	f006 fd07 	bl	8007400 <iprintf>
    return (-1);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e026      	b.n	8000a46 <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbe5 	bl	80001d0 <strcmp>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10e      	bne.n	8000a2a <execute_command+0x72>
      if (!p->cmd_function) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <execute_command+0x62>
        return (-1);
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	e015      	b.n	8000a46 <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4610      	mov	r0, r2
 8000a22:	4798      	blx	r3
      success = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
      break;
 8000a28:	e006      	b.n	8000a38 <execute_command+0x80>
    }
    p++;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3308      	adds	r3, #8
 8000a2e:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1df      	bne.n	80009f8 <execute_command+0x40>
  }
  if (success) {
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <execute_command+0x8a>
    return (0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e001      	b.n	8000a46 <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000
 8000a54:	080086ec 	.word	0x080086ec

08000a58 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a62:	f3ef 8310 	mrs	r3, PRIMASK
 8000a66:	603b      	str	r3, [r7, #0]
  return(result);
 8000a68:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000a6a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <restore>:

void restore(uint32_t priority_mask) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f383 8810 	msr	PRIMASK, r3
}
 8000a90:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b089      	sub	sp, #36	; 0x24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	e853 3f00 	ldrex	r3, [r3]
 8000ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69fa      	ldr	r2, [r7, #28]
 8000abe:	61ba      	str	r2, [r7, #24]
 8000ac0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ac2:	6979      	ldr	r1, [r7, #20]
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	e841 2300 	strex	r3, r2, [r1]
 8000aca:	613b      	str	r3, [r7, #16]
   return(result);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1e9      	bne.n	8000aa6 <LL_USART_EnableIT_RXNE+0x8>
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  static uint32_t last = 0;
  uint32_t current;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7f1b      	ldrb	r3, [r3, #28]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d11e      	bne.n	8000b2e <HAL_TIM_IC_CaptureCallback+0x4e>
    current = htim->Instance->CCR1;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af6:	60fb      	str	r3, [r7, #12]
    if (last <= current) {
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d307      	bcc.n	8000b12 <HAL_TIM_IC_CaptureCallback+0x32>
      period = current - last;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e00a      	b.n	8000b28 <HAL_TIM_IC_CaptureCallback+0x48>
    }
    else {
      period = TIM2->ARR - last + current;
 8000b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	1ad2      	subs	r2, r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4413      	add	r3, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000b26:	601a      	str	r2, [r3, #0]
    }
    last = current;
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6013      	str	r3, [r2, #0]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000270 	.word	0x20000270
 8000b40:	2000026c 	.word	0x2000026c

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <main+0xc0>)
 8000b4c:	f000 faa1 	bl	8001092 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 fe43 	bl	80017da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f86c 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fa4c 	bl	8000ff4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b5c:	f000 fa1a 	bl	8000f94 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000b60:	f000 f92e 	bl	8000dc0 <MX_RTC_Init>
  MX_TIM2_Init();
 8000b64:	f000 f9be 	bl	8000ee4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b68:	f000 f8c6 	bl	8000cf8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <main+0xc4>)
 8000b6e:	f000 fb07 	bl	8001180 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <main+0xc8>)
 8000b74:	f7ff ff93 	bl	8000a9e <LL_USART_EnableIT_RXNE>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000b78:	463a      	mov	r2, r7
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4824      	ldr	r0, [pc, #144]	; (8000c10 <main+0xcc>)
 8000b80:	f004 fb26 	bl	80051d0 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000b84:	4823      	ldr	r0, [pc, #140]	; (8000c14 <main+0xd0>)
 8000b86:	f006 fc3b 	bl	8007400 <iprintf>

  prompt();
 8000b8a:	f7ff fcff 	bl	800058c <prompt>
  while (1)
  {
//	  printf("Period %d\n\r", period);

	  HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fe98 	bl	80018c4 <HAL_Delay>
	  if (get_commands(command)) {
 8000b94:	4820      	ldr	r0, [pc, #128]	; (8000c18 <main+0xd4>)
 8000b96:	f7ff fe69 	bl	800086c <get_commands>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d01e      	beq.n	8000bde <main+0x9a>
		  command_length = 16;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <main+0xd8>)
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	601a      	str	r2, [r3, #0]
		  if (command_length != -1) {
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <main+0xd8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bae:	d011      	beq.n	8000bd4 <main+0x90>
			  if(execute_command(command)) {
 8000bb0:	4819      	ldr	r0, [pc, #100]	; (8000c18 <main+0xd4>)
 8000bb2:	f7ff ff01 	bl	80009b8 <execute_command>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <main+0x84>
				  printf("NOK\n\r");
 8000bbc:	4818      	ldr	r0, [pc, #96]	; (8000c20 <main+0xdc>)
 8000bbe:	f006 fc1f 	bl	8007400 <iprintf>
				  prompt();
 8000bc2:	f7ff fce3 	bl	800058c <prompt>
 8000bc6:	e00a      	b.n	8000bde <main+0x9a>
			  }
			  else {
				  printf("OK\n\r");
 8000bc8:	4816      	ldr	r0, [pc, #88]	; (8000c24 <main+0xe0>)
 8000bca:	f006 fc19 	bl	8007400 <iprintf>
				  prompt();
 8000bce:	f7ff fcdd 	bl	800058c <prompt>
 8000bd2:	e004      	b.n	8000bde <main+0x9a>
			  }
		  }
		  else {
			  printf("NOK\n\r");
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <main+0xdc>)
 8000bd6:	f006 fc13 	bl	8007400 <iprintf>
			  prompt();
 8000bda:	f7ff fcd7 	bl	800058c <prompt>
		  }

	  }

	  if (alarm) {
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <main+0xe4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0d3      	beq.n	8000b8e <main+0x4a>
		  printf("alarm_triggered\n\r");
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <main+0xe8>)
 8000be8:	f006 fc0a 	bl	8007400 <iprintf>
		  lon_command();
 8000bec:	f7ff fd34 	bl	8000658 <lon_command>
		  HAL_Delay(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f000 fe67 	bl	80018c4 <HAL_Delay>
		  lof_command();
 8000bf6:	f7ff fd1f 	bl	8000638 <lof_command>
		  alarm = 0;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <main+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8000c00:	e7c5      	b.n	8000b8e <main+0x4a>
 8000c02:	bf00      	nop
 8000c04:	2000022c 	.word	0x2000022c
 8000c08:	200001a4 	.word	0x200001a4
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	20000158 	.word	0x20000158
 8000c14:	08008708 	.word	0x08008708
 8000c18:	20000254 	.word	0x20000254
 8000c1c:	20000264 	.word	0x20000264
 8000c20:	08008720 	.word	0x08008720
 8000c24:	08008728 	.word	0x08008728
 8000c28:	20000268 	.word	0x20000268
 8000c2c:	08008730 	.word	0x08008730

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b096      	sub	sp, #88	; 0x58
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2244      	movs	r2, #68	; 0x44
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 fce9 	bl	8007616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c56:	f002 faf3 	bl	8003240 <HAL_PWREx_ControlVoltageScaling>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c60:	f000 fa12 	bl	8001088 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c64:	f002 face 	bl	8003204 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <SystemClock_Config+0xc4>)
 8000c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c6e:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <SystemClock_Config+0xc4>)
 8000c70:	f023 0318 	bic.w	r3, r3, #24
 8000c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000c78:	231c      	movs	r3, #28
 8000c7a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c8c:	2360      	movs	r3, #96	; 0x60
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fb1b 	bl	80032ec <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cbc:	f000 f9e4 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 ff1b 	bl	8003b14 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ce4:	f000 f9d0 	bl	8001088 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ce8:	f003 fb2e 	bl	8004348 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	; 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d10:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d70:	f000 ff7e 	bl	8001c70 <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d7a:	f000 f985 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_ADC1_Init+0xc4>)
 8000d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2306      	movs	r3, #6
 8000d84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8a:	237f      	movs	r3, #127	; 0x7f
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_ADC1_Init+0xbc>)
 8000d9c:	f001 fa7c 	bl	8002298 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000da6:	f000 f96f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000d0 	.word	0x200000d0
 8000db8:	50040000 	.word	0x50040000
 8000dbc:	c7520000 	.word	0xc7520000

08000dc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b092      	sub	sp, #72	; 0x48
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	222c      	movs	r2, #44	; 0x2c
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fc18 	bl	8007616 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000de8:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <MX_RTC_Init+0x11c>)
 8000dea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000df4:	227f      	movs	r2, #127	; 0x7f
 8000df6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000dfa:	22ff      	movs	r2, #255	; 0xff
 8000dfc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e16:	4830      	ldr	r0, [pc, #192]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e18:	f003 fb98 	bl	800454c <HAL_RTC_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e22:	f000 f931 	bl	8001088 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e44:	2201      	movs	r2, #1
 8000e46:	4619      	mov	r1, r3
 8000e48:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e4a:	f003 fc07 	bl	800465c <HAL_RTC_SetTime>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000e54:	f000 f918 	bl	8001088 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e74:	2201      	movs	r2, #1
 8000e76:	4619      	mov	r1, r3
 8000e78:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000e7a:	f003 fce8 	bl	800484e <HAL_RTC_SetDate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000e84:	f000 f900 	bl	8001088 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000e90:	2330      	movs	r3, #48	; 0x30
 8000e92:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_RTC_Init+0x120>)
 8000ea2:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_RTC_Init+0x118>)
 8000ec0:	f003 fd9a 	bl	80049f8 <HAL_RTC_SetAlarm_IT>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000eca:	f000 f8dd 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3748      	adds	r7, #72	; 0x48
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000134 	.word	0x20000134
 8000edc:	40002800 	.word	0x40002800
 8000ee0:	80808000 	.word	0x80808000

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f2a:	4819      	ldr	r0, [pc, #100]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f2c:	f003 ffca 	bl	8004ec4 <HAL_TIM_IC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f36:	f000 f8a7 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f4a:	f004 ff43 	bl	8005dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f54:	f000 f898 	bl	8001088 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f70:	f004 fbe0 	bl	8005734 <HAL_TIM_IC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f7a:	f000 f885 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM2_Init+0xac>)
 8000f82:	f003 fff7 	bl	8004f74 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000158 	.word	0x20000158

08000f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <MX_USART2_UART_Init+0x5c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fd8:	f004 ff80 	bl	8005edc <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fe2:	f000 f851 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001a4 	.word	0x200001a4
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_GPIO_Init+0x8c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_GPIO_Init+0x8c>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_GPIO_Init+0x8c>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <MX_GPIO_Init+0x90>)
 8001058:	f002 f8bc 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800105c:	2308      	movs	r3, #8
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_GPIO_Init+0x90>)
 8001074:	f001 ff44 	bl	8002f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>

08001092 <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 800109a:	f7ff fcdd 	bl	8000a58 <disable>
 800109e:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  restore(mask);
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fce6 	bl	8000a7e <restore>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80010ca:	f7ff fcc5 	bl	8000a58 <disable>
 80010ce:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	425a      	negs	r2, r3
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	f002 021f 	and.w	r2, r2, #31
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6852      	ldr	r2, [r2, #4]
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d014      	beq.n	8001116 <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	425a      	negs	r2, r3
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	f002 021f 	and.w	r2, r2, #31
 8001108:	bf58      	it	pl
 800110a:	4253      	negpl	r3, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6013      	str	r3, [r2, #0]
    return_val=0;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e002      	b.n	800111c <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 800111c:	68b8      	ldr	r0, [r7, #8]
 800111e:	f7ff fcae 	bl	8000a7e <restore>
  return (return_val);
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <dequeue>:

uint8_t dequeue (queue_t *buf) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001138:	f7ff fc8e 	bl	8000a58 <disable>
 800113c:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d011      	beq.n	800116e <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	7a1b      	ldrb	r3, [r3, #8]
 8001154:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	425a      	negs	r2, r3
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	f002 021f 	and.w	r2, r2, #31
 8001166:	bf58      	it	pl
 8001168:	4253      	negpl	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff fc85 	bl	8000a7e <restore>
  return(return_val);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	b2db      	uxtb	r3, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <RetargetInit+0x28>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <RetargetInit+0x2c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	2202      	movs	r2, #2
 8001198:	2100      	movs	r1, #0
 800119a:	f006 f94b 	bl	8007434 <setvbuf>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000274 	.word	0x20000274
 80011ac:	200000a4 	.word	0x200000a4

080011b0 <_isatty>:

int _isatty(int fd) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db04      	blt.n	80011c8 <_isatty+0x18>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	dc01      	bgt.n	80011c8 <_isatty+0x18>
    return 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e005      	b.n	80011d4 <_isatty+0x24>

  errno = EBADF;
 80011c8:	f006 fad0 	bl	800776c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2209      	movs	r2, #9
 80011d0:	601a      	str	r2, [r3, #0]
  return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_write>:

int _write(int fd, char* ptr, int len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <_write+0x18>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d111      	bne.n	8001218 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <_write+0x54>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	f004 feb9 	bl	8005f78 <HAL_UART_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <_write+0x38>
      return len;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	e008      	b.n	8001226 <_write+0x4a>
    else
      return EIO;
 8001214:	2305      	movs	r3, #5
 8001216:	e006      	b.n	8001226 <_write+0x4a>
  }
  errno = EBADF;
 8001218:	f006 faa8 	bl	800776c <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	2209      	movs	r2, #9
 8001220:	601a      	str	r2, [r3, #0]
  return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000274 	.word	0x20000274

08001234 <_close>:

int _close(int fd) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db04      	blt.n	800124c <_close+0x18>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	dc01      	bgt.n	800124c <_close+0x18>
    return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e006      	b.n	800125a <_close+0x26>

  errno = EBADF;
 800124c:	f006 fa8e 	bl	800776c <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	2209      	movs	r2, #9
 8001254:	601a      	str	r2, [r3, #0]
  return -1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800126e:	f006 fa7d 	bl	800776c <__errno>
 8001272:	4603      	mov	r3, r0
 8001274:	2209      	movs	r2, #9
 8001276:	601a      	str	r2, [r3, #0]
  return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_read>:

int _read(int fd, char* ptr, int len) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d110      	bne.n	80012b8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <_read+0x4c>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2201      	movs	r2, #1
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	f004 fef3 	bl	800608c <HAL_UART_Receive>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <_read+0x30>
      return 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e008      	b.n	80012c6 <_read+0x42>
    else
      return EIO;
 80012b4:	2305      	movs	r3, #5
 80012b6:	e006      	b.n	80012c6 <_read+0x42>
  }
  errno = EBADF;
 80012b8:	f006 fa58 	bl	800776c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	2209      	movs	r2, #9
 80012c0:	601a      	str	r2, [r3, #0]
  return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000274 	.word	0x20000274

080012d4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db08      	blt.n	80012f6 <_fstat+0x22>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	dc05      	bgt.n	80012f6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f0:	605a      	str	r2, [r3, #4]
    return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e005      	b.n	8001302 <_fstat+0x2e>
  }

  errno = EBADF;
 80012f6:	f006 fa39 	bl	800776c <__errno>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2209      	movs	r2, #9
 80012fe:	601a      	str	r2, [r3, #0]
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6613      	str	r3, [r2, #96]	; 0x60
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x44>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x44>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b098      	sub	sp, #96	; 0x60
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2254      	movs	r2, #84	; 0x54
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f006 f956 	bl	8007616 <memset>
  if(hadc->Instance==ADC1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_ADC_MspInit+0x90>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d132      	bne.n	80013da <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001378:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800137a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001380:	2301      	movs	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001388:	2310      	movs	r3, #16
 800138a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fdda 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80013ae:	f7ff fe6b 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_ADC_MspInit+0x94>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_ADC_MspInit+0x94>)
 80013b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_ADC_MspInit+0x94>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2012      	movs	r0, #18
 80013d0:	f001 fc51 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80013d4:	2012      	movs	r0, #18
 80013d6:	f001 fc6a 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3760      	adds	r7, #96	; 0x60
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	50040000 	.word	0x50040000
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b098      	sub	sp, #96	; 0x60
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2254      	movs	r2, #84	; 0x54
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 f90a 	bl	8007616 <memset>
  if(hrtc->Instance==RTC)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_RTC_MspInit+0x68>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d11f      	bne.n	800144c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001416:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fd9d 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001428:	f7ff fe2e 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RTC_MspInit+0x6c>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_RTC_MspInit+0x6c>)
 8001434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2029      	movs	r0, #41	; 0x29
 8001442:	f001 fc18 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001446:	2029      	movs	r0, #41	; 0x29
 8001448:	f001 fc31 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3760      	adds	r7, #96	; 0x60
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40002800 	.word	0x40002800
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147c:	d130      	bne.n	80014e0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_TIM_IC_MspInit+0x8c>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014ae:	2320      	movs	r3, #32
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f001 fd18 	bl	8002f00 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	201c      	movs	r0, #28
 80014d6:	f001 fbce 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014da:	201c      	movs	r0, #28
 80014dc:	f001 fbe7 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09e      	sub	sp, #120	; 0x78
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2254      	movs	r2, #84	; 0x54
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f006 f882 	bl	8007616 <memset>
  if(huart->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <HAL_UART_MspInit+0xdc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d150      	bne.n	80015be <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800151c:	2302      	movs	r3, #2
 800151e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fd17 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff fda8 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_UART_MspInit+0xe0>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_UART_MspInit+0xe0>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_UART_MspInit+0xe0>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_UART_MspInit+0xe0>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_UART_MspInit+0xe0>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_UART_MspInit+0xe0>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001568:	2304      	movs	r3, #4
 800156a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001578:	2307      	movs	r3, #7
 800157a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f001 fcbb 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800158a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800159c:	2303      	movs	r3, #3
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f001 fca9 	bl	8002f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2026      	movs	r0, #38	; 0x26
 80015b4:	f001 fb5f 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b8:	2026      	movs	r0, #38	; 0x26
 80015ba:	f001 fb78 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3778      	adds	r7, #120	; 0x78
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f932 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <ADC1_IRQHandler+0x10>)
 800162a:	f000 fc63 	bl	8001ef4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000d0 	.word	0x200000d0

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f003 ff77 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000158 	.word	0x20000158

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <USART2_IRQHandler+0x40>)
 8001652:	f004 fde5 	bl	8006220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 8001656:	f005 fecb 	bl	80073f0 <getchar>
 800165a:	4603      	mov	r3, r0
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <USART2_IRQHandler+0x44>)
 8001660:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <USART2_IRQHandler+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <USART2_IRQHandler+0x48>)
 800166a:	f7ff fd26 	bl	80010ba <enqueue>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <USART2_IRQHandler+0x48>)
 8001676:	f7ff fd59 	bl	800112c <dequeue>
      enqueue(&buf,ch);
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <USART2_IRQHandler+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <USART2_IRQHandler+0x48>)
 8001682:	f7ff fd1a 	bl	80010ba <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001a4 	.word	0x200001a4
 8001690:	20000278 	.word	0x20000278
 8001694:	2000022c 	.word	0x2000022c

08001698 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <RTC_Alarm_IRQHandler+0x14>)
 800169e:	f003 fae7 	bl	8004c70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <RTC_Alarm_IRQHandler+0x18>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000134 	.word	0x20000134
 80016b0:	20000268 	.word	0x20000268

080016b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_kill>:

int _kill(int pid, int sig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ce:	f006 f84d 	bl	800776c <__errno>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2216      	movs	r2, #22
 80016d6:	601a      	str	r2, [r3, #0]
  return -1;
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_exit>:

void _exit (int status)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe7 	bl	80016c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f6:	e7fe      	b.n	80016f6 <_exit+0x12>

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f006 f820 	bl	800776c <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20010000 	.word	0x20010000
 8001758:	00000400 	.word	0x00000400
 800175c:	2000027c 	.word	0x2000027c
 8001760:	200003d0 	.word	0x200003d0

08001764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopForever+0x2>
 800178c:	f7ff ffea 	bl	8001764 <SystemInit>
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <LoopForever+0x6>)
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <LoopForever+0xa>)
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <LoopForever+0xe>)
 8001796:	2300      	movs	r3, #0
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:
 800179a:	58d4      	ldr	r4, [r2, r3]
 800179c:	50c4      	str	r4, [r0, r3]
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:
 80017a0:	18c4      	adds	r4, r0, r3
 80017a2:	428c      	cmp	r4, r1
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <LoopForever+0x12>)
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <LoopForever+0x16>)
 80017aa:	2300      	movs	r3, #0
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:
 80017b2:	42a2      	cmp	r2, r4
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>
 80017b6:	f005 ffdf 	bl	8007778 <__libc_init_array>
 80017ba:	f7ff f9c3 	bl	8000b44 <main>

080017be <LoopForever>:
 80017be:	e7fe      	b.n	80017be <LoopForever>
 80017c0:	20010000 	.word	0x20010000
 80017c4:	20000000 	.word	0x20000000
 80017c8:	200000a8 	.word	0x200000a8
 80017cc:	08008980 	.word	0x08008980
 80017d0:	200000a8 	.word	0x200000a8
 80017d4:	200003d0 	.word	0x200003d0

080017d8 <CAN1_RX0_IRQHandler>:
 80017d8:	e7fe      	b.n	80017d8 <CAN1_RX0_IRQHandler>

080017da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f001 fa3b 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f80e 	bl	800180c <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	e001      	b.n	8001800 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017fc:	f7ff fd86 	bl	800130c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001800:	79fb      	ldrb	r3, [r7, #7]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_InitTick+0x6c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d023      	beq.n	8001868 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_InitTick+0x70>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_InitTick+0x6c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fa47 	bl	8002cca <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d809      	bhi.n	800185c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f001 fa11 	bl	8002c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_InitTick+0x74>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e007      	b.n	800186c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e004      	b.n	800186c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e001      	b.n	800186c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000048 	.word	0x20000048
 800187c:	20000040 	.word	0x20000040
 8001880:	20000044 	.word	0x20000044

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000048 	.word	0x20000048
 80018a8:	20000280 	.word	0x20000280

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000280 	.word	0x20000280

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000048 	.word	0x20000048

0800190c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3360      	adds	r3, #96	; 0x60
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <LL_ADC_SetOffset+0x44>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	03fff000 	.word	0x03fff000

080019bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3360      	adds	r3, #96	; 0x60
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3330      	adds	r3, #48	; 0x30
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	211f      	movs	r1, #31
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 011f 	and.w	r1, r3, #31
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	0e5b      	lsrs	r3, r3, #25
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0d1b      	lsrs	r3, r3, #20
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2107      	movs	r1, #7
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0d1b      	lsrs	r3, r3, #20
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	431a      	orrs	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0318 	and.w	r3, r3, #24
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b3c:	40d9      	lsrs	r1, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	400b      	ands	r3, r1
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	0007ffff 	.word	0x0007ffff

08001b60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6093      	str	r3, [r2, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b98:	d101      	bne.n	8001b9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be8:	d101      	bne.n	8001bee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <LL_ADC_IsEnabled+0x18>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_ADC_IsEnabled+0x1a>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d101      	bne.n	8001c3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e126      	b.n	8001ed8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fb5b 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff67 	bl	8001b84 <LL_ADC_IsDeepPowerDownEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff4d 	bl	8001b60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff82 	bl	8001bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff66 	bl	8001bac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce0:	4b7f      	ldr	r3, [pc, #508]	; (8001ee0 <HAL_ADC_Init+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_ADC_Init+0x274>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	3301      	adds	r3, #1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff64 	bl	8001bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f043 0210 	orr.w	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff75 	bl	8001c22 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 80bf 	bne.w	8001ec6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80bb 	bne.w	8001ec6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d58:	f043 0202 	orr.w	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff49 	bl	8001bfc <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d70:	485d      	ldr	r0, [pc, #372]	; (8001ee8 <HAL_ADC_Init+0x278>)
 8001d72:	f7ff ff43 	bl	8001bfc <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4619      	mov	r1, r3
 8001d82:	485a      	ldr	r0, [pc, #360]	; (8001eec <HAL_ADC_Init+0x27c>)
 8001d84:	f7ff fdc2 	bl	800190c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e5b      	ldrb	r3, [r3, #25]
 8001d8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	045b      	lsls	r3, r3, #17
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_ADC_Init+0x280>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff25 	bl	8001c48 <LL_ADC_INJ_IsConversionOngoing>
 8001dfe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d13d      	bne.n	8001e82 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d13a      	bne.n	8001e82 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e10:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e18:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e28:	f023 0302 	bic.w	r3, r3, #2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	69b9      	ldr	r1, [r7, #24]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d118      	bne.n	8001e72 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e62:	430a      	orrs	r2, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10c      	bne.n	8001ea4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f023 010f 	bic.w	r1, r3, #15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020f 	bic.w	r2, r2, #15
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000040 	.word	0x20000040
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	50040000 	.word	0x50040000
 8001eec:	50040300 	.word	0x50040300
 8001ef0:	fff0c007 	.word	0xfff0c007

08001ef4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x56>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fdb5 	bl	8002aac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x6a>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d05e      	beq.n	8002026 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d059      	beq.n	8002026 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fd45 	bl	8001a1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03e      	beq.n	8002018 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d135      	bne.n	8002018 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d12e      	bne.n	8002018 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe2f 	bl	8001c22 <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11a      	bne.n	8002000 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 020c 	bic.w	r2, r2, #12
 8001fd8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d112      	bne.n	8002018 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8001ffe:	e00b      	b.n	8002018 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f91f 	bl	800225c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <HAL_ADC_IRQHandler+0x146>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002040:	2b00      	cmp	r3, #0
 8002042:	d072      	beq.n	800212a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d06d      	beq.n	800212a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fd16 	bl	8001a9c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002070:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fcd1 	bl	8001a1e <LL_ADC_REG_IsTriggerSourceSWStart>
 800207c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d047      	beq.n	800211c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x1b2>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d03f      	beq.n	800211c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d13a      	bne.n	800211c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d133      	bne.n	800211c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d12e      	bne.n	800211c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fdc0 	bl	8001c48 <LL_ADC_INJ_IsConversionOngoing>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11a      	bne.n	8002104 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020dc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
 8002102:	e00b      	b.n	800211c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fc9d 	bl	8002a5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2260      	movs	r2, #96	; 0x60
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d011      	beq.n	8002158 <HAL_ADC_IRQHandler+0x264>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f890 	bl	8002270 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_ADC_IRQHandler+0x294>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fc83 	bl	8002a84 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x2c4>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fc75 	bl	8002a98 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d02a      	beq.n	8002218 <HAL_ADC_IRQHandler+0x324>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d025      	beq.n	8002218 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e008      	b.n	80021ec <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f83a 	bl	8002284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2210      	movs	r2, #16
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	d018      	beq.n	8002254 <HAL_ADC_IRQHandler+0x360>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f043 0208 	orr.w	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fc0e 	bl	8002a70 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0b6      	sub	sp, #216	; 0xd8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x22>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e3bb      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x79a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fcab 	bl	8001c22 <LL_ADC_REG_IsConversionOngoing>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 83a0 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d824      	bhi.n	800232e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d81b      	bhi.n	8002326 <HAL_ADC_ConfigChannel+0x8e>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_ADC_ConfigChannel+0x5c>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002305 	.word	0x08002305
 80022f8:	0800230d 	.word	0x0800230d
 80022fc:	08002315 	.word	0x08002315
 8002300:	0800231d 	.word	0x0800231d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002304:	230c      	movs	r3, #12
 8002306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800230a:	e010      	b.n	800232e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800230c:	2312      	movs	r3, #18
 800230e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002312:	e00c      	b.n	800232e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002314:	2318      	movs	r3, #24
 8002316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800231a:	e008      	b.n	800232e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800231c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002326:	2306      	movs	r3, #6
 8002328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800232c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800233c:	f7ff fb82 	bl	8001a44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fc6c 	bl	8001c22 <LL_ADC_REG_IsConversionOngoing>
 800234a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fc78 	bl	8001c48 <LL_ADC_INJ_IsConversionOngoing>
 8002358:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800235c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 81a4 	bne.w	80026ae <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 819f 	bne.w	80026ae <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	461a      	mov	r2, r3
 800237e:	f7ff fba0 	bl	8001ac2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d00a      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b4:	f7ff fade 	bl	8001974 <LL_ADC_SetOffset>
 80023b8:	e179      	b.n	80026ae <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fafb 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x14e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff faf0 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	0e9b      	lsrs	r3, r3, #26
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	e01e      	b.n	8002424 <HAL_ADC_ConfigChannel+0x18c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fae5 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800240c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8002414:	2320      	movs	r3, #32
 8002416:	e004      	b.n	8002422 <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1a4>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	e018      	b.n	800246e <HAL_ADC_ConfigChannel+0x1d6>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e004      	b.n	800246e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246e:	429a      	cmp	r2, r3
 8002470:	d106      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fab4 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fa98 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x214>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fa8d 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	f003 021f 	and.w	r2, r3, #31
 80024aa:	e01e      	b.n	80024ea <HAL_ADC_ConfigChannel+0x252>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fa82 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e004      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x26a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	e018      	b.n	8002534 <HAL_ADC_ConfigChannel+0x29c>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800251a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800251e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e004      	b.n	8002534 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800252a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002534:	429a      	cmp	r2, r3
 8002536:	d106      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	2101      	movs	r1, #1
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa51 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2102      	movs	r1, #2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fa35 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x2da>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa2a 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	e01e      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x318>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fa1f 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e004      	b.n	80025ae <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x330>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	e014      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x35a>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80025d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80025dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f9f2 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2103      	movs	r1, #3
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9d6 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x398>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2103      	movs	r1, #3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f9cb 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	f003 021f 	and.w	r2, r3, #31
 800262e:	e017      	b.n	8002660 <HAL_ADC_ConfigChannel+0x3c8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2103      	movs	r1, #3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9c0 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800264c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e003      	b.n	800265e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x3e0>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	e011      	b.n	800269c <HAL_ADC_ConfigChannel+0x404>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002688:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800268a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2103      	movs	r1, #3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f99d 	bl	80019e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff faa2 	bl	8001bfc <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8140 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f7ff fa23 	bl	8001b18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4a8f      	ldr	r2, [pc, #572]	; (8002914 <HAL_ADC_ConfigChannel+0x67c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 8131 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x46e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	bf94      	ite	ls
 80026fe:	2301      	movls	r3, #1
 8002700:	2300      	movhi	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e019      	b.n	800273a <HAL_ADC_ConfigChannel+0x4a2>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2b09      	cmp	r3, #9
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273a:	2b00      	cmp	r3, #0
 800273c:	d079      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_ADC_ConfigChannel+0x4c2>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002758:	e015      	b.n	8002786 <HAL_ADC_ConfigChannel+0x4ee>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3301      	adds	r3, #1
 8002780:	069b      	lsls	r3, r3, #26
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x50e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	e017      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x53e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e003      	b.n	80027ca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	ea42 0103 	orr.w	r1, r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x564>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0e9b      	lsrs	r3, r3, #26
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	051b      	lsls	r3, r3, #20
 80027fa:	e018      	b.n	800282e <HAL_ADC_ConfigChannel+0x596>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 021f 	and.w	r2, r3, #31
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282e:	430b      	orrs	r3, r1
 8002830:	e081      	b.n	8002936 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_ADC_ConfigChannel+0x5b6>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	3301      	adds	r3, #1
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284c:	e015      	b.n	800287a <HAL_ADC_ConfigChannel+0x5e2>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_ADC_ConfigChannel+0x602>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	e017      	b.n	80028ca <HAL_ADC_ConfigChannel+0x632>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	61bb      	str	r3, [r7, #24]
  return result;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	ea42 0103 	orr.w	r1, r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x65e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3b1e      	subs	r3, #30
 80028ee:	051b      	lsls	r3, r3, #20
 80028f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f4:	e01e      	b.n	8002934 <HAL_ADC_ConfigChannel+0x69c>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	60fb      	str	r3, [r7, #12]
  return result;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e006      	b.n	8002920 <HAL_ADC_ConfigChannel+0x688>
 8002912:	bf00      	nop
 8002914:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	051b      	lsls	r3, r3, #20
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002934:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293a:	4619      	mov	r1, r3
 800293c:	f7ff f8c1 	bl	8001ac2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_ADC_ConfigChannel+0x7a4>)
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d06c      	beq.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800294c:	483c      	ldr	r0, [pc, #240]	; (8002a40 <HAL_ADC_ConfigChannel+0x7a8>)
 800294e:	f7ff f803 	bl	8001958 <LL_ADC_GetCommonPathInternalCh>
 8002952:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <HAL_ADC_ConfigChannel+0x7ac>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d127      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d121      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d157      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800297a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297e:	4619      	mov	r1, r3
 8002980:	482f      	ldr	r0, [pc, #188]	; (8002a40 <HAL_ADC_ConfigChannel+0x7a8>)
 8002982:	f7fe ffd6 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_ADC_ConfigChannel+0x7b4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_ADC_ConfigChannel+0x7b8>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	099b      	lsrs	r3, r3, #6
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ae:	e03a      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_ADC_ConfigChannel+0x7bc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d113      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d12a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d8:	4619      	mov	r1, r3
 80029da:	4819      	ldr	r0, [pc, #100]	; (8002a40 <HAL_ADC_ConfigChannel+0x7a8>)
 80029dc:	f7fe ffa9 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e0:	e021      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_ADC_ConfigChannel+0x7c0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d11c      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_ADC_ConfigChannel+0x7b0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a0e:	f7fe ff90 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
 8002a12:	e008      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	37d8      	adds	r7, #216	; 0xd8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	80080000 	.word	0x80080000
 8002a40:	50040300 	.word	0x50040300
 8002a44:	c7520000 	.word	0xc7520000
 8002a48:	50040000 	.word	0x50040000
 8002a4c:	20000040 	.word	0x20000040
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	cb840000 	.word	0xcb840000
 8002a58:	80000001 	.word	0x80000001

08002a5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff29 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff3e 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff31 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Start_IT+0x20>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e04b      	b.n	8002d9a <HAL_DMA_Start_IT+0xb8>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d13a      	bne.n	8002d8c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8b0 	bl	8002ea0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 020e 	orr.w	r2, r2, #14
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e00f      	b.n	8002d7a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 020a 	orr.w	r2, r2, #10
 8002d78:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e005      	b.n	8002d98 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
 8002d96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e022      	b.n	8002e12 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f003 021c 	and.w	r2, r3, #28
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d005      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e029      	b.n	8002e96 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 020e 	bic.w	r2, r2, #14
 8002e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f003 021c 	and.w	r2, r3, #28
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    }
  }
  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f003 021c 	and.w	r2, r3, #28
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d108      	bne.n	8002ee4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ee2:	e007      	b.n	8002ef4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0e:	e148      	b.n	80031a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 813a 	beq.w	800319c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d005      	beq.n	8002f40 <HAL_GPIO_Init+0x40>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d130      	bne.n	8002fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f76:	2201      	movs	r2, #1
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 0201 	and.w	r2, r3, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d017      	beq.n	8002fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d123      	bne.n	8003032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	6939      	ldr	r1, [r7, #16]
 800302e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8094 	beq.w	800319c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_GPIO_Init+0x2c0>)
 8003076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003078:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <HAL_GPIO_Init+0x2c0>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6613      	str	r3, [r2, #96]	; 0x60
 8003080:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <HAL_GPIO_Init+0x2c0>)
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800308c:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <HAL_GPIO_Init+0x2c4>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030b6:	d00d      	beq.n	80030d4 <HAL_GPIO_Init+0x1d4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a43      	ldr	r2, [pc, #268]	; (80031c8 <HAL_GPIO_Init+0x2c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <HAL_GPIO_Init+0x1d0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a42      	ldr	r2, [pc, #264]	; (80031cc <HAL_GPIO_Init+0x2cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_GPIO_Init+0x1cc>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e004      	b.n	80030d6 <HAL_GPIO_Init+0x1d6>
 80030cc:	2307      	movs	r3, #7
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x1d6>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_GPIO_Init+0x1d6>
 80030d4:	2300      	movs	r3, #0
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	f002 0203 	and.w	r2, r2, #3
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	4093      	lsls	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e6:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_GPIO_Init+0x2c4>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003118:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003142:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003196:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f aeaf 	bne.w	8002f10 <HAL_GPIO_Init+0x10>
  }
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	48000800 	.word	0x48000800
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
 80031e0:	4613      	mov	r3, r2
 80031e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e4:	787b      	ldrb	r3, [r7, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <HAL_PWREx_GetVoltageRange+0x18>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40007000 	.word	0x40007000

08003240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d130      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d038      	beq.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2232      	movs	r2, #50	; 0x32
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9b      	lsrs	r3, r3, #18
 8003280:	3301      	adds	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003284:	e002      	b.n	800328c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3b01      	subs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d102      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f2      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d110      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d007      	beq.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40007000 	.word	0x40007000
 80032e4:	20000040 	.word	0x20000040
 80032e8:	431bde83 	.word	0x431bde83

080032ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f000 bc02 	b.w	8003b04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800330a:	4b94      	ldr	r3, [pc, #592]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80e4 	beq.w	80034ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x4c>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	f040 808b 	bne.w	8003446 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b01      	cmp	r3, #1
 8003334:	f040 8087 	bne.w	8003446 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003338:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x64>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e3d9      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_RCC_OscConfig+0x7e>
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003368:	e005      	b.n	8003376 <HAL_RCC_OscConfig+0x8a>
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003376:	4293      	cmp	r3, r2
 8003378:	d223      	bcs.n	80033c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd8c 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3ba      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	496d      	ldr	r1, [pc, #436]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ac:	4b6b      	ldr	r3, [pc, #428]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	4968      	ldr	r1, [pc, #416]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e025      	b.n	800340e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4960      	ldr	r1, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	495b      	ldr	r1, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fd4c 	bl	8003e9c <RCC_SetFlashLatencyFromMSIRange>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e37a      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340e:	f000 fc81 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	4950      	ldr	r1, [pc, #320]	; (8003560 <HAL_RCC_OscConfig+0x274>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a4e      	ldr	r2, [pc, #312]	; (8003564 <HAL_RCC_OscConfig+0x278>)
 800342c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f9ea 	bl	800180c <HAL_InitTick>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d052      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	e35e      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d032      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800345a:	f7fe fa27 	bl	80018ac <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003462:	f7fe fa23 	bl	80018ac <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e347      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a35      	ldr	r2, [pc, #212]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
 80034b2:	e01a      	b.n	80034ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c0:	f7fe f9f4 	bl	80018ac <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c8:	f7fe f9f0 	bl	80018ac <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e314      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1dc>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d073      	beq.n	80035de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x21c>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d10e      	bne.n	8003520 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d063      	beq.n	80035dc <HAL_RCC_OscConfig+0x2f0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d15f      	bne.n	80035dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2f1      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x24c>
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e025      	b.n	8003584 <HAL_RCC_OscConfig+0x298>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d114      	bne.n	800356c <HAL_RCC_OscConfig+0x280>
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a02      	ldr	r2, [pc, #8]	; (800355c <HAL_RCC_OscConfig+0x270>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e013      	b.n	8003584 <HAL_RCC_OscConfig+0x298>
 800355c:	40021000 	.word	0x40021000
 8003560:	08008744 	.word	0x08008744
 8003564:	20000040 	.word	0x20000040
 8003568:	20000044 	.word	0x20000044
 800356c:	4ba0      	ldr	r3, [pc, #640]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a9f      	ldr	r2, [pc, #636]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a9c      	ldr	r2, [pc, #624]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe f98e 	bl	80018ac <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe f98a 	bl	80018ac <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e2ae      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	4b92      	ldr	r3, [pc, #584]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x2a8>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe f97a 	bl	80018ac <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe f976 	bl	80018ac <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e29a      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x2d0>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d060      	beq.n	80036ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x310>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d119      	bne.n	800362a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d116      	bne.n	800362a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fc:	4b7c      	ldr	r3, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x328>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e277      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	4973      	ldr	r1, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	e040      	b.n	80036ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d023      	beq.n	800367a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003632:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe f935 	bl	80018ac <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe f931 	bl	80018ac <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e255      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	495f      	ldr	r1, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	e018      	b.n	80036ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b5d      	ldr	r3, [pc, #372]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5c      	ldr	r2, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe f911 	bl	80018ac <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe f90d 	bl	80018ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e231      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03c      	beq.n	8003732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01c      	beq.n	80036fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c0:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fe f8ec 	bl	80018ac <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe f8e8 	bl	80018ac <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e20c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <HAL_RCC_OscConfig+0x3ec>
 80036f8:	e01b      	b.n	8003732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	4a3b      	ldr	r2, [pc, #236]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe f8cf 	bl	80018ac <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe f8cb 	bl	80018ac <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1ef      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ef      	bne.n	8003712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80a6 	beq.w	800388c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003768:	2301      	movs	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003784:	f7fe f892 	bl	80018ac <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fe f88e 	bl	80018ac <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1b2      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_RCC_OscConfig+0x508>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4d8>
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c2:	e029      	b.n	8003818 <HAL_RCC_OscConfig+0x52c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d115      	bne.n	80037f8 <HAL_RCC_OscConfig+0x50c>
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ec:	e014      	b.n	8003818 <HAL_RCC_OscConfig+0x52c>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	4b9a      	ldr	r3, [pc, #616]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a99      	ldr	r2, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a95      	ldr	r2, [pc, #596]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe f844 	bl	80018ac <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe f840 	bl	80018ac <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e162      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ed      	beq.n	8003828 <HAL_RCC_OscConfig+0x53c>
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe f82d 	bl	80018ac <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fe f829 	bl	80018ac <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e14b      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386c:	4b7d      	ldr	r3, [pc, #500]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ed      	bne.n	8003856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d03c      	beq.n	8003912 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01c      	beq.n	80038da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a6:	4a6f      	ldr	r2, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fffc 	bl	80018ac <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b8:	f7fd fff8 	bl	80018ac <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e11c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x5cc>
 80038d8:	e01b      	b.n	8003912 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e0:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd ffdf 	bl	80018ac <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f2:	f7fd ffdb 	bl	80018ac <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0ff      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ef      	bne.n	80038f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80f3 	beq.w	8003b02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 80c9 	bne.w	8003ab8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003926:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d12c      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	3b01      	subs	r3, #1
 8003946:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d123      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d11b      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d113      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d109      	bne.n	8003994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d06b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d062      	beq.n	8003a60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0ac      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b6:	f7fd ff79 	bl	80018ac <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd ff75 	bl	80018ac <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e099      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCC_OscConfig+0x77c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039f6:	0212      	lsls	r2, r2, #8
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0552      	lsls	r2, r2, #21
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a0a:	0852      	lsrs	r2, r2, #1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0652      	lsls	r2, r2, #25
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a16:	06d2      	lsls	r2, r2, #27
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7fd ff38 	bl	80018ac <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd ff34 	bl	80018ac <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e058      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCC_OscConfig+0x778>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a5e:	e050      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e04f      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d144      	bne.n	8003b02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a90:	f7fd ff0c 	bl	80018ac <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd ff08 	bl	80018ac <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e02c      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x7ac>
 8003ab6:	e024      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d01f      	beq.n	8003afe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd feef 	bl	80018ac <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd feeb 	bl	80018ac <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4905      	ldr	r1, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x820>)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x824>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
 8003afc:	e001      	b.n	8003b02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	feeefffc 	.word	0xfeeefffc

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0e7      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4970      	ldr	r1, [pc, #448]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cf      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d908      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4960      	ldr	r1, [pc, #384]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04c      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d121      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0a6      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	4b54      	ldr	r3, [pc, #336]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d115      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e09a      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e08e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e086      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4943      	ldr	r1, [pc, #268]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fe56 	bl	80018ac <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fd fe52 	bl	80018ac <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e06e      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d208      	bcs.n	8003c5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	492b      	ldr	r1, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d210      	bcs.n	8003c8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e036      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc8:	f000 f824 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1f4>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1f8>)
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1fc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fd8d 	bl	800180c <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08008744 	.word	0x08008744
 8003d0c:	20000040 	.word	0x20000040
 8003d10:	20000044 	.word	0x20000044

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d11e      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d102      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e004      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d134      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0xa6>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dba:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	e005      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dc2:	617b      	str	r3, [r7, #20]
      break;
 8003dc4:	e002      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	617b      	str	r3, [r7, #20]
      break;
 8003dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	0e5b      	lsrs	r3, r3, #25
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800875c 	.word	0x0800875c
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200

08003e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000040 	.word	0x20000040

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08008754 	.word	0x08008754

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e74:	f7ff ffda 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0adb      	lsrs	r3, r3, #11
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08008754 	.word	0x08008754

08003e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb4:	f7ff f9b6 	bl	8003224 <HAL_PWREx_GetVoltageRange>
 8003eb8:	6178      	str	r0, [r7, #20]
 8003eba:	e014      	b.n	8003ee6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed4:	f7ff f9a6 	bl	8003224 <HAL_PWREx_GetVoltageRange>
 8003ed8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eec:	d10b      	bne.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d919      	bls.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef8:	d902      	bls.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003efa:	2302      	movs	r3, #2
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	e013      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f00:	2301      	movs	r3, #1
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	e010      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d902      	bls.n	8003f12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	e00a      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d102      	bne.n	8003f1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f18:	2302      	movs	r3, #2
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e004      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d101      	bne.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 0207 	bic.w	r2, r3, #7
 8003f30:	4909      	ldr	r1, [pc, #36]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40022000 	.word	0x40022000

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f64:	2300      	movs	r3, #0
 8003f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d031      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f80:	d01a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f86:	d814      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4a5c      	ldr	r2, [pc, #368]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f9de 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc0:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	494e      	ldr	r1, [pc, #312]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fd6:	e001      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 809e 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fee:	4b46      	ldr	r3, [pc, #280]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004004:	4b40      	ldr	r3, [pc, #256]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6593      	str	r3, [r2, #88]	; 0x58
 8004010:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401c:	2301      	movs	r3, #1
 800401e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004020:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a39      	ldr	r2, [pc, #228]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402c:	f7fd fc3e 	bl	80018ac <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004032:	e009      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004034:	f7fd fc3a 	bl	80018ac <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	74fb      	strb	r3, [r7, #19]
        break;
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d15a      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	429a      	cmp	r2, r3
 8004074:	d019      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004082:	4b21      	ldr	r3, [pc, #132]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040a2:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d016      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd fbfa 	bl	80018ac <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7fd fbf6 	bl	80018ac <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d902      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	74fb      	strb	r3, [r7, #19]
            break;
 80040d2:	e006      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ec      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040fe:	e009      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004114:	7c7b      	ldrb	r3, [r7, #17]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b8a      	ldr	r3, [pc, #552]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a89      	ldr	r2, [pc, #548]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004132:	4b84      	ldr	r3, [pc, #528]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f023 0203 	bic.w	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4980      	ldr	r1, [pc, #512]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004154:	4b7b      	ldr	r3, [pc, #492]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 020c 	bic.w	r2, r3, #12
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	4978      	ldr	r1, [pc, #480]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	4b73      	ldr	r3, [pc, #460]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	496f      	ldr	r1, [pc, #444]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004198:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	4967      	ldr	r1, [pc, #412]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ba:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	495e      	ldr	r1, [pc, #376]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041dc:	4b59      	ldr	r3, [pc, #356]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4956      	ldr	r1, [pc, #344]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fe:	4b51      	ldr	r3, [pc, #324]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	494d      	ldr	r1, [pc, #308]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d028      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004220:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4945      	ldr	r1, [pc, #276]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423e:	d106      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b40      	ldr	r3, [pc, #256]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
 800424c:	e011      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004256:	d10c      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f882 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427e:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	492d      	ldr	r1, [pc, #180]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429c:	d106      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429e:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4a28      	ldr	r2, [pc, #160]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a8:	60d3      	str	r3, [r2, #12]
 80042aa:	e011      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f853 	bl	8004368 <RCCEx_PLLSAI1_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01c      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	4916      	ldr	r1, [pc, #88]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d10c      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f830 	bl	8004368 <RCCEx_PLLSAI1_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004338:	7cbb      	ldrb	r3, [r7, #18]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000

08004368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004376:	4b74      	ldr	r3, [pc, #464]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004382:	4b71      	ldr	r3, [pc, #452]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0203 	and.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
       ||
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800439a:	4b6b      	ldr	r3, [pc, #428]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
       ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d047      	beq.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	e044      	b.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d018      	beq.n	80043ee <RCCEx_PLLSAI1_Config+0x86>
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d825      	bhi.n	800440c <RCCEx_PLLSAI1_Config+0xa4>
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d002      	beq.n	80043ca <RCCEx_PLLSAI1_Config+0x62>
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d009      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0x74>
 80043c8:	e020      	b.n	800440c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ca:	4b5f      	ldr	r3, [pc, #380]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043da:	e01a      	b.n	8004412 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043dc:	4b5a      	ldr	r3, [pc, #360]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e013      	b.n	8004416 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ee:	4b56      	ldr	r3, [pc, #344]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fa:	4b53      	ldr	r3, [pc, #332]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800440a:	e006      	b.n	800441a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	e004      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800441a:	bf00      	nop
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004422:	4b49      	ldr	r3, [pc, #292]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	430b      	orrs	r3, r1
 8004438:	4943      	ldr	r1, [pc, #268]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	4313      	orrs	r3, r2
 800443c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d17c      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004444:	4b40      	ldr	r3, [pc, #256]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fa2c 	bl	80018ac <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004456:	e009      	b.n	800446c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004458:	f7fd fa28 	bl	80018ac <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d902      	bls.n	800446c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
        break;
 800446a:	e005      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800446c:	4b36      	ldr	r3, [pc, #216]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ef      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d15f      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d110      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004484:	4b30      	ldr	r3, [pc, #192]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800448c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6892      	ldr	r2, [r2, #8]
 8004494:	0211      	lsls	r1, r2, #8
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	06d2      	lsls	r2, r2, #27
 800449c:	430a      	orrs	r2, r1
 800449e:	492a      	ldr	r1, [pc, #168]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	610b      	str	r3, [r1, #16]
 80044a4:	e027      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d112      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	0211      	lsls	r1, r2, #8
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6912      	ldr	r2, [r2, #16]
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	3a01      	subs	r2, #1
 80044c6:	0552      	lsls	r2, r2, #21
 80044c8:	430a      	orrs	r2, r1
 80044ca:	491f      	ldr	r1, [pc, #124]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
 80044d0:	e011      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	0211      	lsls	r1, r2, #8
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6952      	ldr	r2, [r2, #20]
 80044e8:	0852      	lsrs	r2, r2, #1
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0652      	lsls	r2, r2, #25
 80044ee:	430a      	orrs	r2, r1
 80044f0:	4915      	ldr	r1, [pc, #84]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004500:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004502:	f7fd f9d3 	bl	80018ac <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004508:	e009      	b.n	800451e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450a:	f7fd f9cf 	bl	80018ac <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d902      	bls.n	800451e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	73fb      	strb	r3, [r7, #15]
          break;
 800451c:	e005      	b.n	800452a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ef      	beq.n	800450a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000

0800454c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d079      	beq.n	8004652 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc ff3a 	bl	80013ec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d058      	beq.n	8004640 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	22ca      	movs	r2, #202	; 0xca
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2253      	movs	r2, #83	; 0x53
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fbda 	bl	8004d58 <RTC_EnterInitMode>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d127      	bne.n	80045fe <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68d2      	ldr	r2, [r2, #12]
 80045e8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6919      	ldr	r1, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fbde 	bl	8004dc0 <RTC_ExitInitMode>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0203 	bic.w	r2, r2, #3
 800461c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
 800463e:	e001      	b.n	8004644 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_RTC_SetTime+0x1a>
 8004672:	2302      	movs	r3, #2
 8004674:	e08b      	b.n	800478e <HAL_RTC_SetTime+0x132>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	22ca      	movs	r2, #202	; 0xca
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2253      	movs	r2, #83	; 0x53
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb5e 	bl	8004d58 <RTC_EnterInitMode>
 800469c:	4603      	mov	r3, r0
 800469e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d163      	bne.n	800476e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d126      	bne.n	80046fa <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbb9 	bl	8004e3c <RTC_ByteToBcd2>
 80046ca:	4603      	mov	r3, r0
 80046cc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fbb2 	bl	8004e3c <RTC_ByteToBcd2>
 80046d8:	4603      	mov	r3, r0
 80046da:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046dc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	789b      	ldrb	r3, [r3, #2]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fbaa 	bl	8004e3c <RTC_ByteToBcd2>
 80046e8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ea:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	78db      	ldrb	r3, [r3, #3]
 80046f2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e018      	b.n	800472c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800471a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004720:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	78db      	ldrb	r3, [r3, #3]
 8004726:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004736:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800474a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fb2b 	bl	8004dc0 <RTC_ExitInitMode>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	22ff      	movs	r2, #255	; 0xff
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
}
 800478e:	4618      	mov	r0, r3
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}

08004796 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	0d9b      	lsrs	r3, r3, #22
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11a      	bne.n	8004844 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fb32 	bl	8004e7c <RTC_Bcd2ToByte>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fb29 	bl	8004e7c <RTC_Bcd2ToByte>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	789b      	ldrb	r3, [r3, #2]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fb20 	bl	8004e7c <RTC_Bcd2ToByte>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_RTC_SetDate+0x1a>
 8004864:	2302      	movs	r3, #2
 8004866:	e075      	b.n	8004954 <HAL_RTC_SetDate+0x106>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <HAL_RTC_SetDate+0x4e>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	b2db      	uxtb	r3, r3
 8004894:	330a      	adds	r3, #10
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11c      	bne.n	80048dc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	78db      	ldrb	r3, [r3, #3]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fac8 	bl	8004e3c <RTC_ByteToBcd2>
 80048ac:	4603      	mov	r3, r0
 80048ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fac1 	bl	8004e3c <RTC_ByteToBcd2>
 80048ba:	4603      	mov	r3, r0
 80048bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	789b      	ldrb	r3, [r3, #2]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fab9 	bl	8004e3c <RTC_ByteToBcd2>
 80048ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e00e      	b.n	80048fa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	78db      	ldrb	r3, [r3, #3]
 80048e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048e8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	22ca      	movs	r2, #202	; 0xca
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2253      	movs	r2, #83	; 0x53
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fa24 	bl	8004d58 <RTC_EnterInitMode>
 8004910:	4603      	mov	r3, r0
 8004912:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004924:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004928:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa48 	bl	8004dc0 <RTC_ExitInitMode>
 8004930:	4603      	mov	r3, r0
 8004932:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004952:	7cfb      	ldrb	r3, [r7, #19]
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd90      	pop	{r4, r7, pc}

0800495c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11a      	bne.n	80049ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fa5e 	bl	8004e7c <RTC_Bcd2ToByte>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fa55 	bl	8004e7c <RTC_Bcd2ToByte>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	789b      	ldrb	r3, [r3, #2]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fa4c 	bl	8004e7c <RTC_Bcd2ToByte>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b089      	sub	sp, #36	; 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_RTC_SetAlarm_IT+0x1a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e127      	b.n	8004c62 <HAL_RTC_SetAlarm_IT+0x26a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d137      	bne.n	8004a98 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f9fb 	bl	8004e3c <RTC_ByteToBcd2>
 8004a46:	4603      	mov	r3, r0
 8004a48:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f9f4 	bl	8004e3c <RTC_ByteToBcd2>
 8004a54:	4603      	mov	r3, r0
 8004a56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a58:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f9ec 	bl	8004e3c <RTC_ByteToBcd2>
 8004a64:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a70:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f9de 	bl	8004e3c <RTC_ByteToBcd2>
 8004a80:	4603      	mov	r3, r0
 8004a82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a84:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	e023      	b.n	8004ae0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ab8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004abe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ac6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ace:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ad0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ad6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	22ca      	movs	r2, #202	; 0xca
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2253      	movs	r2, #83	; 0x53
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b04:	d14a      	bne.n	8004b9c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b14:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004b26:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004b28:	f7fc fec0 	bl	80018ac <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b2e:	e015      	b.n	8004b5c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b30:	f7fc febc 	bl	80018ac <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3e:	d90d      	bls.n	8004b5c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e082      	b.n	8004c62 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0e2      	beq.n	8004b30 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b88:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	e049      	b.n	8004c30 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004baa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004bbc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004bbe:	f7fc fe75 	bl	80018ac <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bc4:	e015      	b.n	8004bf2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bc6:	f7fc fe71 	bl	80018ac <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd4:	d90d      	bls.n	8004bf2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e037      	b.n	8004c62 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0e2      	beq.n	8004bc6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c3a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <HAL_RTC_SetAlarm_IT+0x274>)
 8004c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c46:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd90      	pop	{r4, r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40010400 	.word	0x40010400

08004c70 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004c7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c7e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d012      	beq.n	8004cb4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004cac:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f824 	bl	8004cfc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004ce0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8e4 	bl	8004eb0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40010400 	.word	0x40010400

08004cfc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <HAL_RTC_WaitForSynchro+0x44>)
 8004d1e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004d20:	f7fc fdc4 	bl	80018ac <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d28:	f7fc fdc0 	bl	80018ac <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d36:	d901      	bls.n	8004d3c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e007      	b.n	8004d4c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ee      	beq.n	8004d28 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	0003ff5f 	.word	0x0003ff5f

08004d58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d120      	bne.n	8004db4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d7c:	f7fc fd96 	bl	80018ac <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d82:	e00d      	b.n	8004da0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d84:	f7fc fd92 	bl	80018ac <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d92:	d905      	bls.n	8004da0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <RTC_EnterInitMode+0x5c>
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d1e7      	bne.n	8004d84 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff93 	bl	8004d10 <HAL_RTC_WaitForSynchro>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01e      	beq.n	8004e2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e017      	b.n	8004e2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004e04:	f023 0320 	bic.w	r3, r3, #32
 8004e08:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff80 	bl	8004d10 <HAL_RTC_WaitForSynchro>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <RTC_ExitInitMode+0x78>)
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40002800 	.word	0x40002800

08004e3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004e4e:	e005      	b.n	8004e5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	3b0a      	subs	r3, #10
 8004e5a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d8f6      	bhi.n	8004e50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	b2db      	uxtb	r3, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	0092      	lsls	r2, r2, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	b2db      	uxtb	r3, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fc fab6 	bl	800145c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fdd0 	bl	8005aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_IC_Start_IT+0x1e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e023      	b.n	8004fda <HAL_TIM_IC_Start_IT+0x66>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IC_Start_IT+0x2e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e01b      	b.n	8004fda <HAL_TIM_IC_Start_IT+0x66>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_IC_Start_IT+0x3e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e013      	b.n	8004fda <HAL_TIM_IC_Start_IT+0x66>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_IC_Start_IT+0x4e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e00b      	b.n	8004fda <HAL_TIM_IC_Start_IT+0x66>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_IC_Start_IT+0x5e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e003      	b.n	8004fda <HAL_TIM_IC_Start_IT+0x66>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <HAL_TIM_IC_Start_IT+0x78>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e013      	b.n	8005014 <HAL_TIM_IC_Start_IT+0xa0>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_IC_Start_IT+0x88>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e00b      	b.n	8005014 <HAL_TIM_IC_Start_IT+0xa0>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d104      	bne.n	800500c <HAL_TIM_IC_Start_IT+0x98>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e003      	b.n	8005014 <HAL_TIM_IC_Start_IT+0xa0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005012:	b2db      	uxtb	r3, r3
 8005014:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800501c:	7b7b      	ldrb	r3, [r7, #13]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d001      	beq.n	8005026 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e0c9      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <HAL_TIM_IC_Start_IT+0xc2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005034:	e023      	b.n	800507e <HAL_TIM_IC_Start_IT+0x10a>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b04      	cmp	r3, #4
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start_IT+0xd2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005044:	e01b      	b.n	800507e <HAL_TIM_IC_Start_IT+0x10a>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d104      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0xe2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005054:	e013      	b.n	800507e <HAL_TIM_IC_Start_IT+0x10a>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d104      	bne.n	8005066 <HAL_TIM_IC_Start_IT+0xf2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005064:	e00b      	b.n	800507e <HAL_TIM_IC_Start_IT+0x10a>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b10      	cmp	r3, #16
 800506a:	d104      	bne.n	8005076 <HAL_TIM_IC_Start_IT+0x102>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	e003      	b.n	800507e <HAL_TIM_IC_Start_IT+0x10a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <HAL_TIM_IC_Start_IT+0x11a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508c:	e013      	b.n	80050b6 <HAL_TIM_IC_Start_IT+0x142>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b04      	cmp	r3, #4
 8005092:	d104      	bne.n	800509e <HAL_TIM_IC_Start_IT+0x12a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800509c:	e00b      	b.n	80050b6 <HAL_TIM_IC_Start_IT+0x142>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_IC_Start_IT+0x13a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ac:	e003      	b.n	80050b6 <HAL_TIM_IC_Start_IT+0x142>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d841      	bhi.n	8005140 <HAL_TIM_IC_Start_IT+0x1cc>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <HAL_TIM_IC_Start_IT+0x150>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	08005141 	.word	0x08005141
 80050cc:	08005141 	.word	0x08005141
 80050d0:	08005141 	.word	0x08005141
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	08005141 	.word	0x08005141
 80050dc:	08005141 	.word	0x08005141
 80050e0:	08005141 	.word	0x08005141
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	08005141 	.word	0x08005141
 80050ec:	08005141 	.word	0x08005141
 80050f0:	08005141 	.word	0x08005141
 80050f4:	0800512f 	.word	0x0800512f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0202 	orr.w	r2, r2, #2
 8005106:	60da      	str	r2, [r3, #12]
      break;
 8005108:	e01d      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0204 	orr.w	r2, r2, #4
 8005118:	60da      	str	r2, [r3, #12]
      break;
 800511a:	e014      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	60da      	str	r2, [r3, #12]
      break;
 800512c:	e00b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0210 	orr.w	r2, r2, #16
 800513c:	60da      	str	r2, [r3, #12]
      break;
 800513e:	e002      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	bf00      	nop
  }

  if (status == HAL_OK)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d135      	bne.n	80051b8 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2201      	movs	r2, #1
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe17 	bl	8005d88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <HAL_TIM_IC_Start_IT+0x250>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_TIM_IC_Start_IT+0x204>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d004      	beq.n	8005178 <HAL_TIM_IC_Start_IT+0x204>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <HAL_TIM_IC_Start_IT+0x254>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d115      	bne.n	80051a4 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_TIM_IC_Start_IT+0x258>)
 8005180:	4013      	ands	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b06      	cmp	r3, #6
 8005188:	d015      	beq.n	80051b6 <HAL_TIM_IC_Start_IT+0x242>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d011      	beq.n	80051b6 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e008      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e000      	b.n	80051b8 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	00010007 	.word	0x00010007

080051d0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start_DMA+0x22>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e023      	b.n	800523a <HAL_TIM_IC_Start_DMA+0x6a>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_DMA+0x32>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e01b      	b.n	800523a <HAL_TIM_IC_Start_DMA+0x6a>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start_DMA+0x42>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e013      	b.n	800523a <HAL_TIM_IC_Start_DMA+0x6a>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d104      	bne.n	8005222 <HAL_TIM_IC_Start_DMA+0x52>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e00b      	b.n	800523a <HAL_TIM_IC_Start_DMA+0x6a>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b10      	cmp	r3, #16
 8005226:	d104      	bne.n	8005232 <HAL_TIM_IC_Start_DMA+0x62>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e003      	b.n	800523a <HAL_TIM_IC_Start_DMA+0x6a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005238:	b2db      	uxtb	r3, r3
 800523a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_TIM_IC_Start_DMA+0x7c>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e013      	b.n	8005274 <HAL_TIM_IC_Start_DMA+0xa4>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d104      	bne.n	800525c <HAL_TIM_IC_Start_DMA+0x8c>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e00b      	b.n	8005274 <HAL_TIM_IC_Start_DMA+0xa4>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b08      	cmp	r3, #8
 8005260:	d104      	bne.n	800526c <HAL_TIM_IC_Start_DMA+0x9c>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e003      	b.n	8005274 <HAL_TIM_IC_Start_DMA+0xa4>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005272:	b2db      	uxtb	r3, r3
 8005274:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005276:	7dbb      	ldrb	r3, [r7, #22]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d002      	beq.n	8005282 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800527c:	7d7b      	ldrb	r3, [r7, #21]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d101      	bne.n	8005286 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8005282:	2302      	movs	r3, #2
 8005284:	e143      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005286:	7dbb      	ldrb	r3, [r7, #22]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d153      	bne.n	8005334 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800528c:	7d7b      	ldrb	r3, [r7, #21]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d150      	bne.n	8005334 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_TIM_IC_Start_DMA+0xce>
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e135      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_IC_Start_DMA+0xe2>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b0:	e023      	b.n	80052fa <HAL_TIM_IC_Start_DMA+0x12a>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IC_Start_DMA+0xf2>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	e01b      	b.n	80052fa <HAL_TIM_IC_Start_DMA+0x12a>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_DMA+0x102>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d0:	e013      	b.n	80052fa <HAL_TIM_IC_Start_DMA+0x12a>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_IC_Start_DMA+0x112>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_IC_Start_DMA+0x12a>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_IC_Start_DMA+0x122>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f0:	e003      	b.n	80052fa <HAL_TIM_IC_Start_DMA+0x12a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_DMA+0x13a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8005308:	e016      	b.n	8005338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_DMA+0x14a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8005318:	e00e      	b.n	8005338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <HAL_TIM_IC_Start_DMA+0x15a>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8005328:	e006      	b.n	8005338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 8005332:	e001      	b.n	8005338 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0ea      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd21 	bl	8005d88 <TIM_CCxChannelCmd>

  switch (Channel)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	f200 80ad 	bhi.w	80054a8 <HAL_TIM_IC_Start_DMA+0x2d8>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_TIM_IC_Start_DMA+0x184>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005389 	.word	0x08005389
 8005358:	080054a9 	.word	0x080054a9
 800535c:	080054a9 	.word	0x080054a9
 8005360:	080054a9 	.word	0x080054a9
 8005364:	080053d1 	.word	0x080053d1
 8005368:	080054a9 	.word	0x080054a9
 800536c:	080054a9 	.word	0x080054a9
 8005370:	080054a9 	.word	0x080054a9
 8005374:	08005419 	.word	0x08005419
 8005378:	080054a9 	.word	0x080054a9
 800537c:	080054a9 	.word	0x080054a9
 8005380:	080054a9 	.word	0x080054a9
 8005384:	08005461 	.word	0x08005461
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	4a62      	ldr	r2, [pc, #392]	; (8005518 <HAL_TIM_IC_Start_DMA+0x348>)
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	4a61      	ldr	r2, [pc, #388]	; (800551c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	4a60      	ldr	r2, [pc, #384]	; (8005520 <HAL_TIM_IC_Start_DMA+0x350>)
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3334      	adds	r3, #52	; 0x34
 80053aa:	4619      	mov	r1, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	f7fd fc97 	bl	8002ce2 <HAL_DMA_Start_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0a7      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	60da      	str	r2, [r3, #12]
      break;
 80053ce:	e06e      	b.n	80054ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	4a50      	ldr	r2, [pc, #320]	; (8005518 <HAL_TIM_IC_Start_DMA+0x348>)
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	4a4f      	ldr	r2, [pc, #316]	; (800551c <HAL_TIM_IC_Start_DMA+0x34c>)
 80053de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	4a4e      	ldr	r2, [pc, #312]	; (8005520 <HAL_TIM_IC_Start_DMA+0x350>)
 80053e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3338      	adds	r3, #56	; 0x38
 80053f2:	4619      	mov	r1, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	f7fd fc73 	bl	8002ce2 <HAL_DMA_Start_IT>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e083      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e04a      	b.n	80054ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a3e      	ldr	r2, [pc, #248]	; (8005518 <HAL_TIM_IC_Start_DMA+0x348>)
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4a3d      	ldr	r2, [pc, #244]	; (800551c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005426:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <HAL_TIM_IC_Start_DMA+0x350>)
 800542e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	333c      	adds	r3, #60	; 0x3c
 800543a:	4619      	mov	r1, r3
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	f7fd fc4f 	bl	8002ce2 <HAL_DMA_Start_IT>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e05f      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545c:	60da      	str	r2, [r3, #12]
      break;
 800545e:	e026      	b.n	80054ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <HAL_TIM_IC_Start_DMA+0x348>)
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	4a2b      	ldr	r2, [pc, #172]	; (800551c <HAL_TIM_IC_Start_DMA+0x34c>)
 800546e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <HAL_TIM_IC_Start_DMA+0x350>)
 8005476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3340      	adds	r3, #64	; 0x40
 8005482:	4619      	mov	r1, r3
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	f7fd fc2b 	bl	8002ce2 <HAL_DMA_Start_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e03b      	b.n	800550e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054a4:	60da      	str	r2, [r3, #12]
      break;
 80054a6:	e002      	b.n	80054ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      break;
 80054ac:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_TIM_IC_Start_DMA+0x354>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <HAL_TIM_IC_Start_DMA+0x2fc>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d004      	beq.n	80054cc <HAL_TIM_IC_Start_DMA+0x2fc>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_TIM_IC_Start_DMA+0x358>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d115      	bne.n	80054f8 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <HAL_TIM_IC_Start_DMA+0x35c>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d015      	beq.n	800550a <HAL_TIM_IC_Start_DMA+0x33a>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d011      	beq.n	800550a <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f6:	e008      	b.n	800550a <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	e000      	b.n	800550c <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	08005977 	.word	0x08005977
 800551c:	08005a3f 	.word	0x08005a3f
 8005520:	080058e5 	.word	0x080058e5
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40014000 	.word	0x40014000
 800552c:	00010007 	.word	0x00010007

08005530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d020      	beq.n	8005594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0202 	mvn.w	r2, #2
 8005564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fb fab0 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f97c 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f98d 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d020      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01b      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0204 	mvn.w	r2, #4
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb fa8a 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f956 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f967 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d020      	beq.n	800562c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0208 	mvn.w	r2, #8
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2204      	movs	r2, #4
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fb fa64 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f930 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f941 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b00      	cmp	r3, #0
 8005634:	d020      	beq.n	8005678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0210 	mvn.w	r2, #16
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2208      	movs	r2, #8
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fb fa3e 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f90a 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f91b 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8e8 	bl	800586c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fbfa 	bl	8005eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fbf2 	bl	8005ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8da 	bl	80058bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0220 	mvn.w	r2, #32
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fbba 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_TIM_IC_ConfigChannel+0x1e>
 800574e:	2302      	movs	r3, #2
 8005750:	e088      	b.n	8005864 <HAL_TIM_IC_ConfigChannel+0x130>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005770:	f000 f9fe 	bl	8005b70 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 020c 	bic.w	r2, r2, #12
 8005782:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6999      	ldr	r1, [r3, #24]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	619a      	str	r2, [r3, #24]
 8005796:	e060      	b.n	800585a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b04      	cmp	r3, #4
 800579c:	d11c      	bne.n	80057d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80057ae:	f000 fa35 	bl	8005c1c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6999      	ldr	r1, [r3, #24]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	021a      	lsls	r2, r3, #8
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
 80057d6:	e040      	b.n	800585a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11b      	bne.n	8005816 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057ee:	f000 fa52 	bl	8005c96 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 020c 	bic.w	r2, r2, #12
 8005800:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69d9      	ldr	r1, [r3, #28]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	61da      	str	r2, [r3, #28]
 8005814:	e021      	b.n	800585a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d11c      	bne.n	8005856 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800582c:	f000 fa6f 	bl	8005d0e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800583e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69d9      	ldr	r1, [r3, #28]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	61da      	str	r2, [r3, #28]
 8005854:	e001      	b.n	800585a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d107      	bne.n	800590c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800590a:	e02a      	b.n	8005962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d107      	bne.n	8005926 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	e01d      	b.n	8005962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d107      	bne.n	8005940 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2204      	movs	r2, #4
 8005934:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593e:	e010      	b.n	8005962 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d107      	bne.n	800595a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005958:	e003      	b.n	8005962 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff ffb4 	bl	80058d0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	771a      	strb	r2, [r3, #28]
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d10f      	bne.n	80059ae <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d146      	bne.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ac:	e03d      	b.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d10f      	bne.n	80059d8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2202      	movs	r2, #2
 80059bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d131      	bne.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d6:	e028      	b.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d10f      	bne.n	8005a02 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11c      	bne.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a00:	e013      	b.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d10e      	bne.n	8005a2a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2208      	movs	r2, #8
 8005a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7fb f858 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d103      	bne.n	8005a5e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]
 8005a5c:	e019      	b.n	8005a92 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d103      	bne.n	8005a70 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	771a      	strb	r2, [r3, #28]
 8005a6e:	e010      	b.n	8005a92 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d103      	bne.n	8005a82 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	771a      	strb	r2, [r3, #28]
 8005a80:	e007      	b.n	8005a92 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d102      	bne.n	8005a92 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2208      	movs	r2, #8
 8005a90:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fefe 	bl	8005894 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	771a      	strb	r2, [r3, #28]
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <TIM_Base_SetConfig+0xbc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_Base_SetConfig+0x20>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac6:	d108      	bne.n	8005ada <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <TIM_Base_SetConfig+0xbc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <TIM_Base_SetConfig+0x52>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae8:	d007      	beq.n	8005afa <TIM_Base_SetConfig+0x52>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <TIM_Base_SetConfig+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_Base_SetConfig+0x52>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <TIM_Base_SetConfig+0xc4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <TIM_Base_SetConfig+0xbc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0xa0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <TIM_Base_SetConfig+0xc0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0xa0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <TIM_Base_SetConfig+0xc4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d103      	bne.n	8005b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	615a      	str	r2, [r3, #20]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400

08005b70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f023 0201 	bic.w	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <TIM_TI1_SetConfig+0xa4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_TI1_SetConfig+0x3e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d003      	beq.n	8005bae <TIM_TI1_SetConfig+0x3e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <TIM_TI1_SetConfig+0xa8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <TIM_TI1_SetConfig+0x42>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <TIM_TI1_SetConfig+0x44>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e003      	b.n	8005bd2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f023 030a 	bic.w	r3, r3, #10
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 030a 	and.w	r3, r3, #10
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40014000 	.word	0x40014000

08005c1c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0210 	bic.w	r2, r3, #16
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	031b      	lsls	r3, r3, #12
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	031b      	lsls	r3, r3, #12
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	401a      	ands	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e04f      	b.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d004      	beq.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10c      	bne.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40014000 	.word	0x40014000

08005ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e040      	b.n	8005f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb faf4 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	; 0x24
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 feb2 	bl	8006c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc83 	bl	8006834 <UART_SetConfig>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01b      	b.n	8005f70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 ff31 	bl	8006dd0 <UART_CheckIdleState>
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d178      	bne.n	8006082 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_UART_Transmit+0x24>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e071      	b.n	8006084 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2221      	movs	r2, #33	; 0x21
 8005fac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fae:	f7fb fc7d 	bl	80018ac <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Transmit+0x68>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe8:	e030      	b.n	800604c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 ff93 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e03c      	b.n	8006084 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601c:	b292      	uxth	r2, r2
 800601e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3302      	adds	r3, #2
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e008      	b.n	800603a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	b292      	uxth	r2, r2
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1c8      	bne.n	8005fea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 ff5c 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e005      	b.n	8006084 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	f040 80b6 	bne.w	8006214 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_Receive+0x28>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0ae      	b.n	8006216 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ce:	f7fb fbed 	bl	80018ac <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d10e      	bne.n	800610c <HAL_UART_Receive+0x80>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_UART_Receive+0x76>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006100:	e02d      	b.n	800615e <HAL_UART_Receive+0xd2>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800610a:	e028      	b.n	800615e <HAL_UART_Receive+0xd2>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10d      	bne.n	8006130 <HAL_UART_Receive+0xa4>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Receive+0x9a>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006124:	e01b      	b.n	800615e <HAL_UART_Receive+0xd2>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	227f      	movs	r2, #127	; 0x7f
 800612a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800612e:	e016      	b.n	800615e <HAL_UART_Receive+0xd2>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006138:	d10d      	bne.n	8006156 <HAL_UART_Receive+0xca>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d104      	bne.n	800614c <HAL_UART_Receive+0xc0>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	227f      	movs	r2, #127	; 0x7f
 8006146:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800614a:	e008      	b.n	800615e <HAL_UART_Receive+0xd2>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	223f      	movs	r2, #63	; 0x3f
 8006150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006154:	e003      	b.n	800615e <HAL_UART_Receive+0xd2>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006164:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d108      	bne.n	8006182 <HAL_UART_Receive+0xf6>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e003      	b.n	800618a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800618a:	e037      	b.n	80061fc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	2120      	movs	r1, #32
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fec2 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e033      	b.n	8006216 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	8a7b      	ldrh	r3, [r7, #18]
 80061be:	4013      	ands	r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	3302      	adds	r3, #2
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e00d      	b.n	80061ea <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	8a7b      	ldrh	r3, [r7, #18]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4013      	ands	r3, r2
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1c1      	bne.n	800618c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b0ba      	sub	sp, #232	; 0xe8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800624a:	f640 030f 	movw	r3, #2063	; 0x80f
 800624e:	4013      	ands	r3, r2
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d115      	bne.n	8006288 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00f      	beq.n	8006288 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 82ae 	beq.w	80067da <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
      }
      return;
 8006286:	e2a8      	b.n	80067da <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8117 	beq.w	80064c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800629e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062a2:	4b85      	ldr	r3, [pc, #532]	; (80064b8 <HAL_UART_IRQHandler+0x298>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 810a 	beq.w	80064c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d011      	beq.n	80062dc <HAL_UART_IRQHandler+0xbc>
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d2:	f043 0201 	orr.w	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d011      	beq.n	800630c <HAL_UART_IRQHandler+0xec>
 80062e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2202      	movs	r2, #2
 80062fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006302:	f043 0204 	orr.w	r2, r3, #4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <HAL_UART_IRQHandler+0x11c>
 8006318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2204      	movs	r2, #4
 800632a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006332:	f043 0202 	orr.w	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2208      	movs	r2, #8
 8006366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006380:	2b00      	cmp	r3, #0
 8006382:	d012      	beq.n	80063aa <HAL_UART_IRQHandler+0x18a>
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00c      	beq.n	80063aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8214 	beq.w	80067de <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04f      	beq.n	80064a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fdf3 	bl	8006fee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d141      	bne.n	800649a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800642c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800644e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800645a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1d9      	bne.n	8006416 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006466:	2b00      	cmp	r3, #0
 8006468:	d013      	beq.n	8006492 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646e:	4a13      	ldr	r2, [pc, #76]	; (80064bc <HAL_UART_IRQHandler+0x29c>)
 8006470:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006476:	4618      	mov	r0, r3
 8006478:	f7fc fcd1 	bl	8002e1e <HAL_DMA_Abort_IT>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e00f      	b.n	80064b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9b8 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	e00b      	b.n	80064b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f9b4 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	e007      	b.n	80064b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9b0 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80064b0:	e195      	b.n	80067de <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	bf00      	nop
    return;
 80064b4:	e193      	b.n	80067de <HAL_UART_IRQHandler+0x5be>
 80064b6:	bf00      	nop
 80064b8:	04000120 	.word	0x04000120
 80064bc:	080070b7 	.word	0x080070b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 814e 	bne.w	8006766 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8147 	beq.w	8006766 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8140 	beq.w	8006766 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	f040 80b8 	bne.w	800666e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800650a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8167 	beq.w	80067e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800651a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800651e:	429a      	cmp	r2, r3
 8006520:	f080 815f 	bcs.w	80067e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800652a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 8086 	bne.w	800664c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800655c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800656a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800656e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1da      	bne.n	8006540 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800659a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e1      	bne.n	800658a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e3      	bne.n	80065c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661c:	f023 0310 	bic.w	r3, r3, #16
 8006620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800662e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006630:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800663c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e4      	bne.n	800660c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	4618      	mov	r0, r3
 8006648:	f7fc fbab 	bl	8002da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800665e:	b29b      	uxth	r3, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	b29b      	uxth	r3, r3
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8d8 	bl	800681c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800666c:	e0b9      	b.n	80067e2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800667a:	b29b      	uxth	r3, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80ab 	beq.w	80067e6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80a6 	beq.w	80067e6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066bc:	647b      	str	r3, [r7, #68]	; 0x44
 80066be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e4      	bne.n	800669a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	623b      	str	r3, [r7, #32]
   return(result);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066f4:	633a      	str	r2, [r7, #48]	; 0x30
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e3      	bne.n	80066d0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	60fb      	str	r3, [r7, #12]
   return(result);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0310 	bic.w	r3, r3, #16
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	617b      	str	r3, [r7, #20]
   return(result);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e4      	bne.n	800671c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f85c 	bl	800681c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006764:	e03f      	b.n	80067e6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00e      	beq.n	8006790 <HAL_UART_IRQHandler+0x570>
 8006772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fcd4 	bl	8007136 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800678e:	e02d      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01c      	beq.n	80067ea <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
    }
    return;
 80067b8:	e017      	b.n	80067ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <HAL_UART_IRQHandler+0x5cc>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fc85 	bl	80070e2 <UART_EndTransmit_IT>
    return;
 80067d8:	e008      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80067da:	bf00      	nop
 80067dc:	e006      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80067de:	bf00      	nop
 80067e0:	e004      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80067e2:	bf00      	nop
 80067e4:	e002      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80067ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067ec:	37e8      	adds	r7, #232	; 0xe8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop

080067f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006838:	b08a      	sub	sp, #40	; 0x28
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	431a      	orrs	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	431a      	orrs	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	4313      	orrs	r3, r2
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4bb4      	ldr	r3, [pc, #720]	; (8006b34 <UART_SetConfig+0x300>)
 8006864:	4013      	ands	r3, r2
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686c:	430b      	orrs	r3, r1
 800686e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4aa9      	ldr	r2, [pc, #676]	; (8006b38 <UART_SetConfig+0x304>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689c:	4313      	orrs	r3, r2
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4aa0      	ldr	r2, [pc, #640]	; (8006b3c <UART_SetConfig+0x308>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d126      	bne.n	800690c <UART_SetConfig+0xd8>
 80068be:	4ba0      	ldr	r3, [pc, #640]	; (8006b40 <UART_SetConfig+0x30c>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d81b      	bhi.n	8006904 <UART_SetConfig+0xd0>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0xa0>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	080068f5 	.word	0x080068f5
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ea:	e080      	b.n	80069ee <UART_SetConfig+0x1ba>
 80068ec:	2302      	movs	r3, #2
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e07c      	b.n	80069ee <UART_SetConfig+0x1ba>
 80068f4:	2304      	movs	r3, #4
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e078      	b.n	80069ee <UART_SetConfig+0x1ba>
 80068fc:	2308      	movs	r3, #8
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006902:	e074      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006904:	2310      	movs	r3, #16
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e070      	b.n	80069ee <UART_SetConfig+0x1ba>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a8c      	ldr	r2, [pc, #560]	; (8006b44 <UART_SetConfig+0x310>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d138      	bne.n	8006988 <UART_SetConfig+0x154>
 8006916:	4b8a      	ldr	r3, [pc, #552]	; (8006b40 <UART_SetConfig+0x30c>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f003 030c 	and.w	r3, r3, #12
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d82d      	bhi.n	8006980 <UART_SetConfig+0x14c>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0xf8>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006961 	.word	0x08006961
 8006930:	08006981 	.word	0x08006981
 8006934:	08006981 	.word	0x08006981
 8006938:	08006981 	.word	0x08006981
 800693c:	08006971 	.word	0x08006971
 8006940:	08006981 	.word	0x08006981
 8006944:	08006981 	.word	0x08006981
 8006948:	08006981 	.word	0x08006981
 800694c:	08006969 	.word	0x08006969
 8006950:	08006981 	.word	0x08006981
 8006954:	08006981 	.word	0x08006981
 8006958:	08006981 	.word	0x08006981
 800695c:	08006979 	.word	0x08006979
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006966:	e042      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696e:	e03e      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006976:	e03a      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697e:	e036      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006986:	e032      	b.n	80069ee <UART_SetConfig+0x1ba>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6a      	ldr	r2, [pc, #424]	; (8006b38 <UART_SetConfig+0x304>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d12a      	bne.n	80069e8 <UART_SetConfig+0x1b4>
 8006992:	4b6b      	ldr	r3, [pc, #428]	; (8006b40 <UART_SetConfig+0x30c>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800699c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x1a4>
 80069a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a6:	d81b      	bhi.n	80069e0 <UART_SetConfig+0x1ac>
 80069a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ac:	d00c      	beq.n	80069c8 <UART_SetConfig+0x194>
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b2:	d815      	bhi.n	80069e0 <UART_SetConfig+0x1ac>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <UART_SetConfig+0x18c>
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x19c>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x1ac>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e012      	b.n	80069ee <UART_SetConfig+0x1ba>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e00e      	b.n	80069ee <UART_SetConfig+0x1ba>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e00a      	b.n	80069ee <UART_SetConfig+0x1ba>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e006      	b.n	80069ee <UART_SetConfig+0x1ba>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e002      	b.n	80069ee <UART_SetConfig+0x1ba>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a51      	ldr	r2, [pc, #324]	; (8006b38 <UART_SetConfig+0x304>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d17a      	bne.n	8006aee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d824      	bhi.n	8006a4a <UART_SetConfig+0x216>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x1d4>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a4b 	.word	0x08006a4b
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a4b 	.word	0x08006a4b
 8006a18:	08006a3b 	.word	0x08006a3b
 8006a1c:	08006a4b 	.word	0x08006a4b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a4b 	.word	0x08006a4b
 8006a28:	08006a43 	.word	0x08006a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7fd fa0a 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8006a30:	61f8      	str	r0, [r7, #28]
        break;
 8006a32:	e010      	b.n	8006a56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4b44      	ldr	r3, [pc, #272]	; (8006b48 <UART_SetConfig+0x314>)
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e00d      	b.n	8006a56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fd f96b 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8006a3e:	61f8      	str	r0, [r7, #28]
        break;
 8006a40:	e009      	b.n	8006a56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a46:	61fb      	str	r3, [r7, #28]
        break;
 8006a48:	e005      	b.n	8006a56 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8107 	beq.w	8006c6c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d305      	bcc.n	8006a7a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d903      	bls.n	8006a82 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a80:	e0f4      	b.n	8006c6c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	2200      	movs	r2, #0
 8006a86:	461c      	mov	r4, r3
 8006a88:	4615      	mov	r5, r2
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	022b      	lsls	r3, r5, #8
 8006a94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a98:	0222      	lsls	r2, r4, #8
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	6849      	ldr	r1, [r1, #4]
 8006a9e:	0849      	lsrs	r1, r1, #1
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	4688      	mov	r8, r1
 8006aa4:	4681      	mov	r9, r0
 8006aa6:	eb12 0a08 	adds.w	sl, r2, r8
 8006aaa:	eb43 0b09 	adc.w	fp, r3, r9
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abc:	4650      	mov	r0, sl
 8006abe:	4659      	mov	r1, fp
 8006ac0:	f7f9 fbe6 	bl	8000290 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad2:	d308      	bcc.n	8006ae6 <UART_SetConfig+0x2b2>
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ada:	d204      	bcs.n	8006ae6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	60da      	str	r2, [r3, #12]
 8006ae4:	e0c2      	b.n	8006c6c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006aec:	e0be      	b.n	8006c6c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af6:	d16a      	bne.n	8006bce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d834      	bhi.n	8006b6a <UART_SetConfig+0x336>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <UART_SetConfig+0x2d4>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006b55 	.word	0x08006b55
 8006b14:	08006b6b 	.word	0x08006b6b
 8006b18:	08006b5b 	.word	0x08006b5b
 8006b1c:	08006b6b 	.word	0x08006b6b
 8006b20:	08006b6b 	.word	0x08006b6b
 8006b24:	08006b6b 	.word	0x08006b6b
 8006b28:	08006b63 	.word	0x08006b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fd f98a 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e020      	b.n	8006b76 <UART_SetConfig+0x342>
 8006b34:	efff69f3 	.word	0xefff69f3
 8006b38:	40008000 	.word	0x40008000
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	40021000 	.word	0x40021000
 8006b44:	40004400 	.word	0x40004400
 8006b48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b4c:	f7fd f990 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8006b50:	61f8      	str	r0, [r7, #28]
        break;
 8006b52:	e010      	b.n	8006b76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b54:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <UART_SetConfig+0x454>)
 8006b56:	61fb      	str	r3, [r7, #28]
        break;
 8006b58:	e00d      	b.n	8006b76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5a:	f7fd f8db 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8006b5e:	61f8      	str	r0, [r7, #28]
        break;
 8006b60:	e009      	b.n	8006b76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	61fb      	str	r3, [r7, #28]
        break;
 8006b68:	e005      	b.n	8006b76 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d077      	beq.n	8006c6c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	005a      	lsls	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b0f      	cmp	r3, #15
 8006b96:	d916      	bls.n	8006bc6 <UART_SetConfig+0x392>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9e:	d212      	bcs.n	8006bc6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f023 030f 	bic.w	r3, r3, #15
 8006ba8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	8afa      	ldrh	r2, [r7, #22]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e052      	b.n	8006c6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bcc:	e04e      	b.n	8006c6c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d827      	bhi.n	8006c26 <UART_SetConfig+0x3f2>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x3a8>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c27 	.word	0x08006c27
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd f920 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8006c04:	61f8      	str	r0, [r7, #28]
        break;
 8006c06:	e014      	b.n	8006c32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fd f932 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	61f8      	str	r0, [r7, #28]
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <UART_SetConfig+0x454>)
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fd f87d 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8006c1a:	61f8      	str	r0, [r7, #28]
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c30:	bf00      	nop
    }

    if (pclk != 0U)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d019      	beq.n	8006c6c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	085a      	lsrs	r2, r3, #1
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d909      	bls.n	8006c66 <UART_SetConfig+0x432>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c58:	d205      	bcs.n	8006c66 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60da      	str	r2, [r3, #12]
 8006c64:	e002      	b.n	8006c6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3728      	adds	r7, #40	; 0x28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c86:	bf00      	nop
 8006c88:	00f42400 	.word	0x00f42400

08006c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8a:	d10a      	bne.n	8006da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b098      	sub	sp, #96	; 0x60
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006de0:	f7fa fd64 	bl	80018ac <HAL_GetTick>
 8006de4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d12e      	bne.n	8006e52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f88c 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d021      	beq.n	8006e52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e22:	653b      	str	r3, [r7, #80]	; 0x50
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e6      	bne.n	8006e0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e062      	b.n	8006f18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d149      	bne.n	8006ef4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f856 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d03c      	beq.n	8006ef4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	623b      	str	r3, [r7, #32]
   return(result);
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30
 8006e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ecc:	61fa      	str	r2, [r7, #28]
 8006ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69b9      	ldr	r1, [r7, #24]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e011      	b.n	8006f18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3758      	adds	r7, #88	; 0x58
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f30:	e049      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d045      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fa fcb7 	bl	80018ac <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e048      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d031      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d110      	bne.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f838 	bl	8006fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2208      	movs	r2, #8
 8006f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e029      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa0:	d111      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f81e 	bl	8006fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e00f      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d0a6      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b095      	sub	sp, #84	; 0x54
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800700a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007014:	643b      	str	r3, [r7, #64]	; 0x40
 8007016:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800701a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	61fb      	str	r3, [r7, #28]
   return(result);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800704e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	2b01      	cmp	r3, #1
 8007062:	d118      	bne.n	8007096 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	60bb      	str	r3, [r7, #8]
   return(result);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007082:	61bb      	str	r3, [r7, #24]
 8007084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6979      	ldr	r1, [r7, #20]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	613b      	str	r3, [r7, #16]
   return(result);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070aa:	bf00      	nop
 80070ac:	3754      	adds	r7, #84	; 0x54
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fb97 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b088      	sub	sp, #32
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	613b      	str	r3, [r7, #16]
   return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fb63 	bl	80067f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712e:	bf00      	nop
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <atoi>:
 800714a:	220a      	movs	r2, #10
 800714c:	2100      	movs	r1, #0
 800714e:	f000 b883 	b.w	8007258 <strtol>
	...

08007154 <_strtol_l.constprop.0>:
 8007154:	2b01      	cmp	r3, #1
 8007156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715a:	d001      	beq.n	8007160 <_strtol_l.constprop.0+0xc>
 800715c:	2b24      	cmp	r3, #36	; 0x24
 800715e:	d906      	bls.n	800716e <_strtol_l.constprop.0+0x1a>
 8007160:	f000 fb04 	bl	800776c <__errno>
 8007164:	2316      	movs	r3, #22
 8007166:	6003      	str	r3, [r0, #0]
 8007168:	2000      	movs	r0, #0
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007254 <_strtol_l.constprop.0+0x100>
 8007172:	460d      	mov	r5, r1
 8007174:	462e      	mov	r6, r5
 8007176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800717a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800717e:	f017 0708 	ands.w	r7, r7, #8
 8007182:	d1f7      	bne.n	8007174 <_strtol_l.constprop.0+0x20>
 8007184:	2c2d      	cmp	r4, #45	; 0x2d
 8007186:	d132      	bne.n	80071ee <_strtol_l.constprop.0+0x9a>
 8007188:	782c      	ldrb	r4, [r5, #0]
 800718a:	2701      	movs	r7, #1
 800718c:	1cb5      	adds	r5, r6, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05b      	beq.n	800724a <_strtol_l.constprop.0+0xf6>
 8007192:	2b10      	cmp	r3, #16
 8007194:	d109      	bne.n	80071aa <_strtol_l.constprop.0+0x56>
 8007196:	2c30      	cmp	r4, #48	; 0x30
 8007198:	d107      	bne.n	80071aa <_strtol_l.constprop.0+0x56>
 800719a:	782c      	ldrb	r4, [r5, #0]
 800719c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071a0:	2c58      	cmp	r4, #88	; 0x58
 80071a2:	d14d      	bne.n	8007240 <_strtol_l.constprop.0+0xec>
 80071a4:	786c      	ldrb	r4, [r5, #1]
 80071a6:	2310      	movs	r3, #16
 80071a8:	3502      	adds	r5, #2
 80071aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80071b2:	f04f 0e00 	mov.w	lr, #0
 80071b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80071ba:	4676      	mov	r6, lr
 80071bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80071c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071c4:	f1bc 0f09 	cmp.w	ip, #9
 80071c8:	d816      	bhi.n	80071f8 <_strtol_l.constprop.0+0xa4>
 80071ca:	4664      	mov	r4, ip
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	dd24      	ble.n	800721a <_strtol_l.constprop.0+0xc6>
 80071d0:	f1be 3fff 	cmp.w	lr, #4294967295
 80071d4:	d008      	beq.n	80071e8 <_strtol_l.constprop.0+0x94>
 80071d6:	45b1      	cmp	r9, r6
 80071d8:	d31c      	bcc.n	8007214 <_strtol_l.constprop.0+0xc0>
 80071da:	d101      	bne.n	80071e0 <_strtol_l.constprop.0+0x8c>
 80071dc:	45a2      	cmp	sl, r4
 80071de:	db19      	blt.n	8007214 <_strtol_l.constprop.0+0xc0>
 80071e0:	fb06 4603 	mla	r6, r6, r3, r4
 80071e4:	f04f 0e01 	mov.w	lr, #1
 80071e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ec:	e7e8      	b.n	80071c0 <_strtol_l.constprop.0+0x6c>
 80071ee:	2c2b      	cmp	r4, #43	; 0x2b
 80071f0:	bf04      	itt	eq
 80071f2:	782c      	ldrbeq	r4, [r5, #0]
 80071f4:	1cb5      	addeq	r5, r6, #2
 80071f6:	e7ca      	b.n	800718e <_strtol_l.constprop.0+0x3a>
 80071f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80071fc:	f1bc 0f19 	cmp.w	ip, #25
 8007200:	d801      	bhi.n	8007206 <_strtol_l.constprop.0+0xb2>
 8007202:	3c37      	subs	r4, #55	; 0x37
 8007204:	e7e2      	b.n	80071cc <_strtol_l.constprop.0+0x78>
 8007206:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800720a:	f1bc 0f19 	cmp.w	ip, #25
 800720e:	d804      	bhi.n	800721a <_strtol_l.constprop.0+0xc6>
 8007210:	3c57      	subs	r4, #87	; 0x57
 8007212:	e7db      	b.n	80071cc <_strtol_l.constprop.0+0x78>
 8007214:	f04f 3eff 	mov.w	lr, #4294967295
 8007218:	e7e6      	b.n	80071e8 <_strtol_l.constprop.0+0x94>
 800721a:	f1be 3fff 	cmp.w	lr, #4294967295
 800721e:	d105      	bne.n	800722c <_strtol_l.constprop.0+0xd8>
 8007220:	2322      	movs	r3, #34	; 0x22
 8007222:	6003      	str	r3, [r0, #0]
 8007224:	4646      	mov	r6, r8
 8007226:	b942      	cbnz	r2, 800723a <_strtol_l.constprop.0+0xe6>
 8007228:	4630      	mov	r0, r6
 800722a:	e79e      	b.n	800716a <_strtol_l.constprop.0+0x16>
 800722c:	b107      	cbz	r7, 8007230 <_strtol_l.constprop.0+0xdc>
 800722e:	4276      	negs	r6, r6
 8007230:	2a00      	cmp	r2, #0
 8007232:	d0f9      	beq.n	8007228 <_strtol_l.constprop.0+0xd4>
 8007234:	f1be 0f00 	cmp.w	lr, #0
 8007238:	d000      	beq.n	800723c <_strtol_l.constprop.0+0xe8>
 800723a:	1e69      	subs	r1, r5, #1
 800723c:	6011      	str	r1, [r2, #0]
 800723e:	e7f3      	b.n	8007228 <_strtol_l.constprop.0+0xd4>
 8007240:	2430      	movs	r4, #48	; 0x30
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1b1      	bne.n	80071aa <_strtol_l.constprop.0+0x56>
 8007246:	2308      	movs	r3, #8
 8007248:	e7af      	b.n	80071aa <_strtol_l.constprop.0+0x56>
 800724a:	2c30      	cmp	r4, #48	; 0x30
 800724c:	d0a5      	beq.n	800719a <_strtol_l.constprop.0+0x46>
 800724e:	230a      	movs	r3, #10
 8007250:	e7ab      	b.n	80071aa <_strtol_l.constprop.0+0x56>
 8007252:	bf00      	nop
 8007254:	0800878d 	.word	0x0800878d

08007258 <strtol>:
 8007258:	4613      	mov	r3, r2
 800725a:	460a      	mov	r2, r1
 800725c:	4601      	mov	r1, r0
 800725e:	4802      	ldr	r0, [pc, #8]	; (8007268 <strtol+0x10>)
 8007260:	6800      	ldr	r0, [r0, #0]
 8007262:	f7ff bf77 	b.w	8007154 <_strtol_l.constprop.0>
 8007266:	bf00      	nop
 8007268:	200000a4 	.word	0x200000a4

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f9c4 	bl	8007616 <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	; 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 ba80 	b.w	80077c0 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	08007591 	.word	0x08007591
 80072c8:	080075b3 	.word	0x080075b3
 80072cc:	080075eb 	.word	0x080075eb
 80072d0:	0800760f 	.word	0x0800760f
 80072d4:	20000284 	.word	0x20000284

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	; (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	; (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	; (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	2000004c 	.word	0x2000004c
 80072e8:	080080b9 	.word	0x080080b9
 80072ec:	20000058 	.word	0x20000058

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f000 fedc 	bl	80080b8 <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fed5 	bl	80080b8 <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f000 becc 	b.w	80080b8 <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	20000284 	.word	0x20000284
 8007328:	200002ec 	.word	0x200002ec
 800732c:	20000354 	.word	0x20000354

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	; (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	200003bc 	.word	0x200003bc
 8007364:	20000284 	.word	0x20000284
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 ba28 	b.w	80077c2 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	200003c5 	.word	0x200003c5

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 ba23 	b.w	80077c4 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	200003c5 	.word	0x200003c5

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	200003bc 	.word	0x200003bc

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	; 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <getchar>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <getchar+0xc>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	6841      	ldr	r1, [r0, #4]
 80073f6:	f000 be99 	b.w	800812c <_getc_r>
 80073fa:	bf00      	nop
 80073fc:	200000a4 	.word	0x200000a4

08007400 <iprintf>:
 8007400:	b40f      	push	{r0, r1, r2, r3}
 8007402:	b507      	push	{r0, r1, r2, lr}
 8007404:	4906      	ldr	r1, [pc, #24]	; (8007420 <iprintf+0x20>)
 8007406:	ab04      	add	r3, sp, #16
 8007408:	6808      	ldr	r0, [r1, #0]
 800740a:	f853 2b04 	ldr.w	r2, [r3], #4
 800740e:	6881      	ldr	r1, [r0, #8]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	f000 fb21 	bl	8007a58 <_vfiprintf_r>
 8007416:	b003      	add	sp, #12
 8007418:	f85d eb04 	ldr.w	lr, [sp], #4
 800741c:	b004      	add	sp, #16
 800741e:	4770      	bx	lr
 8007420:	200000a4 	.word	0x200000a4

08007424 <putchar>:
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <putchar+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	6882      	ldr	r2, [r0, #8]
 800742c:	f000 bf0b 	b.w	8008246 <_putc_r>
 8007430:	200000a4 	.word	0x200000a4

08007434 <setvbuf>:
 8007434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007438:	461d      	mov	r5, r3
 800743a:	4b54      	ldr	r3, [pc, #336]	; (800758c <setvbuf+0x158>)
 800743c:	681f      	ldr	r7, [r3, #0]
 800743e:	4604      	mov	r4, r0
 8007440:	460e      	mov	r6, r1
 8007442:	4690      	mov	r8, r2
 8007444:	b127      	cbz	r7, 8007450 <setvbuf+0x1c>
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	b913      	cbnz	r3, 8007450 <setvbuf+0x1c>
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff9a 	bl	8007384 <__sinit>
 8007450:	f1b8 0f02 	cmp.w	r8, #2
 8007454:	d006      	beq.n	8007464 <setvbuf+0x30>
 8007456:	f1b8 0f01 	cmp.w	r8, #1
 800745a:	f200 8094 	bhi.w	8007586 <setvbuf+0x152>
 800745e:	2d00      	cmp	r5, #0
 8007460:	f2c0 8091 	blt.w	8007586 <setvbuf+0x152>
 8007464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007466:	07da      	lsls	r2, r3, #31
 8007468:	d405      	bmi.n	8007476 <setvbuf+0x42>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d402      	bmi.n	8007476 <setvbuf+0x42>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f000 f9a6 	bl	80077c2 <__retarget_lock_acquire_recursive>
 8007476:	4621      	mov	r1, r4
 8007478:	4638      	mov	r0, r7
 800747a:	f000 fe1d 	bl	80080b8 <_fflush_r>
 800747e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007480:	b141      	cbz	r1, 8007494 <setvbuf+0x60>
 8007482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007486:	4299      	cmp	r1, r3
 8007488:	d002      	beq.n	8007490 <setvbuf+0x5c>
 800748a:	4638      	mov	r0, r7
 800748c:	f000 f9ba 	bl	8007804 <_free_r>
 8007490:	2300      	movs	r3, #0
 8007492:	6363      	str	r3, [r4, #52]	; 0x34
 8007494:	2300      	movs	r3, #0
 8007496:	61a3      	str	r3, [r4, #24]
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0618      	lsls	r0, r3, #24
 800749e:	d503      	bpl.n	80074a8 <setvbuf+0x74>
 80074a0:	6921      	ldr	r1, [r4, #16]
 80074a2:	4638      	mov	r0, r7
 80074a4:	f000 f9ae 	bl	8007804 <_free_r>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	f1b8 0f02 	cmp.w	r8, #2
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	d05f      	beq.n	800757a <setvbuf+0x146>
 80074ba:	ab01      	add	r3, sp, #4
 80074bc:	466a      	mov	r2, sp
 80074be:	4621      	mov	r1, r4
 80074c0:	4638      	mov	r0, r7
 80074c2:	f000 fe5e 	bl	8008182 <__swhatbuf_r>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	4318      	orrs	r0, r3
 80074ca:	81a0      	strh	r0, [r4, #12]
 80074cc:	bb2d      	cbnz	r5, 800751a <setvbuf+0xe6>
 80074ce:	9d00      	ldr	r5, [sp, #0]
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 f9e3 	bl	800789c <malloc>
 80074d6:	4606      	mov	r6, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	d150      	bne.n	800757e <setvbuf+0x14a>
 80074dc:	f8dd 9000 	ldr.w	r9, [sp]
 80074e0:	45a9      	cmp	r9, r5
 80074e2:	d13e      	bne.n	8007562 <setvbuf+0x12e>
 80074e4:	f04f 35ff 	mov.w	r5, #4294967295
 80074e8:	2200      	movs	r2, #0
 80074ea:	60a2      	str	r2, [r4, #8]
 80074ec:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	6122      	str	r2, [r4, #16]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fa:	6162      	str	r2, [r4, #20]
 80074fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074fe:	f043 0302 	orr.w	r3, r3, #2
 8007502:	07d1      	lsls	r1, r2, #31
 8007504:	81a3      	strh	r3, [r4, #12]
 8007506:	d404      	bmi.n	8007512 <setvbuf+0xde>
 8007508:	059b      	lsls	r3, r3, #22
 800750a:	d402      	bmi.n	8007512 <setvbuf+0xde>
 800750c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750e:	f000 f959 	bl	80077c4 <__retarget_lock_release_recursive>
 8007512:	4628      	mov	r0, r5
 8007514:	b003      	add	sp, #12
 8007516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800751a:	2e00      	cmp	r6, #0
 800751c:	d0d8      	beq.n	80074d0 <setvbuf+0x9c>
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	b913      	cbnz	r3, 8007528 <setvbuf+0xf4>
 8007522:	4638      	mov	r0, r7
 8007524:	f7ff ff2e 	bl	8007384 <__sinit>
 8007528:	f1b8 0f01 	cmp.w	r8, #1
 800752c:	bf08      	it	eq
 800752e:	89a3      	ldrheq	r3, [r4, #12]
 8007530:	6026      	str	r6, [r4, #0]
 8007532:	bf04      	itt	eq
 8007534:	f043 0301 	orreq.w	r3, r3, #1
 8007538:	81a3      	strheq	r3, [r4, #12]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f013 0208 	ands.w	r2, r3, #8
 8007540:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007544:	d01d      	beq.n	8007582 <setvbuf+0x14e>
 8007546:	07da      	lsls	r2, r3, #31
 8007548:	bf41      	itttt	mi
 800754a:	2200      	movmi	r2, #0
 800754c:	426d      	negmi	r5, r5
 800754e:	60a2      	strmi	r2, [r4, #8]
 8007550:	61a5      	strmi	r5, [r4, #24]
 8007552:	bf58      	it	pl
 8007554:	60a5      	strpl	r5, [r4, #8]
 8007556:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007558:	f015 0501 	ands.w	r5, r5, #1
 800755c:	d0d4      	beq.n	8007508 <setvbuf+0xd4>
 800755e:	2500      	movs	r5, #0
 8007560:	e7d7      	b.n	8007512 <setvbuf+0xde>
 8007562:	4648      	mov	r0, r9
 8007564:	f000 f99a 	bl	800789c <malloc>
 8007568:	4606      	mov	r6, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d0ba      	beq.n	80074e4 <setvbuf+0xb0>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	464d      	mov	r5, r9
 8007578:	e7d1      	b.n	800751e <setvbuf+0xea>
 800757a:	2500      	movs	r5, #0
 800757c:	e7b4      	b.n	80074e8 <setvbuf+0xb4>
 800757e:	46a9      	mov	r9, r5
 8007580:	e7f5      	b.n	800756e <setvbuf+0x13a>
 8007582:	60a2      	str	r2, [r4, #8]
 8007584:	e7e7      	b.n	8007556 <setvbuf+0x122>
 8007586:	f04f 35ff 	mov.w	r5, #4294967295
 800758a:	e7c2      	b.n	8007512 <setvbuf+0xde>
 800758c:	200000a4 	.word	0x200000a4

08007590 <__sread>:
 8007590:	b510      	push	{r4, lr}
 8007592:	460c      	mov	r4, r1
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	f000 f8c4 	bl	8007724 <_read_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	bfab      	itete	ge
 80075a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075a2:	89a3      	ldrhlt	r3, [r4, #12]
 80075a4:	181b      	addge	r3, r3, r0
 80075a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075aa:	bfac      	ite	ge
 80075ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80075ae:	81a3      	strhlt	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__swrite>:
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	461f      	mov	r7, r3
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	05db      	lsls	r3, r3, #23
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	4616      	mov	r6, r2
 80075c2:	d505      	bpl.n	80075d0 <__swrite+0x1e>
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	2302      	movs	r3, #2
 80075ca:	2200      	movs	r2, #0
 80075cc:	f000 f898 	bl	8007700 <_lseek_r>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	4632      	mov	r2, r6
 80075de:	463b      	mov	r3, r7
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	f000 b8af 	b.w	8007748 <_write_r>

080075ea <__sseek>:
 80075ea:	b510      	push	{r4, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f2:	f000 f885 	bl	8007700 <_lseek_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	bf15      	itete	ne
 80075fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80075fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007606:	81a3      	strheq	r3, [r4, #12]
 8007608:	bf18      	it	ne
 800760a:	81a3      	strhne	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__sclose>:
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	f000 b865 	b.w	80076e0 <_close_r>

08007616 <memset>:
 8007616:	4402      	add	r2, r0
 8007618:	4603      	mov	r3, r0
 800761a:	4293      	cmp	r3, r2
 800761c:	d100      	bne.n	8007620 <memset+0xa>
 800761e:	4770      	bx	lr
 8007620:	f803 1b01 	strb.w	r1, [r3], #1
 8007624:	e7f9      	b.n	800761a <memset+0x4>
	...

08007628 <strtok>:
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <strtok+0x5c>)
 800762a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800762c:	681e      	ldr	r6, [r3, #0]
 800762e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007630:	4605      	mov	r5, r0
 8007632:	b9fc      	cbnz	r4, 8007674 <strtok+0x4c>
 8007634:	2050      	movs	r0, #80	; 0x50
 8007636:	9101      	str	r1, [sp, #4]
 8007638:	f000 f930 	bl	800789c <malloc>
 800763c:	9901      	ldr	r1, [sp, #4]
 800763e:	6470      	str	r0, [r6, #68]	; 0x44
 8007640:	4602      	mov	r2, r0
 8007642:	b920      	cbnz	r0, 800764e <strtok+0x26>
 8007644:	4b10      	ldr	r3, [pc, #64]	; (8007688 <strtok+0x60>)
 8007646:	4811      	ldr	r0, [pc, #68]	; (800768c <strtok+0x64>)
 8007648:	215b      	movs	r1, #91	; 0x5b
 800764a:	f000 f8bd 	bl	80077c8 <__assert_func>
 800764e:	e9c0 4400 	strd	r4, r4, [r0]
 8007652:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007656:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800765a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800765e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007662:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007666:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800766a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800766e:	6184      	str	r4, [r0, #24]
 8007670:	7704      	strb	r4, [r0, #28]
 8007672:	6244      	str	r4, [r0, #36]	; 0x24
 8007674:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007676:	2301      	movs	r3, #1
 8007678:	4628      	mov	r0, r5
 800767a:	b002      	add	sp, #8
 800767c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007680:	f000 b806 	b.w	8007690 <__strtok_r>
 8007684:	200000a4 	.word	0x200000a4
 8007688:	0800888d 	.word	0x0800888d
 800768c:	080088a4 	.word	0x080088a4

08007690 <__strtok_r>:
 8007690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007692:	b908      	cbnz	r0, 8007698 <__strtok_r+0x8>
 8007694:	6810      	ldr	r0, [r2, #0]
 8007696:	b188      	cbz	r0, 80076bc <__strtok_r+0x2c>
 8007698:	4604      	mov	r4, r0
 800769a:	4620      	mov	r0, r4
 800769c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076a0:	460f      	mov	r7, r1
 80076a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80076a6:	b91e      	cbnz	r6, 80076b0 <__strtok_r+0x20>
 80076a8:	b965      	cbnz	r5, 80076c4 <__strtok_r+0x34>
 80076aa:	6015      	str	r5, [r2, #0]
 80076ac:	4628      	mov	r0, r5
 80076ae:	e005      	b.n	80076bc <__strtok_r+0x2c>
 80076b0:	42b5      	cmp	r5, r6
 80076b2:	d1f6      	bne.n	80076a2 <__strtok_r+0x12>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <__strtok_r+0xa>
 80076b8:	6014      	str	r4, [r2, #0]
 80076ba:	7003      	strb	r3, [r0, #0]
 80076bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076be:	461c      	mov	r4, r3
 80076c0:	e00c      	b.n	80076dc <__strtok_r+0x4c>
 80076c2:	b915      	cbnz	r5, 80076ca <__strtok_r+0x3a>
 80076c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076c8:	460e      	mov	r6, r1
 80076ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 80076ce:	42ab      	cmp	r3, r5
 80076d0:	d1f7      	bne.n	80076c2 <__strtok_r+0x32>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f3      	beq.n	80076be <__strtok_r+0x2e>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80076dc:	6014      	str	r4, [r2, #0]
 80076de:	e7ed      	b.n	80076bc <__strtok_r+0x2c>

080076e0 <_close_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d06      	ldr	r5, [pc, #24]	; (80076fc <_close_r+0x1c>)
 80076e4:	2300      	movs	r3, #0
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f7f9 fda2 	bl	8001234 <_close>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_close_r+0x1a>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_close_r+0x1a>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	200003c0 	.word	0x200003c0

08007700 <_lseek_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d07      	ldr	r5, [pc, #28]	; (8007720 <_lseek_r+0x20>)
 8007704:	4604      	mov	r4, r0
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7f9 fda7 	bl	8001262 <_lseek>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_lseek_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_lseek_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	200003c0 	.word	0x200003c0

08007724 <_read_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_read_r+0x20>)
 8007728:	4604      	mov	r4, r0
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7f9 fda6 	bl	8001284 <_read>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_read_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_read_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200003c0 	.word	0x200003c0

08007748 <_write_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_write_r+0x20>)
 800774c:	4604      	mov	r4, r0
 800774e:	4608      	mov	r0, r1
 8007750:	4611      	mov	r1, r2
 8007752:	2200      	movs	r2, #0
 8007754:	602a      	str	r2, [r5, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f7f9 fd40 	bl	80011dc <_write>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_write_r+0x1e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_write_r+0x1e>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200003c0 	.word	0x200003c0

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200000a4 	.word	0x200000a4

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4d0d      	ldr	r5, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2600      	movs	r6, #0
 8007784:	42a6      	cmp	r6, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4d0b      	ldr	r5, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f000 ff40 	bl	8008610 <_init>
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2600      	movs	r6, #0
 8007796:	42a6      	cmp	r6, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a0:	4798      	blx	r3
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077aa:	4798      	blx	r3
 80077ac:	3601      	adds	r6, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	08008978 	.word	0x08008978
 80077b4:	08008978 	.word	0x08008978
 80077b8:	08008978 	.word	0x08008978
 80077bc:	0800897c 	.word	0x0800897c

080077c0 <__retarget_lock_init_recursive>:
 80077c0:	4770      	bx	lr

080077c2 <__retarget_lock_acquire_recursive>:
 80077c2:	4770      	bx	lr

080077c4 <__retarget_lock_release_recursive>:
 80077c4:	4770      	bx	lr
	...

080077c8 <__assert_func>:
 80077c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ca:	4614      	mov	r4, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <__assert_func+0x2c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4605      	mov	r5, r0
 80077d4:	68d8      	ldr	r0, [r3, #12]
 80077d6:	b14c      	cbz	r4, 80077ec <__assert_func+0x24>
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <__assert_func+0x30>)
 80077da:	9100      	str	r1, [sp, #0]
 80077dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077e0:	4906      	ldr	r1, [pc, #24]	; (80077fc <__assert_func+0x34>)
 80077e2:	462b      	mov	r3, r5
 80077e4:	f000 fc90 	bl	8008108 <fiprintf>
 80077e8:	f000 fe40 	bl	800846c <abort>
 80077ec:	4b04      	ldr	r3, [pc, #16]	; (8007800 <__assert_func+0x38>)
 80077ee:	461c      	mov	r4, r3
 80077f0:	e7f3      	b.n	80077da <__assert_func+0x12>
 80077f2:	bf00      	nop
 80077f4:	200000a4 	.word	0x200000a4
 80077f8:	080088fe 	.word	0x080088fe
 80077fc:	0800890b 	.word	0x0800890b
 8007800:	08008939 	.word	0x08008939

08007804 <_free_r>:
 8007804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007806:	2900      	cmp	r1, #0
 8007808:	d044      	beq.n	8007894 <_free_r+0x90>
 800780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f1a1 0404 	sub.w	r4, r1, #4
 8007816:	bfb8      	it	lt
 8007818:	18e4      	addlt	r4, r4, r3
 800781a:	f000 f8e7 	bl	80079ec <__malloc_lock>
 800781e:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <_free_r+0x94>)
 8007820:	9801      	ldr	r0, [sp, #4]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x30>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	b003      	add	sp, #12
 800782c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007830:	f000 b8e2 	b.w	80079f8 <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x46>
 8007838:	6825      	ldr	r5, [r4, #0]
 800783a:	1961      	adds	r1, r4, r5
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1949      	addeq	r1, r1, r5
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x22>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x50>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x46>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1855      	adds	r5, r2, r1
 8007858:	42a5      	cmp	r5, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x70>
 800785c:	6824      	ldr	r4, [r4, #0]
 800785e:	4421      	add	r1, r4
 8007860:	1854      	adds	r4, r2, r1
 8007862:	42a3      	cmp	r3, r4
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x26>
 8007868:	681c      	ldr	r4, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	6053      	str	r3, [r2, #4]
 800786e:	440c      	add	r4, r1
 8007870:	6014      	str	r4, [r2, #0]
 8007872:	e7da      	b.n	800782a <_free_r+0x26>
 8007874:	d902      	bls.n	800787c <_free_r+0x78>
 8007876:	230c      	movs	r3, #12
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x26>
 800787c:	6825      	ldr	r5, [r4, #0]
 800787e:	1961      	adds	r1, r4, r5
 8007880:	428b      	cmp	r3, r1
 8007882:	bf04      	itt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	bf04      	itt	eq
 800788c:	1949      	addeq	r1, r1, r5
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	6054      	str	r4, [r2, #4]
 8007892:	e7ca      	b.n	800782a <_free_r+0x26>
 8007894:	b003      	add	sp, #12
 8007896:	bd30      	pop	{r4, r5, pc}
 8007898:	200003c8 	.word	0x200003c8

0800789c <malloc>:
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <malloc+0xc>)
 800789e:	4601      	mov	r1, r0
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f000 b823 	b.w	80078ec <_malloc_r>
 80078a6:	bf00      	nop
 80078a8:	200000a4 	.word	0x200000a4

080078ac <sbrk_aligned>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4e0e      	ldr	r6, [pc, #56]	; (80078e8 <sbrk_aligned+0x3c>)
 80078b0:	460c      	mov	r4, r1
 80078b2:	6831      	ldr	r1, [r6, #0]
 80078b4:	4605      	mov	r5, r0
 80078b6:	b911      	cbnz	r1, 80078be <sbrk_aligned+0x12>
 80078b8:	f000 fdc8 	bl	800844c <_sbrk_r>
 80078bc:	6030      	str	r0, [r6, #0]
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fdc3 	bl	800844c <_sbrk_r>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	d00a      	beq.n	80078e0 <sbrk_aligned+0x34>
 80078ca:	1cc4      	adds	r4, r0, #3
 80078cc:	f024 0403 	bic.w	r4, r4, #3
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d007      	beq.n	80078e4 <sbrk_aligned+0x38>
 80078d4:	1a21      	subs	r1, r4, r0
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 fdb8 	bl	800844c <_sbrk_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	d101      	bne.n	80078e4 <sbrk_aligned+0x38>
 80078e0:	f04f 34ff 	mov.w	r4, #4294967295
 80078e4:	4620      	mov	r0, r4
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	200003cc 	.word	0x200003cc

080078ec <_malloc_r>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	1ccd      	adds	r5, r1, #3
 80078f2:	f025 0503 	bic.w	r5, r5, #3
 80078f6:	3508      	adds	r5, #8
 80078f8:	2d0c      	cmp	r5, #12
 80078fa:	bf38      	it	cc
 80078fc:	250c      	movcc	r5, #12
 80078fe:	2d00      	cmp	r5, #0
 8007900:	4607      	mov	r7, r0
 8007902:	db01      	blt.n	8007908 <_malloc_r+0x1c>
 8007904:	42a9      	cmp	r1, r5
 8007906:	d905      	bls.n	8007914 <_malloc_r+0x28>
 8007908:	230c      	movs	r3, #12
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	2600      	movs	r6, #0
 800790e:	4630      	mov	r0, r6
 8007910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079e8 <_malloc_r+0xfc>
 8007918:	f000 f868 	bl	80079ec <__malloc_lock>
 800791c:	f8d8 3000 	ldr.w	r3, [r8]
 8007920:	461c      	mov	r4, r3
 8007922:	bb5c      	cbnz	r4, 800797c <_malloc_r+0x90>
 8007924:	4629      	mov	r1, r5
 8007926:	4638      	mov	r0, r7
 8007928:	f7ff ffc0 	bl	80078ac <sbrk_aligned>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	4604      	mov	r4, r0
 8007930:	d155      	bne.n	80079de <_malloc_r+0xf2>
 8007932:	f8d8 4000 	ldr.w	r4, [r8]
 8007936:	4626      	mov	r6, r4
 8007938:	2e00      	cmp	r6, #0
 800793a:	d145      	bne.n	80079c8 <_malloc_r+0xdc>
 800793c:	2c00      	cmp	r4, #0
 800793e:	d048      	beq.n	80079d2 <_malloc_r+0xe6>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	4631      	mov	r1, r6
 8007944:	4638      	mov	r0, r7
 8007946:	eb04 0903 	add.w	r9, r4, r3
 800794a:	f000 fd7f 	bl	800844c <_sbrk_r>
 800794e:	4581      	cmp	r9, r0
 8007950:	d13f      	bne.n	80079d2 <_malloc_r+0xe6>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	1a6d      	subs	r5, r5, r1
 8007956:	4629      	mov	r1, r5
 8007958:	4638      	mov	r0, r7
 800795a:	f7ff ffa7 	bl	80078ac <sbrk_aligned>
 800795e:	3001      	adds	r0, #1
 8007960:	d037      	beq.n	80079d2 <_malloc_r+0xe6>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	442b      	add	r3, r5
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d038      	beq.n	80079e2 <_malloc_r+0xf6>
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	42a2      	cmp	r2, r4
 8007974:	d12b      	bne.n	80079ce <_malloc_r+0xe2>
 8007976:	2200      	movs	r2, #0
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	e00f      	b.n	800799c <_malloc_r+0xb0>
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	1b52      	subs	r2, r2, r5
 8007980:	d41f      	bmi.n	80079c2 <_malloc_r+0xd6>
 8007982:	2a0b      	cmp	r2, #11
 8007984:	d917      	bls.n	80079b6 <_malloc_r+0xca>
 8007986:	1961      	adds	r1, r4, r5
 8007988:	42a3      	cmp	r3, r4
 800798a:	6025      	str	r5, [r4, #0]
 800798c:	bf18      	it	ne
 800798e:	6059      	strne	r1, [r3, #4]
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	bf08      	it	eq
 8007994:	f8c8 1000 	streq.w	r1, [r8]
 8007998:	5162      	str	r2, [r4, r5]
 800799a:	604b      	str	r3, [r1, #4]
 800799c:	4638      	mov	r0, r7
 800799e:	f104 060b 	add.w	r6, r4, #11
 80079a2:	f000 f829 	bl	80079f8 <__malloc_unlock>
 80079a6:	f026 0607 	bic.w	r6, r6, #7
 80079aa:	1d23      	adds	r3, r4, #4
 80079ac:	1af2      	subs	r2, r6, r3
 80079ae:	d0ae      	beq.n	800790e <_malloc_r+0x22>
 80079b0:	1b9b      	subs	r3, r3, r6
 80079b2:	50a3      	str	r3, [r4, r2]
 80079b4:	e7ab      	b.n	800790e <_malloc_r+0x22>
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	6862      	ldr	r2, [r4, #4]
 80079ba:	d1dd      	bne.n	8007978 <_malloc_r+0x8c>
 80079bc:	f8c8 2000 	str.w	r2, [r8]
 80079c0:	e7ec      	b.n	800799c <_malloc_r+0xb0>
 80079c2:	4623      	mov	r3, r4
 80079c4:	6864      	ldr	r4, [r4, #4]
 80079c6:	e7ac      	b.n	8007922 <_malloc_r+0x36>
 80079c8:	4634      	mov	r4, r6
 80079ca:	6876      	ldr	r6, [r6, #4]
 80079cc:	e7b4      	b.n	8007938 <_malloc_r+0x4c>
 80079ce:	4613      	mov	r3, r2
 80079d0:	e7cc      	b.n	800796c <_malloc_r+0x80>
 80079d2:	230c      	movs	r3, #12
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	4638      	mov	r0, r7
 80079d8:	f000 f80e 	bl	80079f8 <__malloc_unlock>
 80079dc:	e797      	b.n	800790e <_malloc_r+0x22>
 80079de:	6025      	str	r5, [r4, #0]
 80079e0:	e7dc      	b.n	800799c <_malloc_r+0xb0>
 80079e2:	605b      	str	r3, [r3, #4]
 80079e4:	deff      	udf	#255	; 0xff
 80079e6:	bf00      	nop
 80079e8:	200003c8 	.word	0x200003c8

080079ec <__malloc_lock>:
 80079ec:	4801      	ldr	r0, [pc, #4]	; (80079f4 <__malloc_lock+0x8>)
 80079ee:	f7ff bee8 	b.w	80077c2 <__retarget_lock_acquire_recursive>
 80079f2:	bf00      	nop
 80079f4:	200003c4 	.word	0x200003c4

080079f8 <__malloc_unlock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_unlock+0x8>)
 80079fa:	f7ff bee3 	b.w	80077c4 <__retarget_lock_release_recursive>
 80079fe:	bf00      	nop
 8007a00:	200003c4 	.word	0x200003c4

08007a04 <__sfputc_r>:
 8007a04:	6893      	ldr	r3, [r2, #8]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	b410      	push	{r4}
 8007a0c:	6093      	str	r3, [r2, #8]
 8007a0e:	da08      	bge.n	8007a22 <__sfputc_r+0x1e>
 8007a10:	6994      	ldr	r4, [r2, #24]
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	db01      	blt.n	8007a1a <__sfputc_r+0x16>
 8007a16:	290a      	cmp	r1, #10
 8007a18:	d103      	bne.n	8007a22 <__sfputc_r+0x1e>
 8007a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a1e:	f000 bc5e 	b.w	80082de <__swbuf_r>
 8007a22:	6813      	ldr	r3, [r2, #0]
 8007a24:	1c58      	adds	r0, r3, #1
 8007a26:	6010      	str	r0, [r2, #0]
 8007a28:	7019      	strb	r1, [r3, #0]
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <__sfputs_r>:
 8007a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a34:	4606      	mov	r6, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	4614      	mov	r4, r2
 8007a3a:	18d5      	adds	r5, r2, r3
 8007a3c:	42ac      	cmp	r4, r5
 8007a3e:	d101      	bne.n	8007a44 <__sfputs_r+0x12>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e007      	b.n	8007a54 <__sfputs_r+0x22>
 8007a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a48:	463a      	mov	r2, r7
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ffda 	bl	8007a04 <__sfputc_r>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d1f3      	bne.n	8007a3c <__sfputs_r+0xa>
 8007a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a58 <_vfiprintf_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	460d      	mov	r5, r1
 8007a5e:	b09d      	sub	sp, #116	; 0x74
 8007a60:	4614      	mov	r4, r2
 8007a62:	4698      	mov	r8, r3
 8007a64:	4606      	mov	r6, r0
 8007a66:	b118      	cbz	r0, 8007a70 <_vfiprintf_r+0x18>
 8007a68:	6a03      	ldr	r3, [r0, #32]
 8007a6a:	b90b      	cbnz	r3, 8007a70 <_vfiprintf_r+0x18>
 8007a6c:	f7ff fc8a 	bl	8007384 <__sinit>
 8007a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a72:	07d9      	lsls	r1, r3, #31
 8007a74:	d405      	bmi.n	8007a82 <_vfiprintf_r+0x2a>
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	059a      	lsls	r2, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_vfiprintf_r+0x2a>
 8007a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a7e:	f7ff fea0 	bl	80077c2 <__retarget_lock_acquire_recursive>
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	071b      	lsls	r3, r3, #28
 8007a86:	d501      	bpl.n	8007a8c <_vfiprintf_r+0x34>
 8007a88:	692b      	ldr	r3, [r5, #16]
 8007a8a:	b99b      	cbnz	r3, 8007ab4 <_vfiprintf_r+0x5c>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 fc62 	bl	8008358 <__swsetup_r>
 8007a94:	b170      	cbz	r0, 8007ab4 <_vfiprintf_r+0x5c>
 8007a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a98:	07dc      	lsls	r4, r3, #31
 8007a9a:	d504      	bpl.n	8007aa6 <_vfiprintf_r+0x4e>
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	b01d      	add	sp, #116	; 0x74
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	0598      	lsls	r0, r3, #22
 8007aaa:	d4f7      	bmi.n	8007a9c <_vfiprintf_r+0x44>
 8007aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aae:	f7ff fe89 	bl	80077c4 <__retarget_lock_release_recursive>
 8007ab2:	e7f3      	b.n	8007a9c <_vfiprintf_r+0x44>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac2:	2330      	movs	r3, #48	; 0x30
 8007ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c78 <_vfiprintf_r+0x220>
 8007ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007acc:	f04f 0901 	mov.w	r9, #1
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	469a      	mov	sl, r3
 8007ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad8:	b10a      	cbz	r2, 8007ade <_vfiprintf_r+0x86>
 8007ada:	2a25      	cmp	r2, #37	; 0x25
 8007adc:	d1f9      	bne.n	8007ad2 <_vfiprintf_r+0x7a>
 8007ade:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae2:	d00b      	beq.n	8007afc <_vfiprintf_r+0xa4>
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff ffa1 	bl	8007a32 <__sfputs_r>
 8007af0:	3001      	adds	r0, #1
 8007af2:	f000 80a9 	beq.w	8007c48 <_vfiprintf_r+0x1f0>
 8007af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af8:	445a      	add	r2, fp
 8007afa:	9209      	str	r2, [sp, #36]	; 0x24
 8007afc:	f89a 3000 	ldrb.w	r3, [sl]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80a1 	beq.w	8007c48 <_vfiprintf_r+0x1f0>
 8007b06:	2300      	movs	r3, #0
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b10:	f10a 0a01 	add.w	sl, sl, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	9307      	str	r3, [sp, #28]
 8007b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b1e:	4654      	mov	r4, sl
 8007b20:	2205      	movs	r2, #5
 8007b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b26:	4854      	ldr	r0, [pc, #336]	; (8007c78 <_vfiprintf_r+0x220>)
 8007b28:	f7f8 fb62 	bl	80001f0 <memchr>
 8007b2c:	9a04      	ldr	r2, [sp, #16]
 8007b2e:	b9d8      	cbnz	r0, 8007b68 <_vfiprintf_r+0x110>
 8007b30:	06d1      	lsls	r1, r2, #27
 8007b32:	bf44      	itt	mi
 8007b34:	2320      	movmi	r3, #32
 8007b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3a:	0713      	lsls	r3, r2, #28
 8007b3c:	bf44      	itt	mi
 8007b3e:	232b      	movmi	r3, #43	; 0x2b
 8007b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b44:	f89a 3000 	ldrb.w	r3, [sl]
 8007b48:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4a:	d015      	beq.n	8007b78 <_vfiprintf_r+0x120>
 8007b4c:	9a07      	ldr	r2, [sp, #28]
 8007b4e:	4654      	mov	r4, sl
 8007b50:	2000      	movs	r0, #0
 8007b52:	f04f 0c0a 	mov.w	ip, #10
 8007b56:	4621      	mov	r1, r4
 8007b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5c:	3b30      	subs	r3, #48	; 0x30
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d94d      	bls.n	8007bfe <_vfiprintf_r+0x1a6>
 8007b62:	b1b0      	cbz	r0, 8007b92 <_vfiprintf_r+0x13a>
 8007b64:	9207      	str	r2, [sp, #28]
 8007b66:	e014      	b.n	8007b92 <_vfiprintf_r+0x13a>
 8007b68:	eba0 0308 	sub.w	r3, r0, r8
 8007b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b70:	4313      	orrs	r3, r2
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	46a2      	mov	sl, r4
 8007b76:	e7d2      	b.n	8007b1e <_vfiprintf_r+0xc6>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	1d19      	adds	r1, r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	9103      	str	r1, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bfbb      	ittet	lt
 8007b84:	425b      	neglt	r3, r3
 8007b86:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8a:	9307      	strge	r3, [sp, #28]
 8007b8c:	9307      	strlt	r3, [sp, #28]
 8007b8e:	bfb8      	it	lt
 8007b90:	9204      	strlt	r2, [sp, #16]
 8007b92:	7823      	ldrb	r3, [r4, #0]
 8007b94:	2b2e      	cmp	r3, #46	; 0x2e
 8007b96:	d10c      	bne.n	8007bb2 <_vfiprintf_r+0x15a>
 8007b98:	7863      	ldrb	r3, [r4, #1]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d134      	bne.n	8007c08 <_vfiprintf_r+0x1b0>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	1d1a      	adds	r2, r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	9203      	str	r2, [sp, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bae:	3402      	adds	r4, #2
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c88 <_vfiprintf_r+0x230>
 8007bb6:	7821      	ldrb	r1, [r4, #0]
 8007bb8:	2203      	movs	r2, #3
 8007bba:	4650      	mov	r0, sl
 8007bbc:	f7f8 fb18 	bl	80001f0 <memchr>
 8007bc0:	b138      	cbz	r0, 8007bd2 <_vfiprintf_r+0x17a>
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	eba0 000a 	sub.w	r0, r0, sl
 8007bc8:	2240      	movs	r2, #64	; 0x40
 8007bca:	4082      	lsls	r2, r0
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	3401      	adds	r4, #1
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd6:	4829      	ldr	r0, [pc, #164]	; (8007c7c <_vfiprintf_r+0x224>)
 8007bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bdc:	2206      	movs	r2, #6
 8007bde:	f7f8 fb07 	bl	80001f0 <memchr>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d03f      	beq.n	8007c66 <_vfiprintf_r+0x20e>
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <_vfiprintf_r+0x228>)
 8007be8:	bb1b      	cbnz	r3, 8007c32 <_vfiprintf_r+0x1da>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3307      	adds	r3, #7
 8007bee:	f023 0307 	bic.w	r3, r3, #7
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	443b      	add	r3, r7
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	e768      	b.n	8007ad0 <_vfiprintf_r+0x78>
 8007bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c02:	460c      	mov	r4, r1
 8007c04:	2001      	movs	r0, #1
 8007c06:	e7a6      	b.n	8007b56 <_vfiprintf_r+0xfe>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	3401      	adds	r4, #1
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f04f 0c0a 	mov.w	ip, #10
 8007c14:	4620      	mov	r0, r4
 8007c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1a:	3a30      	subs	r2, #48	; 0x30
 8007c1c:	2a09      	cmp	r2, #9
 8007c1e:	d903      	bls.n	8007c28 <_vfiprintf_r+0x1d0>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0c6      	beq.n	8007bb2 <_vfiprintf_r+0x15a>
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	e7c4      	b.n	8007bb2 <_vfiprintf_r+0x15a>
 8007c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e7f0      	b.n	8007c14 <_vfiprintf_r+0x1bc>
 8007c32:	ab03      	add	r3, sp, #12
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	462a      	mov	r2, r5
 8007c38:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <_vfiprintf_r+0x22c>)
 8007c3a:	a904      	add	r1, sp, #16
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f3af 8000 	nop.w
 8007c42:	4607      	mov	r7, r0
 8007c44:	1c78      	adds	r0, r7, #1
 8007c46:	d1d6      	bne.n	8007bf6 <_vfiprintf_r+0x19e>
 8007c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_vfiprintf_r+0x202>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_vfiprintf_r+0x202>
 8007c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c56:	f7ff fdb5 	bl	80077c4 <__retarget_lock_release_recursive>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	065b      	lsls	r3, r3, #25
 8007c5e:	f53f af1d 	bmi.w	8007a9c <_vfiprintf_r+0x44>
 8007c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c64:	e71c      	b.n	8007aa0 <_vfiprintf_r+0x48>
 8007c66:	ab03      	add	r3, sp, #12
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	462a      	mov	r2, r5
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <_vfiprintf_r+0x22c>)
 8007c6e:	a904      	add	r1, sp, #16
 8007c70:	4630      	mov	r0, r6
 8007c72:	f000 f879 	bl	8007d68 <_printf_i>
 8007c76:	e7e4      	b.n	8007c42 <_vfiprintf_r+0x1ea>
 8007c78:	0800893a 	.word	0x0800893a
 8007c7c:	08008944 	.word	0x08008944
 8007c80:	00000000 	.word	0x00000000
 8007c84:	08007a33 	.word	0x08007a33
 8007c88:	08008940 	.word	0x08008940

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4616      	mov	r6, r2
 8007c92:	4699      	mov	r9, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ca8:	4607      	mov	r7, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b10a      	cbz	r2, 8007cb2 <_printf_common+0x26>
 8007cae:	3301      	adds	r3, #1
 8007cb0:	6033      	str	r3, [r6, #0]
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	0699      	lsls	r1, r3, #26
 8007cb6:	bf42      	ittt	mi
 8007cb8:	6833      	ldrmi	r3, [r6, #0]
 8007cba:	3302      	addmi	r3, #2
 8007cbc:	6033      	strmi	r3, [r6, #0]
 8007cbe:	6825      	ldr	r5, [r4, #0]
 8007cc0:	f015 0506 	ands.w	r5, r5, #6
 8007cc4:	d106      	bne.n	8007cd4 <_printf_common+0x48>
 8007cc6:	f104 0a19 	add.w	sl, r4, #25
 8007cca:	68e3      	ldr	r3, [r4, #12]
 8007ccc:	6832      	ldr	r2, [r6, #0]
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	dc26      	bgt.n	8007d22 <_printf_common+0x96>
 8007cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cd8:	1e13      	subs	r3, r2, #0
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	bf18      	it	ne
 8007cde:	2301      	movne	r3, #1
 8007ce0:	0692      	lsls	r2, r2, #26
 8007ce2:	d42b      	bmi.n	8007d3c <_printf_common+0xb0>
 8007ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ce8:	4649      	mov	r1, r9
 8007cea:	4638      	mov	r0, r7
 8007cec:	47c0      	blx	r8
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d01e      	beq.n	8007d30 <_printf_common+0xa4>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	f003 0306 	and.w	r3, r3, #6
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	bf02      	ittt	eq
 8007cfe:	68e5      	ldreq	r5, [r4, #12]
 8007d00:	6833      	ldreq	r3, [r6, #0]
 8007d02:	1aed      	subeq	r5, r5, r3
 8007d04:	68a3      	ldr	r3, [r4, #8]
 8007d06:	bf0c      	ite	eq
 8007d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d0c:	2500      	movne	r5, #0
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	bfc4      	itt	gt
 8007d12:	1a9b      	subgt	r3, r3, r2
 8007d14:	18ed      	addgt	r5, r5, r3
 8007d16:	2600      	movs	r6, #0
 8007d18:	341a      	adds	r4, #26
 8007d1a:	42b5      	cmp	r5, r6
 8007d1c:	d11a      	bne.n	8007d54 <_printf_common+0xc8>
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e008      	b.n	8007d34 <_printf_common+0xa8>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4652      	mov	r2, sl
 8007d26:	4649      	mov	r1, r9
 8007d28:	4638      	mov	r0, r7
 8007d2a:	47c0      	blx	r8
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d103      	bne.n	8007d38 <_printf_common+0xac>
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d38:	3501      	adds	r5, #1
 8007d3a:	e7c6      	b.n	8007cca <_printf_common+0x3e>
 8007d3c:	18e1      	adds	r1, r4, r3
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	2030      	movs	r0, #48	; 0x30
 8007d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d46:	4422      	add	r2, r4
 8007d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d50:	3302      	adds	r3, #2
 8007d52:	e7c7      	b.n	8007ce4 <_printf_common+0x58>
 8007d54:	2301      	movs	r3, #1
 8007d56:	4622      	mov	r2, r4
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	47c0      	blx	r8
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d0e6      	beq.n	8007d30 <_printf_common+0xa4>
 8007d62:	3601      	adds	r6, #1
 8007d64:	e7d9      	b.n	8007d1a <_printf_common+0x8e>
	...

08007d68 <_printf_i>:
 8007d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	7e0f      	ldrb	r7, [r1, #24]
 8007d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d70:	2f78      	cmp	r7, #120	; 0x78
 8007d72:	4691      	mov	r9, r2
 8007d74:	4680      	mov	r8, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	469a      	mov	sl, r3
 8007d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d7e:	d807      	bhi.n	8007d90 <_printf_i+0x28>
 8007d80:	2f62      	cmp	r7, #98	; 0x62
 8007d82:	d80a      	bhi.n	8007d9a <_printf_i+0x32>
 8007d84:	2f00      	cmp	r7, #0
 8007d86:	f000 80d4 	beq.w	8007f32 <_printf_i+0x1ca>
 8007d8a:	2f58      	cmp	r7, #88	; 0x58
 8007d8c:	f000 80c0 	beq.w	8007f10 <_printf_i+0x1a8>
 8007d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d98:	e03a      	b.n	8007e10 <_printf_i+0xa8>
 8007d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d9e:	2b15      	cmp	r3, #21
 8007da0:	d8f6      	bhi.n	8007d90 <_printf_i+0x28>
 8007da2:	a101      	add	r1, pc, #4	; (adr r1, 8007da8 <_printf_i+0x40>)
 8007da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007da8:	08007e01 	.word	0x08007e01
 8007dac:	08007e15 	.word	0x08007e15
 8007db0:	08007d91 	.word	0x08007d91
 8007db4:	08007d91 	.word	0x08007d91
 8007db8:	08007d91 	.word	0x08007d91
 8007dbc:	08007d91 	.word	0x08007d91
 8007dc0:	08007e15 	.word	0x08007e15
 8007dc4:	08007d91 	.word	0x08007d91
 8007dc8:	08007d91 	.word	0x08007d91
 8007dcc:	08007d91 	.word	0x08007d91
 8007dd0:	08007d91 	.word	0x08007d91
 8007dd4:	08007f19 	.word	0x08007f19
 8007dd8:	08007e41 	.word	0x08007e41
 8007ddc:	08007ed3 	.word	0x08007ed3
 8007de0:	08007d91 	.word	0x08007d91
 8007de4:	08007d91 	.word	0x08007d91
 8007de8:	08007f3b 	.word	0x08007f3b
 8007dec:	08007d91 	.word	0x08007d91
 8007df0:	08007e41 	.word	0x08007e41
 8007df4:	08007d91 	.word	0x08007d91
 8007df8:	08007d91 	.word	0x08007d91
 8007dfc:	08007edb 	.word	0x08007edb
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	1d1a      	adds	r2, r3, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	602a      	str	r2, [r5, #0]
 8007e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e10:	2301      	movs	r3, #1
 8007e12:	e09f      	b.n	8007f54 <_printf_i+0x1ec>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	0607      	lsls	r7, r0, #24
 8007e1a:	f103 0104 	add.w	r1, r3, #4
 8007e1e:	6029      	str	r1, [r5, #0]
 8007e20:	d501      	bpl.n	8007e26 <_printf_i+0xbe>
 8007e22:	681e      	ldr	r6, [r3, #0]
 8007e24:	e003      	b.n	8007e2e <_printf_i+0xc6>
 8007e26:	0646      	lsls	r6, r0, #25
 8007e28:	d5fb      	bpl.n	8007e22 <_printf_i+0xba>
 8007e2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	da03      	bge.n	8007e3a <_printf_i+0xd2>
 8007e32:	232d      	movs	r3, #45	; 0x2d
 8007e34:	4276      	negs	r6, r6
 8007e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3a:	485a      	ldr	r0, [pc, #360]	; (8007fa4 <_printf_i+0x23c>)
 8007e3c:	230a      	movs	r3, #10
 8007e3e:	e012      	b.n	8007e66 <_printf_i+0xfe>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	1d19      	adds	r1, r3, #4
 8007e46:	6029      	str	r1, [r5, #0]
 8007e48:	0605      	lsls	r5, r0, #24
 8007e4a:	d501      	bpl.n	8007e50 <_printf_i+0xe8>
 8007e4c:	681e      	ldr	r6, [r3, #0]
 8007e4e:	e002      	b.n	8007e56 <_printf_i+0xee>
 8007e50:	0641      	lsls	r1, r0, #25
 8007e52:	d5fb      	bpl.n	8007e4c <_printf_i+0xe4>
 8007e54:	881e      	ldrh	r6, [r3, #0]
 8007e56:	4853      	ldr	r0, [pc, #332]	; (8007fa4 <_printf_i+0x23c>)
 8007e58:	2f6f      	cmp	r7, #111	; 0x6f
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2308      	moveq	r3, #8
 8007e5e:	230a      	movne	r3, #10
 8007e60:	2100      	movs	r1, #0
 8007e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e66:	6865      	ldr	r5, [r4, #4]
 8007e68:	60a5      	str	r5, [r4, #8]
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	bfa2      	ittt	ge
 8007e6e:	6821      	ldrge	r1, [r4, #0]
 8007e70:	f021 0104 	bicge.w	r1, r1, #4
 8007e74:	6021      	strge	r1, [r4, #0]
 8007e76:	b90e      	cbnz	r6, 8007e7c <_printf_i+0x114>
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	d04b      	beq.n	8007f14 <_printf_i+0x1ac>
 8007e7c:	4615      	mov	r5, r2
 8007e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e82:	fb03 6711 	mls	r7, r3, r1, r6
 8007e86:	5dc7      	ldrb	r7, [r0, r7]
 8007e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e8c:	4637      	mov	r7, r6
 8007e8e:	42bb      	cmp	r3, r7
 8007e90:	460e      	mov	r6, r1
 8007e92:	d9f4      	bls.n	8007e7e <_printf_i+0x116>
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d10b      	bne.n	8007eb0 <_printf_i+0x148>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	07de      	lsls	r6, r3, #31
 8007e9c:	d508      	bpl.n	8007eb0 <_printf_i+0x148>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	6861      	ldr	r1, [r4, #4]
 8007ea2:	4299      	cmp	r1, r3
 8007ea4:	bfde      	ittt	le
 8007ea6:	2330      	movle	r3, #48	; 0x30
 8007ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007eb0:	1b52      	subs	r2, r2, r5
 8007eb2:	6122      	str	r2, [r4, #16]
 8007eb4:	f8cd a000 	str.w	sl, [sp]
 8007eb8:	464b      	mov	r3, r9
 8007eba:	aa03      	add	r2, sp, #12
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	f7ff fee4 	bl	8007c8c <_printf_common>
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d14a      	bne.n	8007f5e <_printf_i+0x1f6>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	b004      	add	sp, #16
 8007ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f043 0320 	orr.w	r3, r3, #32
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	4833      	ldr	r0, [pc, #204]	; (8007fa8 <_printf_i+0x240>)
 8007edc:	2778      	movs	r7, #120	; 0x78
 8007ede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	6829      	ldr	r1, [r5, #0]
 8007ee6:	061f      	lsls	r7, r3, #24
 8007ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007eec:	d402      	bmi.n	8007ef4 <_printf_i+0x18c>
 8007eee:	065f      	lsls	r7, r3, #25
 8007ef0:	bf48      	it	mi
 8007ef2:	b2b6      	uxthmi	r6, r6
 8007ef4:	07df      	lsls	r7, r3, #31
 8007ef6:	bf48      	it	mi
 8007ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8007efc:	6029      	str	r1, [r5, #0]
 8007efe:	bf48      	it	mi
 8007f00:	6023      	strmi	r3, [r4, #0]
 8007f02:	b91e      	cbnz	r6, 8007f0c <_printf_i+0x1a4>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	f023 0320 	bic.w	r3, r3, #32
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	e7a7      	b.n	8007e60 <_printf_i+0xf8>
 8007f10:	4824      	ldr	r0, [pc, #144]	; (8007fa4 <_printf_i+0x23c>)
 8007f12:	e7e4      	b.n	8007ede <_printf_i+0x176>
 8007f14:	4615      	mov	r5, r2
 8007f16:	e7bd      	b.n	8007e94 <_printf_i+0x12c>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	6826      	ldr	r6, [r4, #0]
 8007f1c:	6961      	ldr	r1, [r4, #20]
 8007f1e:	1d18      	adds	r0, r3, #4
 8007f20:	6028      	str	r0, [r5, #0]
 8007f22:	0635      	lsls	r5, r6, #24
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	d501      	bpl.n	8007f2c <_printf_i+0x1c4>
 8007f28:	6019      	str	r1, [r3, #0]
 8007f2a:	e002      	b.n	8007f32 <_printf_i+0x1ca>
 8007f2c:	0670      	lsls	r0, r6, #25
 8007f2e:	d5fb      	bpl.n	8007f28 <_printf_i+0x1c0>
 8007f30:	8019      	strh	r1, [r3, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	4615      	mov	r5, r2
 8007f38:	e7bc      	b.n	8007eb4 <_printf_i+0x14c>
 8007f3a:	682b      	ldr	r3, [r5, #0]
 8007f3c:	1d1a      	adds	r2, r3, #4
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	681d      	ldr	r5, [r3, #0]
 8007f42:	6862      	ldr	r2, [r4, #4]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 f952 	bl	80001f0 <memchr>
 8007f4c:	b108      	cbz	r0, 8007f52 <_printf_i+0x1ea>
 8007f4e:	1b40      	subs	r0, r0, r5
 8007f50:	6060      	str	r0, [r4, #4]
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	2300      	movs	r3, #0
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	e7aa      	b.n	8007eb4 <_printf_i+0x14c>
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d0ad      	beq.n	8007ec8 <_printf_i+0x160>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	079b      	lsls	r3, r3, #30
 8007f70:	d413      	bmi.n	8007f9a <_printf_i+0x232>
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	4298      	cmp	r0, r3
 8007f78:	bfb8      	it	lt
 8007f7a:	4618      	movlt	r0, r3
 8007f7c:	e7a6      	b.n	8007ecc <_printf_i+0x164>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4632      	mov	r2, r6
 8007f82:	4649      	mov	r1, r9
 8007f84:	4640      	mov	r0, r8
 8007f86:	47d0      	blx	sl
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d09d      	beq.n	8007ec8 <_printf_i+0x160>
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	9903      	ldr	r1, [sp, #12]
 8007f92:	1a5b      	subs	r3, r3, r1
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	dcf2      	bgt.n	8007f7e <_printf_i+0x216>
 8007f98:	e7eb      	b.n	8007f72 <_printf_i+0x20a>
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	f104 0619 	add.w	r6, r4, #25
 8007fa0:	e7f5      	b.n	8007f8e <_printf_i+0x226>
 8007fa2:	bf00      	nop
 8007fa4:	0800894b 	.word	0x0800894b
 8007fa8:	0800895c 	.word	0x0800895c

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	0710      	lsls	r0, r2, #28
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	d458      	bmi.n	800806c <__sflush_r+0xc0>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc05      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dc02      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d0f9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd8:	682f      	ldr	r7, [r5, #0]
 8007fda:	6a21      	ldr	r1, [r4, #32]
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	d032      	beq.n	8008046 <__sflush_r+0x9a>
 8007fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	075a      	lsls	r2, r3, #29
 8007fe6:	d505      	bpl.n	8007ff4 <__sflush_r+0x48>
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	1ac0      	subs	r0, r0, r3
 8007fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fee:	b10b      	cbz	r3, 8007ff4 <__sflush_r+0x48>
 8007ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff2:	1ac0      	subs	r0, r0, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ffa:	6a21      	ldr	r1, [r4, #32]
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b0      	blx	r6
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	d106      	bne.n	8008014 <__sflush_r+0x68>
 8008006:	6829      	ldr	r1, [r5, #0]
 8008008:	291d      	cmp	r1, #29
 800800a:	d82b      	bhi.n	8008064 <__sflush_r+0xb8>
 800800c:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <__sflush_r+0x108>)
 800800e:	410a      	asrs	r2, r1
 8008010:	07d6      	lsls	r6, r2, #31
 8008012:	d427      	bmi.n	8008064 <__sflush_r+0xb8>
 8008014:	2200      	movs	r2, #0
 8008016:	6062      	str	r2, [r4, #4]
 8008018:	04d9      	lsls	r1, r3, #19
 800801a:	6922      	ldr	r2, [r4, #16]
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	d504      	bpl.n	800802a <__sflush_r+0x7e>
 8008020:	1c42      	adds	r2, r0, #1
 8008022:	d101      	bne.n	8008028 <__sflush_r+0x7c>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b903      	cbnz	r3, 800802a <__sflush_r+0x7e>
 8008028:	6560      	str	r0, [r4, #84]	; 0x54
 800802a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802c:	602f      	str	r7, [r5, #0]
 800802e:	2900      	cmp	r1, #0
 8008030:	d0c9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008036:	4299      	cmp	r1, r3
 8008038:	d002      	beq.n	8008040 <__sflush_r+0x94>
 800803a:	4628      	mov	r0, r5
 800803c:	f7ff fbe2 	bl	8007804 <_free_r>
 8008040:	2000      	movs	r0, #0
 8008042:	6360      	str	r0, [r4, #52]	; 0x34
 8008044:	e7c0      	b.n	8007fc8 <__sflush_r+0x1c>
 8008046:	2301      	movs	r3, #1
 8008048:	4628      	mov	r0, r5
 800804a:	47b0      	blx	r6
 800804c:	1c41      	adds	r1, r0, #1
 800804e:	d1c8      	bne.n	8007fe2 <__sflush_r+0x36>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c5      	beq.n	8007fe2 <__sflush_r+0x36>
 8008056:	2b1d      	cmp	r3, #29
 8008058:	d001      	beq.n	800805e <__sflush_r+0xb2>
 800805a:	2b16      	cmp	r3, #22
 800805c:	d101      	bne.n	8008062 <__sflush_r+0xb6>
 800805e:	602f      	str	r7, [r5, #0]
 8008060:	e7b1      	b.n	8007fc6 <__sflush_r+0x1a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7ad      	b.n	8007fc8 <__sflush_r+0x1c>
 800806c:	690f      	ldr	r7, [r1, #16]
 800806e:	2f00      	cmp	r7, #0
 8008070:	d0a9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008072:	0793      	lsls	r3, r2, #30
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	600f      	str	r7, [r1, #0]
 800807c:	bf18      	it	ne
 800807e:	2300      	movne	r3, #0
 8008080:	eba6 0807 	sub.w	r8, r6, r7
 8008084:	608b      	str	r3, [r1, #8]
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	dd9c      	ble.n	8007fc6 <__sflush_r+0x1a>
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	2800      	cmp	r0, #0
 800809a:	dc06      	bgt.n	80080aa <__sflush_r+0xfe>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e78e      	b.n	8007fc8 <__sflush_r+0x1c>
 80080aa:	4407      	add	r7, r0
 80080ac:	eba8 0800 	sub.w	r8, r8, r0
 80080b0:	e7e9      	b.n	8008086 <__sflush_r+0xda>
 80080b2:	bf00      	nop
 80080b4:	dfbffffe 	.word	0xdfbffffe

080080b8 <_fflush_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b913      	cbnz	r3, 80080c8 <_fflush_r+0x10>
 80080c2:	2500      	movs	r5, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	b118      	cbz	r0, 80080d2 <_fflush_r+0x1a>
 80080ca:	6a03      	ldr	r3, [r0, #32]
 80080cc:	b90b      	cbnz	r3, 80080d2 <_fflush_r+0x1a>
 80080ce:	f7ff f959 	bl	8007384 <__sinit>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f3      	beq.n	80080c2 <_fflush_r+0xa>
 80080da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080dc:	07d0      	lsls	r0, r2, #31
 80080de:	d404      	bmi.n	80080ea <_fflush_r+0x32>
 80080e0:	0599      	lsls	r1, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_fflush_r+0x32>
 80080e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e6:	f7ff fb6c 	bl	80077c2 <__retarget_lock_acquire_recursive>
 80080ea:	4628      	mov	r0, r5
 80080ec:	4621      	mov	r1, r4
 80080ee:	f7ff ff5d 	bl	8007fac <__sflush_r>
 80080f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f4:	07da      	lsls	r2, r3, #31
 80080f6:	4605      	mov	r5, r0
 80080f8:	d4e4      	bmi.n	80080c4 <_fflush_r+0xc>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	059b      	lsls	r3, r3, #22
 80080fe:	d4e1      	bmi.n	80080c4 <_fflush_r+0xc>
 8008100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008102:	f7ff fb5f 	bl	80077c4 <__retarget_lock_release_recursive>
 8008106:	e7dd      	b.n	80080c4 <_fflush_r+0xc>

08008108 <fiprintf>:
 8008108:	b40e      	push	{r1, r2, r3}
 800810a:	b503      	push	{r0, r1, lr}
 800810c:	4601      	mov	r1, r0
 800810e:	ab03      	add	r3, sp, #12
 8008110:	4805      	ldr	r0, [pc, #20]	; (8008128 <fiprintf+0x20>)
 8008112:	f853 2b04 	ldr.w	r2, [r3], #4
 8008116:	6800      	ldr	r0, [r0, #0]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f7ff fc9d 	bl	8007a58 <_vfiprintf_r>
 800811e:	b002      	add	sp, #8
 8008120:	f85d eb04 	ldr.w	lr, [sp], #4
 8008124:	b003      	add	sp, #12
 8008126:	4770      	bx	lr
 8008128:	200000a4 	.word	0x200000a4

0800812c <_getc_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	460c      	mov	r4, r1
 8008130:	4605      	mov	r5, r0
 8008132:	b118      	cbz	r0, 800813c <_getc_r+0x10>
 8008134:	6a03      	ldr	r3, [r0, #32]
 8008136:	b90b      	cbnz	r3, 800813c <_getc_r+0x10>
 8008138:	f7ff f924 	bl	8007384 <__sinit>
 800813c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800813e:	07d8      	lsls	r0, r3, #31
 8008140:	d405      	bmi.n	800814e <_getc_r+0x22>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	0599      	lsls	r1, r3, #22
 8008146:	d402      	bmi.n	800814e <_getc_r+0x22>
 8008148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814a:	f7ff fb3a 	bl	80077c2 <__retarget_lock_acquire_recursive>
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	da0f      	bge.n	8008178 <_getc_r+0x4c>
 8008158:	4628      	mov	r0, r5
 800815a:	4621      	mov	r1, r4
 800815c:	f000 f8a7 	bl	80082ae <__srget_r>
 8008160:	4605      	mov	r5, r0
 8008162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008164:	07da      	lsls	r2, r3, #31
 8008166:	d405      	bmi.n	8008174 <_getc_r+0x48>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	059b      	lsls	r3, r3, #22
 800816c:	d402      	bmi.n	8008174 <_getc_r+0x48>
 800816e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008170:	f7ff fb28 	bl	80077c4 <__retarget_lock_release_recursive>
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	781d      	ldrb	r5, [r3, #0]
 8008180:	e7ef      	b.n	8008162 <_getc_r+0x36>

08008182 <__swhatbuf_r>:
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	460c      	mov	r4, r1
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	2900      	cmp	r1, #0
 800818c:	b096      	sub	sp, #88	; 0x58
 800818e:	4615      	mov	r5, r2
 8008190:	461e      	mov	r6, r3
 8008192:	da0d      	bge.n	80081b0 <__swhatbuf_r+0x2e>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f013 0f80 	tst.w	r3, #128	; 0x80
 800819a:	f04f 0100 	mov.w	r1, #0
 800819e:	bf0c      	ite	eq
 80081a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081a4:	2340      	movne	r3, #64	; 0x40
 80081a6:	2000      	movs	r0, #0
 80081a8:	6031      	str	r1, [r6, #0]
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	b016      	add	sp, #88	; 0x58
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	466a      	mov	r2, sp
 80081b2:	f000 f929 	bl	8008408 <_fstat_r>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	dbec      	blt.n	8008194 <__swhatbuf_r+0x12>
 80081ba:	9901      	ldr	r1, [sp, #4]
 80081bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081c4:	4259      	negs	r1, r3
 80081c6:	4159      	adcs	r1, r3
 80081c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081cc:	e7eb      	b.n	80081a6 <__swhatbuf_r+0x24>

080081ce <__smakebuf_r>:
 80081ce:	898b      	ldrh	r3, [r1, #12]
 80081d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d2:	079d      	lsls	r5, r3, #30
 80081d4:	4606      	mov	r6, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	d507      	bpl.n	80081ea <__smakebuf_r+0x1c>
 80081da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	6123      	str	r3, [r4, #16]
 80081e2:	2301      	movs	r3, #1
 80081e4:	6163      	str	r3, [r4, #20]
 80081e6:	b002      	add	sp, #8
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	ab01      	add	r3, sp, #4
 80081ec:	466a      	mov	r2, sp
 80081ee:	f7ff ffc8 	bl	8008182 <__swhatbuf_r>
 80081f2:	9900      	ldr	r1, [sp, #0]
 80081f4:	4605      	mov	r5, r0
 80081f6:	4630      	mov	r0, r6
 80081f8:	f7ff fb78 	bl	80078ec <_malloc_r>
 80081fc:	b948      	cbnz	r0, 8008212 <__smakebuf_r+0x44>
 80081fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008202:	059a      	lsls	r2, r3, #22
 8008204:	d4ef      	bmi.n	80081e6 <__smakebuf_r+0x18>
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	f043 0302 	orr.w	r3, r3, #2
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	e7e3      	b.n	80081da <__smakebuf_r+0xc>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	6020      	str	r0, [r4, #0]
 8008216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	6163      	str	r3, [r4, #20]
 8008220:	9b01      	ldr	r3, [sp, #4]
 8008222:	6120      	str	r0, [r4, #16]
 8008224:	b15b      	cbz	r3, 800823e <__smakebuf_r+0x70>
 8008226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822a:	4630      	mov	r0, r6
 800822c:	f000 f8fe 	bl	800842c <_isatty_r>
 8008230:	b128      	cbz	r0, 800823e <__smakebuf_r+0x70>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	431d      	orrs	r5, r3
 8008242:	81a5      	strh	r5, [r4, #12]
 8008244:	e7cf      	b.n	80081e6 <__smakebuf_r+0x18>

08008246 <_putc_r>:
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	460d      	mov	r5, r1
 800824a:	4614      	mov	r4, r2
 800824c:	4606      	mov	r6, r0
 800824e:	b118      	cbz	r0, 8008258 <_putc_r+0x12>
 8008250:	6a03      	ldr	r3, [r0, #32]
 8008252:	b90b      	cbnz	r3, 8008258 <_putc_r+0x12>
 8008254:	f7ff f896 	bl	8007384 <__sinit>
 8008258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825a:	07d8      	lsls	r0, r3, #31
 800825c:	d405      	bmi.n	800826a <_putc_r+0x24>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	0599      	lsls	r1, r3, #22
 8008262:	d402      	bmi.n	800826a <_putc_r+0x24>
 8008264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008266:	f7ff faac 	bl	80077c2 <__retarget_lock_acquire_recursive>
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	3b01      	subs	r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	60a3      	str	r3, [r4, #8]
 8008272:	da05      	bge.n	8008280 <_putc_r+0x3a>
 8008274:	69a2      	ldr	r2, [r4, #24]
 8008276:	4293      	cmp	r3, r2
 8008278:	db12      	blt.n	80082a0 <_putc_r+0x5a>
 800827a:	b2eb      	uxtb	r3, r5
 800827c:	2b0a      	cmp	r3, #10
 800827e:	d00f      	beq.n	80082a0 <_putc_r+0x5a>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	6022      	str	r2, [r4, #0]
 8008286:	701d      	strb	r5, [r3, #0]
 8008288:	b2ed      	uxtb	r5, r5
 800828a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800828c:	07da      	lsls	r2, r3, #31
 800828e:	d405      	bmi.n	800829c <_putc_r+0x56>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	059b      	lsls	r3, r3, #22
 8008294:	d402      	bmi.n	800829c <_putc_r+0x56>
 8008296:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008298:	f7ff fa94 	bl	80077c4 <__retarget_lock_release_recursive>
 800829c:	4628      	mov	r0, r5
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	4629      	mov	r1, r5
 80082a2:	4622      	mov	r2, r4
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 f81a 	bl	80082de <__swbuf_r>
 80082aa:	4605      	mov	r5, r0
 80082ac:	e7ed      	b.n	800828a <_putc_r+0x44>

080082ae <__srget_r>:
 80082ae:	b538      	push	{r3, r4, r5, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	4605      	mov	r5, r0
 80082b4:	b118      	cbz	r0, 80082be <__srget_r+0x10>
 80082b6:	6a03      	ldr	r3, [r0, #32]
 80082b8:	b90b      	cbnz	r3, 80082be <__srget_r+0x10>
 80082ba:	f7ff f863 	bl	8007384 <__sinit>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f8e9 	bl	8008498 <__srefill_r>
 80082c6:	b938      	cbnz	r0, 80082d8 <__srget_r+0x2a>
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	7818      	ldrb	r0, [r3, #0]
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	e7fb      	b.n	80082d6 <__srget_r+0x28>

080082de <__swbuf_r>:
 80082de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e0:	460e      	mov	r6, r1
 80082e2:	4614      	mov	r4, r2
 80082e4:	4605      	mov	r5, r0
 80082e6:	b118      	cbz	r0, 80082f0 <__swbuf_r+0x12>
 80082e8:	6a03      	ldr	r3, [r0, #32]
 80082ea:	b90b      	cbnz	r3, 80082f0 <__swbuf_r+0x12>
 80082ec:	f7ff f84a 	bl	8007384 <__sinit>
 80082f0:	69a3      	ldr	r3, [r4, #24]
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	071a      	lsls	r2, r3, #28
 80082f8:	d525      	bpl.n	8008346 <__swbuf_r+0x68>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	b31b      	cbz	r3, 8008346 <__swbuf_r+0x68>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	6922      	ldr	r2, [r4, #16]
 8008302:	1a98      	subs	r0, r3, r2
 8008304:	6963      	ldr	r3, [r4, #20]
 8008306:	b2f6      	uxtb	r6, r6
 8008308:	4283      	cmp	r3, r0
 800830a:	4637      	mov	r7, r6
 800830c:	dc04      	bgt.n	8008318 <__swbuf_r+0x3a>
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f7ff fed1 	bl	80080b8 <_fflush_r>
 8008316:	b9e0      	cbnz	r0, 8008352 <__swbuf_r+0x74>
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	3b01      	subs	r3, #1
 800831c:	60a3      	str	r3, [r4, #8]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	701e      	strb	r6, [r3, #0]
 8008326:	6962      	ldr	r2, [r4, #20]
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	429a      	cmp	r2, r3
 800832c:	d004      	beq.n	8008338 <__swbuf_r+0x5a>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	07db      	lsls	r3, r3, #31
 8008332:	d506      	bpl.n	8008342 <__swbuf_r+0x64>
 8008334:	2e0a      	cmp	r6, #10
 8008336:	d104      	bne.n	8008342 <__swbuf_r+0x64>
 8008338:	4621      	mov	r1, r4
 800833a:	4628      	mov	r0, r5
 800833c:	f7ff febc 	bl	80080b8 <_fflush_r>
 8008340:	b938      	cbnz	r0, 8008352 <__swbuf_r+0x74>
 8008342:	4638      	mov	r0, r7
 8008344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	f000 f805 	bl	8008358 <__swsetup_r>
 800834e:	2800      	cmp	r0, #0
 8008350:	d0d5      	beq.n	80082fe <__swbuf_r+0x20>
 8008352:	f04f 37ff 	mov.w	r7, #4294967295
 8008356:	e7f4      	b.n	8008342 <__swbuf_r+0x64>

08008358 <__swsetup_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4b2a      	ldr	r3, [pc, #168]	; (8008404 <__swsetup_r+0xac>)
 800835c:	4605      	mov	r5, r0
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	460c      	mov	r4, r1
 8008362:	b118      	cbz	r0, 800836c <__swsetup_r+0x14>
 8008364:	6a03      	ldr	r3, [r0, #32]
 8008366:	b90b      	cbnz	r3, 800836c <__swsetup_r+0x14>
 8008368:	f7ff f80c 	bl	8007384 <__sinit>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008372:	0718      	lsls	r0, r3, #28
 8008374:	d422      	bmi.n	80083bc <__swsetup_r+0x64>
 8008376:	06d9      	lsls	r1, r3, #27
 8008378:	d407      	bmi.n	800838a <__swsetup_r+0x32>
 800837a:	2309      	movs	r3, #9
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	e034      	b.n	80083f4 <__swsetup_r+0x9c>
 800838a:	0758      	lsls	r0, r3, #29
 800838c:	d512      	bpl.n	80083b4 <__swsetup_r+0x5c>
 800838e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008390:	b141      	cbz	r1, 80083a4 <__swsetup_r+0x4c>
 8008392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008396:	4299      	cmp	r1, r3
 8008398:	d002      	beq.n	80083a0 <__swsetup_r+0x48>
 800839a:	4628      	mov	r0, r5
 800839c:	f7ff fa32 	bl	8007804 <_free_r>
 80083a0:	2300      	movs	r3, #0
 80083a2:	6363      	str	r3, [r4, #52]	; 0x34
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	2300      	movs	r3, #0
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f043 0308 	orr.w	r3, r3, #8
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b94b      	cbnz	r3, 80083d4 <__swsetup_r+0x7c>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ca:	d003      	beq.n	80083d4 <__swsetup_r+0x7c>
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7ff fefd 	bl	80081ce <__smakebuf_r>
 80083d4:	89a0      	ldrh	r0, [r4, #12]
 80083d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083da:	f010 0301 	ands.w	r3, r0, #1
 80083de:	d00a      	beq.n	80083f6 <__swsetup_r+0x9e>
 80083e0:	2300      	movs	r3, #0
 80083e2:	60a3      	str	r3, [r4, #8]
 80083e4:	6963      	ldr	r3, [r4, #20]
 80083e6:	425b      	negs	r3, r3
 80083e8:	61a3      	str	r3, [r4, #24]
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	b943      	cbnz	r3, 8008400 <__swsetup_r+0xa8>
 80083ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083f2:	d1c4      	bne.n	800837e <__swsetup_r+0x26>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	0781      	lsls	r1, r0, #30
 80083f8:	bf58      	it	pl
 80083fa:	6963      	ldrpl	r3, [r4, #20]
 80083fc:	60a3      	str	r3, [r4, #8]
 80083fe:	e7f4      	b.n	80083ea <__swsetup_r+0x92>
 8008400:	2000      	movs	r0, #0
 8008402:	e7f7      	b.n	80083f4 <__swsetup_r+0x9c>
 8008404:	200000a4 	.word	0x200000a4

08008408 <_fstat_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d07      	ldr	r5, [pc, #28]	; (8008428 <_fstat_r+0x20>)
 800840c:	2300      	movs	r3, #0
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	4611      	mov	r1, r2
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	f7f8 ff5d 	bl	80012d4 <_fstat>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d102      	bne.n	8008424 <_fstat_r+0x1c>
 800841e:	682b      	ldr	r3, [r5, #0]
 8008420:	b103      	cbz	r3, 8008424 <_fstat_r+0x1c>
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	bf00      	nop
 8008428:	200003c0 	.word	0x200003c0

0800842c <_isatty_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_isatty_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f8 feba 	bl	80011b0 <_isatty>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_isatty_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_isatty_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	200003c0 	.word	0x200003c0

0800844c <_sbrk_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_sbrk_r+0x1c>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	f7f9 f94e 	bl	80016f8 <_sbrk>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_sbrk_r+0x1a>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_sbrk_r+0x1a>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	200003c0 	.word	0x200003c0

0800846c <abort>:
 800846c:	b508      	push	{r3, lr}
 800846e:	2006      	movs	r0, #6
 8008470:	f000 f8b2 	bl	80085d8 <raise>
 8008474:	2001      	movs	r0, #1
 8008476:	f7f9 f935 	bl	80016e4 <_exit>
	...

0800847c <lflush>:
 800847c:	898b      	ldrh	r3, [r1, #12]
 800847e:	f003 0309 	and.w	r3, r3, #9
 8008482:	2b09      	cmp	r3, #9
 8008484:	d103      	bne.n	800848e <lflush+0x12>
 8008486:	4b03      	ldr	r3, [pc, #12]	; (8008494 <lflush+0x18>)
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f7ff be15 	b.w	80080b8 <_fflush_r>
 800848e:	2000      	movs	r0, #0
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	200000a4 	.word	0x200000a4

08008498 <__srefill_r>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	4605      	mov	r5, r0
 800849e:	b118      	cbz	r0, 80084a8 <__srefill_r+0x10>
 80084a0:	6a03      	ldr	r3, [r0, #32]
 80084a2:	b90b      	cbnz	r3, 80084a8 <__srefill_r+0x10>
 80084a4:	f7fe ff6e 	bl	8007384 <__sinit>
 80084a8:	2300      	movs	r3, #0
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b2:	069e      	lsls	r6, r3, #26
 80084b4:	d502      	bpl.n	80084bc <__srefill_r+0x24>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	e05c      	b.n	8008576 <__srefill_r+0xde>
 80084bc:	0758      	lsls	r0, r3, #29
 80084be:	d448      	bmi.n	8008552 <__srefill_r+0xba>
 80084c0:	06d9      	lsls	r1, r3, #27
 80084c2:	d405      	bmi.n	80084d0 <__srefill_r+0x38>
 80084c4:	2309      	movs	r3, #9
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	e7f2      	b.n	80084b6 <__srefill_r+0x1e>
 80084d0:	071a      	lsls	r2, r3, #28
 80084d2:	d50b      	bpl.n	80084ec <__srefill_r+0x54>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f7ff fdee 	bl	80080b8 <_fflush_r>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1ea      	bne.n	80084b6 <__srefill_r+0x1e>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	60a0      	str	r0, [r4, #8]
 80084e4:	f023 0308 	bic.w	r3, r3, #8
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	61a0      	str	r0, [r4, #24]
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f043 0304 	orr.w	r3, r3, #4
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	b91b      	cbnz	r3, 8008500 <__srefill_r+0x68>
 80084f8:	4621      	mov	r1, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7ff fe67 	bl	80081ce <__smakebuf_r>
 8008500:	89a6      	ldrh	r6, [r4, #12]
 8008502:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008506:	07b3      	lsls	r3, r6, #30
 8008508:	d00f      	beq.n	800852a <__srefill_r+0x92>
 800850a:	2301      	movs	r3, #1
 800850c:	4a1b      	ldr	r2, [pc, #108]	; (800857c <__srefill_r+0xe4>)
 800850e:	491c      	ldr	r1, [pc, #112]	; (8008580 <__srefill_r+0xe8>)
 8008510:	481c      	ldr	r0, [pc, #112]	; (8008584 <__srefill_r+0xec>)
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f006 0609 	and.w	r6, r6, #9
 8008518:	f7fe ff4c 	bl	80073b4 <_fwalk_sglue>
 800851c:	2e09      	cmp	r6, #9
 800851e:	81a7      	strh	r7, [r4, #12]
 8008520:	d103      	bne.n	800852a <__srefill_r+0x92>
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	f7ff fd41 	bl	8007fac <__sflush_r>
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800852e:	6963      	ldr	r3, [r4, #20]
 8008530:	6a21      	ldr	r1, [r4, #32]
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	4628      	mov	r0, r5
 8008536:	47b0      	blx	r6
 8008538:	2800      	cmp	r0, #0
 800853a:	6060      	str	r0, [r4, #4]
 800853c:	dc1c      	bgt.n	8008578 <__srefill_r+0xe0>
 800853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008542:	bf17      	itett	ne
 8008544:	2200      	movne	r2, #0
 8008546:	f043 0320 	orreq.w	r3, r3, #32
 800854a:	6062      	strne	r2, [r4, #4]
 800854c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008550:	e7bc      	b.n	80084cc <__srefill_r+0x34>
 8008552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008554:	2900      	cmp	r1, #0
 8008556:	d0cd      	beq.n	80084f4 <__srefill_r+0x5c>
 8008558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800855c:	4299      	cmp	r1, r3
 800855e:	d002      	beq.n	8008566 <__srefill_r+0xce>
 8008560:	4628      	mov	r0, r5
 8008562:	f7ff f94f 	bl	8007804 <_free_r>
 8008566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	2000      	movs	r0, #0
 800856c:	6360      	str	r0, [r4, #52]	; 0x34
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0c0      	beq.n	80084f4 <__srefill_r+0x5c>
 8008572:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008578:	2000      	movs	r0, #0
 800857a:	e7fc      	b.n	8008576 <__srefill_r+0xde>
 800857c:	2000004c 	.word	0x2000004c
 8008580:	0800847d 	.word	0x0800847d
 8008584:	20000058 	.word	0x20000058

08008588 <_raise_r>:
 8008588:	291f      	cmp	r1, #31
 800858a:	b538      	push	{r3, r4, r5, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	460d      	mov	r5, r1
 8008590:	d904      	bls.n	800859c <_raise_r+0x14>
 8008592:	2316      	movs	r3, #22
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800859e:	b112      	cbz	r2, 80085a6 <_raise_r+0x1e>
 80085a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085a4:	b94b      	cbnz	r3, 80085ba <_raise_r+0x32>
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f830 	bl	800860c <_getpid_r>
 80085ac:	462a      	mov	r2, r5
 80085ae:	4601      	mov	r1, r0
 80085b0:	4620      	mov	r0, r4
 80085b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b6:	f000 b817 	b.w	80085e8 <_kill_r>
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d00a      	beq.n	80085d4 <_raise_r+0x4c>
 80085be:	1c59      	adds	r1, r3, #1
 80085c0:	d103      	bne.n	80085ca <_raise_r+0x42>
 80085c2:	2316      	movs	r3, #22
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7e7      	b.n	800859a <_raise_r+0x12>
 80085ca:	2400      	movs	r4, #0
 80085cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085d0:	4628      	mov	r0, r5
 80085d2:	4798      	blx	r3
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7e0      	b.n	800859a <_raise_r+0x12>

080085d8 <raise>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <raise+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f7ff bfd3 	b.w	8008588 <_raise_r>
 80085e2:	bf00      	nop
 80085e4:	200000a4 	.word	0x200000a4

080085e8 <_kill_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d07      	ldr	r5, [pc, #28]	; (8008608 <_kill_r+0x20>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	4611      	mov	r1, r2
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	f7f9 f865 	bl	80016c4 <_kill>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	d102      	bne.n	8008604 <_kill_r+0x1c>
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	b103      	cbz	r3, 8008604 <_kill_r+0x1c>
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	200003c0 	.word	0x200003c0

0800860c <_getpid_r>:
 800860c:	f7f9 b852 	b.w	80016b4 <_getpid>

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
