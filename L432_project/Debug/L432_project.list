
L432_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009334  08009334  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800933c  0800933c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08009344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200000b8  080093fc  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080093fc  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001add3  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003996  00000000  00000000  0003aefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001225  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ef5  00000000  00000000  00041235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be7b  00000000  00000000  0006712a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e43c9  00000000  00000000  00082fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f68  00000000  00000000  00167370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fb4 	.word	0x08008fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08008fb4 	.word	0x08008fb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <prompt>:


extern RTC_HandleTypeDef hrtc;
uint32_t format = RTC_FORMAT_BIN;

void prompt() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetDate(&hrtc,&date,format);
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <prompt+0x54>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <prompt+0x58>)
 800059e:	f004 feaf 	bl	8005300 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&time,format);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <prompt+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <prompt+0x58>)
 80005ac:	f004 fdc5 	bl	800513a <HAL_RTC_GetTime>
	printf("%02d/%02d/%02d ",date.Month,date.Date,date.Year);
 80005b0:	7d7b      	ldrb	r3, [r7, #21]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7dbb      	ldrb	r3, [r7, #22]
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <prompt+0x5c>)
 80005bc:	f007 fbf2 	bl	8007da4 <iprintf>
	printf("%02d:%02d:%02d ",time.Hours,time.Minutes,time.Seconds);
 80005c0:	783b      	ldrb	r3, [r7, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	787b      	ldrb	r3, [r7, #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <prompt+0x60>)
 80005cc:	f007 fbea 	bl	8007da4 <iprintf>
	printf("IULS> ");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <prompt+0x64>)
 80005d2:	f007 fbe7 	bl	8007da4 <iprintf>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000d4 	.word	0x200000d4
 80005e4:	20000144 	.word	0x20000144
 80005e8:	08008fcc 	.word	0x08008fcc
 80005ec:	08008fdc 	.word	0x08008fdc
 80005f0:	08008fec 	.word	0x08008fec

080005f4 <help_command>:
	{"battery",battery_command},
	{0,0}
};


void __attribute__((weak)) help_command(char *arguments) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	printf("Available Commands:\n\r");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <help_command+0x30>)
 80005fe:	f007 fbd1 	bl	8007da4 <iprintf>
	printf("help\n\r");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <help_command+0x34>)
 8000604:	f007 fbce 	bl	8007da4 <iprintf>
	printf("lof\n\r");
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <help_command+0x38>)
 800060a:	f007 fbcb 	bl	8007da4 <iprintf>
	printf("lon\n\r");
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <help_command+0x3c>)
 8000610:	f007 fbc8 	bl	8007da4 <iprintf>
	printf("test\n\r");
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <help_command+0x40>)
 8000616:	f007 fbc5 	bl	8007da4 <iprintf>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	0800902c 	.word	0x0800902c
 8000628:	08009044 	.word	0x08009044
 800062c:	0800904c 	.word	0x0800904c
 8000630:	08009054 	.word	0x08009054
 8000634:	0800905c 	.word	0x0800905c

08000638 <lof_command>:

void __attribute__((weak)) lof_command(char *arguments) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lof_command+0x1c>)
 8000646:	f003 fa97 	bl	8003b78 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lon_command>:

void __attribute__((weak)) lon_command(char *arguments) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lon_command+0x1c>)
 8000666:	f003 fa87 	bl	8003b78 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <test_command>:

void __attribute__((weak)) test_command(char *arguments) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	printf("test_command\n\r");
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <test_command+0x40>)
 8000682:	f007 fb8f 	bl	8007da4 <iprintf>
	if (arguments) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <test_command+0x38>
		char *pt;
		pt = strtok (arguments,",");
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <test_command+0x44>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f007 fc9c 	bl	8007fcc <strtok>
 8000694:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 8000696:	e008      	b.n	80006aa <test_command+0x32>
//			char a = *pt;
			printf("%s\n\r", pt);
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <test_command+0x48>)
 800069c:	f007 fb82 	bl	8007da4 <iprintf>
			pt = strtok (NULL, ",");
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <test_command+0x44>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f007 fc92 	bl	8007fcc <strtok>
 80006a8:	60f8      	str	r0, [r7, #12]
		while (pt != NULL) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f3      	bne.n	8000698 <test_command+0x20>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08009064 	.word	0x08009064
 80006bc:	08009074 	.word	0x08009074
 80006c0:	08009078 	.word	0x08009078

080006c4 <ts_command>:

void __attribute__((weak)) ts_command(char *arguments) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	int t[3];
	if (arguments) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01f      	beq.n	8000712 <ts_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 80006d2:	492a      	ldr	r1, [pc, #168]	; (800077c <ts_command+0xb8>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f007 fc79 	bl	8007fcc <strtok>
 80006da:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e0:	e014      	b.n	800070c <ts_command+0x48>
			if (pt != NULL) {
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <ts_command+0x42>
				t[i] = atoi(pt);
 80006e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ea:	f007 fa00 	bl	8007aee <atoi>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	3330      	adds	r3, #48	; 0x30
 80006f6:	443b      	add	r3, r7
 80006f8:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80006fc:	491f      	ldr	r1, [pc, #124]	; (800077c <ts_command+0xb8>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f007 fc64 	bl	8007fcc <strtok>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		for (int i = 0; i < 3; i++) {
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	3301      	adds	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070e:	2b02      	cmp	r3, #2
 8000710:	dde7      	ble.n	80006e2 <ts_command+0x1e>
			}
		}
	}

	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ts_command+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db26      	blt.n	800076c <ts_command+0xa8>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b17      	cmp	r3, #23
 8000722:	dc23      	bgt.n	800076c <ts_command+0xa8>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d020      	beq.n	800076c <ts_command+0xa8>
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db1d      	blt.n	800076c <ts_command+0xa8>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b3b      	cmp	r3, #59	; 0x3b
 8000734:	dc1a      	bgt.n	800076c <ts_command+0xa8>
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d017      	beq.n	800076c <ts_command+0xa8>
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	db14      	blt.n	800076c <ts_command+0xa8>
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	dc11      	bgt.n	800076c <ts_command+0xa8>
		RTC_TimeTypeDef time;
		time.Hours = t[0];
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
		time.Minutes = t[1];
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
		time.Seconds = t[2];
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	b2db      	uxtb	r3, r3
 8000758:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc,&time,format);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ts_command+0xbc>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <ts_command+0xc0>)
 8000766:	f004 fc4b 	bl	8005000 <HAL_RTC_SetTime>
	if (t[0] && (t[0]>-1) && (t[0]<24) && t[1] && (t[1]>-1) && (t[1]<60) && t[2] && (t[2]>-1) && (t[2]<60)) {
 800076a:	e003      	b.n	8000774 <ts_command+0xb0>
	}
	else {
		printf("NOK\n\r");
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <ts_command+0xc4>)
 800076e:	f007 fb19 	bl	8007da4 <iprintf>
	}
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08009074 	.word	0x08009074
 8000780:	200000d4 	.word	0x200000d4
 8000784:	20000144 	.word	0x20000144
 8000788:	08009080 	.word	0x08009080

0800078c <ds_command>:

void __attribute__((weak)) ds_command(char *arguments) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	int d[3];
	if (arguments) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <ds_command+0x4e>
		char *pt;
		pt = strtok(arguments, ",");
 800079a:	4924      	ldr	r1, [pc, #144]	; (800082c <ds_command+0xa0>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f007 fc15 	bl	8007fcc <strtok>
 80007a2:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e014      	b.n	80007d4 <ds_command+0x48>
			if (pt != NULL) {
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <ds_command+0x42>
				d[i] = atoi(pt);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f007 f99c 	bl	8007aee <atoi>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	f843 2c14 	str.w	r2, [r3, #-20]
				pt = strtok(NULL, ",");
 80007c4:	4919      	ldr	r1, [pc, #100]	; (800082c <ds_command+0xa0>)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f007 fc00 	bl	8007fcc <strtok>
 80007cc:	61f8      	str	r0, [r7, #28]
		for (int i = 0; i < 3; i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dde7      	ble.n	80007aa <ds_command+0x1e>
			}
		}
	}
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01d      	beq.n	800081c <ds_command+0x90>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd1a      	ble.n	800081c <ds_command+0x90>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b0c      	cmp	r3, #12
 80007ea:	dc17      	bgt.n	800081c <ds_command+0x90>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d014      	beq.n	800081c <ds_command+0x90>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d011      	beq.n	800081c <ds_command+0x90>
		RTC_DateTypeDef date;
		date.Month = d[0];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	727b      	strb	r3, [r7, #9]
		date.Date = d[1];
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
		date.Year = d[2];
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72fb      	strb	r3, [r7, #11]
		HAL_RTC_SetDate(&hrtc,&date,format);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <ds_command+0xa4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <ds_command+0xa8>)
 8000816:	f004 fcec 	bl	80051f2 <HAL_RTC_SetDate>
	if (d[0] && (d[0]>0) && (d[0]<13) && d[1] && d[2]) {
 800081a:	e003      	b.n	8000824 <ds_command+0x98>
	}
	else {
		printf("NOK\n\r");
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <ds_command+0xac>)
 800081e:	f007 fac1 	bl	8007da4 <iprintf>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08009074 	.word	0x08009074
 8000830:	200000d4 	.word	0x200000d4
 8000834:	20000144 	.word	0x20000144
 8000838:	08009080 	.word	0x08009080

0800083c <tsl237_command>:

extern float tsl237_clock_frequency;

void __attribute__((weak)) tsl237_command(char *arguments) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  int freqInt = tsl237_clock_frequency * 1000;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <tsl237_command+0x5c>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800089c <tsl237_command+0x60>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000856:	ee17 3a90 	vmov	r3, s15
 800085a:	617b      	str	r3, [r7, #20]
  int freqFirst = freqInt / 1000;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <tsl237_command+0x64>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	1192      	asrs	r2, r2, #6
 8000866:	17db      	asrs	r3, r3, #31
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	613b      	str	r3, [r7, #16]
  int freqSecond = freqInt % 1000;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <tsl237_command+0x64>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1191      	asrs	r1, r2, #6
 8000876:	17da      	asrs	r2, r3, #31
 8000878:	1a8a      	subs	r2, r1, r2
 800087a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087e:	fb01 f202 	mul.w	r2, r1, r2
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  printf("%d.%d hz\n\r", freqFirst, freqSecond);
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	6939      	ldr	r1, [r7, #16]
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <tsl237_command+0x68>)
 800088c:	f007 fa8a 	bl	8007da4 <iprintf>
}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000284 	.word	0x20000284
 800089c:	447a0000 	.word	0x447a0000
 80008a0:	10624dd3 	.word	0x10624dd3
 80008a4:	08009088 	.word	0x08009088

080008a8 <temp_command>:

extern sensorval_t mySensors;

void __attribute__((weak)) temp_command(char *arguments) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	printf("%d C\n\r", mySensors.temperature);
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <temp_command+0x1c>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <temp_command+0x20>)
 80008b8:	f007 fa74 	bl	8007da4 <iprintf>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000288 	.word	0x20000288
 80008c8:	08009094 	.word	0x08009094

080008cc <battery_command>:

void __attribute__((weak)) battery_command(char *arguments) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	int battInt = mySensors.vdda_value;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <battery_command+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	617b      	str	r3, [r7, #20]
	int battFirst = battInt / 1000;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <battery_command+0x50>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1192      	asrs	r2, r2, #6
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	613b      	str	r3, [r7, #16]
	int battSecond = battInt % 1000;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <battery_command+0x50>)
 80008ee:	fb82 1203 	smull	r1, r2, r2, r3
 80008f2:	1191      	asrs	r1, r2, #6
 80008f4:	17da      	asrs	r2, r3, #31
 80008f6:	1a8a      	subs	r2, r1, r2
 80008f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008fc:	fb01 f202 	mul.w	r2, r1, r2
 8000900:	1a9b      	subs	r3, r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
  printf("%d.%d V\n\r", battFirst, battSecond);
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	6939      	ldr	r1, [r7, #16]
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <battery_command+0x54>)
 800090a:	f007 fa4b 	bl	8007da4 <iprintf>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000288 	.word	0x20000288
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	0800909c 	.word	0x0800909c

08000924 <get_commands>:

enum {COLLECT_CHARS, COMPLETE};

int get_commands(uint8_t *command_buf) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  static uint32_t counter=0;
  static uint32_t mode = COLLECT_CHARS;

  uint8_t ch = 0;;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t mask;

  ch=dequeue(&buf);
 8000930:	482e      	ldr	r0, [pc, #184]	; (80009ec <get_commands+0xc8>)
 8000932:	f000 fcf7 	bl	8001324 <dequeue>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
  while (ch!=0) {
 800093a:	e03a      	b.n	80009b2 <get_commands+0x8e>
    if ((ch!='\n')&&(ch!='\r')) {
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	2b0a      	cmp	r3, #10
 8000940:	d027      	beq.n	8000992 <get_commands+0x6e>
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b0d      	cmp	r3, #13
 8000946:	d024      	beq.n	8000992 <get_commands+0x6e>
      if (ch==0x7f) {               // backspace functionality
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b7f      	cmp	r3, #127	; 0x7f
 800094c:	d10c      	bne.n	8000968 <get_commands+0x44>
        if (counter > 0) {
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <get_commands+0xcc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d021      	beq.n	800099a <get_commands+0x76>
            printf("\b \b");
 8000956:	4827      	ldr	r0, [pc, #156]	; (80009f4 <get_commands+0xd0>)
 8000958:	f007 fa24 	bl	8007da4 <iprintf>
            counter--;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <get_commands+0xcc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <get_commands+0xcc>)
 8000964:	6013      	str	r3, [r2, #0]
      if (ch==0x7f) {               // backspace functionality
 8000966:	e018      	b.n	800099a <get_commands+0x76>
        }
      }
      else {
        putchar(ch);
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4618      	mov	r0, r3
 800096c:	f007 fa2c 	bl	8007dc8 <putchar>
        command_buf[counter++]=ch;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <get_commands+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	491e      	ldr	r1, [pc, #120]	; (80009f0 <get_commands+0xcc>)
 8000978:	600a      	str	r2, [r1, #0]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	701a      	strb	r2, [r3, #0]
        if (counter>=(QUEUE_SIZE-2)) {
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <get_commands+0xcc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b1d      	cmp	r3, #29
 8000988:	d907      	bls.n	800099a <get_commands+0x76>
          mode=COMPLETE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <get_commands+0xd4>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
          break;
 8000990:	e012      	b.n	80009b8 <get_commands+0x94>
        }
      }
    }
    else {
      mode = COMPLETE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <get_commands+0xd4>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
      break;
 8000998:	e00e      	b.n	80009b8 <get_commands+0x94>
      if (ch==0x7f) {               // backspace functionality
 800099a:	bf00      	nop
    }
    mask = disable();
 800099c:	f000 f8b8 	bl	8000b10 <disable>
 80009a0:	60b8      	str	r0, [r7, #8]
    ch=dequeue(&buf);
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <get_commands+0xc8>)
 80009a4:	f000 fcbe 	bl	8001324 <dequeue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
    restore(mask);
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f000 f8c2 	bl	8000b36 <restore>
  while (ch!=0) {
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1c1      	bne.n	800093c <get_commands+0x18>
  }
  if (mode == COMPLETE) {
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <get_commands+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d110      	bne.n	80009e2 <get_commands+0xbe>
    command_buf[counter] = 0;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <get_commands+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    printf("\n\r");
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <get_commands+0xd8>)
 80009ce:	f007 f9e9 	bl	8007da4 <iprintf>
    counter = 0;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <get_commands+0xcc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
    mode = COLLECT_CHARS;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <get_commands+0xd4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
    return(1);
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <get_commands+0xc0>
  }
  else {
    return(0);
 80009e2:	2300      	movs	r3, #0
  }
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000023c 	.word	0x2000023c
 80009f0:	200000d8 	.word	0x200000d8
 80009f4:	080090a8 	.word	0x080090a8
 80009f8:	200000dc 	.word	0x200000dc
 80009fc:	080090ac 	.word	0x080090ac

08000a00 <parse_command>:

int parse_command (uint8_t *line, uint8_t **command, uint8_t **args) {
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint8_t *p;

  if((!line) ||
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <parse_command+0x1e>
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <parse_command+0x1e>
     (!command) ||
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <parse_command+0x24>
     (!args)) {
    return (-1);
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e01e      	b.n	8000a62 <parse_command+0x62>
  }
  *command = line;
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	601a      	str	r2, [r3, #0]
  p = line;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a2e:	e00b      	b.n	8000a48 <parse_command+0x48>
    if (!*p) {
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <parse_command+0x42>
      *args = '\0';
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
      return(0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e00f      	b.n	8000a62 <parse_command+0x62>
    }
    p++;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
  while (*p!=','){
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a4e:	d1ef      	bne.n	8000a30 <parse_command+0x30>
  }
  *p++ = '\0';
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	617a      	str	r2, [r7, #20]
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
  *args = p;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	601a      	str	r2, [r3, #0]
  return (0);
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <execute_command>:

int execute_command(uint8_t * line) { // line is buffer where command is in
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <execute_command+0x98>)
 8000a7a:	617b      	str	r3, [r7, #20]
  int success = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <execute_command+0x1c>
    return (-1);
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e038      	b.n	8000afe <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000a8c:	f107 0208 	add.w	r2, r7, #8
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb2 	bl	8000a00 <parse_command>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	d121      	bne.n	8000ae8 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <execute_command+0x9c>)
 8000aa6:	f007 f97d 	bl	8007da4 <iprintf>
    return (-1);
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e026      	b.n	8000afe <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb89 	bl	80001d0 <strcmp>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10e      	bne.n	8000ae2 <execute_command+0x72>
      if (!p->cmd_function) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <execute_command+0x62>
        return (-1);
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	e015      	b.n	8000afe <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4798      	blx	r3
      success = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
      break;
 8000ae0:	e006      	b.n	8000af0 <execute_command+0x80>
    }
    p++;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1df      	bne.n	8000ab0 <execute_command+0x40>
  }
  if (success) {
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <execute_command+0x8a>
    return (0);
 8000af6:	2300      	movs	r3, #0
 8000af8:	e001      	b.n	8000afe <execute_command+0x8e>
  }
  else {
    return (-1);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	080090b0 	.word	0x080090b0

08000b10 <disable>:

#include <main.h>
#include "interrupt.h"


uint32_t disable(void) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8000b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8000b20:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000b22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <restore>:

void restore(uint32_t priority_mask) {
 8000b36:	b480      	push	{r7}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f383 8810 	msr	PRIMASK, r3
}
 8000b48:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b089      	sub	sp, #36	; 0x24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	e853 3f00 	ldrex	r3, [r3]
 8000b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69fa      	ldr	r2, [r7, #28]
 8000b76:	61ba      	str	r2, [r7, #24]
 8000b78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b7a:	6979      	ldr	r1, [r7, #20]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	e841 2300 	strex	r3, r2, [r1]
 8000b82:	613b      	str	r3, [r7, #16]
   return(result);
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1e9      	bne.n	8000b5e <LL_USART_EnableIT_RXNE+0x8>
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3724      	adds	r7, #36	; 0x24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <readsensor>:
//typedef struct sensorval {
//  uint32_t vdda_value;
//  uint32_t temperature;
//} sensorval_t;

uint32_t readsensor(sensorval_t *sensors) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint32_t temp_raw;
	uint32_t vrefint_raw;

  if (!sensors) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <readsensor+0x14>
    return (-1);
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e04d      	b.n	8000c48 <readsensor+0xb0>
  }
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000bac:	217f      	movs	r1, #127	; 0x7f
 8000bae:	4828      	ldr	r0, [pc, #160]	; (8000c50 <readsensor+0xb8>)
 8000bb0:	f002 fbc6 	bl	8003340 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000bb4:	4826      	ldr	r0, [pc, #152]	; (8000c50 <readsensor+0xb8>)
 8000bb6:	f001 fb0f 	bl	80021d8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000bba:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbe:	4824      	ldr	r0, [pc, #144]	; (8000c50 <readsensor+0xb8>)
 8000bc0:	f001 fba0 	bl	8002304 <HAL_ADC_PollForConversion>
  temp_raw = HAL_ADC_GetValue(&hadc1);
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <readsensor+0xb8>)
 8000bc6:	f001 fc2c 	bl	8002422 <HAL_ADC_GetValue>
 8000bca:	60f8      	str	r0, [r7, #12]
  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <readsensor+0xb8>)
 8000bd2:	f001 fb97 	bl	8002304 <HAL_ADC_PollForConversion>
	vrefint_raw = HAL_ADC_GetValue(&hadc1);
 8000bd6:	481e      	ldr	r0, [pc, #120]	; (8000c50 <readsensor+0xb8>)
 8000bd8:	f001 fc23 	bl	8002422 <HAL_ADC_GetValue>
 8000bdc:	60b8      	str	r0, [r7, #8]
  HAL_ADC_Stop(&hadc1);
 8000bde:	481c      	ldr	r0, [pc, #112]	; (8000c50 <readsensor+0xb8>)
 8000be0:	f001 fb5d 	bl	800229e <HAL_ADC_Stop>
  sensors->vdda_value = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw, ADC_RESOLUTION_12B);
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <readsensor+0xbc>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bee:	fb03 f202 	mul.w	r2, r3, r2
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	601a      	str	r2, [r3, #0]
  sensors->temperature = __HAL_ADC_CALC_TEMPERATURE(sensors->vdda_value,temp_raw,ADC_RESOLUTION_12B);
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <readsensor+0xc0>)
 8000bfe:	881a      	ldrh	r2, [r3, #0]
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <readsensor+0xc4>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d01a      	beq.n	8000c3e <readsensor+0xa6>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <readsensor+0xc8>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	099b      	lsrs	r3, r3, #6
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <readsensor+0xc4>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2264      	movs	r2, #100	; 0x64
 8000c24:	fb03 f202 	mul.w	r2, r3, r2
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <readsensor+0xc0>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <readsensor+0xc4>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	1acb      	subs	r3, r1, r3
 8000c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c38:	331e      	adds	r3, #30
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	e001      	b.n	8000c42 <readsensor+0xaa>
 8000c3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	605a      	str	r2, [r3, #4]

  return(0);
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000e0 	.word	0x200000e0
 8000c54:	1fff75aa 	.word	0x1fff75aa
 8000c58:	1fff75ca 	.word	0x1fff75ca
 8000c5c:	1fff75a8 	.word	0x1fff75a8
 8000c60:	057619f1 	.word	0x057619f1

08000c64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  static uint32_t last = 0;
  uint32_t current;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7f1b      	ldrb	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d11c      	bne.n	8000cae <HAL_TIM_IC_CaptureCallback+0x4a>
    current = htim->Instance->CCR1;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	60fb      	str	r3, [r7, #12]
    if (last <= current) {
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d306      	bcc.n	8000c94 <HAL_TIM_IC_CaptureCallback+0x30>
      period = current - last;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e009      	b.n	8000ca8 <HAL_TIM_IC_CaptureCallback+0x44>
    } else {
      period = TIM2->ARR - last + current;
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1ad2      	subs	r2, r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ca6:	6013      	str	r3, [r2, #0]
    }
    last = current;
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6013      	str	r3, [r2, #0]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000290 	.word	0x20000290
 8000cc0:	2000027c 	.word	0x2000027c

08000cc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_queue(&buf);
 8000cca:	483f      	ldr	r0, [pc, #252]	; (8000dc8 <main+0x104>)
 8000ccc:	f000 fadd 	bl	800128a <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f000 fe7f 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 f898 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f000 fa88 	bl	80011ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cdc:	f000 fa56 	bl	800118c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ce0:	f000 f96a 	bl	8000fb8 <MX_RTC_Init>
  MX_TIM2_Init();
 8000ce4:	f000 f9fa 	bl	80010dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ce8:	f000 f8f2 	bl	8000ed0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000cec:	4837      	ldr	r0, [pc, #220]	; (8000dcc <main+0x108>)
 8000cee:	f000 fb43 	bl	8001378 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);    // Turn on the usart2 interrupt
 8000cf2:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <main+0x10c>)
 8000cf4:	f7ff ff2f 	bl	8000b56 <LL_USART_EnableIT_RXNE>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8000cf8:	463a      	mov	r2, r7
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <main+0x110>)
 8000d00:	f004 ff38 	bl	8005b74 <HAL_TIM_IC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Up and Running\n\r");
 8000d04:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <main+0x114>)
 8000d06:	f007 f84d 	bl	8007da4 <iprintf>

  prompt();
 8000d0a:	f7ff fc3f 	bl	800058c <prompt>
  while (1) {
    HAL_Delay(100);
 8000d0e:	2064      	movs	r0, #100	; 0x64
 8000d10:	f000 fed4 	bl	8001abc <HAL_Delay>
    readsensor(&mySensors);
 8000d14:	4831      	ldr	r0, [pc, #196]	; (8000ddc <main+0x118>)
 8000d16:	f7ff ff3f 	bl	8000b98 <readsensor>
    tsl237_clock_period = (1 / (float) SystemCoreClock) * (float) period;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <main+0x11c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <main+0x120>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <main+0x124>)
 8000d40:	edc3 7a00 	vstr	s15, [r3]
    tsl237_clock_frequency = 1 / tsl237_clock_period;
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <main+0x124>)
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <main+0x128>)
 8000d54:	edc3 7a00 	vstr	s15, [r3]

    if (get_commands(command)) {
 8000d58:	4825      	ldr	r0, [pc, #148]	; (8000df0 <main+0x12c>)
 8000d5a:	f7ff fde3 	bl	8000924 <get_commands>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d01e      	beq.n	8000da2 <main+0xde>
      command_length = 16;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <main+0x130>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	601a      	str	r2, [r3, #0]
      if (command_length != -1) {
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <main+0x130>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d72:	d011      	beq.n	8000d98 <main+0xd4>
        if (execute_command(command)) {
 8000d74:	481e      	ldr	r0, [pc, #120]	; (8000df0 <main+0x12c>)
 8000d76:	f7ff fe7b 	bl	8000a70 <execute_command>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <main+0xc8>
          printf("NOK\n\r");
 8000d80:	481d      	ldr	r0, [pc, #116]	; (8000df8 <main+0x134>)
 8000d82:	f007 f80f 	bl	8007da4 <iprintf>
          prompt();
 8000d86:	f7ff fc01 	bl	800058c <prompt>
 8000d8a:	e00a      	b.n	8000da2 <main+0xde>
        } else {
          printf("OK\n\r");
 8000d8c:	481b      	ldr	r0, [pc, #108]	; (8000dfc <main+0x138>)
 8000d8e:	f007 f809 	bl	8007da4 <iprintf>
          prompt();
 8000d92:	f7ff fbfb 	bl	800058c <prompt>
 8000d96:	e004      	b.n	8000da2 <main+0xde>
        }
      } else {
        printf("NOK\n\r");
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <main+0x134>)
 8000d9a:	f007 f803 	bl	8007da4 <iprintf>
        prompt();
 8000d9e:	f7ff fbf5 	bl	800058c <prompt>
      }

    }

    if (alarm) {
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <main+0x13c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0b1      	beq.n	8000d0e <main+0x4a>
      printf("alarm_triggered\n\r");
 8000daa:	4816      	ldr	r0, [pc, #88]	; (8000e04 <main+0x140>)
 8000dac:	f006 fffa 	bl	8007da4 <iprintf>
      lon_command();
 8000db0:	f7ff fc52 	bl	8000658 <lon_command>
      HAL_Delay(100);
 8000db4:	2064      	movs	r0, #100	; 0x64
 8000db6:	f000 fe81 	bl	8001abc <HAL_Delay>
      lof_command();
 8000dba:	f7ff fc3d 	bl	8000638 <lof_command>
      alarm = 0;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <main+0x13c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
    HAL_Delay(100);
 8000dc4:	e7a3      	b.n	8000d0e <main+0x4a>
 8000dc6:	bf00      	nop
 8000dc8:	2000023c 	.word	0x2000023c
 8000dcc:	200001b4 	.word	0x200001b4
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	20000168 	.word	0x20000168
 8000dd8:	080090cc 	.word	0x080090cc
 8000ddc:	20000288 	.word	0x20000288
 8000de0:	20000050 	.word	0x20000050
 8000de4:	2000027c 	.word	0x2000027c
 8000de8:	20000280 	.word	0x20000280
 8000dec:	20000284 	.word	0x20000284
 8000df0:	20000264 	.word	0x20000264
 8000df4:	20000274 	.word	0x20000274
 8000df8:	080090e4 	.word	0x080090e4
 8000dfc:	080090ec 	.word	0x080090ec
 8000e00:	20000278 	.word	0x20000278
 8000e04:	080090f4 	.word	0x080090f4

08000e08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	; 0x58
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2244      	movs	r2, #68	; 0x44
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 f8cf 	bl	8007fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000e2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e2e:	f002 fed9 	bl	8003be4 <HAL_PWREx_ControlVoltageScaling>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x34>
    Error_Handler();
 8000e38:	f000 fa22 	bl	8001280 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8000e3c:	f002 feb4 	bl	8003ba8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <SystemClock_Config+0xc4>)
 8000e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e46:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <SystemClock_Config+0xc4>)
 8000e48:	f023 0318 	bic.w	r3, r3, #24
 8000e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000e50:	231c      	movs	r3, #28
 8000e52:	617b      	str	r3, [r7, #20]
      | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e74:	2310      	movs	r3, #16
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 ff01 	bl	8003c90 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x90>
    Error_Handler();
 8000e94:	f000 f9f4 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	603b      	str	r3, [r7, #0]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000eac:	463b      	mov	r3, r7
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fb01 	bl	80044b8 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xb8>
    Error_Handler();
 8000ebc:	f000 f9e0 	bl	8001280 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ec0:	f003 ff14 	bl	8004cec <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ec4:	bf00      	nop
 8000ec6:	3758      	adds	r7, #88	; 0x58
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000ee8:	4a30      	ldr	r2, [pc, #192]	; (8000fac <MX_ADC1_Init+0xdc>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f48:	f001 f804 	bl	8001f54 <HAL_ADC_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0x86>
    Error_Handler();
 8000f52:	f000 f995 	bl	8001280 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_ADC1_Init+0xe0>)
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f62:	237f      	movs	r3, #127	; 0x7f
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f66:	2304      	movs	r3, #4
 8000f68:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f74:	f001 fc34 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xb2>
    Error_Handler();
 8000f7e:	f000 f97f 	bl	8001280 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f86:	230c      	movs	r3, #12
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_ADC1_Init+0xd8>)
 8000f90:	f001 fc26 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xce>
    Error_Handler();
 8000f9a:	f000 f971 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000e0 	.word	0x200000e0
 8000fac:	50040000 	.word	0x50040000
 8000fb0:	c7520000 	.word	0xc7520000
 8000fb4:	80000001 	.word	0x80000001

08000fb8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b092      	sub	sp, #72	; 0x48
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = { 0 };
 8000fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = { 0 };
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = { 0 };
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	222c      	movs	r2, #44	; 0x2c
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 ffee 	bl	8007fba <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_RTC_Init+0x118>)
 8000fe0:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <MX_RTC_Init+0x11c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <MX_RTC_Init+0x118>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_RTC_Init+0x118>)
 8000fec:	227f      	movs	r2, #127	; 0x7f
 8000fee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <MX_RTC_Init+0x118>)
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <MX_RTC_Init+0x118>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <MX_RTC_Init+0x118>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <MX_RTC_Init+0x118>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_RTC_Init+0x118>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800100e:	4830      	ldr	r0, [pc, #192]	; (80010d0 <MX_RTC_Init+0x118>)
 8001010:	f003 ff6e 	bl	8004ef0 <HAL_RTC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_RTC_Init+0x66>
    Error_Handler();
 800101a:	f000 f931 	bl	8001280 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <MX_RTC_Init+0x118>)
 8001042:	f003 ffdd 	bl	8005000 <HAL_RTC_SetTime>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_RTC_Init+0x98>
    Error_Handler();
 800104c:	f000 f918 	bl	8001280 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001050:	2301      	movs	r3, #1
 8001052:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800105c:	2301      	movs	r3, #1
 800105e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <MX_RTC_Init+0x118>)
 8001072:	f004 f8be 	bl	80051f2 <HAL_RTC_SetDate>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_RTC_Init+0xc8>
    Error_Handler();
 800107c:	f000 f900 	bl	8001280 <Error_Handler>
  }

  /** Enable the Alarm A
   */
  sAlarm.AlarmTime.Hours = 0x0;
 8001080:	2300      	movs	r3, #0
 8001082:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001084:	2300      	movs	r3, #0
 8001086:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 8001088:	2330      	movs	r3, #48	; 0x30
 800108a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_RTC_Init+0x120>)
 800109a:	61bb      	str	r3, [r7, #24]
      | RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_RTC_Init+0x118>)
 80010b8:	f004 f970 	bl	800539c <HAL_RTC_SetAlarm_IT>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x10e>
    Error_Handler();
 80010c2:	f000 f8dd 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3748      	adds	r7, #72	; 0x48
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000144 	.word	0x20000144
 80010d4:	40002800 	.word	0x40002800
 80010d8:	80808000 	.word	0x80808000

080010dc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = { 0 };
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_TIM2_Init+0xac>)
 80010fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001100:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_TIM2_Init+0xac>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_TIM2_Init+0xac>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM2_Init+0xac>)
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM2_Init+0xac>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM2_Init+0xac>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <MX_TIM2_Init+0xac>)
 8001124:	f004 fba0 	bl	8005868 <HAL_TIM_IC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x56>
    Error_Handler();
 800112e:	f000 f8a7 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4811      	ldr	r0, [pc, #68]	; (8001188 <MX_TIM2_Init+0xac>)
 8001142:	f005 fb19 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x74>
    Error_Handler();
 800114c:	f000 f898 	bl	8001280 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <MX_TIM2_Init+0xac>)
 8001168:	f004 ffb6 	bl	80060d8 <HAL_TIM_IC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001172:	f000 f885 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001176:	2100      	movs	r1, #0
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM2_Init+0xac>)
 800117a:	f004 fbcd 	bl	8005918 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000168 	.word	0x20000168

0800118c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART2_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011d0:	f005 fb56 	bl	8006880 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x52>
    Error_Handler();
 80011da:	f000 f851 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001b4 	.word	0x200001b4
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_GPIO_Init+0x8c>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_GPIO_Init+0x8c>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2108      	movs	r1, #8
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_GPIO_Init+0x90>)
 8001250:	f002 fc92 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001254:	2308      	movs	r3, #8
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_GPIO_Init+0x90>)
 800126c:	f002 fb1a 	bl	80038a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400

08001280 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>

0800128a <init_queue>:
/* Code: */

#include "queue.h"
#include "interrupt.h"

void init_queue(queue_t *buf) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  mask = disable();
 8001292:	f7ff fc3d 	bl	8000b10 <disable>
 8001296:	60f8      	str	r0, [r7, #12]
  buf->head=0;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  buf->tail=0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  restore(mask);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff fc46 	bl	8000b36 <restore>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <enqueue>:

int enqueue (queue_t *buf, uint8_t data) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80012c2:	f7ff fc25 	bl	8000b10 <disable>
 80012c6:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	425a      	negs	r2, r3
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	f002 021f 	and.w	r2, r2, #31
 80012d8:	bf58      	it	pl
 80012da:	4253      	negpl	r3, r2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6852      	ldr	r2, [r2, #4]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d014      	beq.n	800130e <enqueue+0x5c>
    buf->buffer[buf->head]=data;   
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	78fa      	ldrb	r2, [r7, #3]
 80012ee:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	425a      	negs	r2, r3
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	f002 021f 	and.w	r2, r2, #31
 8001300:	bf58      	it	pl
 8001302:	4253      	negpl	r3, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
    return_val=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e002      	b.n	8001314 <enqueue+0x62>
  }
  else {
    return_val=-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f7ff fc0e 	bl	8000b36 <restore>
  return (return_val);
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  int return_val=0;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001330:	f7ff fbee 	bl	8000b10 <disable>
 8001334:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d011      	beq.n	8001366 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	7a1b      	ldrb	r3, [r3, #8]
 800134c:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	425a      	negs	r2, r3
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	f002 021f 	and.w	r2, r2, #31
 800135e:	bf58      	it	pl
 8001360:	4253      	negpl	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f7ff fbe5 	bl	8000b36 <restore>
  return(return_val);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b2db      	uxtb	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <RetargetInit+0x28>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <RetargetInit+0x2c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	2300      	movs	r3, #0
 800138e:	2202      	movs	r2, #2
 8001390:	2100      	movs	r1, #0
 8001392:	f006 fd21 	bl	8007dd8 <setvbuf>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000294 	.word	0x20000294
 80013a4:	200000b4 	.word	0x200000b4

080013a8 <_isatty>:

int _isatty(int fd) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db04      	blt.n	80013c0 <_isatty+0x18>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dc01      	bgt.n	80013c0 <_isatty+0x18>
    return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e005      	b.n	80013cc <_isatty+0x24>

  errno = EBADF;
 80013c0:	f006 fea6 	bl	8008110 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2209      	movs	r2, #9
 80013c8:	601a      	str	r2, [r3, #0]
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d002      	beq.n	80013ec <_write+0x18>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d111      	bne.n	8001410 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <_write+0x54>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	f005 fa8f 	bl	800691c <HAL_UART_Transmit>
 80013fe:	4603      	mov	r3, r0
 8001400:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <_write+0x38>
      return len;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	e008      	b.n	800141e <_write+0x4a>
    else
      return EIO;
 800140c:	2305      	movs	r3, #5
 800140e:	e006      	b.n	800141e <_write+0x4a>
  }
  errno = EBADF;
 8001410:	f006 fe7e 	bl	8008110 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	2209      	movs	r2, #9
 8001418:	601a      	str	r2, [r3, #0]
  return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000294 	.word	0x20000294

0800142c <_close>:

int _close(int fd) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db04      	blt.n	8001444 <_close+0x18>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	dc01      	bgt.n	8001444 <_close+0x18>
    return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e006      	b.n	8001452 <_close+0x26>

  errno = EBADF;
 8001444:	f006 fe64 	bl	8008110 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	2209      	movs	r2, #9
 800144c:	601a      	str	r2, [r3, #0]
  return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001466:	f006 fe53 	bl	8008110 <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2209      	movs	r2, #9
 800146e:	601a      	str	r2, [r3, #0]
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_read>:

int _read(int fd, char* ptr, int len) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d110      	bne.n	80014b0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <_read+0x4c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2201      	movs	r2, #1
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	f005 fac9 	bl	8006a30 <HAL_UART_Receive>
 800149e:	4603      	mov	r3, r0
 80014a0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <_read+0x30>
      return 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e008      	b.n	80014be <_read+0x42>
    else
      return EIO;
 80014ac:	2305      	movs	r3, #5
 80014ae:	e006      	b.n	80014be <_read+0x42>
  }
  errno = EBADF;
 80014b0:	f006 fe2e 	bl	8008110 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2209      	movs	r2, #9
 80014b8:	601a      	str	r2, [r3, #0]
  return -1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000294 	.word	0x20000294

080014cc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db08      	blt.n	80014ee <_fstat+0x22>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	dc05      	bgt.n	80014ee <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e8:	605a      	str	r2, [r3, #4]
    return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e005      	b.n	80014fa <_fstat+0x2e>
  }

  errno = EBADF;
 80014ee:	f006 fe0f 	bl	8008110 <__errno>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2209      	movs	r2, #9
 80014f6:	601a      	str	r2, [r3, #0]
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	; 0x60
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b098      	sub	sp, #96	; 0x60
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2254      	movs	r2, #84	; 0x54
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fd2c 	bl	8007fba <memset>
  if(hadc->Instance==ADC1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_ADC_MspInit+0x90>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d132      	bne.n	80015d2 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800156c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001570:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001572:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001578:	2301      	movs	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001580:	2310      	movs	r3, #16
 8001582:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001584:	2307      	movs	r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f9b0 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80015a6:	f7ff fe6b 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_ADC_MspInit+0x94>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <HAL_ADC_MspInit+0x94>)
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_ADC_MspInit+0x94>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2012      	movs	r0, #18
 80015c8:	f002 f827 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015cc:	2012      	movs	r0, #18
 80015ce:	f002 f840 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3760      	adds	r7, #96	; 0x60
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	50040000 	.word	0x50040000
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b098      	sub	sp, #96	; 0x60
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2254      	movs	r2, #84	; 0x54
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fce0 	bl	8007fba <memset>
  if(hrtc->Instance==RTC)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_RTC_MspInit+0x68>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d11f      	bne.n	8001644 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f973 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001620:	f7ff fe2e 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_RTC_MspInit+0x6c>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_RTC_MspInit+0x6c>)
 800162c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2029      	movs	r0, #41	; 0x29
 800163a:	f001 ffee 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800163e:	2029      	movs	r0, #41	; 0x29
 8001640:	f002 f807 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3760      	adds	r7, #96	; 0x60
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40002800 	.word	0x40002800
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d130      	bne.n	80016d8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_TIM_IC_MspInit+0x8c>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016a6:	2320      	movs	r3, #32
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f002 f8ee 	bl	80038a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	201c      	movs	r0, #28
 80016ce:	f001 ffa4 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d2:	201c      	movs	r0, #28
 80016d4:	f001 ffbd 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09e      	sub	sp, #120	; 0x78
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2254      	movs	r2, #84	; 0x54
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f006 fc58 	bl	8007fba <memset>
  if(huart->Instance==USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <HAL_UART_MspInit+0xdc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d150      	bne.n	80017b6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f8ed 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800172c:	f7ff fda8 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 8001736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_UART_MspInit+0xe0>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001760:	2304      	movs	r3, #4
 8001762:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001770:	2307      	movs	r3, #7
 8001772:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f002 f891 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001786:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001794:	2303      	movs	r3, #3
 8001796:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f002 f87f 	bl	80038a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2026      	movs	r0, #38	; 0x26
 80017ac:	f001 ff35 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017b0:	2026      	movs	r0, #38	; 0x26
 80017b2:	f001 ff4e 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3778      	adds	r7, #120	; 0x78
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40021000 	.word	0x40021000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f932 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <ADC1_IRQHandler+0x10>)
 8001822:	f000 fe0b 	bl	800243c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000e0 	.word	0x200000e0

08001830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
//	else {
//		period = TIM2->ARR - last + current;
//	}
//	last = current;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM2_IRQHandler+0x10>)
 8001836:	f004 fb4d 	bl	8005ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000168 	.word	0x20000168

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <USART2_IRQHandler+0x40>)
 800184a:	f005 f9bb 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  ch = getchar();
 800184e:	f006 faa1 	bl	8007d94 <getchar>
 8001852:	4603      	mov	r3, r0
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <USART2_IRQHandler+0x44>)
 8001858:	701a      	strb	r2, [r3, #0]
  if (enqueue(&buf,ch)) {
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <USART2_IRQHandler+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	480a      	ldr	r0, [pc, #40]	; (800188c <USART2_IRQHandler+0x48>)
 8001862:	f7ff fd26 	bl	80012b2 <enqueue>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <USART2_IRQHandler+0x3a>
	  dequeue(&buf);
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <USART2_IRQHandler+0x48>)
 800186e:	f7ff fd59 	bl	8001324 <dequeue>
      enqueue(&buf,ch);
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <USART2_IRQHandler+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <USART2_IRQHandler+0x48>)
 800187a:	f7ff fd1a 	bl	80012b2 <enqueue>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001b4 	.word	0x200001b4
 8001888:	20000298 	.word	0x20000298
 800188c:	2000023c 	.word	0x2000023c

08001890 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <RTC_Alarm_IRQHandler+0x14>)
 8001896:	f003 febd 	bl	8005614 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm = 1;
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <RTC_Alarm_IRQHandler+0x18>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000144 	.word	0x20000144
 80018a8:	20000278 	.word	0x20000278

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f006 fc23 	bl	8008110 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	e7fe      	b.n	80018ee <_exit+0x12>

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f006 fbf6 	bl	8008110 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20010000 	.word	0x20010000
 8001950:	00000400 	.word	0x00000400
 8001954:	2000029c 	.word	0x2000029c
 8001958:	200003f0 	.word	0x200003f0

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff ffea 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f006 fbb5 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff f987 	bl	8000cc4 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80019c4:	08009344 	.word	0x08009344
  ldr r2, =_sbss
 80019c8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80019cc:	200003f0 	.word	0x200003f0

080019d0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <CAN1_RX0_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f001 fe11 	bl	8003604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fd86 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_InitTick+0x70>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fe1d 	bl	800366e <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d809      	bhi.n	8001a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f001 fde7 	bl	800361a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0x74>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e001      	b.n	8001a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000058 	.word	0x20000058
 8001a74:	20000050 	.word	0x20000050
 8001a78:	20000054 	.word	0x20000054

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000058 	.word	0x20000058
 8001aa0:	200002a0 	.word	0x200002a0

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200002a0 	.word	0x200002a0

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000058 	.word	0x20000058

08001b04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3360      	adds	r3, #96	; 0x60
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <LL_ADC_SetOffset+0x44>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	03fff000 	.word	0x03fff000

08001bb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3360      	adds	r3, #96	; 0x60
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3330      	adds	r3, #48	; 0x30
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	211f      	movs	r1, #31
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 011f 	and.w	r1, r3, #31
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0e5b      	lsrs	r3, r3, #25
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0d1b      	lsrs	r3, r3, #20
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0d1b      	lsrs	r3, r3, #20
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0318 	and.w	r3, r3, #24
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	0007ffff 	.word	0x0007ffff

08001d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6093      	str	r3, [r2, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d90:	d101      	bne.n	8001d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e30:	f043 0202 	orr.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <LL_ADC_IsEnabled+0x18>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <LL_ADC_IsEnabled+0x1a>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsDisableOngoing+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsDisableOngoing+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d101      	bne.n	8001ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1a:	f043 0220 	orr.w	r2, r3, #32
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e126      	b.n	80021bc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fae5 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fef1 	bl	8001d7c <LL_ADC_IsDeepPowerDownEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fed7 	bl	8001d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff0c 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fef0 	bl	8001da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc4:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_ADC_Init+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	4a7f      	ldr	r2, [pc, #508]	; (80021c8 <HAL_ADC_Init+0x274>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff feee 	bl	8001dcc <LL_ADC_IsInternalRegulatorEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff62 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 800201c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80bf 	bne.w	80021aa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80bb 	bne.w	80021aa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800203c:	f043 0202 	orr.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fefb 	bl	8001e44 <LL_ADC_IsEnabled>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002054:	485d      	ldr	r0, [pc, #372]	; (80021cc <HAL_ADC_Init+0x278>)
 8002056:	f7ff fef5 	bl	8001e44 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4619      	mov	r1, r3
 8002066:	485a      	ldr	r0, [pc, #360]	; (80021d0 <HAL_ADC_Init+0x27c>)
 8002068:	f7ff fd4c 	bl	8001b04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e5b      	ldrb	r3, [r3, #25]
 8002070:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002076:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800207c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002082:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	045b      	lsls	r3, r3, #17
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_ADC_Init+0x280>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff26 	bl	8001f2e <LL_ADC_INJ_IsConversionOngoing>
 80020e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d13d      	bne.n	8002166 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800210c:	f023 0302 	bic.w	r3, r3, #2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	69b9      	ldr	r1, [r7, #24]
 8002116:	430b      	orrs	r3, r1
 8002118:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002120:	2b01      	cmp	r3, #1
 8002122:	d118      	bne.n	8002156 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002146:	430a      	orrs	r2, r1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	e007      	b.n	8002166 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10c      	bne.n	8002188 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f023 010f 	bic.w	r1, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
 8002186:	e007      	b.n	8002198 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020f 	bic.w	r2, r2, #15
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f023 0303 	bic.w	r3, r3, #3
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
 80021a8:	e007      	b.n	80021ba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000050 	.word	0x20000050
 80021c8:	053e2d63 	.word	0x053e2d63
 80021cc:	50040000 	.word	0x50040000
 80021d0:	50040300 	.word	0x50040300
 80021d4:	fff0c007 	.word	0xfff0c007

080021d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe7b 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d14f      	bne.n	8002290 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Start+0x26>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e04b      	b.n	8002296 <HAL_ADC_Start+0xbe>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 ff88 	bl	800311c <ADC_Enable>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d137      	bne.n	8002286 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	d106      	bne.n	8002246 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f023 0206 	bic.w	r2, r3, #6
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
 8002244:	e002      	b.n	800224c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	221c      	movs	r2, #28
 8002252:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fe06 	bl	8001e90 <LL_ADC_REG_StartConversion>
 8002284:	e006      	b.n	8002294 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800228e:	e001      	b.n	8002294 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002290:	2302      	movs	r3, #2
 8002292:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_Stop+0x16>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e023      	b.n	80022fc <HAL_ADC_Stop+0x5e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022bc:	2103      	movs	r1, #3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fe70 	bl	8002fa4 <ADC_ConversionStop>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d111      	bne.n	80022f2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 ffaa 	bl	8003228 <ADC_Disable>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b08      	cmp	r3, #8
 8002314:	d102      	bne.n	800231c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002316:	2308      	movs	r3, #8
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e010      	b.n	800233e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06f      	b.n	800241a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800233a:	2304      	movs	r3, #4
 800233c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800233e:	f7ff fbb1 	bl	8001aa4 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002344:	e021      	b.n	800238a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d01d      	beq.n	800238a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800234e:	f7ff fba9 	bl	8001aa4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <HAL_ADC_PollForConversion+0x60>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d112      	bne.n	800238a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10b      	bne.n	800238a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e047      	b.n	800241a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0d6      	beq.n	8002346 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc34 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e5b      	ldrb	r3, [r3, #25]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d111      	bne.n	80023ee <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d104      	bne.n	8002406 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2208      	movs	r2, #8
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e008      	b.n	8002418 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	220c      	movs	r2, #12
 8002416:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d017      	beq.n	8002492 <HAL_ADC_IRQHandler+0x56>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 ffe3 	bl	8003450 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_IRQHandler+0x6a>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05e      	beq.n	800256e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d059      	beq.n	800256e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fb9d 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03e      	beq.n	8002560 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d135      	bne.n	8002560 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d12e      	bne.n	8002560 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fcea 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11a      	bne.n	8002548 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 020c 	bic.w	r2, r2, #12
 8002520:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d112      	bne.n	8002560 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
 8002546:	e00b      	b.n	8002560 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f91f 	bl	80027a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	220c      	movs	r2, #12
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_ADC_IRQHandler+0x146>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d072      	beq.n	8002672 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06d      	beq.n	8002672 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fb6e 	bl	8001c94 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fb29 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d047      	beq.n	8002664 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_ADC_IRQHandler+0x1b2>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d03f      	beq.n	8002664 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d13a      	bne.n	8002664 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d133      	bne.n	8002664 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d12e      	bne.n	8002664 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fc8f 	bl	8001f2e <LL_ADC_INJ_IsConversionOngoing>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11a      	bne.n	800264c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002624:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
 800264a:	e00b      	b.n	8002664 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fecb 	bl	8003400 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2260      	movs	r2, #96	; 0x60
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d011      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x264>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f890 	bl	80027b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x294>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 feb1 	bl	8003428 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <HAL_ADC_IRQHandler+0x2c4>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fea3 	bl	800343c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02a      	beq.n	8002760 <HAL_ADC_IRQHandler+0x324>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d025      	beq.n	8002760 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800271c:	2301      	movs	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	e008      	b.n	8002734 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002730:	2301      	movs	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10e      	bne.n	8002758 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f83a 	bl	80027cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2210      	movs	r2, #16
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <HAL_ADC_IRQHandler+0x360>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f043 0208 	orr.w	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fe3c 	bl	8003414 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0b6      	sub	sp, #216	; 0xd8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x22>
 80027fe:	2302      	movs	r3, #2
 8002800:	e3bb      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x79a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb66 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 83a0 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3b02      	subs	r3, #2
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81b      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x8e>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_ADC_ConfigChannel+0x5c>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800284c:	230c      	movs	r3, #12
 800284e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002852:	e010      	b.n	8002876 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002854:	2312      	movs	r3, #18
 8002856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800285a:	e00c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800285c:	2318      	movs	r3, #24
 800285e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002862:	e008      	b.n	8002876 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800286e:	2306      	movs	r3, #6
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002874:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002884:	f7ff f9da 	bl	8001c3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fb27 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 8002892:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fb47 	bl	8001f2e <LL_ADC_INJ_IsConversionOngoing>
 80028a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 81a4 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 819f 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f7ff f9f8 	bl	8001cba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00a      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6919      	ldr	r1, [r3, #16]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fc:	f7ff f936 	bl	8001b6c <LL_ADC_SetOffset>
 8002900:	e179      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f953 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x14e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f948 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e01e      	b.n	800296c <HAL_ADC_ConfigChannel+0x18c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f93d 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800294c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e004      	b.n	800296a <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8002960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1a4>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	e018      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1d6>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80029a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e004      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80029ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d106      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f90c 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f8f0 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x214>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f8e5 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x252>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f8da 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x26a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e018      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x29c>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f8a9 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f88d 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x2da>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f882 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x318>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f877 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002adc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x330>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e014      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x35a>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e004      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d106      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f84a 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2103      	movs	r1, #3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f82e 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x398>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2103      	movs	r1, #3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f823 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	f003 021f 	and.w	r2, r3, #31
 8002b76:	e017      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x3c8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f818 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b92:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e003      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x3e0>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	e011      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x404>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e003      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2103      	movs	r1, #3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fff5 	bl	8001be0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f922 	bl	8001e44 <LL_ADC_IsEnabled>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8140 	bne.w	8002e88 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f7ff f87b 	bl	8001d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4a8f      	ldr	r2, [pc, #572]	; (8002e5c <HAL_ADC_ConfigChannel+0x67c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	f040 8131 	bne.w	8002e88 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x46e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	bf94      	ite	ls
 8002c46:	2301      	movls	r3, #1
 8002c48:	2300      	movhi	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e019      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x4a2>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c66:	2320      	movs	r3, #32
 8002c68:	e003      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d079      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x4c2>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	3301      	adds	r3, #1
 8002c9a:	069b      	lsls	r3, r3, #26
 8002c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca0:	e015      	b.n	8002cce <HAL_ADC_ConfigChannel+0x4ee>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	069b      	lsls	r3, r3, #26
 8002cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x50e>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	e017      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x53e>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x564>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	051b      	lsls	r3, r3, #20
 8002d42:	e018      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x596>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 021f 	and.w	r2, r3, #31
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d76:	430b      	orrs	r3, r1
 8002d78:	e081      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x5b6>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d94:	e015      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x5e2>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	069b      	lsls	r3, r3, #26
 8002dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x602>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	e017      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x632>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	61bb      	str	r3, [r7, #24]
  return result;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	ea42 0103 	orr.w	r1, r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x65e>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	3b1e      	subs	r3, #30
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x69c>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e006      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x688>
 8002e5a:	bf00      	nop
 8002e5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	051b      	lsls	r3, r3, #20
 8002e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fe ff19 	bl	8001cba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d06c      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e94:	483c      	ldr	r0, [pc, #240]	; (8002f88 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e96:	f7fe fe5b 	bl	8001b50 <LL_ADC_GetCommonPathInternalCh>
 8002e9a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_ADC_ConfigChannel+0x7ac>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d127      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d121      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <HAL_ADC_ConfigChannel+0x7b0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d157      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482f      	ldr	r0, [pc, #188]	; (8002f88 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eca:	f7fe fe2e 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ee8:	e002      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef6:	e03a      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_ADC_ConfigChannel+0x7bc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d113      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d12a      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f20:	4619      	mov	r1, r3
 8002f22:	4819      	ldr	r0, [pc, #100]	; (8002f88 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f24:	f7fe fe01 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f28:	e021      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d11c      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d116      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d111      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f52:	4619      	mov	r1, r3
 8002f54:	480c      	ldr	r0, [pc, #48]	; (8002f88 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f56:	f7fe fde8 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
 8002f5a:	e008      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	37d8      	adds	r7, #216	; 0xd8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	80080000 	.word	0x80080000
 8002f88:	50040300 	.word	0x50040300
 8002f8c:	c7520000 	.word	0xc7520000
 8002f90:	50040000 	.word	0x50040000
 8002f94:	20000050 	.word	0x20000050
 8002f98:	053e2d63 	.word	0x053e2d63
 8002f9c:	cb840000 	.word	0xcb840000
 8002fa0:	80000001 	.word	0x80000001

08002fa4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe ff90 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ffb1 	bl	8001f2e <LL_ADC_INJ_IsConversionOngoing>
 8002fcc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8098 	beq.w	800310c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02a      	beq.n	8003040 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7e5b      	ldrb	r3, [r3, #25]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d126      	bne.n	8003040 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7e1b      	ldrb	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d122      	bne.n	8003040 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ffe:	e014      	b.n	800302a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4a45      	ldr	r2, [pc, #276]	; (8003118 <ADC_ConversionStop+0x174>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d90d      	bls.n	8003024 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e074      	b.n	800310e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3301      	adds	r3, #1
 8003028:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d1e3      	bne.n	8003000 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d014      	beq.n	8003070 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff48 	bl	8001ee0 <LL_ADC_REG_IsConversionOngoing>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe ff05 	bl	8001e6a <LL_ADC_IsDisableOngoing>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff24 	bl	8001eb8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d014      	beq.n	80030a0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ff57 	bl	8001f2e <LL_ADC_INJ_IsConversionOngoing>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe feed 	bl	8001e6a <LL_ADC_IsDisableOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe ff33 	bl	8001f06 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d005      	beq.n	80030b2 <ADC_ConversionStop+0x10e>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d105      	bne.n	80030b8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80030ac:	230c      	movs	r3, #12
 80030ae:	617b      	str	r3, [r7, #20]
        break;
 80030b0:	e005      	b.n	80030be <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80030b2:	2308      	movs	r3, #8
 80030b4:	617b      	str	r3, [r7, #20]
        break;
 80030b6:	e002      	b.n	80030be <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80030b8:	2304      	movs	r3, #4
 80030ba:	617b      	str	r3, [r7, #20]
        break;
 80030bc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80030be:	f7fe fcf1 	bl	8001aa4 <HAL_GetTick>
 80030c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030c4:	e01b      	b.n	80030fe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030c6:	f7fe fced 	bl	8001aa4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d914      	bls.n	80030fe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1dc      	bne.n	80030c6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	a33fffff 	.word	0xa33fffff

0800311c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fe89 	bl	8001e44 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d169      	bne.n	800320c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <ADC_Enable+0xfc>)
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f043 0210 	orr.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e055      	b.n	800320e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fe44 	bl	8001df4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800316c:	482b      	ldr	r0, [pc, #172]	; (800321c <ADC_Enable+0x100>)
 800316e:	f7fe fcef 	bl	8001b50 <LL_ADC_GetCommonPathInternalCh>
 8003172:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <ADC_Enable+0x104>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	4a28      	ldr	r2, [pc, #160]	; (8003224 <ADC_Enable+0x108>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003196:	e002      	b.n	800319e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	3b01      	subs	r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fc7e 	bl	8001aa4 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031aa:	e028      	b.n	80031fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fe47 	bl	8001e44 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fe17 	bl	8001df4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031c6:	f7fe fc6d 	bl	8001aa4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d914      	bls.n	80031fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d00d      	beq.n	80031fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f043 0210 	orr.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e007      	b.n	800320e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d1cf      	bne.n	80031ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	8000003f 	.word	0x8000003f
 800321c:	50040300 	.word	0x50040300
 8003220:	20000050 	.word	0x20000050
 8003224:	053e2d63 	.word	0x053e2d63

08003228 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fe18 	bl	8001e6a <LL_ADC_IsDisableOngoing>
 800323a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe fdff 	bl	8001e44 <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d047      	beq.n	80032dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d144      	bne.n	80032dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030d 	and.w	r3, r3, #13
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10c      	bne.n	800327a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fdd9 	bl	8001e1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2203      	movs	r2, #3
 8003270:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003272:	f7fe fc17 	bl	8001aa4 <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003278:	e029      	b.n	80032ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e023      	b.n	80032de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003296:	f7fe fc05 	bl	8001aa4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d914      	bls.n	80032ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e007      	b.n	80032de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1dc      	bne.n	8003296 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <LL_ADC_StartCalibration>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003302:	4313      	orrs	r3, r2
 8003304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_IsCalibrationOnGoing>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800332c:	d101      	bne.n	8003332 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_ADCEx_Calibration_Start+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e04d      	b.n	80033f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff5f 	bl	8003228 <ADC_Disable>
 800336a:	4603      	mov	r3, r0
 800336c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d136      	bne.n	80033e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffa9 	bl	80032e6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003394:	e014      	b.n	80033c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3301      	adds	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80033a2:	d30d      	bcc.n	80033c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f023 0312 	bic.w	r3, r3, #18
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e01b      	b.n	80033f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ffa7 	bl	8003318 <LL_ADC_IsCalibrationOnGoing>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e2      	bne.n	8003396 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f023 0303 	bic.w	r3, r3, #3
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
 80033e0:	e005      	b.n	80033ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003480:	4013      	ands	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800348c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003496:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	60d3      	str	r3, [r2, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <__NVIC_GetPriorityGrouping+0x18>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 0307 	and.w	r3, r3, #7
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	db0b      	blt.n	80034f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	f003 021f 	and.w	r2, r3, #31
 80034e0:	4907      	ldr	r1, [pc, #28]	; (8003500 <__NVIC_EnableIRQ+0x38>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2001      	movs	r0, #1
 80034ea:	fa00 f202 	lsl.w	r2, r0, r2
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	; (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	; (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f1c3 0307 	rsb	r3, r3, #7
 8003572:	2b04      	cmp	r3, #4
 8003574:	bf28      	it	cs
 8003576:	2304      	movcs	r3, #4
 8003578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3304      	adds	r3, #4
 800357e:	2b06      	cmp	r3, #6
 8003580:	d902      	bls.n	8003588 <NVIC_EncodePriority+0x30>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3b03      	subs	r3, #3
 8003586:	e000      	b.n	800358a <NVIC_EncodePriority+0x32>
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43d9      	mvns	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	4313      	orrs	r3, r2
         );
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d0:	d301      	bcc.n	80035d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00f      	b.n	80035f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <SysTick_Config+0x40>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035de:	210f      	movs	r1, #15
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	f7ff ff8e 	bl	8003504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <SysTick_Config+0x40>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <SysTick_Config+0x40>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff29 	bl	8003464 <__NVIC_SetPriorityGrouping>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800362c:	f7ff ff3e 	bl	80034ac <__NVIC_GetPriorityGrouping>
 8003630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff ff8e 	bl	8003558 <NVIC_EncodePriority>
 800363c:	4602      	mov	r2, r0
 800363e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff5d 	bl	8003504 <__NVIC_SetPriority>
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff31 	bl	80034c8 <__NVIC_EnableIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ffa2 	bl	80035c0 <SysTick_Config>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA_Start_IT+0x20>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e04b      	b.n	800373e <HAL_DMA_Start_IT+0xb8>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d13a      	bne.n	8003730 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8b0 	bl	8003844 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 020e 	orr.w	r2, r2, #14
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e00f      	b.n	800371e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0204 	bic.w	r2, r2, #4
 800370c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 020a 	orr.w	r2, r2, #10
 800371c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e005      	b.n	800373c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d008      	beq.n	8003770 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e022      	b.n	80037b6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020e 	bic.w	r2, r2, #14
 800377e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 021c 	and.w	r2, r3, #28
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d005      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e029      	b.n	800383a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 020e 	bic.w	r2, r2, #14
 80037f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f003 021c 	and.w	r2, r3, #28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
    }
  }
  return status;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 021c 	and.w	r2, r3, #28
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d108      	bne.n	8003888 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003886:	e007      	b.n	8003898 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	60da      	str	r2, [r3, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b2:	e148      	b.n	8003b46 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2101      	movs	r1, #1
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 813a 	beq.w	8003b40 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d005      	beq.n	80038e4 <HAL_GPIO_Init+0x40>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d130      	bne.n	8003946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800391a:	2201      	movs	r2, #1
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f003 0201 	and.w	r2, r3, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b03      	cmp	r3, #3
 8003950:	d017      	beq.n	8003982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d123      	bne.n	80039d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	08da      	lsrs	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	6939      	ldr	r1, [r7, #16]
 80039d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8094 	beq.w	8003b40 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a18:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_GPIO_Init+0x2c0>)
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_GPIO_Init+0x2c0>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6613      	str	r3, [r2, #96]	; 0x60
 8003a24:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_GPIO_Init+0x2c0>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a30:	4a4d      	ldr	r2, [pc, #308]	; (8003b68 <HAL_GPIO_Init+0x2c4>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a5a:	d00d      	beq.n	8003a78 <HAL_GPIO_Init+0x1d4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a43      	ldr	r2, [pc, #268]	; (8003b6c <HAL_GPIO_Init+0x2c8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <HAL_GPIO_Init+0x1d0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_GPIO_Init+0x2cc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_GPIO_Init+0x1cc>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x1d6>
 8003a70:	2307      	movs	r3, #7
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x1d6>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x1d6>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a8a:	4937      	ldr	r1, [pc, #220]	; (8003b68 <HAL_GPIO_Init+0x2c4>)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ac2:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ae6:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_GPIO_Init+0x2d0>)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3301      	adds	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f aeaf 	bne.w	80038b4 <HAL_GPIO_Init+0x10>
  }
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	48000400 	.word	0x48000400
 8003b70:	48000800 	.word	0x48000800
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40007000 	.word	0x40007000

08003bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40007000 	.word	0x40007000

08003be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf2:	d130      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d038      	beq.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2232      	movs	r2, #50	; 0x32
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0c9b      	lsrs	r3, r3, #18
 8003c24:	3301      	adds	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c28:	e002      	b.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d102      	bne.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f2      	bne.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d110      	bne.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c62:	d007      	beq.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6c:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40007000 	.word	0x40007000
 8003c88:	20000050 	.word	0x20000050
 8003c8c:	431bde83 	.word	0x431bde83

08003c90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 bc02 	b.w	80044a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca4:	4b96      	ldr	r3, [pc, #600]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cae:	4b94      	ldr	r3, [pc, #592]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80e4 	beq.w	8003e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4c>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	f040 808b 	bne.w	8003dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	f040 8087 	bne.w	8003dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cdc:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x64>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e3d9      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_RCC_OscConfig+0x7e>
 8003d04:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0c:	e005      	b.n	8003d1a <HAL_RCC_OscConfig+0x8a>
 8003d0e:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d223      	bcs.n	8003d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd8c 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e3ba      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d32:	4b73      	ldr	r3, [pc, #460]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a72      	ldr	r2, [pc, #456]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	496d      	ldr	r1, [pc, #436]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d50:	4b6b      	ldr	r3, [pc, #428]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	4968      	ldr	r1, [pc, #416]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	e025      	b.n	8003db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d66:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4960      	ldr	r1, [pc, #384]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d84:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	495b      	ldr	r1, [pc, #364]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fd4c 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e37a      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db2:	f000 fc81 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	4950      	ldr	r1, [pc, #320]	; (8003f04 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_RCC_OscConfig+0x278>)
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dd2:	4b4e      	ldr	r3, [pc, #312]	; (8003f0c <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fe14 	bl	8001a04 <HAL_InitTick>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d052      	beq.n	8003e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	e35e      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d032      	beq.n	8003e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003df2:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a42      	ldr	r2, [pc, #264]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fe51 	bl	8001aa4 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e06:	f7fd fe4d 	bl	8001aa4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e347      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e24:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	f043 0308 	orr.w	r3, r3, #8
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4930      	ldr	r1, [pc, #192]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	492b      	ldr	r1, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
 8003e56:	e01a      	b.n	8003e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e64:	f7fd fe1e 	bl	8001aa4 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6c:	f7fd fe1a 	bl	8001aa4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e314      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x1dc>
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d073      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_OscConfig+0x21c>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d063      	beq.n	8003f80 <HAL_RCC_OscConfig+0x2f0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d15f      	bne.n	8003f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e2f1      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x24c>
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e025      	b.n	8003f28 <HAL_RCC_OscConfig+0x298>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d114      	bne.n	8003f10 <HAL_RCC_OscConfig+0x280>
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a02      	ldr	r2, [pc, #8]	; (8003f00 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e013      	b.n	8003f28 <HAL_RCC_OscConfig+0x298>
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08009108 	.word	0x08009108
 8003f08:	20000050 	.word	0x20000050
 8003f0c:	20000054 	.word	0x20000054
 8003f10:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a9f      	ldr	r2, [pc, #636]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b9d      	ldr	r3, [pc, #628]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a9c      	ldr	r2, [pc, #624]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fdb8 	bl	8001aa4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fdb4 	bl	8001aa4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e2ae      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	4b92      	ldr	r3, [pc, #584]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x2a8>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fda4 	bl	8001aa4 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd fda0 	bl	8001aa4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e29a      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2d0>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d060      	beq.n	8004050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x310>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d119      	bne.n	8003fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d116      	bne.n	8003fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa0:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x328>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e277      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	4973      	ldr	r1, [pc, #460]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fcc:	e040      	b.n	8004050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d023      	beq.n	800401e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fd5f 	bl	8001aa4 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd fd5b 	bl	8001aa4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e255      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b62      	ldr	r3, [pc, #392]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	495f      	ldr	r1, [pc, #380]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
 800401c:	e018      	b.n	8004050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401e:	4b5d      	ldr	r3, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5c      	ldr	r2, [pc, #368]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7fd fd3b 	bl	8001aa4 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7fd fd37 	bl	8001aa4 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e231      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d03c      	beq.n	80040d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01c      	beq.n	800409e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406a:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd fd16 	bl	8001aa4 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407c:	f7fd fd12 	bl	8001aa4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e20c      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCC_OscConfig+0x3ec>
 800409c:	e01b      	b.n	80040d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a4:	4a3b      	ldr	r2, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fd fcf9 	bl	8001aa4 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fd fcf5 	bl	8001aa4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1ef      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c8:	4b32      	ldr	r3, [pc, #200]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ef      	bne.n	80040b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a6 	beq.w	8004230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410c:	2301      	movs	r3, #1
 800410e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCC_OscConfig+0x508>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d118      	bne.n	800414e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_RCC_OscConfig+0x508>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_RCC_OscConfig+0x508>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004128:	f7fd fcbc 	bl	8001aa4 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fd fcb8 	bl	8001aa4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1b2      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x508>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d108      	bne.n	8004168 <HAL_RCC_OscConfig+0x4d8>
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004166:	e029      	b.n	80041bc <HAL_RCC_OscConfig+0x52c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d115      	bne.n	800419c <HAL_RCC_OscConfig+0x50c>
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	4a03      	ldr	r2, [pc, #12]	; (8004194 <HAL_RCC_OscConfig+0x504>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004190:	e014      	b.n	80041bc <HAL_RCC_OscConfig+0x52c>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	40007000 	.word	0x40007000
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	4a99      	ldr	r2, [pc, #612]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ac:	4b96      	ldr	r3, [pc, #600]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	4a95      	ldr	r2, [pc, #596]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d016      	beq.n	80041f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fc6e 	bl	8001aa4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fd fc6a 	bl	8001aa4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e162      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ed      	beq.n	80041cc <HAL_RCC_OscConfig+0x53c>
 80041f0:	e015      	b.n	800421e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fd fc57 	bl	8001aa4 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fa:	f7fd fc53 	bl	8001aa4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f241 3288 	movw	r2, #5000	; 0x1388
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e14b      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ed      	bne.n	80041fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800421e:	7ffb      	ldrb	r3, [r7, #31]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004224:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d03c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424a:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd fc26 	bl	8001aa4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425c:	f7fd fc22 	bl	8001aa4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e11c      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800426e:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <HAL_RCC_OscConfig+0x5cc>
 800427c:	e01b      	b.n	80042b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800427e:	4b62      	ldr	r3, [pc, #392]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004284:	4a60      	ldr	r2, [pc, #384]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd fc09 	bl	8001aa4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004296:	f7fd fc05 	bl	8001aa4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0ff      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80042aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ef      	bne.n	8004296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80f3 	beq.w	80044a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f040 80c9 	bne.w	800445c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ca:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 0203 	and.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d12c      	bne.n	8004338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	3b01      	subs	r3, #1
 80042ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d123      	bne.n	8004338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d11b      	bne.n	8004338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d113      	bne.n	8004338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	3b01      	subs	r3, #1
 800431e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d109      	bne.n	8004338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d06b      	beq.n	8004410 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d062      	beq.n	8004404 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800433e:	4b32      	ldr	r3, [pc, #200]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0ac      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2d      	ldr	r2, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004358:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800435a:	f7fd fba3 	bl	8001aa4 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fb9f 	bl	8001aa4 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e099      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x77c>)
 8004386:	4013      	ands	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004390:	3a01      	subs	r2, #1
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800439a:	0212      	lsls	r2, r2, #8
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043a2:	0852      	lsrs	r2, r2, #1
 80043a4:	3a01      	subs	r2, #1
 80043a6:	0552      	lsls	r2, r2, #21
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ae:	0852      	lsrs	r2, r2, #1
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0652      	lsls	r2, r2, #25
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043ba:	06d2      	lsls	r2, r2, #27
 80043bc:	430a      	orrs	r2, r1
 80043be:	4912      	ldr	r1, [pc, #72]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043dc:	f7fd fb62 	bl	8001aa4 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd fb5e 	bl	8001aa4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e058      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCC_OscConfig+0x778>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004402:	e050      	b.n	80044a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e04f      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
 8004408:	40021000 	.word	0x40021000
 800440c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d144      	bne.n	80044a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004434:	f7fd fb36 	bl	8001aa4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fd fb32 	bl	8001aa4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e02c      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x7ac>
 800445a:	e024      	b.n	80044a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d01f      	beq.n	80044a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fd fb19 	bl	8001aa4 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7fd fb15 	bl	8001aa4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	4905      	ldr	r1, [pc, #20]	; (80044b0 <HAL_RCC_OscConfig+0x820>)
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_OscConfig+0x824>)
 800449c:	4013      	ands	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
 80044a0:	e001      	b.n	80044a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	feeefffc 	.word	0xfeeefffc

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0e7      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d910      	bls.n	80044fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	4970      	ldr	r1, [pc, #448]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b6e      	ldr	r3, [pc, #440]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cf      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004514:	429a      	cmp	r2, r3
 8004516:	d908      	bls.n	800452a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004518:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4960      	ldr	r1, [pc, #384]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04c      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453e:	4b5a      	ldr	r3, [pc, #360]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d121      	bne.n	800458e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0a6      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004556:	4b54      	ldr	r3, [pc, #336]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d115      	bne.n	800458e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e09a      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456e:	4b4e      	ldr	r3, [pc, #312]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e08e      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457e:	4b4a      	ldr	r3, [pc, #296]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e086      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4943      	ldr	r1, [pc, #268]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fd fa80 	bl	8001aa4 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fd fa7c 	bl	8001aa4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e06e      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d208      	bcs.n	80045fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	492b      	ldr	r1, [pc, #172]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d210      	bcs.n	800462e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 0207 	bic.w	r2, r3, #7
 8004614:	4923      	ldr	r1, [pc, #140]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_ClockConfig+0x1ec>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d001      	beq.n	800462e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e036      	b.n	800469c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4918      	ldr	r1, [pc, #96]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004658:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4910      	ldr	r1, [pc, #64]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466c:	f000 f824 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	490b      	ldr	r1, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1f4>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1f8>)
 800468a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1fc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd f9b7 	bl	8001a04 <HAL_InitTick>
 8004696:	4603      	mov	r3, r0
 8004698:	72fb      	strb	r3, [r7, #11]

  return status;
 800469a:	7afb      	ldrb	r3, [r7, #11]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08009108 	.word	0x08009108
 80046b0:	20000050 	.word	0x20000050
 80046b4:	20000054 	.word	0x20000054

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x34>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d121      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d11e      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e005      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d102      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e004      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d101      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 800473e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d134      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0xa6>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d003      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0xac>
 800475c:	e005      	b.n	800476a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004760:	617b      	str	r3, [r7, #20]
      break;
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004766:	617b      	str	r3, [r7, #20]
      break;
 8004768:	e002      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	617b      	str	r3, [r7, #20]
      break;
 800476e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	fb03 f202 	mul.w	r2, r3, r2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	0e5b      	lsrs	r3, r3, #25
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	3301      	adds	r3, #1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047b0:	69bb      	ldr	r3, [r7, #24]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08009120 	.word	0x08009120
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000050 	.word	0x20000050

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4904      	ldr	r1, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	08009118 	.word	0x08009118

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004818:	f7ff ffda 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCC_GetPCLK2Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08009118 	.word	0x08009118

08004840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800484c:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004858:	f7ff f9b6 	bl	8003bc8 <HAL_PWREx_GetVoltageRange>
 800485c:	6178      	str	r0, [r7, #20]
 800485e:	e014      	b.n	800488a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
 800486c:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004878:	f7ff f9a6 	bl	8003bc8 <HAL_PWREx_GetVoltageRange>
 800487c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d10b      	bne.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d919      	bls.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2ba0      	cmp	r3, #160	; 0xa0
 800489c:	d902      	bls.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800489e:	2302      	movs	r3, #2
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e013      	b.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a4:	2301      	movs	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e010      	b.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d902      	bls.n	80048b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048b0:	2303      	movs	r3, #3
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	e00a      	b.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d102      	bne.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048bc:	2302      	movs	r3, #2
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e004      	b.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d101      	bne.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c8:	2301      	movs	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 0207 	bic.w	r2, r3, #7
 80048d4:	4909      	ldr	r1, [pc, #36]	; (80048fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40022000 	.word	0x40022000

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004908:	2300      	movs	r3, #0
 800490a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800490c:	2300      	movs	r3, #0
 800490e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	2b00      	cmp	r3, #0
 800491a:	d031      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004924:	d01a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004926:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800492a:	d814      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004934:	d10f      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004936:	4b5d      	ldr	r3, [pc, #372]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4a5c      	ldr	r2, [pc, #368]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f9de 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	74fb      	strb	r3, [r7, #19]
      break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004964:	4b51      	ldr	r3, [pc, #324]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	494e      	ldr	r1, [pc, #312]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800497a:	e001      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 809e 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004992:	4b46      	ldr	r3, [pc, #280]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a8:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	4a3f      	ldr	r2, [pc, #252]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b2:	6593      	str	r3, [r2, #88]	; 0x58
 80049b4:	4b3d      	ldr	r3, [pc, #244]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c0:	2301      	movs	r3, #1
 80049c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c4:	4b3a      	ldr	r3, [pc, #232]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a39      	ldr	r2, [pc, #228]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049d0:	f7fd f868 	bl	8001aa4 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049d6:	e009      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fd f864 	bl	8001aa4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d902      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	74fb      	strb	r3, [r7, #19]
        break;
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ec:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d15a      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d019      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd f824 	bl	8001aa4 <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd f820 	bl	8001aa4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d902      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	74fb      	strb	r3, [r7, #19]
            break;
 8004a76:	e006      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0ec      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aa2:	e009      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
 8004aa8:	e006      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab8:	7c7b      	ldrb	r3, [r7, #17]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d105      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abe:	4b8a      	ldr	r3, [pc, #552]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	4a89      	ldr	r2, [pc, #548]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad6:	4b84      	ldr	r3, [pc, #528]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 0203 	bic.w	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	4980      	ldr	r1, [pc, #512]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af8:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 020c 	bic.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	4978      	ldr	r1, [pc, #480]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b1a:	4b73      	ldr	r3, [pc, #460]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	496f      	ldr	r1, [pc, #444]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	4967      	ldr	r1, [pc, #412]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5e:	4b62      	ldr	r3, [pc, #392]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	495e      	ldr	r1, [pc, #376]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b80:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4956      	ldr	r1, [pc, #344]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba2:	4b51      	ldr	r3, [pc, #324]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	494d      	ldr	r1, [pc, #308]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d028      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc4:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4945      	ldr	r1, [pc, #276]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be4:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bee:	60d3      	str	r3, [r2, #12]
 8004bf0:	e011      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bfa:	d10c      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	2101      	movs	r1, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f882 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004c12:	7cfb      	ldrb	r3, [r7, #19]
 8004c14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d028      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	492d      	ldr	r1, [pc, #180]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c40:	d106      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4c:	60d3      	str	r3, [r2, #12]
 8004c4e:	e011      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f853 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01c      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	4916      	ldr	r1, [pc, #88]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f830 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	4904      	ldr	r1, [pc, #16]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004cf6:	f043 0304 	orr.w	r3, r3, #4
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d1a:	4b74      	ldr	r3, [pc, #464]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d26:	4b71      	ldr	r3, [pc, #452]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0203 	and.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
       ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d3e:	4b6b      	ldr	r3, [pc, #428]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d047      	beq.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e044      	b.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d018      	beq.n	8004d92 <RCCEx_PLLSAI1_Config+0x86>
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d825      	bhi.n	8004db0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d002      	beq.n	8004d6e <RCCEx_PLLSAI1_Config+0x62>
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d009      	beq.n	8004d80 <RCCEx_PLLSAI1_Config+0x74>
 8004d6c:	e020      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d6e:	4b5f      	ldr	r3, [pc, #380]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d11d      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7e:	e01a      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d80:	4b5a      	ldr	r3, [pc, #360]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e013      	b.n	8004dba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d92:	4b56      	ldr	r3, [pc, #344]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d9e:	4b53      	ldr	r3, [pc, #332]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dae:	e006      	b.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e004      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dc6:	4b49      	ldr	r3, [pc, #292]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	4943      	ldr	r1, [pc, #268]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d17c      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3f      	ldr	r2, [pc, #252]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fc fe56 	bl	8001aa4 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dfc:	f7fc fe52 	bl	8001aa4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ef      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15f      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e28:	4b30      	ldr	r3, [pc, #192]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6892      	ldr	r2, [r2, #8]
 8004e38:	0211      	lsls	r1, r2, #8
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	06d2      	lsls	r2, r2, #27
 8004e40:	430a      	orrs	r2, r1
 8004e42:	492a      	ldr	r1, [pc, #168]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]
 8004e48:	e027      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d112      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e50:	4b26      	ldr	r3, [pc, #152]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6892      	ldr	r2, [r2, #8]
 8004e60:	0211      	lsls	r1, r2, #8
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6912      	ldr	r2, [r2, #16]
 8004e66:	0852      	lsrs	r2, r2, #1
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	0552      	lsls	r2, r2, #21
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	491f      	ldr	r1, [pc, #124]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	610b      	str	r3, [r1, #16]
 8004e74:	e011      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e76:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	0211      	lsls	r1, r2, #8
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6952      	ldr	r2, [r2, #20]
 8004e8c:	0852      	lsrs	r2, r2, #1
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	0652      	lsls	r2, r2, #25
 8004e92:	430a      	orrs	r2, r1
 8004e94:	4915      	ldr	r1, [pc, #84]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fc fdfd 	bl	8001aa4 <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eac:	e009      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eae:	f7fc fdf9 	bl	8001aa4 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d902      	bls.n	8004ec2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8004ec0:	e005      	b.n	8004ece <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ef      	beq.n	8004eae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	4903      	ldr	r1, [pc, #12]	; (8004eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000

08004ef0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d079      	beq.n	8004ff6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fb64 	bl	80015e4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d058      	beq.n	8004fe4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	22ca      	movs	r2, #202	; 0xca
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2253      	movs	r2, #83	; 0x53
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fbda 	bl	80056fc <RTC_EnterInitMode>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d127      	bne.n	8004fa2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6899      	ldr	r1, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68d2      	ldr	r2, [r2, #12]
 8004f8c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6919      	ldr	r1, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fbde 	bl	8005764 <RTC_ExitInitMode>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0203 	bic.w	r2, r2, #3
 8004fc0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	22ff      	movs	r2, #255	; 0xff
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8004fe2:	e001      	b.n	8004fe8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_RTC_SetTime+0x1a>
 8005016:	2302      	movs	r3, #2
 8005018:	e08b      	b.n	8005132 <HAL_RTC_SetTime+0x132>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	22ca      	movs	r2, #202	; 0xca
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2253      	movs	r2, #83	; 0x53
 8005038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fb5e 	bl	80056fc <RTC_EnterInitMode>
 8005040:	4603      	mov	r3, r0
 8005042:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d163      	bne.n	8005112 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d126      	bne.n	800509e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fbb9 	bl	80057e0 <RTC_ByteToBcd2>
 800506e:	4603      	mov	r3, r0
 8005070:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fbb2 	bl	80057e0 <RTC_ByteToBcd2>
 800507c:	4603      	mov	r3, r0
 800507e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005080:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	789b      	ldrb	r3, [r3, #2]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fbaa 	bl	80057e0 <RTC_ByteToBcd2>
 800508c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800508e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	78db      	ldrb	r3, [r3, #3]
 8005096:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e018      	b.n	80050d0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050be:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050c4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6899      	ldr	r1, [r3, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	431a      	orrs	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fb2b 	bl	8005764 <RTC_ExitInitMode>
 800510e:	4603      	mov	r3, r0
 8005110:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	22ff      	movs	r2, #255	; 0xff
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}

0800513a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005168:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800516c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	0d9b      	lsrs	r3, r3, #22
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11a      	bne.n	80051e8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb32 	bl	8005820 <RTC_Bcd2ToByte>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fb29 	bl	8005820 <RTC_Bcd2ToByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	789b      	ldrb	r3, [r3, #2]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fb20 	bl	8005820 <RTC_Bcd2ToByte>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051f2:	b590      	push	{r4, r7, lr}
 80051f4:	b087      	sub	sp, #28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_RTC_SetDate+0x1a>
 8005208:	2302      	movs	r3, #2
 800520a:	e075      	b.n	80052f8 <HAL_RTC_SetDate+0x106>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_RTC_SetDate+0x4e>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	330a      	adds	r3, #10
 800523a:	b2da      	uxtb	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11c      	bne.n	8005280 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	78db      	ldrb	r3, [r3, #3]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fac8 	bl	80057e0 <RTC_ByteToBcd2>
 8005250:	4603      	mov	r3, r0
 8005252:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fac1 	bl	80057e0 <RTC_ByteToBcd2>
 800525e:	4603      	mov	r3, r0
 8005260:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005262:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	789b      	ldrb	r3, [r3, #2]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fab9 	bl	80057e0 <RTC_ByteToBcd2>
 800526e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005270:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e00e      	b.n	800529e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800528c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005292:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	22ca      	movs	r2, #202	; 0xca
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2253      	movs	r2, #83	; 0x53
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa24 	bl	80056fc <RTC_EnterInitMode>
 80052b4:	4603      	mov	r3, r0
 80052b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80052b8:	7cfb      	ldrb	r3, [r7, #19]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fa48 	bl	8005764 <RTC_ExitInitMode>
 80052d4:	4603      	mov	r3, r0
 80052d6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005316:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800531a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	0b5b      	lsrs	r3, r3, #13
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11a      	bne.n	8005390 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	78db      	ldrb	r3, [r3, #3]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fa5e 	bl	8005820 <RTC_Bcd2ToByte>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fa55 	bl	8005820 <RTC_Bcd2ToByte>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	789b      	ldrb	r3, [r3, #2]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa4c 	bl	8005820 <RTC_Bcd2ToByte>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_RTC_SetAlarm_IT+0x1a>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e127      	b.n	8005606 <HAL_RTC_SetAlarm_IT+0x26a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d137      	bne.n	800543c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d102      	bne.n	80053e0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 f9fb 	bl	80057e0 <RTC_ByteToBcd2>
 80053ea:	4603      	mov	r3, r0
 80053ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f9f4 	bl	80057e0 <RTC_ByteToBcd2>
 80053f8:	4603      	mov	r3, r0
 80053fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	789b      	ldrb	r3, [r3, #2]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f9ec 	bl	80057e0 <RTC_ByteToBcd2>
 8005408:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800540a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005414:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f9de 	bl	80057e0 <RTC_ByteToBcd2>
 8005424:	4603      	mov	r3, r0
 8005426:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005428:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005430:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005436:	4313      	orrs	r3, r2
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e023      	b.n	8005484 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800545c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005462:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	78db      	ldrb	r3, [r3, #3]
 8005468:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800546a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005472:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005474:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800547a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005480:	4313      	orrs	r3, r2
 8005482:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4313      	orrs	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	22ca      	movs	r2, #202	; 0xca
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2253      	movs	r2, #83	; 0x53
 800549e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a8:	d14a      	bne.n	8005540 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80054ca:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80054cc:	f7fc faea 	bl	8001aa4 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80054d2:	e015      	b.n	8005500 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054d4:	f7fc fae6 	bl	8001aa4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e2:	d90d      	bls.n	8005500 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2203      	movs	r2, #3
 80054f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e082      	b.n	8005606 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0e2      	beq.n	80054d4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	e049      	b.n	80055d4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800554e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005560:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005562:	f7fc fa9f 	bl	8001aa4 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005568:	e015      	b.n	8005596 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800556a:	f7fc fa9b 	bl	8001aa4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005578:	d90d      	bls.n	8005596 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	22ff      	movs	r2, #255	; 0xff
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2203      	movs	r2, #3
 8005586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e037      	b.n	8005606 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0e2      	beq.n	800556a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RTC_SetAlarm_IT+0x274>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <HAL_RTC_SetAlarm_IT+0x274>)
 80055da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RTC_SetAlarm_IT+0x274>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <HAL_RTC_SetAlarm_IT+0x274>)
 80055e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ea:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3724      	adds	r7, #36	; 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}
 800560e:	bf00      	nop
 8005610:	40010400 	.word	0x40010400

08005614 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800561c:	4b1f      	ldr	r3, [pc, #124]	; (800569c <HAL_RTC_AlarmIRQHandler+0x88>)
 800561e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005622:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d012      	beq.n	8005658 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005650:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f824 	bl	80056a0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d012      	beq.n	800568c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005684:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8e4 	bl	8005854 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40010400 	.word	0x40010400

080056a0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0d      	ldr	r2, [pc, #52]	; (80056f8 <HAL_RTC_WaitForSynchro+0x44>)
 80056c2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80056c4:	f7fc f9ee 	bl	8001aa4 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ca:	e009      	b.n	80056e0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056cc:	f7fc f9ea 	bl	8001aa4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056da:	d901      	bls.n	80056e0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e007      	b.n	80056f0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	0003ff5f 	.word	0x0003ff5f

080056fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d120      	bne.n	8005758 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f04f 32ff 	mov.w	r2, #4294967295
 800571e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005720:	f7fc f9c0 	bl	8001aa4 <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005726:	e00d      	b.n	8005744 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005728:	f7fc f9bc 	bl	8001aa4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005736:	d905      	bls.n	8005744 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <RTC_EnterInitMode+0x5c>
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d1e7      	bne.n	8005728 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <RTC_ExitInitMode+0x78>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <RTC_ExitInitMode+0x78>)
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <RTC_ExitInitMode+0x78>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff93 	bl	80056b4 <HAL_RTC_WaitForSynchro>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e017      	b.n	80057d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057a8:	f023 0320 	bic.w	r3, r3, #32
 80057ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff80 	bl	80056b4 <HAL_RTC_WaitForSynchro>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <RTC_ExitInitMode+0x78>)
 80057cc:	f043 0320 	orr.w	r3, r3, #32
 80057d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40002800 	.word	0x40002800

080057e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80057f2:	e005      	b.n	8005800 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	3b0a      	subs	r3, #10
 80057fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	2b09      	cmp	r3, #9
 8005804:	d8f6      	bhi.n	80057f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b2da      	uxtb	r2, r3
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	4313      	orrs	r3, r2
 8005812:	b2db      	uxtb	r3, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	b2da      	uxtb	r2, r3
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	4413      	add	r3, r2
 8005846:	b2db      	uxtb	r3, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e049      	b.n	800590e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fb fee0 	bl	8001654 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f000 fdd0 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x1e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e023      	b.n	800597e <HAL_TIM_IC_Start_IT+0x66>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start_IT+0x2e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e01b      	b.n	800597e <HAL_TIM_IC_Start_IT+0x66>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_IC_Start_IT+0x3e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e013      	b.n	800597e <HAL_TIM_IC_Start_IT+0x66>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d104      	bne.n	8005966 <HAL_TIM_IC_Start_IT+0x4e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e00b      	b.n	800597e <HAL_TIM_IC_Start_IT+0x66>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b10      	cmp	r3, #16
 800596a:	d104      	bne.n	8005976 <HAL_TIM_IC_Start_IT+0x5e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e003      	b.n	800597e <HAL_TIM_IC_Start_IT+0x66>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800597c:	b2db      	uxtb	r3, r3
 800597e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_TIM_IC_Start_IT+0x78>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e013      	b.n	80059b8 <HAL_TIM_IC_Start_IT+0xa0>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d104      	bne.n	80059a0 <HAL_TIM_IC_Start_IT+0x88>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e00b      	b.n	80059b8 <HAL_TIM_IC_Start_IT+0xa0>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d104      	bne.n	80059b0 <HAL_TIM_IC_Start_IT+0x98>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	e003      	b.n	80059b8 <HAL_TIM_IC_Start_IT+0xa0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d102      	bne.n	80059c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c0:	7b7b      	ldrb	r3, [r7, #13]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d001      	beq.n	80059ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0c9      	b.n	8005b5e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Start_IT+0xc2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d8:	e023      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x10a>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d104      	bne.n	80059ea <HAL_TIM_IC_Start_IT+0xd2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e8:	e01b      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x10a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_IC_Start_IT+0xe2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x10a>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_IC_Start_IT+0xf2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x10a>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_IC_Start_IT+0x102>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x10a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0x11a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	e013      	b.n	8005a5a <HAL_TIM_IC_Start_IT+0x142>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_IC_Start_IT+0x12a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a40:	e00b      	b.n	8005a5a <HAL_TIM_IC_Start_IT+0x142>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_IC_Start_IT+0x13a>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a50:	e003      	b.n	8005a5a <HAL_TIM_IC_Start_IT+0x142>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d841      	bhi.n	8005ae4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_TIM_IC_Start_IT+0x150>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005ae5 	.word	0x08005ae5
 8005a70:	08005ae5 	.word	0x08005ae5
 8005a74:	08005ae5 	.word	0x08005ae5
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005ae5 	.word	0x08005ae5
 8005a84:	08005ae5 	.word	0x08005ae5
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ae5 	.word	0x08005ae5
 8005a90:	08005ae5 	.word	0x08005ae5
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005ad3 	.word	0x08005ad3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0202 	orr.w	r2, r2, #2
 8005aaa:	60da      	str	r2, [r3, #12]
      break;
 8005aac:	e01d      	b.n	8005aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0204 	orr.w	r2, r2, #4
 8005abc:	60da      	str	r2, [r3, #12]
      break;
 8005abe:	e014      	b.n	8005aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	60da      	str	r2, [r3, #12]
      break;
 8005ad0:	e00b      	b.n	8005aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0210 	orr.w	r2, r2, #16
 8005ae0:	60da      	str	r2, [r3, #12]
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d135      	bne.n	8005b5c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fe17 	bl	800672c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_IC_Start_IT+0x250>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_IC_Start_IT+0x204>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_IC_Start_IT+0x204>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <HAL_TIM_IC_Start_IT+0x254>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d115      	bne.n	8005b48 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <HAL_TIM_IC_Start_IT+0x258>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d015      	beq.n	8005b5a <HAL_TIM_IC_Start_IT+0x242>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d011      	beq.n	8005b5a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	e008      	b.n	8005b5a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	00010007 	.word	0x00010007

08005b74 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_IC_Start_DMA+0x22>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	e023      	b.n	8005bde <HAL_TIM_IC_Start_DMA+0x6a>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_IC_Start_DMA+0x32>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e01b      	b.n	8005bde <HAL_TIM_IC_Start_DMA+0x6a>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_IC_Start_DMA+0x42>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e013      	b.n	8005bde <HAL_TIM_IC_Start_DMA+0x6a>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_IC_Start_DMA+0x52>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	e00b      	b.n	8005bde <HAL_TIM_IC_Start_DMA+0x6a>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_IC_Start_DMA+0x62>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	e003      	b.n	8005bde <HAL_TIM_IC_Start_DMA+0x6a>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <HAL_TIM_IC_Start_DMA+0x7c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e013      	b.n	8005c18 <HAL_TIM_IC_Start_DMA+0xa4>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d104      	bne.n	8005c00 <HAL_TIM_IC_Start_DMA+0x8c>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e00b      	b.n	8005c18 <HAL_TIM_IC_Start_DMA+0xa4>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d104      	bne.n	8005c10 <HAL_TIM_IC_Start_DMA+0x9c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e003      	b.n	8005c18 <HAL_TIM_IC_Start_DMA+0xa4>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005c1a:	7dbb      	ldrb	r3, [r7, #22]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d002      	beq.n	8005c26 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005c20:	7d7b      	ldrb	r3, [r7, #21]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	e143      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005c2a:	7dbb      	ldrb	r3, [r7, #22]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d153      	bne.n	8005cd8 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005c30:	7d7b      	ldrb	r3, [r7, #21]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d150      	bne.n	8005cd8 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_TIM_IC_Start_DMA+0xce>
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e135      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_IC_Start_DMA+0xe2>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	e023      	b.n	8005c9e <HAL_TIM_IC_Start_DMA+0x12a>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_IC_Start_DMA+0xf2>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c64:	e01b      	b.n	8005c9e <HAL_TIM_IC_Start_DMA+0x12a>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_IC_Start_DMA+0x102>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	e013      	b.n	8005c9e <HAL_TIM_IC_Start_DMA+0x12a>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_IC_Start_DMA+0x112>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c84:	e00b      	b.n	8005c9e <HAL_TIM_IC_Start_DMA+0x12a>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_IC_Start_DMA+0x122>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c94:	e003      	b.n	8005c9e <HAL_TIM_IC_Start_DMA+0x12a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_IC_Start_DMA+0x13a>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8005cac:	e016      	b.n	8005cdc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_IC_Start_DMA+0x14a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8005cbc:	e00e      	b.n	8005cdc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_IC_Start_DMA+0x15a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8005ccc:	e006      	b.n	8005cdc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 8005cd6:	e001      	b.n	8005cdc <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0ea      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fd21 	bl	800672c <TIM_CCxChannelCmd>

  switch (Channel)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	f200 80ad 	bhi.w	8005e4c <HAL_TIM_IC_Start_DMA+0x2d8>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <HAL_TIM_IC_Start_DMA+0x184>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005e4d 	.word	0x08005e4d
 8005d00:	08005e4d 	.word	0x08005e4d
 8005d04:	08005e4d 	.word	0x08005e4d
 8005d08:	08005d75 	.word	0x08005d75
 8005d0c:	08005e4d 	.word	0x08005e4d
 8005d10:	08005e4d 	.word	0x08005e4d
 8005d14:	08005e4d 	.word	0x08005e4d
 8005d18:	08005dbd 	.word	0x08005dbd
 8005d1c:	08005e4d 	.word	0x08005e4d
 8005d20:	08005e4d 	.word	0x08005e4d
 8005d24:	08005e4d 	.word	0x08005e4d
 8005d28:	08005e05 	.word	0x08005e05
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	4a62      	ldr	r2, [pc, #392]	; (8005ebc <HAL_TIM_IC_Start_DMA+0x348>)
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	4a61      	ldr	r2, [pc, #388]	; (8005ec0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_TIM_IC_Start_DMA+0x350>)
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3334      	adds	r3, #52	; 0x34
 8005d4e:	4619      	mov	r1, r3
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	f7fd fc97 	bl	8003686 <HAL_DMA_Start_IT>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0a7      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	60da      	str	r2, [r3, #12]
      break;
 8005d72:	e06e      	b.n	8005e52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	4a50      	ldr	r2, [pc, #320]	; (8005ebc <HAL_TIM_IC_Start_DMA+0x348>)
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	4a4f      	ldr	r2, [pc, #316]	; (8005ec0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	4a4e      	ldr	r2, [pc, #312]	; (8005ec4 <HAL_TIM_IC_Start_DMA+0x350>)
 8005d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3338      	adds	r3, #56	; 0x38
 8005d96:	4619      	mov	r1, r3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	887b      	ldrh	r3, [r7, #2]
 8005d9c:	f7fd fc73 	bl	8003686 <HAL_DMA_Start_IT>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e083      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db8:	60da      	str	r2, [r3, #12]
      break;
 8005dba:	e04a      	b.n	8005e52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <HAL_TIM_IC_Start_DMA+0x348>)
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a3d      	ldr	r2, [pc, #244]	; (8005ec0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <HAL_TIM_IC_Start_DMA+0x350>)
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	333c      	adds	r3, #60	; 0x3c
 8005dde:	4619      	mov	r1, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	887b      	ldrh	r3, [r7, #2]
 8005de4:	f7fd fc4f 	bl	8003686 <HAL_DMA_Start_IT>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e05f      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e00:	60da      	str	r2, [r3, #12]
      break;
 8005e02:	e026      	b.n	8005e52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <HAL_TIM_IC_Start_DMA+0x348>)
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <HAL_TIM_IC_Start_DMA+0x350>)
 8005e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3340      	adds	r3, #64	; 0x40
 8005e26:	4619      	mov	r1, r3
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	f7fd fc2b 	bl	8003686 <HAL_DMA_Start_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e03b      	b.n	8005eb2 <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e48:	60da      	str	r2, [r3, #12]
      break;
 8005e4a:	e002      	b.n	8005e52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e50:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <HAL_TIM_IC_Start_DMA+0x354>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_IC_Start_DMA+0x2fc>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_IC_Start_DMA+0x2fc>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_TIM_IC_Start_DMA+0x358>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d115      	bne.n	8005e9c <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <HAL_TIM_IC_Start_DMA+0x35c>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d015      	beq.n	8005eae <HAL_TIM_IC_Start_DMA+0x33a>
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d011      	beq.n	8005eae <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0201 	orr.w	r2, r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	e008      	b.n	8005eae <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e000      	b.n	8005eb0 <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	0800631b 	.word	0x0800631b
 8005ec0:	080063e3 	.word	0x080063e3
 8005ec4:	08006289 	.word	0x08006289
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	00010007 	.word	0x00010007

08005ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0202 	mvn.w	r2, #2
 8005f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fa fea0 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f97c 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f98d 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d020      	beq.n	8005f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01b      	beq.n	8005f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0204 	mvn.w	r2, #4
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fa fe7a 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f956 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f967 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d020      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0208 	mvn.w	r2, #8
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fa fe54 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f930 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f941 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d020      	beq.n	800601c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0210 	mvn.w	r2, #16
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fa fe2e 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f90a 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f91b 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0201 	mvn.w	r2, #1
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8e8 	bl	8006210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00c      	beq.n	8006064 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800605c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fbfa 	bl	8006858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fbf2 	bl	800686c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8da 	bl	8006260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0220 	mvn.w	r2, #32
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fbba 	bl	8006844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e088      	b.n	8006208 <HAL_TIM_IC_ConfigChannel+0x130>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006114:	f000 f9fe 	bl	8006514 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 020c 	bic.w	r2, r2, #12
 8006126:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	e060      	b.n	80061fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b04      	cmp	r3, #4
 8006140:	d11c      	bne.n	800617c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006152:	f000 fa35 	bl	80065c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006164:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6999      	ldr	r1, [r3, #24]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	021a      	lsls	r2, r3, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	619a      	str	r2, [r3, #24]
 800617a:	e040      	b.n	80061fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b08      	cmp	r3, #8
 8006180:	d11b      	bne.n	80061ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006192:	f000 fa52 	bl	800663a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 020c 	bic.w	r2, r2, #12
 80061a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69d9      	ldr	r1, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	61da      	str	r2, [r3, #28]
 80061b8:	e021      	b.n	80061fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b0c      	cmp	r3, #12
 80061be:	d11c      	bne.n	80061fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061d0:	f000 fa6f 	bl	80066b2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69da      	ldr	r2, [r3, #28]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69d9      	ldr	r1, [r3, #28]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	61da      	str	r2, [r3, #28]
 80061f8:	e001      	b.n	80061fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d107      	bne.n	80062b0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ae:	e02a      	b.n	8006306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d107      	bne.n	80062ca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c8:	e01d      	b.n	8006306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d107      	bne.n	80062e4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2204      	movs	r2, #4
 80062d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e2:	e010      	b.n	8006306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d107      	bne.n	80062fe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2208      	movs	r2, #8
 80062f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062fc:	e003      	b.n	8006306 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ffb4 	bl	8006274 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d10f      	bne.n	8006352 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d146      	bne.n	80063ce <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006350:	e03d      	b.n	80063ce <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d10f      	bne.n	800637c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2202      	movs	r2, #2
 8006360:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d131      	bne.n	80063ce <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800637a:	e028      	b.n	80063ce <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d10f      	bne.n	80063a6 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2204      	movs	r2, #4
 800638a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d11c      	bne.n	80063ce <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063a4:	e013      	b.n	80063ce <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d10e      	bne.n	80063ce <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2208      	movs	r2, #8
 80063b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7fa fc48 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	771a      	strb	r2, [r3, #28]
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d103      	bne.n	8006402 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	771a      	strb	r2, [r3, #28]
 8006400:	e019      	b.n	8006436 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d103      	bne.n	8006414 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2202      	movs	r2, #2
 8006410:	771a      	strb	r2, [r3, #28]
 8006412:	e010      	b.n	8006436 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d103      	bne.n	8006426 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2204      	movs	r2, #4
 8006422:	771a      	strb	r2, [r3, #28]
 8006424:	e007      	b.n	8006436 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d102      	bne.n	8006436 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2208      	movs	r2, #8
 8006434:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff fefe 	bl	8006238 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	771a      	strb	r2, [r3, #28]
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <TIM_Base_SetConfig+0xbc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0x20>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646a:	d108      	bne.n	800647e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a21      	ldr	r2, [pc, #132]	; (8006508 <TIM_Base_SetConfig+0xbc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_Base_SetConfig+0x52>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d007      	beq.n	800649e <TIM_Base_SetConfig+0x52>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1e      	ldr	r2, [pc, #120]	; (800650c <TIM_Base_SetConfig+0xc0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_Base_SetConfig+0x52>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <TIM_Base_SetConfig+0xc4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d108      	bne.n	80064b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a0c      	ldr	r2, [pc, #48]	; (8006508 <TIM_Base_SetConfig+0xbc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_Base_SetConfig+0xa0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0b      	ldr	r2, [pc, #44]	; (800650c <TIM_Base_SetConfig+0xc0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0xa0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <TIM_Base_SetConfig+0xc4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d103      	bne.n	80064f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	615a      	str	r2, [r3, #20]
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40014000 	.word	0x40014000
 8006510:	40014400 	.word	0x40014400

08006514 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	f023 0201 	bic.w	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <TIM_TI1_SetConfig+0xa4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <TIM_TI1_SetConfig+0x3e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d003      	beq.n	8006552 <TIM_TI1_SetConfig+0x3e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <TIM_TI1_SetConfig+0xa8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <TIM_TI1_SetConfig+0x42>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <TIM_TI1_SetConfig+0x44>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e003      	b.n	8006576 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800657c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	b2db      	uxtb	r3, r3
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f023 030a 	bic.w	r3, r3, #10
 8006590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 030a 	and.w	r3, r3, #10
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40014000 	.word	0x40014000

080065c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f023 0210 	bic.w	r2, r3, #16
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	031b      	lsls	r3, r3, #12
 8006604:	b29b      	uxth	r3, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006612:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800663a:	b480      	push	{r7}
 800663c:	b087      	sub	sp, #28
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006676:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	b2db      	uxtb	r3, r3
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800668a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b087      	sub	sp, #28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006704:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	031b      	lsls	r3, r3, #12
 800670a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	621a      	str	r2, [r3, #32]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2201      	movs	r2, #1
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	43db      	mvns	r3, r3
 800674e:	401a      	ands	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	fa01 f303 	lsl.w	r3, r1, r3
 8006764:	431a      	orrs	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e04f      	b.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a21      	ldr	r2, [pc, #132]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a14      	ldr	r2, [pc, #80]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d004      	beq.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d10c      	bne.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800680a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4313      	orrs	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e040      	b.n	8006914 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa ff1e 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2224      	movs	r2, #36	; 0x24
 80068ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 feb2 	bl	8007630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc83 	bl	80071d8 <UART_SetConfig>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e01b      	b.n	8006914 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 ff31 	bl	8007774 <UART_CheckIdleState>
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	; 0x28
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	4613      	mov	r3, r2
 800692a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006930:	2b20      	cmp	r3, #32
 8006932:	d178      	bne.n	8006a26 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_UART_Transmit+0x24>
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e071      	b.n	8006a28 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2221      	movs	r2, #33	; 0x21
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006952:	f7fb f8a7 	bl	8001aa4 <HAL_GetTick>
 8006956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006970:	d108      	bne.n	8006984 <HAL_UART_Transmit+0x68>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e003      	b.n	800698c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800698c:	e030      	b.n	80069f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2200      	movs	r2, #0
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 ff93 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e03c      	b.n	8006a28 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c0:	b292      	uxth	r2, r2
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	3302      	adds	r3, #2
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e008      	b.n	80069de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	b292      	uxth	r2, r2
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	3301      	adds	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1c8      	bne.n	800698e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 ff5c 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e005      	b.n	8006a28 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	f040 80b6 	bne.w	8006bb8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Receive+0x28>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0ae      	b.n	8006bba <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2222      	movs	r2, #34	; 0x22
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a72:	f7fb f817 	bl	8001aa4 <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a90:	d10e      	bne.n	8006ab0 <HAL_UART_Receive+0x80>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <HAL_UART_Receive+0x76>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa4:	e02d      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aae:	e028      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <HAL_UART_Receive+0xa4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <HAL_UART_Receive+0x9a>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	22ff      	movs	r2, #255	; 0xff
 8006ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac8:	e01b      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	227f      	movs	r2, #127	; 0x7f
 8006ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad2:	e016      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006adc:	d10d      	bne.n	8006afa <HAL_UART_Receive+0xca>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_UART_Receive+0xc0>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	227f      	movs	r2, #127	; 0x7f
 8006aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aee:	e008      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	223f      	movs	r2, #63	; 0x3f
 8006af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006af8:	e003      	b.n	8006b02 <HAL_UART_Receive+0xd2>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b08:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d108      	bne.n	8006b26 <HAL_UART_Receive+0xf6>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	e003      	b.n	8006b2e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b2e:	e037      	b.n	8006ba0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2120      	movs	r1, #32
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fec2 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e033      	b.n	8006bba <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10c      	bne.n	8006b72 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	8a7b      	ldrh	r3, [r7, #18]
 8006b62:	4013      	ands	r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e00d      	b.n	8006b8e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	8a7b      	ldrh	r3, [r7, #18]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	4013      	ands	r3, r2
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1c1      	bne.n	8006b30 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e000      	b.n	8006bba <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006bb8:	2302      	movs	r3, #2
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b0ba      	sub	sp, #232	; 0xe8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d115      	bne.n	8006c2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00f      	beq.n	8006c2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 82ae 	beq.w	800717e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
      }
      return;
 8006c2a:	e2a8      	b.n	800717e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8117 	beq.w	8006e64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c46:	4b85      	ldr	r3, [pc, #532]	; (8006e5c <HAL_UART_IRQHandler+0x298>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 810a 	beq.w	8006e64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d011      	beq.n	8006c80 <HAL_UART_IRQHandler+0xbc>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c76:	f043 0201 	orr.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d011      	beq.n	8006cb0 <HAL_UART_IRQHandler+0xec>
 8006c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca6:	f043 0204 	orr.w	r2, r3, #4
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d011      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x11c>
 8006cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2204      	movs	r2, #4
 8006cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d017      	beq.n	8006d1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d12:	f043 0208 	orr.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d012      	beq.n	8006d4e <HAL_UART_IRQHandler+0x18a>
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d44:	f043 0220 	orr.w	r2, r3, #32
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8214 	beq.w	8007182 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d005      	beq.n	8006da6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04f      	beq.n	8006e46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fdf3 	bl	8007992 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d141      	bne.n	8006e3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006de6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d9      	bne.n	8006dba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e12:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <HAL_UART_IRQHandler+0x29c>)
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fc fcd1 	bl	80037c2 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	e00f      	b.n	8006e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9b8 	bl	80071ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	e00b      	b.n	8006e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9b4 	bl	80071ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	e007      	b.n	8006e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f9b0 	bl	80071ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e54:	e195      	b.n	8007182 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	bf00      	nop
    return;
 8006e58:	e193      	b.n	8007182 <HAL_UART_IRQHandler+0x5be>
 8006e5a:	bf00      	nop
 8006e5c:	04000120 	.word	0x04000120
 8006e60:	08007a5b 	.word	0x08007a5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	f040 814e 	bne.w	800710a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8147 	beq.w	800710a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8140 	beq.w	800710a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	f040 80b8 	bne.w	8007012 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8167 	beq.w	8007186 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	f080 815f 	bcs.w	8007186 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 8086 	bne.w	8006ff0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1da      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e1      	bne.n	8006f2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc0:	f023 0310 	bic.w	r3, r3, #16
 8006fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e4      	bne.n	8006fb0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc fbab 	bl	8003746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007002:	b29b      	uxth	r3, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f8d8 	bl	80071c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007010:	e0b9      	b.n	8007186 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800701e:	b29b      	uxth	r3, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80ab 	beq.w	800718a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a6 	beq.w	800718a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007060:	647b      	str	r3, [r7, #68]	; 0x44
 8007062:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e4      	bne.n	800703e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	623b      	str	r3, [r7, #32]
   return(result);
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007098:	633a      	str	r2, [r7, #48]	; 0x30
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800709e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e3      	bne.n	8007074 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 0310 	bic.w	r3, r3, #16
 80070d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	69b9      	ldr	r1, [r7, #24]
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	617b      	str	r3, [r7, #20]
   return(result);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e4      	bne.n	80070c0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f85c 	bl	80071c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007108:	e03f      	b.n	800718a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <HAL_UART_IRQHandler+0x570>
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800712a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fcd4 	bl	8007ada <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007132:	e02d      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01c      	beq.n	800718e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    }
    return;
 800715c:	e017      	b.n	800718e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d012      	beq.n	8007190 <HAL_UART_IRQHandler+0x5cc>
 800716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc85 	bl	8007a86 <UART_EndTransmit_IT>
    return;
 800717c:	e008      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
      return;
 800717e:	bf00      	nop
 8007180:	e006      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007182:	bf00      	nop
 8007184:	e004      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007186:	bf00      	nop
 8007188:	e002      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
      return;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_UART_IRQHandler+0x5cc>
    return;
 800718e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007190:	37e8      	adds	r7, #232	; 0xe8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop

08007198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071dc:	b08a      	sub	sp, #40	; 0x28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4bb4      	ldr	r3, [pc, #720]	; (80074d8 <UART_SetConfig+0x300>)
 8007208:	4013      	ands	r3, r2
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007210:	430b      	orrs	r3, r1
 8007212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4aa9      	ldr	r2, [pc, #676]	; (80074dc <UART_SetConfig+0x304>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007240:	4313      	orrs	r3, r2
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007254:	430a      	orrs	r2, r1
 8007256:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4aa0      	ldr	r2, [pc, #640]	; (80074e0 <UART_SetConfig+0x308>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d126      	bne.n	80072b0 <UART_SetConfig+0xd8>
 8007262:	4ba0      	ldr	r3, [pc, #640]	; (80074e4 <UART_SetConfig+0x30c>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d81b      	bhi.n	80072a8 <UART_SetConfig+0xd0>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0xa0>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007289 	.word	0x08007289
 800727c:	08007299 	.word	0x08007299
 8007280:	08007291 	.word	0x08007291
 8007284:	080072a1 	.word	0x080072a1
 8007288:	2301      	movs	r3, #1
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728e:	e080      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007290:	2302      	movs	r3, #2
 8007292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007296:	e07c      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800729e:	e078      	b.n	8007392 <UART_SetConfig+0x1ba>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a6:	e074      	b.n	8007392 <UART_SetConfig+0x1ba>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ae:	e070      	b.n	8007392 <UART_SetConfig+0x1ba>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a8c      	ldr	r2, [pc, #560]	; (80074e8 <UART_SetConfig+0x310>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d138      	bne.n	800732c <UART_SetConfig+0x154>
 80072ba:	4b8a      	ldr	r3, [pc, #552]	; (80074e4 <UART_SetConfig+0x30c>)
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c0:	f003 030c 	and.w	r3, r3, #12
 80072c4:	2b0c      	cmp	r3, #12
 80072c6:	d82d      	bhi.n	8007324 <UART_SetConfig+0x14c>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0xf8>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	08007305 	.word	0x08007305
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007325 	.word	0x08007325
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007315 	.word	0x08007315
 80072e4:	08007325 	.word	0x08007325
 80072e8:	08007325 	.word	0x08007325
 80072ec:	08007325 	.word	0x08007325
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007325 	.word	0x08007325
 80072fc:	08007325 	.word	0x08007325
 8007300:	0800731d 	.word	0x0800731d
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730a:	e042      	b.n	8007392 <UART_SetConfig+0x1ba>
 800730c:	2302      	movs	r3, #2
 800730e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007312:	e03e      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007314:	2304      	movs	r3, #4
 8007316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731a:	e03a      	b.n	8007392 <UART_SetConfig+0x1ba>
 800731c:	2308      	movs	r3, #8
 800731e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007322:	e036      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007324:	2310      	movs	r3, #16
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732a:	e032      	b.n	8007392 <UART_SetConfig+0x1ba>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a6a      	ldr	r2, [pc, #424]	; (80074dc <UART_SetConfig+0x304>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d12a      	bne.n	800738c <UART_SetConfig+0x1b4>
 8007336:	4b6b      	ldr	r3, [pc, #428]	; (80074e4 <UART_SetConfig+0x30c>)
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007344:	d01a      	beq.n	800737c <UART_SetConfig+0x1a4>
 8007346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800734a:	d81b      	bhi.n	8007384 <UART_SetConfig+0x1ac>
 800734c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007350:	d00c      	beq.n	800736c <UART_SetConfig+0x194>
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007356:	d815      	bhi.n	8007384 <UART_SetConfig+0x1ac>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <UART_SetConfig+0x18c>
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d008      	beq.n	8007374 <UART_SetConfig+0x19c>
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x1ac>
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736a:	e012      	b.n	8007392 <UART_SetConfig+0x1ba>
 800736c:	2302      	movs	r3, #2
 800736e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007372:	e00e      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737a:	e00a      	b.n	8007392 <UART_SetConfig+0x1ba>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007382:	e006      	b.n	8007392 <UART_SetConfig+0x1ba>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738a:	e002      	b.n	8007392 <UART_SetConfig+0x1ba>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a51      	ldr	r2, [pc, #324]	; (80074dc <UART_SetConfig+0x304>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d17a      	bne.n	8007492 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800739c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d824      	bhi.n	80073ee <UART_SetConfig+0x216>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <UART_SetConfig+0x1d4>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073ef 	.word	0x080073ef
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073ef 	.word	0x080073ef
 80073bc:	080073df 	.word	0x080073df
 80073c0:	080073ef 	.word	0x080073ef
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073ef 	.word	0x080073ef
 80073cc:	080073e7 	.word	0x080073e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fd fa0a 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80073d4:	61f8      	str	r0, [r7, #28]
        break;
 80073d6:	e010      	b.n	80073fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d8:	4b44      	ldr	r3, [pc, #272]	; (80074ec <UART_SetConfig+0x314>)
 80073da:	61fb      	str	r3, [r7, #28]
        break;
 80073dc:	e00d      	b.n	80073fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073de:	f7fd f96b 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80073e2:	61f8      	str	r0, [r7, #28]
        break;
 80073e4:	e009      	b.n	80073fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ea:	61fb      	str	r3, [r7, #28]
        break;
 80073ec:	e005      	b.n	80073fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8107 	beq.w	8007610 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4413      	add	r3, r2
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	429a      	cmp	r2, r3
 8007410:	d305      	bcc.n	800741e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	429a      	cmp	r2, r3
 800741c:	d903      	bls.n	8007426 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007424:	e0f4      	b.n	8007610 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	2200      	movs	r2, #0
 800742a:	461c      	mov	r4, r3
 800742c:	4615      	mov	r5, r2
 800742e:	f04f 0200 	mov.w	r2, #0
 8007432:	f04f 0300 	mov.w	r3, #0
 8007436:	022b      	lsls	r3, r5, #8
 8007438:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800743c:	0222      	lsls	r2, r4, #8
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	6849      	ldr	r1, [r1, #4]
 8007442:	0849      	lsrs	r1, r1, #1
 8007444:	2000      	movs	r0, #0
 8007446:	4688      	mov	r8, r1
 8007448:	4681      	mov	r9, r0
 800744a:	eb12 0a08 	adds.w	sl, r2, r8
 800744e:	eb43 0b09 	adc.w	fp, r3, r9
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f8 ff14 	bl	8000290 <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4613      	mov	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007476:	d308      	bcc.n	800748a <UART_SetConfig+0x2b2>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800747e:	d204      	bcs.n	800748a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e0c2      	b.n	8007610 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007490:	e0be      	b.n	8007610 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749a:	d16a      	bne.n	8007572 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800749c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d834      	bhi.n	800750e <UART_SetConfig+0x336>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x2d4>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074f1 	.word	0x080074f1
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	0800750f 	.word	0x0800750f
 80074bc:	080074ff 	.word	0x080074ff
 80074c0:	0800750f 	.word	0x0800750f
 80074c4:	0800750f 	.word	0x0800750f
 80074c8:	0800750f 	.word	0x0800750f
 80074cc:	08007507 	.word	0x08007507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fd f98a 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80074d4:	61f8      	str	r0, [r7, #28]
        break;
 80074d6:	e020      	b.n	800751a <UART_SetConfig+0x342>
 80074d8:	efff69f3 	.word	0xefff69f3
 80074dc:	40008000 	.word	0x40008000
 80074e0:	40013800 	.word	0x40013800
 80074e4:	40021000 	.word	0x40021000
 80074e8:	40004400 	.word	0x40004400
 80074ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f0:	f7fd f990 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80074f4:	61f8      	str	r0, [r7, #28]
        break;
 80074f6:	e010      	b.n	800751a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f8:	4b4c      	ldr	r3, [pc, #304]	; (800762c <UART_SetConfig+0x454>)
 80074fa:	61fb      	str	r3, [r7, #28]
        break;
 80074fc:	e00d      	b.n	800751a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fe:	f7fd f8db 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8007502:	61f8      	str	r0, [r7, #28]
        break;
 8007504:	e009      	b.n	800751a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750a:	61fb      	str	r3, [r7, #28]
        break;
 800750c:	e005      	b.n	800751a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d077      	beq.n	8007610 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	005a      	lsls	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	441a      	add	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d916      	bls.n	800756a <UART_SetConfig+0x392>
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007542:	d212      	bcs.n	800756a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f023 030f 	bic.w	r3, r3, #15
 800754c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	b29b      	uxth	r3, r3
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	b29a      	uxth	r2, r3
 800755a:	8afb      	ldrh	r3, [r7, #22]
 800755c:	4313      	orrs	r3, r2
 800755e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	8afa      	ldrh	r2, [r7, #22]
 8007566:	60da      	str	r2, [r3, #12]
 8007568:	e052      	b.n	8007610 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007570:	e04e      	b.n	8007610 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007576:	2b08      	cmp	r3, #8
 8007578:	d827      	bhi.n	80075ca <UART_SetConfig+0x3f2>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x3a8>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075ad 	.word	0x080075ad
 8007588:	080075b5 	.word	0x080075b5
 800758c:	080075cb 	.word	0x080075cb
 8007590:	080075bb 	.word	0x080075bb
 8007594:	080075cb 	.word	0x080075cb
 8007598:	080075cb 	.word	0x080075cb
 800759c:	080075cb 	.word	0x080075cb
 80075a0:	080075c3 	.word	0x080075c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fd f920 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80075a8:	61f8      	str	r0, [r7, #28]
        break;
 80075aa:	e014      	b.n	80075d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ac:	f7fd f932 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80075b0:	61f8      	str	r0, [r7, #28]
        break;
 80075b2:	e010      	b.n	80075d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b4:	4b1d      	ldr	r3, [pc, #116]	; (800762c <UART_SetConfig+0x454>)
 80075b6:	61fb      	str	r3, [r7, #28]
        break;
 80075b8:	e00d      	b.n	80075d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ba:	f7fd f87d 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80075be:	61f8      	str	r0, [r7, #28]
        break;
 80075c0:	e009      	b.n	80075d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61fb      	str	r3, [r7, #28]
        break;
 80075c8:	e005      	b.n	80075d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075d4:	bf00      	nop
    }

    if (pclk != 0U)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d019      	beq.n	8007610 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	085a      	lsrs	r2, r3, #1
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	441a      	add	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d909      	bls.n	800760a <UART_SetConfig+0x432>
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d205      	bcs.n	800760a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60da      	str	r2, [r3, #12]
 8007608:	e002      	b.n	8007610 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800761c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007620:	4618      	mov	r0, r3
 8007622:	3728      	adds	r7, #40	; 0x28
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800762a:	bf00      	nop
 800762c:	00f42400 	.word	0x00f42400

08007630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01a      	beq.n	8007746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772e:	d10a      	bne.n	8007746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
  }
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b098      	sub	sp, #96	; 0x60
 8007778:	af02      	add	r7, sp, #8
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007784:	f7fa f98e 	bl	8001aa4 <HAL_GetTick>
 8007788:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b08      	cmp	r3, #8
 8007796:	d12e      	bne.n	80077f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a0:	2200      	movs	r2, #0
 80077a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f88c 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d021      	beq.n	80077f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c6:	653b      	str	r3, [r7, #80]	; 0x50
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d0:	647b      	str	r3, [r7, #68]	; 0x44
 80077d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e062      	b.n	80078bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d149      	bne.n	8007898 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780c:	2200      	movs	r2, #0
 800780e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f856 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d03c      	beq.n	8007898 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	623b      	str	r3, [r7, #32]
   return(result);
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	633b      	str	r3, [r7, #48]	; 0x30
 800783e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007870:	61fa      	str	r2, [r7, #28]
 8007872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	69b9      	ldr	r1, [r7, #24]
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	617b      	str	r3, [r7, #20]
   return(result);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e011      	b.n	80078bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3758      	adds	r7, #88	; 0x58
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d4:	e049      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d045      	beq.n	800796a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fa f8e1 	bl	8001aa4 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e048      	b.n	800798a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d031      	beq.n	800796a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d110      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2208      	movs	r2, #8
 800791a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f838 	bl	8007992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2208      	movs	r2, #8
 8007926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e029      	b.n	800798a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007944:	d111      	bne.n	800796a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800794e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f81e 	bl	8007992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e00f      	b.n	800798a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4013      	ands	r3, r2
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	429a      	cmp	r2, r3
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2300      	movne	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	429a      	cmp	r2, r3
 8007986:	d0a6      	beq.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007992:	b480      	push	{r7}
 8007994:	b095      	sub	sp, #84	; 0x54
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	461a      	mov	r2, r3
 80079b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b8:	643b      	str	r3, [r7, #64]	; 0x40
 80079ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e6      	bne.n	800799a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	61fb      	str	r3, [r7, #28]
   return(result);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e5      	bne.n	80079cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d118      	bne.n	8007a3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f023 0310 	bic.w	r3, r3, #16
 8007a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	613b      	str	r3, [r7, #16]
   return(result);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e6      	bne.n	8007a08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a4e:	bf00      	nop
 8007a50:	3754      	adds	r7, #84	; 0x54
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fb97 	bl	80071ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b088      	sub	sp, #32
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6979      	ldr	r1, [r7, #20]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fb63 	bl	8007198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad2:	bf00      	nop
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <atoi>:
 8007aee:	220a      	movs	r2, #10
 8007af0:	2100      	movs	r1, #0
 8007af2:	f000 b883 	b.w	8007bfc <strtol>
	...

08007af8 <_strtol_l.constprop.0>:
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afe:	d001      	beq.n	8007b04 <_strtol_l.constprop.0+0xc>
 8007b00:	2b24      	cmp	r3, #36	; 0x24
 8007b02:	d906      	bls.n	8007b12 <_strtol_l.constprop.0+0x1a>
 8007b04:	f000 fb04 	bl	8008110 <__errno>
 8007b08:	2316      	movs	r3, #22
 8007b0a:	6003      	str	r3, [r0, #0]
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007bf8 <_strtol_l.constprop.0+0x100>
 8007b16:	460d      	mov	r5, r1
 8007b18:	462e      	mov	r6, r5
 8007b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b1e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007b22:	f017 0708 	ands.w	r7, r7, #8
 8007b26:	d1f7      	bne.n	8007b18 <_strtol_l.constprop.0+0x20>
 8007b28:	2c2d      	cmp	r4, #45	; 0x2d
 8007b2a:	d132      	bne.n	8007b92 <_strtol_l.constprop.0+0x9a>
 8007b2c:	782c      	ldrb	r4, [r5, #0]
 8007b2e:	2701      	movs	r7, #1
 8007b30:	1cb5      	adds	r5, r6, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d05b      	beq.n	8007bee <_strtol_l.constprop.0+0xf6>
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d109      	bne.n	8007b4e <_strtol_l.constprop.0+0x56>
 8007b3a:	2c30      	cmp	r4, #48	; 0x30
 8007b3c:	d107      	bne.n	8007b4e <_strtol_l.constprop.0+0x56>
 8007b3e:	782c      	ldrb	r4, [r5, #0]
 8007b40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b44:	2c58      	cmp	r4, #88	; 0x58
 8007b46:	d14d      	bne.n	8007be4 <_strtol_l.constprop.0+0xec>
 8007b48:	786c      	ldrb	r4, [r5, #1]
 8007b4a:	2310      	movs	r3, #16
 8007b4c:	3502      	adds	r5, #2
 8007b4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b56:	f04f 0e00 	mov.w	lr, #0
 8007b5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b5e:	4676      	mov	r6, lr
 8007b60:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b68:	f1bc 0f09 	cmp.w	ip, #9
 8007b6c:	d816      	bhi.n	8007b9c <_strtol_l.constprop.0+0xa4>
 8007b6e:	4664      	mov	r4, ip
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	dd24      	ble.n	8007bbe <_strtol_l.constprop.0+0xc6>
 8007b74:	f1be 3fff 	cmp.w	lr, #4294967295
 8007b78:	d008      	beq.n	8007b8c <_strtol_l.constprop.0+0x94>
 8007b7a:	45b1      	cmp	r9, r6
 8007b7c:	d31c      	bcc.n	8007bb8 <_strtol_l.constprop.0+0xc0>
 8007b7e:	d101      	bne.n	8007b84 <_strtol_l.constprop.0+0x8c>
 8007b80:	45a2      	cmp	sl, r4
 8007b82:	db19      	blt.n	8007bb8 <_strtol_l.constprop.0+0xc0>
 8007b84:	fb06 4603 	mla	r6, r6, r3, r4
 8007b88:	f04f 0e01 	mov.w	lr, #1
 8007b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b90:	e7e8      	b.n	8007b64 <_strtol_l.constprop.0+0x6c>
 8007b92:	2c2b      	cmp	r4, #43	; 0x2b
 8007b94:	bf04      	itt	eq
 8007b96:	782c      	ldrbeq	r4, [r5, #0]
 8007b98:	1cb5      	addeq	r5, r6, #2
 8007b9a:	e7ca      	b.n	8007b32 <_strtol_l.constprop.0+0x3a>
 8007b9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007ba0:	f1bc 0f19 	cmp.w	ip, #25
 8007ba4:	d801      	bhi.n	8007baa <_strtol_l.constprop.0+0xb2>
 8007ba6:	3c37      	subs	r4, #55	; 0x37
 8007ba8:	e7e2      	b.n	8007b70 <_strtol_l.constprop.0+0x78>
 8007baa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007bae:	f1bc 0f19 	cmp.w	ip, #25
 8007bb2:	d804      	bhi.n	8007bbe <_strtol_l.constprop.0+0xc6>
 8007bb4:	3c57      	subs	r4, #87	; 0x57
 8007bb6:	e7db      	b.n	8007b70 <_strtol_l.constprop.0+0x78>
 8007bb8:	f04f 3eff 	mov.w	lr, #4294967295
 8007bbc:	e7e6      	b.n	8007b8c <_strtol_l.constprop.0+0x94>
 8007bbe:	f1be 3fff 	cmp.w	lr, #4294967295
 8007bc2:	d105      	bne.n	8007bd0 <_strtol_l.constprop.0+0xd8>
 8007bc4:	2322      	movs	r3, #34	; 0x22
 8007bc6:	6003      	str	r3, [r0, #0]
 8007bc8:	4646      	mov	r6, r8
 8007bca:	b942      	cbnz	r2, 8007bde <_strtol_l.constprop.0+0xe6>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	e79e      	b.n	8007b0e <_strtol_l.constprop.0+0x16>
 8007bd0:	b107      	cbz	r7, 8007bd4 <_strtol_l.constprop.0+0xdc>
 8007bd2:	4276      	negs	r6, r6
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	d0f9      	beq.n	8007bcc <_strtol_l.constprop.0+0xd4>
 8007bd8:	f1be 0f00 	cmp.w	lr, #0
 8007bdc:	d000      	beq.n	8007be0 <_strtol_l.constprop.0+0xe8>
 8007bde:	1e69      	subs	r1, r5, #1
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	e7f3      	b.n	8007bcc <_strtol_l.constprop.0+0xd4>
 8007be4:	2430      	movs	r4, #48	; 0x30
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1b1      	bne.n	8007b4e <_strtol_l.constprop.0+0x56>
 8007bea:	2308      	movs	r3, #8
 8007bec:	e7af      	b.n	8007b4e <_strtol_l.constprop.0+0x56>
 8007bee:	2c30      	cmp	r4, #48	; 0x30
 8007bf0:	d0a5      	beq.n	8007b3e <_strtol_l.constprop.0+0x46>
 8007bf2:	230a      	movs	r3, #10
 8007bf4:	e7ab      	b.n	8007b4e <_strtol_l.constprop.0+0x56>
 8007bf6:	bf00      	nop
 8007bf8:	08009151 	.word	0x08009151

08007bfc <strtol>:
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	460a      	mov	r2, r1
 8007c00:	4601      	mov	r1, r0
 8007c02:	4802      	ldr	r0, [pc, #8]	; (8007c0c <strtol+0x10>)
 8007c04:	6800      	ldr	r0, [r0, #0]
 8007c06:	f7ff bf77 	b.w	8007af8 <_strtol_l.constprop.0>
 8007c0a:	bf00      	nop
 8007c0c:	200000b4 	.word	0x200000b4

08007c10 <std>:
 8007c10:	2300      	movs	r3, #0
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	e9c0 3300 	strd	r3, r3, [r0]
 8007c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c1e:	6083      	str	r3, [r0, #8]
 8007c20:	8181      	strh	r1, [r0, #12]
 8007c22:	6643      	str	r3, [r0, #100]	; 0x64
 8007c24:	81c2      	strh	r2, [r0, #14]
 8007c26:	6183      	str	r3, [r0, #24]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	305c      	adds	r0, #92	; 0x5c
 8007c2e:	f000 f9c4 	bl	8007fba <memset>
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <std+0x58>)
 8007c34:	6263      	str	r3, [r4, #36]	; 0x24
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <std+0x5c>)
 8007c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <std+0x60>)
 8007c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <std+0x64>)
 8007c40:	6323      	str	r3, [r4, #48]	; 0x30
 8007c42:	4b0d      	ldr	r3, [pc, #52]	; (8007c78 <std+0x68>)
 8007c44:	6224      	str	r4, [r4, #32]
 8007c46:	429c      	cmp	r4, r3
 8007c48:	d006      	beq.n	8007c58 <std+0x48>
 8007c4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c4e:	4294      	cmp	r4, r2
 8007c50:	d002      	beq.n	8007c58 <std+0x48>
 8007c52:	33d0      	adds	r3, #208	; 0xd0
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d105      	bne.n	8007c64 <std+0x54>
 8007c58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f000 ba80 	b.w	8008164 <__retarget_lock_init_recursive>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	08007f35 	.word	0x08007f35
 8007c6c:	08007f57 	.word	0x08007f57
 8007c70:	08007f8f 	.word	0x08007f8f
 8007c74:	08007fb3 	.word	0x08007fb3
 8007c78:	200002a4 	.word	0x200002a4

08007c7c <stdio_exit_handler>:
 8007c7c:	4a02      	ldr	r2, [pc, #8]	; (8007c88 <stdio_exit_handler+0xc>)
 8007c7e:	4903      	ldr	r1, [pc, #12]	; (8007c8c <stdio_exit_handler+0x10>)
 8007c80:	4803      	ldr	r0, [pc, #12]	; (8007c90 <stdio_exit_handler+0x14>)
 8007c82:	f000 b869 	b.w	8007d58 <_fwalk_sglue>
 8007c86:	bf00      	nop
 8007c88:	2000005c 	.word	0x2000005c
 8007c8c:	08008a5d 	.word	0x08008a5d
 8007c90:	20000068 	.word	0x20000068

08007c94 <cleanup_stdio>:
 8007c94:	6841      	ldr	r1, [r0, #4]
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <cleanup_stdio+0x34>)
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	d001      	beq.n	8007ca4 <cleanup_stdio+0x10>
 8007ca0:	f000 fedc 	bl	8008a5c <_fflush_r>
 8007ca4:	68a1      	ldr	r1, [r4, #8]
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <cleanup_stdio+0x38>)
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <cleanup_stdio+0x1e>
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fed5 	bl	8008a5c <_fflush_r>
 8007cb2:	68e1      	ldr	r1, [r4, #12]
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <cleanup_stdio+0x3c>)
 8007cb6:	4299      	cmp	r1, r3
 8007cb8:	d004      	beq.n	8007cc4 <cleanup_stdio+0x30>
 8007cba:	4620      	mov	r0, r4
 8007cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc0:	f000 becc 	b.w	8008a5c <_fflush_r>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200002a4 	.word	0x200002a4
 8007ccc:	2000030c 	.word	0x2000030c
 8007cd0:	20000374 	.word	0x20000374

08007cd4 <global_stdio_init.part.0>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <global_stdio_init.part.0+0x30>)
 8007cd8:	4c0b      	ldr	r4, [pc, #44]	; (8007d08 <global_stdio_init.part.0+0x34>)
 8007cda:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <global_stdio_init.part.0+0x38>)
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2104      	movs	r1, #4
 8007ce4:	f7ff ff94 	bl	8007c10 <std>
 8007ce8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cec:	2201      	movs	r2, #1
 8007cee:	2109      	movs	r1, #9
 8007cf0:	f7ff ff8e 	bl	8007c10 <std>
 8007cf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfe:	2112      	movs	r1, #18
 8007d00:	f7ff bf86 	b.w	8007c10 <std>
 8007d04:	200003dc 	.word	0x200003dc
 8007d08:	200002a4 	.word	0x200002a4
 8007d0c:	08007c7d 	.word	0x08007c7d

08007d10 <__sfp_lock_acquire>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__sfp_lock_acquire+0x8>)
 8007d12:	f000 ba28 	b.w	8008166 <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	200003e5 	.word	0x200003e5

08007d1c <__sfp_lock_release>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__sfp_lock_release+0x8>)
 8007d1e:	f000 ba23 	b.w	8008168 <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	200003e5 	.word	0x200003e5

08007d28 <__sinit>:
 8007d28:	b510      	push	{r4, lr}
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	f7ff fff0 	bl	8007d10 <__sfp_lock_acquire>
 8007d30:	6a23      	ldr	r3, [r4, #32]
 8007d32:	b11b      	cbz	r3, 8007d3c <__sinit+0x14>
 8007d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d38:	f7ff bff0 	b.w	8007d1c <__sfp_lock_release>
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <__sinit+0x28>)
 8007d3e:	6223      	str	r3, [r4, #32]
 8007d40:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <__sinit+0x2c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f5      	bne.n	8007d34 <__sinit+0xc>
 8007d48:	f7ff ffc4 	bl	8007cd4 <global_stdio_init.part.0>
 8007d4c:	e7f2      	b.n	8007d34 <__sinit+0xc>
 8007d4e:	bf00      	nop
 8007d50:	08007c95 	.word	0x08007c95
 8007d54:	200003dc 	.word	0x200003dc

08007d58 <_fwalk_sglue>:
 8007d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	4688      	mov	r8, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	2600      	movs	r6, #0
 8007d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d68:	f1b9 0901 	subs.w	r9, r9, #1
 8007d6c:	d505      	bpl.n	8007d7a <_fwalk_sglue+0x22>
 8007d6e:	6824      	ldr	r4, [r4, #0]
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	d1f7      	bne.n	8007d64 <_fwalk_sglue+0xc>
 8007d74:	4630      	mov	r0, r6
 8007d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d907      	bls.n	8007d90 <_fwalk_sglue+0x38>
 8007d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d84:	3301      	adds	r3, #1
 8007d86:	d003      	beq.n	8007d90 <_fwalk_sglue+0x38>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c0      	blx	r8
 8007d8e:	4306      	orrs	r6, r0
 8007d90:	3568      	adds	r5, #104	; 0x68
 8007d92:	e7e9      	b.n	8007d68 <_fwalk_sglue+0x10>

08007d94 <getchar>:
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <getchar+0xc>)
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	6841      	ldr	r1, [r0, #4]
 8007d9a:	f000 be99 	b.w	8008ad0 <_getc_r>
 8007d9e:	bf00      	nop
 8007da0:	200000b4 	.word	0x200000b4

08007da4 <iprintf>:
 8007da4:	b40f      	push	{r0, r1, r2, r3}
 8007da6:	b507      	push	{r0, r1, r2, lr}
 8007da8:	4906      	ldr	r1, [pc, #24]	; (8007dc4 <iprintf+0x20>)
 8007daa:	ab04      	add	r3, sp, #16
 8007dac:	6808      	ldr	r0, [r1, #0]
 8007dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db2:	6881      	ldr	r1, [r0, #8]
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	f000 fb21 	bl	80083fc <_vfiprintf_r>
 8007dba:	b003      	add	sp, #12
 8007dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc0:	b004      	add	sp, #16
 8007dc2:	4770      	bx	lr
 8007dc4:	200000b4 	.word	0x200000b4

08007dc8 <putchar>:
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <putchar+0xc>)
 8007dca:	4601      	mov	r1, r0
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	6882      	ldr	r2, [r0, #8]
 8007dd0:	f000 bf0b 	b.w	8008bea <_putc_r>
 8007dd4:	200000b4 	.word	0x200000b4

08007dd8 <setvbuf>:
 8007dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	461d      	mov	r5, r3
 8007dde:	4b54      	ldr	r3, [pc, #336]	; (8007f30 <setvbuf+0x158>)
 8007de0:	681f      	ldr	r7, [r3, #0]
 8007de2:	4604      	mov	r4, r0
 8007de4:	460e      	mov	r6, r1
 8007de6:	4690      	mov	r8, r2
 8007de8:	b127      	cbz	r7, 8007df4 <setvbuf+0x1c>
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	b913      	cbnz	r3, 8007df4 <setvbuf+0x1c>
 8007dee:	4638      	mov	r0, r7
 8007df0:	f7ff ff9a 	bl	8007d28 <__sinit>
 8007df4:	f1b8 0f02 	cmp.w	r8, #2
 8007df8:	d006      	beq.n	8007e08 <setvbuf+0x30>
 8007dfa:	f1b8 0f01 	cmp.w	r8, #1
 8007dfe:	f200 8094 	bhi.w	8007f2a <setvbuf+0x152>
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	f2c0 8091 	blt.w	8007f2a <setvbuf+0x152>
 8007e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e0a:	07da      	lsls	r2, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <setvbuf+0x42>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	059b      	lsls	r3, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <setvbuf+0x42>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f000 f9a6 	bl	8008166 <__retarget_lock_acquire_recursive>
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f000 fe1d 	bl	8008a5c <_fflush_r>
 8007e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e24:	b141      	cbz	r1, 8007e38 <setvbuf+0x60>
 8007e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d002      	beq.n	8007e34 <setvbuf+0x5c>
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f000 f9ba 	bl	80081a8 <_free_r>
 8007e34:	2300      	movs	r3, #0
 8007e36:	6363      	str	r3, [r4, #52]	; 0x34
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61a3      	str	r3, [r4, #24]
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	0618      	lsls	r0, r3, #24
 8007e42:	d503      	bpl.n	8007e4c <setvbuf+0x74>
 8007e44:	6921      	ldr	r1, [r4, #16]
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 f9ae 	bl	80081a8 <_free_r>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	f1b8 0f02 	cmp.w	r8, #2
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	d05f      	beq.n	8007f1e <setvbuf+0x146>
 8007e5e:	ab01      	add	r3, sp, #4
 8007e60:	466a      	mov	r2, sp
 8007e62:	4621      	mov	r1, r4
 8007e64:	4638      	mov	r0, r7
 8007e66:	f000 fe5e 	bl	8008b26 <__swhatbuf_r>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	4318      	orrs	r0, r3
 8007e6e:	81a0      	strh	r0, [r4, #12]
 8007e70:	bb2d      	cbnz	r5, 8007ebe <setvbuf+0xe6>
 8007e72:	9d00      	ldr	r5, [sp, #0]
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f9e3 	bl	8008240 <malloc>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d150      	bne.n	8007f22 <setvbuf+0x14a>
 8007e80:	f8dd 9000 	ldr.w	r9, [sp]
 8007e84:	45a9      	cmp	r9, r5
 8007e86:	d13e      	bne.n	8007f06 <setvbuf+0x12e>
 8007e88:	f04f 35ff 	mov.w	r5, #4294967295
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	60a2      	str	r2, [r4, #8]
 8007e90:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	6122      	str	r2, [r4, #16]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	6162      	str	r2, [r4, #20]
 8007ea0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	07d1      	lsls	r1, r2, #31
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	d404      	bmi.n	8007eb6 <setvbuf+0xde>
 8007eac:	059b      	lsls	r3, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <setvbuf+0xde>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f000 f959 	bl	8008168 <__retarget_lock_release_recursive>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	b003      	add	sp, #12
 8007eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	2e00      	cmp	r6, #0
 8007ec0:	d0d8      	beq.n	8007e74 <setvbuf+0x9c>
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	b913      	cbnz	r3, 8007ecc <setvbuf+0xf4>
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ff2e 	bl	8007d28 <__sinit>
 8007ecc:	f1b8 0f01 	cmp.w	r8, #1
 8007ed0:	bf08      	it	eq
 8007ed2:	89a3      	ldrheq	r3, [r4, #12]
 8007ed4:	6026      	str	r6, [r4, #0]
 8007ed6:	bf04      	itt	eq
 8007ed8:	f043 0301 	orreq.w	r3, r3, #1
 8007edc:	81a3      	strheq	r3, [r4, #12]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f013 0208 	ands.w	r2, r3, #8
 8007ee4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007ee8:	d01d      	beq.n	8007f26 <setvbuf+0x14e>
 8007eea:	07da      	lsls	r2, r3, #31
 8007eec:	bf41      	itttt	mi
 8007eee:	2200      	movmi	r2, #0
 8007ef0:	426d      	negmi	r5, r5
 8007ef2:	60a2      	strmi	r2, [r4, #8]
 8007ef4:	61a5      	strmi	r5, [r4, #24]
 8007ef6:	bf58      	it	pl
 8007ef8:	60a5      	strpl	r5, [r4, #8]
 8007efa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007efc:	f015 0501 	ands.w	r5, r5, #1
 8007f00:	d0d4      	beq.n	8007eac <setvbuf+0xd4>
 8007f02:	2500      	movs	r5, #0
 8007f04:	e7d7      	b.n	8007eb6 <setvbuf+0xde>
 8007f06:	4648      	mov	r0, r9
 8007f08:	f000 f99a 	bl	8008240 <malloc>
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d0ba      	beq.n	8007e88 <setvbuf+0xb0>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	464d      	mov	r5, r9
 8007f1c:	e7d1      	b.n	8007ec2 <setvbuf+0xea>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	e7b4      	b.n	8007e8c <setvbuf+0xb4>
 8007f22:	46a9      	mov	r9, r5
 8007f24:	e7f5      	b.n	8007f12 <setvbuf+0x13a>
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	e7e7      	b.n	8007efa <setvbuf+0x122>
 8007f2a:	f04f 35ff 	mov.w	r5, #4294967295
 8007f2e:	e7c2      	b.n	8007eb6 <setvbuf+0xde>
 8007f30:	200000b4 	.word	0x200000b4

08007f34 <__sread>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	460c      	mov	r4, r1
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	f000 f8c4 	bl	80080c8 <_read_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	bfab      	itete	ge
 8007f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f46:	89a3      	ldrhlt	r3, [r4, #12]
 8007f48:	181b      	addge	r3, r3, r0
 8007f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f4e:	bfac      	ite	ge
 8007f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f52:	81a3      	strhlt	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__swrite>:
 8007f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	461f      	mov	r7, r3
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	05db      	lsls	r3, r3, #23
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	4616      	mov	r6, r2
 8007f66:	d505      	bpl.n	8007f74 <__swrite+0x1e>
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f000 f898 	bl	80080a4 <_lseek_r>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	4632      	mov	r2, r6
 8007f82:	463b      	mov	r3, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	f000 b8af 	b.w	80080ec <_write_r>

08007f8e <__sseek>:
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	460c      	mov	r4, r1
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 f885 	bl	80080a4 <_lseek_r>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	bf15      	itete	ne
 8007fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007faa:	81a3      	strheq	r3, [r4, #12]
 8007fac:	bf18      	it	ne
 8007fae:	81a3      	strhne	r3, [r4, #12]
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <__sclose>:
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 b865 	b.w	8008084 <_close_r>

08007fba <memset>:
 8007fba:	4402      	add	r2, r0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d100      	bne.n	8007fc4 <memset+0xa>
 8007fc2:	4770      	bx	lr
 8007fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc8:	e7f9      	b.n	8007fbe <memset+0x4>
	...

08007fcc <strtok>:
 8007fcc:	4b16      	ldr	r3, [pc, #88]	; (8008028 <strtok+0x5c>)
 8007fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fd0:	681e      	ldr	r6, [r3, #0]
 8007fd2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	b9fc      	cbnz	r4, 8008018 <strtok+0x4c>
 8007fd8:	2050      	movs	r0, #80	; 0x50
 8007fda:	9101      	str	r1, [sp, #4]
 8007fdc:	f000 f930 	bl	8008240 <malloc>
 8007fe0:	9901      	ldr	r1, [sp, #4]
 8007fe2:	6470      	str	r0, [r6, #68]	; 0x44
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	b920      	cbnz	r0, 8007ff2 <strtok+0x26>
 8007fe8:	4b10      	ldr	r3, [pc, #64]	; (800802c <strtok+0x60>)
 8007fea:	4811      	ldr	r0, [pc, #68]	; (8008030 <strtok+0x64>)
 8007fec:	215b      	movs	r1, #91	; 0x5b
 8007fee:	f000 f8bd 	bl	800816c <__assert_func>
 8007ff2:	e9c0 4400 	strd	r4, r4, [r0]
 8007ff6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007ffa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ffe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008002:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008006:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800800a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800800e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008012:	6184      	str	r4, [r0, #24]
 8008014:	7704      	strb	r4, [r0, #28]
 8008016:	6244      	str	r4, [r0, #36]	; 0x24
 8008018:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800801a:	2301      	movs	r3, #1
 800801c:	4628      	mov	r0, r5
 800801e:	b002      	add	sp, #8
 8008020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008024:	f000 b806 	b.w	8008034 <__strtok_r>
 8008028:	200000b4 	.word	0x200000b4
 800802c:	08009251 	.word	0x08009251
 8008030:	08009268 	.word	0x08009268

08008034 <__strtok_r>:
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008036:	b908      	cbnz	r0, 800803c <__strtok_r+0x8>
 8008038:	6810      	ldr	r0, [r2, #0]
 800803a:	b188      	cbz	r0, 8008060 <__strtok_r+0x2c>
 800803c:	4604      	mov	r4, r0
 800803e:	4620      	mov	r0, r4
 8008040:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008044:	460f      	mov	r7, r1
 8008046:	f817 6b01 	ldrb.w	r6, [r7], #1
 800804a:	b91e      	cbnz	r6, 8008054 <__strtok_r+0x20>
 800804c:	b965      	cbnz	r5, 8008068 <__strtok_r+0x34>
 800804e:	6015      	str	r5, [r2, #0]
 8008050:	4628      	mov	r0, r5
 8008052:	e005      	b.n	8008060 <__strtok_r+0x2c>
 8008054:	42b5      	cmp	r5, r6
 8008056:	d1f6      	bne.n	8008046 <__strtok_r+0x12>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f0      	bne.n	800803e <__strtok_r+0xa>
 800805c:	6014      	str	r4, [r2, #0]
 800805e:	7003      	strb	r3, [r0, #0]
 8008060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008062:	461c      	mov	r4, r3
 8008064:	e00c      	b.n	8008080 <__strtok_r+0x4c>
 8008066:	b915      	cbnz	r5, 800806e <__strtok_r+0x3a>
 8008068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800806c:	460e      	mov	r6, r1
 800806e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008072:	42ab      	cmp	r3, r5
 8008074:	d1f7      	bne.n	8008066 <__strtok_r+0x32>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f3      	beq.n	8008062 <__strtok_r+0x2e>
 800807a:	2300      	movs	r3, #0
 800807c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008080:	6014      	str	r4, [r2, #0]
 8008082:	e7ed      	b.n	8008060 <__strtok_r+0x2c>

08008084 <_close_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_close_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f9 f9cc 	bl	800142c <_close>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_close_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_close_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	200003e0 	.word	0x200003e0

080080a4 <_lseek_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	; (80080c4 <_lseek_r+0x20>)
 80080a8:	4604      	mov	r4, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	4611      	mov	r1, r2
 80080ae:	2200      	movs	r2, #0
 80080b0:	602a      	str	r2, [r5, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f7f9 f9d1 	bl	800145a <_lseek>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_lseek_r+0x1e>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_lseek_r+0x1e>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	200003e0 	.word	0x200003e0

080080c8 <_read_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	; (80080e8 <_read_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7f9 f9d0 	bl	800147c <_read>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_read_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_read_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	200003e0 	.word	0x200003e0

080080ec <_write_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	; (800810c <_write_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7f9 f96a 	bl	80013d4 <_write>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_write_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_write_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200003e0 	.word	0x200003e0

08008110 <__errno>:
 8008110:	4b01      	ldr	r3, [pc, #4]	; (8008118 <__errno+0x8>)
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	200000b4 	.word	0x200000b4

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	; (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	; (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	; (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	; (8008160 <__libc_init_array+0x44>)
 8008130:	f000 ff40 	bl	8008fb4 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	0800933c 	.word	0x0800933c
 8008158:	0800933c 	.word	0x0800933c
 800815c:	0800933c 	.word	0x0800933c
 8008160:	08009340 	.word	0x08009340

08008164 <__retarget_lock_init_recursive>:
 8008164:	4770      	bx	lr

08008166 <__retarget_lock_acquire_recursive>:
 8008166:	4770      	bx	lr

08008168 <__retarget_lock_release_recursive>:
 8008168:	4770      	bx	lr
	...

0800816c <__assert_func>:
 800816c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800816e:	4614      	mov	r4, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <__assert_func+0x2c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4605      	mov	r5, r0
 8008178:	68d8      	ldr	r0, [r3, #12]
 800817a:	b14c      	cbz	r4, 8008190 <__assert_func+0x24>
 800817c:	4b07      	ldr	r3, [pc, #28]	; (800819c <__assert_func+0x30>)
 800817e:	9100      	str	r1, [sp, #0]
 8008180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008184:	4906      	ldr	r1, [pc, #24]	; (80081a0 <__assert_func+0x34>)
 8008186:	462b      	mov	r3, r5
 8008188:	f000 fc90 	bl	8008aac <fiprintf>
 800818c:	f000 fe40 	bl	8008e10 <abort>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__assert_func+0x38>)
 8008192:	461c      	mov	r4, r3
 8008194:	e7f3      	b.n	800817e <__assert_func+0x12>
 8008196:	bf00      	nop
 8008198:	200000b4 	.word	0x200000b4
 800819c:	080092c2 	.word	0x080092c2
 80081a0:	080092cf 	.word	0x080092cf
 80081a4:	080092fd 	.word	0x080092fd

080081a8 <_free_r>:
 80081a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081aa:	2900      	cmp	r1, #0
 80081ac:	d044      	beq.n	8008238 <_free_r+0x90>
 80081ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b2:	9001      	str	r0, [sp, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f1a1 0404 	sub.w	r4, r1, #4
 80081ba:	bfb8      	it	lt
 80081bc:	18e4      	addlt	r4, r4, r3
 80081be:	f000 f8e7 	bl	8008390 <__malloc_lock>
 80081c2:	4a1e      	ldr	r2, [pc, #120]	; (800823c <_free_r+0x94>)
 80081c4:	9801      	ldr	r0, [sp, #4]
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	b933      	cbnz	r3, 80081d8 <_free_r+0x30>
 80081ca:	6063      	str	r3, [r4, #4]
 80081cc:	6014      	str	r4, [r2, #0]
 80081ce:	b003      	add	sp, #12
 80081d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081d4:	f000 b8e2 	b.w	800839c <__malloc_unlock>
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d908      	bls.n	80081ee <_free_r+0x46>
 80081dc:	6825      	ldr	r5, [r4, #0]
 80081de:	1961      	adds	r1, r4, r5
 80081e0:	428b      	cmp	r3, r1
 80081e2:	bf01      	itttt	eq
 80081e4:	6819      	ldreq	r1, [r3, #0]
 80081e6:	685b      	ldreq	r3, [r3, #4]
 80081e8:	1949      	addeq	r1, r1, r5
 80081ea:	6021      	streq	r1, [r4, #0]
 80081ec:	e7ed      	b.n	80081ca <_free_r+0x22>
 80081ee:	461a      	mov	r2, r3
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	b10b      	cbz	r3, 80081f8 <_free_r+0x50>
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d9fa      	bls.n	80081ee <_free_r+0x46>
 80081f8:	6811      	ldr	r1, [r2, #0]
 80081fa:	1855      	adds	r5, r2, r1
 80081fc:	42a5      	cmp	r5, r4
 80081fe:	d10b      	bne.n	8008218 <_free_r+0x70>
 8008200:	6824      	ldr	r4, [r4, #0]
 8008202:	4421      	add	r1, r4
 8008204:	1854      	adds	r4, r2, r1
 8008206:	42a3      	cmp	r3, r4
 8008208:	6011      	str	r1, [r2, #0]
 800820a:	d1e0      	bne.n	80081ce <_free_r+0x26>
 800820c:	681c      	ldr	r4, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	6053      	str	r3, [r2, #4]
 8008212:	440c      	add	r4, r1
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	e7da      	b.n	80081ce <_free_r+0x26>
 8008218:	d902      	bls.n	8008220 <_free_r+0x78>
 800821a:	230c      	movs	r3, #12
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	e7d6      	b.n	80081ce <_free_r+0x26>
 8008220:	6825      	ldr	r5, [r4, #0]
 8008222:	1961      	adds	r1, r4, r5
 8008224:	428b      	cmp	r3, r1
 8008226:	bf04      	itt	eq
 8008228:	6819      	ldreq	r1, [r3, #0]
 800822a:	685b      	ldreq	r3, [r3, #4]
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	bf04      	itt	eq
 8008230:	1949      	addeq	r1, r1, r5
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	6054      	str	r4, [r2, #4]
 8008236:	e7ca      	b.n	80081ce <_free_r+0x26>
 8008238:	b003      	add	sp, #12
 800823a:	bd30      	pop	{r4, r5, pc}
 800823c:	200003e8 	.word	0x200003e8

08008240 <malloc>:
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <malloc+0xc>)
 8008242:	4601      	mov	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f000 b823 	b.w	8008290 <_malloc_r>
 800824a:	bf00      	nop
 800824c:	200000b4 	.word	0x200000b4

08008250 <sbrk_aligned>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4e0e      	ldr	r6, [pc, #56]	; (800828c <sbrk_aligned+0x3c>)
 8008254:	460c      	mov	r4, r1
 8008256:	6831      	ldr	r1, [r6, #0]
 8008258:	4605      	mov	r5, r0
 800825a:	b911      	cbnz	r1, 8008262 <sbrk_aligned+0x12>
 800825c:	f000 fdc8 	bl	8008df0 <_sbrk_r>
 8008260:	6030      	str	r0, [r6, #0]
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f000 fdc3 	bl	8008df0 <_sbrk_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	d00a      	beq.n	8008284 <sbrk_aligned+0x34>
 800826e:	1cc4      	adds	r4, r0, #3
 8008270:	f024 0403 	bic.w	r4, r4, #3
 8008274:	42a0      	cmp	r0, r4
 8008276:	d007      	beq.n	8008288 <sbrk_aligned+0x38>
 8008278:	1a21      	subs	r1, r4, r0
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fdb8 	bl	8008df0 <_sbrk_r>
 8008280:	3001      	adds	r0, #1
 8008282:	d101      	bne.n	8008288 <sbrk_aligned+0x38>
 8008284:	f04f 34ff 	mov.w	r4, #4294967295
 8008288:	4620      	mov	r0, r4
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	200003ec 	.word	0x200003ec

08008290 <_malloc_r>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	1ccd      	adds	r5, r1, #3
 8008296:	f025 0503 	bic.w	r5, r5, #3
 800829a:	3508      	adds	r5, #8
 800829c:	2d0c      	cmp	r5, #12
 800829e:	bf38      	it	cc
 80082a0:	250c      	movcc	r5, #12
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	4607      	mov	r7, r0
 80082a6:	db01      	blt.n	80082ac <_malloc_r+0x1c>
 80082a8:	42a9      	cmp	r1, r5
 80082aa:	d905      	bls.n	80082b8 <_malloc_r+0x28>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	2600      	movs	r6, #0
 80082b2:	4630      	mov	r0, r6
 80082b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800838c <_malloc_r+0xfc>
 80082bc:	f000 f868 	bl	8008390 <__malloc_lock>
 80082c0:	f8d8 3000 	ldr.w	r3, [r8]
 80082c4:	461c      	mov	r4, r3
 80082c6:	bb5c      	cbnz	r4, 8008320 <_malloc_r+0x90>
 80082c8:	4629      	mov	r1, r5
 80082ca:	4638      	mov	r0, r7
 80082cc:	f7ff ffc0 	bl	8008250 <sbrk_aligned>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	4604      	mov	r4, r0
 80082d4:	d155      	bne.n	8008382 <_malloc_r+0xf2>
 80082d6:	f8d8 4000 	ldr.w	r4, [r8]
 80082da:	4626      	mov	r6, r4
 80082dc:	2e00      	cmp	r6, #0
 80082de:	d145      	bne.n	800836c <_malloc_r+0xdc>
 80082e0:	2c00      	cmp	r4, #0
 80082e2:	d048      	beq.n	8008376 <_malloc_r+0xe6>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	4631      	mov	r1, r6
 80082e8:	4638      	mov	r0, r7
 80082ea:	eb04 0903 	add.w	r9, r4, r3
 80082ee:	f000 fd7f 	bl	8008df0 <_sbrk_r>
 80082f2:	4581      	cmp	r9, r0
 80082f4:	d13f      	bne.n	8008376 <_malloc_r+0xe6>
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	1a6d      	subs	r5, r5, r1
 80082fa:	4629      	mov	r1, r5
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff ffa7 	bl	8008250 <sbrk_aligned>
 8008302:	3001      	adds	r0, #1
 8008304:	d037      	beq.n	8008376 <_malloc_r+0xe6>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	442b      	add	r3, r5
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	f8d8 3000 	ldr.w	r3, [r8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d038      	beq.n	8008386 <_malloc_r+0xf6>
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	42a2      	cmp	r2, r4
 8008318:	d12b      	bne.n	8008372 <_malloc_r+0xe2>
 800831a:	2200      	movs	r2, #0
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	e00f      	b.n	8008340 <_malloc_r+0xb0>
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	1b52      	subs	r2, r2, r5
 8008324:	d41f      	bmi.n	8008366 <_malloc_r+0xd6>
 8008326:	2a0b      	cmp	r2, #11
 8008328:	d917      	bls.n	800835a <_malloc_r+0xca>
 800832a:	1961      	adds	r1, r4, r5
 800832c:	42a3      	cmp	r3, r4
 800832e:	6025      	str	r5, [r4, #0]
 8008330:	bf18      	it	ne
 8008332:	6059      	strne	r1, [r3, #4]
 8008334:	6863      	ldr	r3, [r4, #4]
 8008336:	bf08      	it	eq
 8008338:	f8c8 1000 	streq.w	r1, [r8]
 800833c:	5162      	str	r2, [r4, r5]
 800833e:	604b      	str	r3, [r1, #4]
 8008340:	4638      	mov	r0, r7
 8008342:	f104 060b 	add.w	r6, r4, #11
 8008346:	f000 f829 	bl	800839c <__malloc_unlock>
 800834a:	f026 0607 	bic.w	r6, r6, #7
 800834e:	1d23      	adds	r3, r4, #4
 8008350:	1af2      	subs	r2, r6, r3
 8008352:	d0ae      	beq.n	80082b2 <_malloc_r+0x22>
 8008354:	1b9b      	subs	r3, r3, r6
 8008356:	50a3      	str	r3, [r4, r2]
 8008358:	e7ab      	b.n	80082b2 <_malloc_r+0x22>
 800835a:	42a3      	cmp	r3, r4
 800835c:	6862      	ldr	r2, [r4, #4]
 800835e:	d1dd      	bne.n	800831c <_malloc_r+0x8c>
 8008360:	f8c8 2000 	str.w	r2, [r8]
 8008364:	e7ec      	b.n	8008340 <_malloc_r+0xb0>
 8008366:	4623      	mov	r3, r4
 8008368:	6864      	ldr	r4, [r4, #4]
 800836a:	e7ac      	b.n	80082c6 <_malloc_r+0x36>
 800836c:	4634      	mov	r4, r6
 800836e:	6876      	ldr	r6, [r6, #4]
 8008370:	e7b4      	b.n	80082dc <_malloc_r+0x4c>
 8008372:	4613      	mov	r3, r2
 8008374:	e7cc      	b.n	8008310 <_malloc_r+0x80>
 8008376:	230c      	movs	r3, #12
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	4638      	mov	r0, r7
 800837c:	f000 f80e 	bl	800839c <__malloc_unlock>
 8008380:	e797      	b.n	80082b2 <_malloc_r+0x22>
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	e7dc      	b.n	8008340 <_malloc_r+0xb0>
 8008386:	605b      	str	r3, [r3, #4]
 8008388:	deff      	udf	#255	; 0xff
 800838a:	bf00      	nop
 800838c:	200003e8 	.word	0x200003e8

08008390 <__malloc_lock>:
 8008390:	4801      	ldr	r0, [pc, #4]	; (8008398 <__malloc_lock+0x8>)
 8008392:	f7ff bee8 	b.w	8008166 <__retarget_lock_acquire_recursive>
 8008396:	bf00      	nop
 8008398:	200003e4 	.word	0x200003e4

0800839c <__malloc_unlock>:
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <__malloc_unlock+0x8>)
 800839e:	f7ff bee3 	b.w	8008168 <__retarget_lock_release_recursive>
 80083a2:	bf00      	nop
 80083a4:	200003e4 	.word	0x200003e4

080083a8 <__sfputc_r>:
 80083a8:	6893      	ldr	r3, [r2, #8]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	b410      	push	{r4}
 80083b0:	6093      	str	r3, [r2, #8]
 80083b2:	da08      	bge.n	80083c6 <__sfputc_r+0x1e>
 80083b4:	6994      	ldr	r4, [r2, #24]
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	db01      	blt.n	80083be <__sfputc_r+0x16>
 80083ba:	290a      	cmp	r1, #10
 80083bc:	d103      	bne.n	80083c6 <__sfputc_r+0x1e>
 80083be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c2:	f000 bc5e 	b.w	8008c82 <__swbuf_r>
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	1c58      	adds	r0, r3, #1
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	7019      	strb	r1, [r3, #0]
 80083ce:	4608      	mov	r0, r1
 80083d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <__sfputs_r>:
 80083d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	18d5      	adds	r5, r2, r3
 80083e0:	42ac      	cmp	r4, r5
 80083e2:	d101      	bne.n	80083e8 <__sfputs_r+0x12>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e007      	b.n	80083f8 <__sfputs_r+0x22>
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	463a      	mov	r2, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ffda 	bl	80083a8 <__sfputc_r>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d1f3      	bne.n	80083e0 <__sfputs_r+0xa>
 80083f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083fc <_vfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460d      	mov	r5, r1
 8008402:	b09d      	sub	sp, #116	; 0x74
 8008404:	4614      	mov	r4, r2
 8008406:	4698      	mov	r8, r3
 8008408:	4606      	mov	r6, r0
 800840a:	b118      	cbz	r0, 8008414 <_vfiprintf_r+0x18>
 800840c:	6a03      	ldr	r3, [r0, #32]
 800840e:	b90b      	cbnz	r3, 8008414 <_vfiprintf_r+0x18>
 8008410:	f7ff fc8a 	bl	8007d28 <__sinit>
 8008414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008416:	07d9      	lsls	r1, r3, #31
 8008418:	d405      	bmi.n	8008426 <_vfiprintf_r+0x2a>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d402      	bmi.n	8008426 <_vfiprintf_r+0x2a>
 8008420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008422:	f7ff fea0 	bl	8008166 <__retarget_lock_acquire_recursive>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	071b      	lsls	r3, r3, #28
 800842a:	d501      	bpl.n	8008430 <_vfiprintf_r+0x34>
 800842c:	692b      	ldr	r3, [r5, #16]
 800842e:	b99b      	cbnz	r3, 8008458 <_vfiprintf_r+0x5c>
 8008430:	4629      	mov	r1, r5
 8008432:	4630      	mov	r0, r6
 8008434:	f000 fc62 	bl	8008cfc <__swsetup_r>
 8008438:	b170      	cbz	r0, 8008458 <_vfiprintf_r+0x5c>
 800843a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800843c:	07dc      	lsls	r4, r3, #31
 800843e:	d504      	bpl.n	800844a <_vfiprintf_r+0x4e>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	b01d      	add	sp, #116	; 0x74
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	0598      	lsls	r0, r3, #22
 800844e:	d4f7      	bmi.n	8008440 <_vfiprintf_r+0x44>
 8008450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008452:	f7ff fe89 	bl	8008168 <__retarget_lock_release_recursive>
 8008456:	e7f3      	b.n	8008440 <_vfiprintf_r+0x44>
 8008458:	2300      	movs	r3, #0
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	2320      	movs	r3, #32
 800845e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008462:	f8cd 800c 	str.w	r8, [sp, #12]
 8008466:	2330      	movs	r3, #48	; 0x30
 8008468:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800861c <_vfiprintf_r+0x220>
 800846c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008470:	f04f 0901 	mov.w	r9, #1
 8008474:	4623      	mov	r3, r4
 8008476:	469a      	mov	sl, r3
 8008478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847c:	b10a      	cbz	r2, 8008482 <_vfiprintf_r+0x86>
 800847e:	2a25      	cmp	r2, #37	; 0x25
 8008480:	d1f9      	bne.n	8008476 <_vfiprintf_r+0x7a>
 8008482:	ebba 0b04 	subs.w	fp, sl, r4
 8008486:	d00b      	beq.n	80084a0 <_vfiprintf_r+0xa4>
 8008488:	465b      	mov	r3, fp
 800848a:	4622      	mov	r2, r4
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffa1 	bl	80083d6 <__sfputs_r>
 8008494:	3001      	adds	r0, #1
 8008496:	f000 80a9 	beq.w	80085ec <_vfiprintf_r+0x1f0>
 800849a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849c:	445a      	add	r2, fp
 800849e:	9209      	str	r2, [sp, #36]	; 0x24
 80084a0:	f89a 3000 	ldrb.w	r3, [sl]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a1 	beq.w	80085ec <_vfiprintf_r+0x1f0>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b4:	f10a 0a01 	add.w	sl, sl, #1
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c0:	931a      	str	r3, [sp, #104]	; 0x68
 80084c2:	4654      	mov	r4, sl
 80084c4:	2205      	movs	r2, #5
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	4854      	ldr	r0, [pc, #336]	; (800861c <_vfiprintf_r+0x220>)
 80084cc:	f7f7 fe90 	bl	80001f0 <memchr>
 80084d0:	9a04      	ldr	r2, [sp, #16]
 80084d2:	b9d8      	cbnz	r0, 800850c <_vfiprintf_r+0x110>
 80084d4:	06d1      	lsls	r1, r2, #27
 80084d6:	bf44      	itt	mi
 80084d8:	2320      	movmi	r3, #32
 80084da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084de:	0713      	lsls	r3, r2, #28
 80084e0:	bf44      	itt	mi
 80084e2:	232b      	movmi	r3, #43	; 0x2b
 80084e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e8:	f89a 3000 	ldrb.w	r3, [sl]
 80084ec:	2b2a      	cmp	r3, #42	; 0x2a
 80084ee:	d015      	beq.n	800851c <_vfiprintf_r+0x120>
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	4654      	mov	r4, sl
 80084f4:	2000      	movs	r0, #0
 80084f6:	f04f 0c0a 	mov.w	ip, #10
 80084fa:	4621      	mov	r1, r4
 80084fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008500:	3b30      	subs	r3, #48	; 0x30
 8008502:	2b09      	cmp	r3, #9
 8008504:	d94d      	bls.n	80085a2 <_vfiprintf_r+0x1a6>
 8008506:	b1b0      	cbz	r0, 8008536 <_vfiprintf_r+0x13a>
 8008508:	9207      	str	r2, [sp, #28]
 800850a:	e014      	b.n	8008536 <_vfiprintf_r+0x13a>
 800850c:	eba0 0308 	sub.w	r3, r0, r8
 8008510:	fa09 f303 	lsl.w	r3, r9, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	46a2      	mov	sl, r4
 800851a:	e7d2      	b.n	80084c2 <_vfiprintf_r+0xc6>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d19      	adds	r1, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9103      	str	r1, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfbb      	ittet	lt
 8008528:	425b      	neglt	r3, r3
 800852a:	f042 0202 	orrlt.w	r2, r2, #2
 800852e:	9307      	strge	r3, [sp, #28]
 8008530:	9307      	strlt	r3, [sp, #28]
 8008532:	bfb8      	it	lt
 8008534:	9204      	strlt	r2, [sp, #16]
 8008536:	7823      	ldrb	r3, [r4, #0]
 8008538:	2b2e      	cmp	r3, #46	; 0x2e
 800853a:	d10c      	bne.n	8008556 <_vfiprintf_r+0x15a>
 800853c:	7863      	ldrb	r3, [r4, #1]
 800853e:	2b2a      	cmp	r3, #42	; 0x2a
 8008540:	d134      	bne.n	80085ac <_vfiprintf_r+0x1b0>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	1d1a      	adds	r2, r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	9203      	str	r2, [sp, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfb8      	it	lt
 800854e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008552:	3402      	adds	r4, #2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800862c <_vfiprintf_r+0x230>
 800855a:	7821      	ldrb	r1, [r4, #0]
 800855c:	2203      	movs	r2, #3
 800855e:	4650      	mov	r0, sl
 8008560:	f7f7 fe46 	bl	80001f0 <memchr>
 8008564:	b138      	cbz	r0, 8008576 <_vfiprintf_r+0x17a>
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	eba0 000a 	sub.w	r0, r0, sl
 800856c:	2240      	movs	r2, #64	; 0x40
 800856e:	4082      	lsls	r2, r0
 8008570:	4313      	orrs	r3, r2
 8008572:	3401      	adds	r4, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857a:	4829      	ldr	r0, [pc, #164]	; (8008620 <_vfiprintf_r+0x224>)
 800857c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008580:	2206      	movs	r2, #6
 8008582:	f7f7 fe35 	bl	80001f0 <memchr>
 8008586:	2800      	cmp	r0, #0
 8008588:	d03f      	beq.n	800860a <_vfiprintf_r+0x20e>
 800858a:	4b26      	ldr	r3, [pc, #152]	; (8008624 <_vfiprintf_r+0x228>)
 800858c:	bb1b      	cbnz	r3, 80085d6 <_vfiprintf_r+0x1da>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	3308      	adds	r3, #8
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	443b      	add	r3, r7
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	e768      	b.n	8008474 <_vfiprintf_r+0x78>
 80085a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a6:	460c      	mov	r4, r1
 80085a8:	2001      	movs	r0, #1
 80085aa:	e7a6      	b.n	80084fa <_vfiprintf_r+0xfe>
 80085ac:	2300      	movs	r3, #0
 80085ae:	3401      	adds	r4, #1
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	4619      	mov	r1, r3
 80085b4:	f04f 0c0a 	mov.w	ip, #10
 80085b8:	4620      	mov	r0, r4
 80085ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085be:	3a30      	subs	r2, #48	; 0x30
 80085c0:	2a09      	cmp	r2, #9
 80085c2:	d903      	bls.n	80085cc <_vfiprintf_r+0x1d0>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0c6      	beq.n	8008556 <_vfiprintf_r+0x15a>
 80085c8:	9105      	str	r1, [sp, #20]
 80085ca:	e7c4      	b.n	8008556 <_vfiprintf_r+0x15a>
 80085cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d0:	4604      	mov	r4, r0
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7f0      	b.n	80085b8 <_vfiprintf_r+0x1bc>
 80085d6:	ab03      	add	r3, sp, #12
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	462a      	mov	r2, r5
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <_vfiprintf_r+0x22c>)
 80085de:	a904      	add	r1, sp, #16
 80085e0:	4630      	mov	r0, r6
 80085e2:	f3af 8000 	nop.w
 80085e6:	4607      	mov	r7, r0
 80085e8:	1c78      	adds	r0, r7, #1
 80085ea:	d1d6      	bne.n	800859a <_vfiprintf_r+0x19e>
 80085ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ee:	07d9      	lsls	r1, r3, #31
 80085f0:	d405      	bmi.n	80085fe <_vfiprintf_r+0x202>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_vfiprintf_r+0x202>
 80085f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fa:	f7ff fdb5 	bl	8008168 <__retarget_lock_release_recursive>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	065b      	lsls	r3, r3, #25
 8008602:	f53f af1d 	bmi.w	8008440 <_vfiprintf_r+0x44>
 8008606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008608:	e71c      	b.n	8008444 <_vfiprintf_r+0x48>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <_vfiprintf_r+0x22c>)
 8008612:	a904      	add	r1, sp, #16
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f879 	bl	800870c <_printf_i>
 800861a:	e7e4      	b.n	80085e6 <_vfiprintf_r+0x1ea>
 800861c:	080092fe 	.word	0x080092fe
 8008620:	08009308 	.word	0x08009308
 8008624:	00000000 	.word	0x00000000
 8008628:	080083d7 	.word	0x080083d7
 800862c:	08009304 	.word	0x08009304

08008630 <_printf_common>:
 8008630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	4616      	mov	r6, r2
 8008636:	4699      	mov	r9, r3
 8008638:	688a      	ldr	r2, [r1, #8]
 800863a:	690b      	ldr	r3, [r1, #16]
 800863c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008640:	4293      	cmp	r3, r2
 8008642:	bfb8      	it	lt
 8008644:	4613      	movlt	r3, r2
 8008646:	6033      	str	r3, [r6, #0]
 8008648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800864c:	4607      	mov	r7, r0
 800864e:	460c      	mov	r4, r1
 8008650:	b10a      	cbz	r2, 8008656 <_printf_common+0x26>
 8008652:	3301      	adds	r3, #1
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	0699      	lsls	r1, r3, #26
 800865a:	bf42      	ittt	mi
 800865c:	6833      	ldrmi	r3, [r6, #0]
 800865e:	3302      	addmi	r3, #2
 8008660:	6033      	strmi	r3, [r6, #0]
 8008662:	6825      	ldr	r5, [r4, #0]
 8008664:	f015 0506 	ands.w	r5, r5, #6
 8008668:	d106      	bne.n	8008678 <_printf_common+0x48>
 800866a:	f104 0a19 	add.w	sl, r4, #25
 800866e:	68e3      	ldr	r3, [r4, #12]
 8008670:	6832      	ldr	r2, [r6, #0]
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	42ab      	cmp	r3, r5
 8008676:	dc26      	bgt.n	80086c6 <_printf_common+0x96>
 8008678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800867c:	1e13      	subs	r3, r2, #0
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	bf18      	it	ne
 8008682:	2301      	movne	r3, #1
 8008684:	0692      	lsls	r2, r2, #26
 8008686:	d42b      	bmi.n	80086e0 <_printf_common+0xb0>
 8008688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800868c:	4649      	mov	r1, r9
 800868e:	4638      	mov	r0, r7
 8008690:	47c0      	blx	r8
 8008692:	3001      	adds	r0, #1
 8008694:	d01e      	beq.n	80086d4 <_printf_common+0xa4>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	f003 0306 	and.w	r3, r3, #6
 800869e:	2b04      	cmp	r3, #4
 80086a0:	bf02      	ittt	eq
 80086a2:	68e5      	ldreq	r5, [r4, #12]
 80086a4:	6833      	ldreq	r3, [r6, #0]
 80086a6:	1aed      	subeq	r5, r5, r3
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	bf0c      	ite	eq
 80086ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b0:	2500      	movne	r5, #0
 80086b2:	4293      	cmp	r3, r2
 80086b4:	bfc4      	itt	gt
 80086b6:	1a9b      	subgt	r3, r3, r2
 80086b8:	18ed      	addgt	r5, r5, r3
 80086ba:	2600      	movs	r6, #0
 80086bc:	341a      	adds	r4, #26
 80086be:	42b5      	cmp	r5, r6
 80086c0:	d11a      	bne.n	80086f8 <_printf_common+0xc8>
 80086c2:	2000      	movs	r0, #0
 80086c4:	e008      	b.n	80086d8 <_printf_common+0xa8>
 80086c6:	2301      	movs	r3, #1
 80086c8:	4652      	mov	r2, sl
 80086ca:	4649      	mov	r1, r9
 80086cc:	4638      	mov	r0, r7
 80086ce:	47c0      	blx	r8
 80086d0:	3001      	adds	r0, #1
 80086d2:	d103      	bne.n	80086dc <_printf_common+0xac>
 80086d4:	f04f 30ff 	mov.w	r0, #4294967295
 80086d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086dc:	3501      	adds	r5, #1
 80086de:	e7c6      	b.n	800866e <_printf_common+0x3e>
 80086e0:	18e1      	adds	r1, r4, r3
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	2030      	movs	r0, #48	; 0x30
 80086e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ea:	4422      	add	r2, r4
 80086ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086f4:	3302      	adds	r3, #2
 80086f6:	e7c7      	b.n	8008688 <_printf_common+0x58>
 80086f8:	2301      	movs	r3, #1
 80086fa:	4622      	mov	r2, r4
 80086fc:	4649      	mov	r1, r9
 80086fe:	4638      	mov	r0, r7
 8008700:	47c0      	blx	r8
 8008702:	3001      	adds	r0, #1
 8008704:	d0e6      	beq.n	80086d4 <_printf_common+0xa4>
 8008706:	3601      	adds	r6, #1
 8008708:	e7d9      	b.n	80086be <_printf_common+0x8e>
	...

0800870c <_printf_i>:
 800870c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	7e0f      	ldrb	r7, [r1, #24]
 8008712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008714:	2f78      	cmp	r7, #120	; 0x78
 8008716:	4691      	mov	r9, r2
 8008718:	4680      	mov	r8, r0
 800871a:	460c      	mov	r4, r1
 800871c:	469a      	mov	sl, r3
 800871e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008722:	d807      	bhi.n	8008734 <_printf_i+0x28>
 8008724:	2f62      	cmp	r7, #98	; 0x62
 8008726:	d80a      	bhi.n	800873e <_printf_i+0x32>
 8008728:	2f00      	cmp	r7, #0
 800872a:	f000 80d4 	beq.w	80088d6 <_printf_i+0x1ca>
 800872e:	2f58      	cmp	r7, #88	; 0x58
 8008730:	f000 80c0 	beq.w	80088b4 <_printf_i+0x1a8>
 8008734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800873c:	e03a      	b.n	80087b4 <_printf_i+0xa8>
 800873e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008742:	2b15      	cmp	r3, #21
 8008744:	d8f6      	bhi.n	8008734 <_printf_i+0x28>
 8008746:	a101      	add	r1, pc, #4	; (adr r1, 800874c <_printf_i+0x40>)
 8008748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800874c:	080087a5 	.word	0x080087a5
 8008750:	080087b9 	.word	0x080087b9
 8008754:	08008735 	.word	0x08008735
 8008758:	08008735 	.word	0x08008735
 800875c:	08008735 	.word	0x08008735
 8008760:	08008735 	.word	0x08008735
 8008764:	080087b9 	.word	0x080087b9
 8008768:	08008735 	.word	0x08008735
 800876c:	08008735 	.word	0x08008735
 8008770:	08008735 	.word	0x08008735
 8008774:	08008735 	.word	0x08008735
 8008778:	080088bd 	.word	0x080088bd
 800877c:	080087e5 	.word	0x080087e5
 8008780:	08008877 	.word	0x08008877
 8008784:	08008735 	.word	0x08008735
 8008788:	08008735 	.word	0x08008735
 800878c:	080088df 	.word	0x080088df
 8008790:	08008735 	.word	0x08008735
 8008794:	080087e5 	.word	0x080087e5
 8008798:	08008735 	.word	0x08008735
 800879c:	08008735 	.word	0x08008735
 80087a0:	0800887f 	.word	0x0800887f
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	602a      	str	r2, [r5, #0]
 80087ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087b4:	2301      	movs	r3, #1
 80087b6:	e09f      	b.n	80088f8 <_printf_i+0x1ec>
 80087b8:	6820      	ldr	r0, [r4, #0]
 80087ba:	682b      	ldr	r3, [r5, #0]
 80087bc:	0607      	lsls	r7, r0, #24
 80087be:	f103 0104 	add.w	r1, r3, #4
 80087c2:	6029      	str	r1, [r5, #0]
 80087c4:	d501      	bpl.n	80087ca <_printf_i+0xbe>
 80087c6:	681e      	ldr	r6, [r3, #0]
 80087c8:	e003      	b.n	80087d2 <_printf_i+0xc6>
 80087ca:	0646      	lsls	r6, r0, #25
 80087cc:	d5fb      	bpl.n	80087c6 <_printf_i+0xba>
 80087ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	da03      	bge.n	80087de <_printf_i+0xd2>
 80087d6:	232d      	movs	r3, #45	; 0x2d
 80087d8:	4276      	negs	r6, r6
 80087da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087de:	485a      	ldr	r0, [pc, #360]	; (8008948 <_printf_i+0x23c>)
 80087e0:	230a      	movs	r3, #10
 80087e2:	e012      	b.n	800880a <_printf_i+0xfe>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	1d19      	adds	r1, r3, #4
 80087ea:	6029      	str	r1, [r5, #0]
 80087ec:	0605      	lsls	r5, r0, #24
 80087ee:	d501      	bpl.n	80087f4 <_printf_i+0xe8>
 80087f0:	681e      	ldr	r6, [r3, #0]
 80087f2:	e002      	b.n	80087fa <_printf_i+0xee>
 80087f4:	0641      	lsls	r1, r0, #25
 80087f6:	d5fb      	bpl.n	80087f0 <_printf_i+0xe4>
 80087f8:	881e      	ldrh	r6, [r3, #0]
 80087fa:	4853      	ldr	r0, [pc, #332]	; (8008948 <_printf_i+0x23c>)
 80087fc:	2f6f      	cmp	r7, #111	; 0x6f
 80087fe:	bf0c      	ite	eq
 8008800:	2308      	moveq	r3, #8
 8008802:	230a      	movne	r3, #10
 8008804:	2100      	movs	r1, #0
 8008806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800880a:	6865      	ldr	r5, [r4, #4]
 800880c:	60a5      	str	r5, [r4, #8]
 800880e:	2d00      	cmp	r5, #0
 8008810:	bfa2      	ittt	ge
 8008812:	6821      	ldrge	r1, [r4, #0]
 8008814:	f021 0104 	bicge.w	r1, r1, #4
 8008818:	6021      	strge	r1, [r4, #0]
 800881a:	b90e      	cbnz	r6, 8008820 <_printf_i+0x114>
 800881c:	2d00      	cmp	r5, #0
 800881e:	d04b      	beq.n	80088b8 <_printf_i+0x1ac>
 8008820:	4615      	mov	r5, r2
 8008822:	fbb6 f1f3 	udiv	r1, r6, r3
 8008826:	fb03 6711 	mls	r7, r3, r1, r6
 800882a:	5dc7      	ldrb	r7, [r0, r7]
 800882c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008830:	4637      	mov	r7, r6
 8008832:	42bb      	cmp	r3, r7
 8008834:	460e      	mov	r6, r1
 8008836:	d9f4      	bls.n	8008822 <_printf_i+0x116>
 8008838:	2b08      	cmp	r3, #8
 800883a:	d10b      	bne.n	8008854 <_printf_i+0x148>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07de      	lsls	r6, r3, #31
 8008840:	d508      	bpl.n	8008854 <_printf_i+0x148>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4299      	cmp	r1, r3
 8008848:	bfde      	ittt	le
 800884a:	2330      	movle	r3, #48	; 0x30
 800884c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008854:	1b52      	subs	r2, r2, r5
 8008856:	6122      	str	r2, [r4, #16]
 8008858:	f8cd a000 	str.w	sl, [sp]
 800885c:	464b      	mov	r3, r9
 800885e:	aa03      	add	r2, sp, #12
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff fee4 	bl	8008630 <_printf_common>
 8008868:	3001      	adds	r0, #1
 800886a:	d14a      	bne.n	8008902 <_printf_i+0x1f6>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	b004      	add	sp, #16
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f043 0320 	orr.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	4833      	ldr	r0, [pc, #204]	; (800894c <_printf_i+0x240>)
 8008880:	2778      	movs	r7, #120	; 0x78
 8008882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6829      	ldr	r1, [r5, #0]
 800888a:	061f      	lsls	r7, r3, #24
 800888c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008890:	d402      	bmi.n	8008898 <_printf_i+0x18c>
 8008892:	065f      	lsls	r7, r3, #25
 8008894:	bf48      	it	mi
 8008896:	b2b6      	uxthmi	r6, r6
 8008898:	07df      	lsls	r7, r3, #31
 800889a:	bf48      	it	mi
 800889c:	f043 0320 	orrmi.w	r3, r3, #32
 80088a0:	6029      	str	r1, [r5, #0]
 80088a2:	bf48      	it	mi
 80088a4:	6023      	strmi	r3, [r4, #0]
 80088a6:	b91e      	cbnz	r6, 80088b0 <_printf_i+0x1a4>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	f023 0320 	bic.w	r3, r3, #32
 80088ae:	6023      	str	r3, [r4, #0]
 80088b0:	2310      	movs	r3, #16
 80088b2:	e7a7      	b.n	8008804 <_printf_i+0xf8>
 80088b4:	4824      	ldr	r0, [pc, #144]	; (8008948 <_printf_i+0x23c>)
 80088b6:	e7e4      	b.n	8008882 <_printf_i+0x176>
 80088b8:	4615      	mov	r5, r2
 80088ba:	e7bd      	b.n	8008838 <_printf_i+0x12c>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	6826      	ldr	r6, [r4, #0]
 80088c0:	6961      	ldr	r1, [r4, #20]
 80088c2:	1d18      	adds	r0, r3, #4
 80088c4:	6028      	str	r0, [r5, #0]
 80088c6:	0635      	lsls	r5, r6, #24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0x1c4>
 80088cc:	6019      	str	r1, [r3, #0]
 80088ce:	e002      	b.n	80088d6 <_printf_i+0x1ca>
 80088d0:	0670      	lsls	r0, r6, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0x1c0>
 80088d4:	8019      	strh	r1, [r3, #0]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	4615      	mov	r5, r2
 80088dc:	e7bc      	b.n	8008858 <_printf_i+0x14c>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	681d      	ldr	r5, [r3, #0]
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	2100      	movs	r1, #0
 80088ea:	4628      	mov	r0, r5
 80088ec:	f7f7 fc80 	bl	80001f0 <memchr>
 80088f0:	b108      	cbz	r0, 80088f6 <_printf_i+0x1ea>
 80088f2:	1b40      	subs	r0, r0, r5
 80088f4:	6060      	str	r0, [r4, #4]
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	2300      	movs	r3, #0
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008900:	e7aa      	b.n	8008858 <_printf_i+0x14c>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	462a      	mov	r2, r5
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d0ad      	beq.n	800886c <_printf_i+0x160>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	d413      	bmi.n	800893e <_printf_i+0x232>
 8008916:	68e0      	ldr	r0, [r4, #12]
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	4298      	cmp	r0, r3
 800891c:	bfb8      	it	lt
 800891e:	4618      	movlt	r0, r3
 8008920:	e7a6      	b.n	8008870 <_printf_i+0x164>
 8008922:	2301      	movs	r3, #1
 8008924:	4632      	mov	r2, r6
 8008926:	4649      	mov	r1, r9
 8008928:	4640      	mov	r0, r8
 800892a:	47d0      	blx	sl
 800892c:	3001      	adds	r0, #1
 800892e:	d09d      	beq.n	800886c <_printf_i+0x160>
 8008930:	3501      	adds	r5, #1
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	9903      	ldr	r1, [sp, #12]
 8008936:	1a5b      	subs	r3, r3, r1
 8008938:	42ab      	cmp	r3, r5
 800893a:	dcf2      	bgt.n	8008922 <_printf_i+0x216>
 800893c:	e7eb      	b.n	8008916 <_printf_i+0x20a>
 800893e:	2500      	movs	r5, #0
 8008940:	f104 0619 	add.w	r6, r4, #25
 8008944:	e7f5      	b.n	8008932 <_printf_i+0x226>
 8008946:	bf00      	nop
 8008948:	0800930f 	.word	0x0800930f
 800894c:	08009320 	.word	0x08009320

08008950 <__sflush_r>:
 8008950:	898a      	ldrh	r2, [r1, #12]
 8008952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	0710      	lsls	r0, r2, #28
 800895a:	460c      	mov	r4, r1
 800895c:	d458      	bmi.n	8008a10 <__sflush_r+0xc0>
 800895e:	684b      	ldr	r3, [r1, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc05      	bgt.n	8008970 <__sflush_r+0x20>
 8008964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	dc02      	bgt.n	8008970 <__sflush_r+0x20>
 800896a:	2000      	movs	r0, #0
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008972:	2e00      	cmp	r6, #0
 8008974:	d0f9      	beq.n	800896a <__sflush_r+0x1a>
 8008976:	2300      	movs	r3, #0
 8008978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800897c:	682f      	ldr	r7, [r5, #0]
 800897e:	6a21      	ldr	r1, [r4, #32]
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	d032      	beq.n	80089ea <__sflush_r+0x9a>
 8008984:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	075a      	lsls	r2, r3, #29
 800898a:	d505      	bpl.n	8008998 <__sflush_r+0x48>
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	1ac0      	subs	r0, r0, r3
 8008990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008992:	b10b      	cbz	r3, 8008998 <__sflush_r+0x48>
 8008994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008996:	1ac0      	subs	r0, r0, r3
 8008998:	2300      	movs	r3, #0
 800899a:	4602      	mov	r2, r0
 800899c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899e:	6a21      	ldr	r1, [r4, #32]
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b0      	blx	r6
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	d106      	bne.n	80089b8 <__sflush_r+0x68>
 80089aa:	6829      	ldr	r1, [r5, #0]
 80089ac:	291d      	cmp	r1, #29
 80089ae:	d82b      	bhi.n	8008a08 <__sflush_r+0xb8>
 80089b0:	4a29      	ldr	r2, [pc, #164]	; (8008a58 <__sflush_r+0x108>)
 80089b2:	410a      	asrs	r2, r1
 80089b4:	07d6      	lsls	r6, r2, #31
 80089b6:	d427      	bmi.n	8008a08 <__sflush_r+0xb8>
 80089b8:	2200      	movs	r2, #0
 80089ba:	6062      	str	r2, [r4, #4]
 80089bc:	04d9      	lsls	r1, r3, #19
 80089be:	6922      	ldr	r2, [r4, #16]
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	d504      	bpl.n	80089ce <__sflush_r+0x7e>
 80089c4:	1c42      	adds	r2, r0, #1
 80089c6:	d101      	bne.n	80089cc <__sflush_r+0x7c>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b903      	cbnz	r3, 80089ce <__sflush_r+0x7e>
 80089cc:	6560      	str	r0, [r4, #84]	; 0x54
 80089ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089d0:	602f      	str	r7, [r5, #0]
 80089d2:	2900      	cmp	r1, #0
 80089d4:	d0c9      	beq.n	800896a <__sflush_r+0x1a>
 80089d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089da:	4299      	cmp	r1, r3
 80089dc:	d002      	beq.n	80089e4 <__sflush_r+0x94>
 80089de:	4628      	mov	r0, r5
 80089e0:	f7ff fbe2 	bl	80081a8 <_free_r>
 80089e4:	2000      	movs	r0, #0
 80089e6:	6360      	str	r0, [r4, #52]	; 0x34
 80089e8:	e7c0      	b.n	800896c <__sflush_r+0x1c>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b0      	blx	r6
 80089f0:	1c41      	adds	r1, r0, #1
 80089f2:	d1c8      	bne.n	8008986 <__sflush_r+0x36>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0c5      	beq.n	8008986 <__sflush_r+0x36>
 80089fa:	2b1d      	cmp	r3, #29
 80089fc:	d001      	beq.n	8008a02 <__sflush_r+0xb2>
 80089fe:	2b16      	cmp	r3, #22
 8008a00:	d101      	bne.n	8008a06 <__sflush_r+0xb6>
 8008a02:	602f      	str	r7, [r5, #0]
 8008a04:	e7b1      	b.n	800896a <__sflush_r+0x1a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	e7ad      	b.n	800896c <__sflush_r+0x1c>
 8008a10:	690f      	ldr	r7, [r1, #16]
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d0a9      	beq.n	800896a <__sflush_r+0x1a>
 8008a16:	0793      	lsls	r3, r2, #30
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	600f      	str	r7, [r1, #0]
 8008a20:	bf18      	it	ne
 8008a22:	2300      	movne	r3, #0
 8008a24:	eba6 0807 	sub.w	r8, r6, r7
 8008a28:	608b      	str	r3, [r1, #8]
 8008a2a:	f1b8 0f00 	cmp.w	r8, #0
 8008a2e:	dd9c      	ble.n	800896a <__sflush_r+0x1a>
 8008a30:	6a21      	ldr	r1, [r4, #32]
 8008a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a34:	4643      	mov	r3, r8
 8008a36:	463a      	mov	r2, r7
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	dc06      	bgt.n	8008a4e <__sflush_r+0xfe>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	e78e      	b.n	800896c <__sflush_r+0x1c>
 8008a4e:	4407      	add	r7, r0
 8008a50:	eba8 0800 	sub.w	r8, r8, r0
 8008a54:	e7e9      	b.n	8008a2a <__sflush_r+0xda>
 8008a56:	bf00      	nop
 8008a58:	dfbffffe 	.word	0xdfbffffe

08008a5c <_fflush_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	690b      	ldr	r3, [r1, #16]
 8008a60:	4605      	mov	r5, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	b913      	cbnz	r3, 8008a6c <_fflush_r+0x10>
 8008a66:	2500      	movs	r5, #0
 8008a68:	4628      	mov	r0, r5
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	b118      	cbz	r0, 8008a76 <_fflush_r+0x1a>
 8008a6e:	6a03      	ldr	r3, [r0, #32]
 8008a70:	b90b      	cbnz	r3, 8008a76 <_fflush_r+0x1a>
 8008a72:	f7ff f959 	bl	8007d28 <__sinit>
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f3      	beq.n	8008a66 <_fflush_r+0xa>
 8008a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a80:	07d0      	lsls	r0, r2, #31
 8008a82:	d404      	bmi.n	8008a8e <_fflush_r+0x32>
 8008a84:	0599      	lsls	r1, r3, #22
 8008a86:	d402      	bmi.n	8008a8e <_fflush_r+0x32>
 8008a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8a:	f7ff fb6c 	bl	8008166 <__retarget_lock_acquire_recursive>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7ff ff5d 	bl	8008950 <__sflush_r>
 8008a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a98:	07da      	lsls	r2, r3, #31
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	d4e4      	bmi.n	8008a68 <_fflush_r+0xc>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	059b      	lsls	r3, r3, #22
 8008aa2:	d4e1      	bmi.n	8008a68 <_fflush_r+0xc>
 8008aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa6:	f7ff fb5f 	bl	8008168 <__retarget_lock_release_recursive>
 8008aaa:	e7dd      	b.n	8008a68 <_fflush_r+0xc>

08008aac <fiprintf>:
 8008aac:	b40e      	push	{r1, r2, r3}
 8008aae:	b503      	push	{r0, r1, lr}
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	4805      	ldr	r0, [pc, #20]	; (8008acc <fiprintf+0x20>)
 8008ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	f7ff fc9d 	bl	80083fc <_vfiprintf_r>
 8008ac2:	b002      	add	sp, #8
 8008ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac8:	b003      	add	sp, #12
 8008aca:	4770      	bx	lr
 8008acc:	200000b4 	.word	0x200000b4

08008ad0 <_getc_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	b118      	cbz	r0, 8008ae0 <_getc_r+0x10>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <_getc_r+0x10>
 8008adc:	f7ff f924 	bl	8007d28 <__sinit>
 8008ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae2:	07d8      	lsls	r0, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_getc_r+0x22>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	0599      	lsls	r1, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_getc_r+0x22>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f7ff fb3a 	bl	8008166 <__retarget_lock_acquire_recursive>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	da0f      	bge.n	8008b1c <_getc_r+0x4c>
 8008afc:	4628      	mov	r0, r5
 8008afe:	4621      	mov	r1, r4
 8008b00:	f000 f8a7 	bl	8008c52 <__srget_r>
 8008b04:	4605      	mov	r5, r0
 8008b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	d405      	bmi.n	8008b18 <_getc_r+0x48>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	059b      	lsls	r3, r3, #22
 8008b10:	d402      	bmi.n	8008b18 <_getc_r+0x48>
 8008b12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b14:	f7ff fb28 	bl	8008168 <__retarget_lock_release_recursive>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	781d      	ldrb	r5, [r3, #0]
 8008b24:	e7ef      	b.n	8008b06 <_getc_r+0x36>

08008b26 <__swhatbuf_r>:
 8008b26:	b570      	push	{r4, r5, r6, lr}
 8008b28:	460c      	mov	r4, r1
 8008b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	b096      	sub	sp, #88	; 0x58
 8008b32:	4615      	mov	r5, r2
 8008b34:	461e      	mov	r6, r3
 8008b36:	da0d      	bge.n	8008b54 <__swhatbuf_r+0x2e>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b3e:	f04f 0100 	mov.w	r1, #0
 8008b42:	bf0c      	ite	eq
 8008b44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b48:	2340      	movne	r3, #64	; 0x40
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	6031      	str	r1, [r6, #0]
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	b016      	add	sp, #88	; 0x58
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	466a      	mov	r2, sp
 8008b56:	f000 f929 	bl	8008dac <_fstat_r>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	dbec      	blt.n	8008b38 <__swhatbuf_r+0x12>
 8008b5e:	9901      	ldr	r1, [sp, #4]
 8008b60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b68:	4259      	negs	r1, r3
 8008b6a:	4159      	adcs	r1, r3
 8008b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b70:	e7eb      	b.n	8008b4a <__swhatbuf_r+0x24>

08008b72 <__smakebuf_r>:
 8008b72:	898b      	ldrh	r3, [r1, #12]
 8008b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b76:	079d      	lsls	r5, r3, #30
 8008b78:	4606      	mov	r6, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	d507      	bpl.n	8008b8e <__smakebuf_r+0x1c>
 8008b7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	2301      	movs	r3, #1
 8008b88:	6163      	str	r3, [r4, #20]
 8008b8a:	b002      	add	sp, #8
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	ab01      	add	r3, sp, #4
 8008b90:	466a      	mov	r2, sp
 8008b92:	f7ff ffc8 	bl	8008b26 <__swhatbuf_r>
 8008b96:	9900      	ldr	r1, [sp, #0]
 8008b98:	4605      	mov	r5, r0
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff fb78 	bl	8008290 <_malloc_r>
 8008ba0:	b948      	cbnz	r0, 8008bb6 <__smakebuf_r+0x44>
 8008ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba6:	059a      	lsls	r2, r3, #22
 8008ba8:	d4ef      	bmi.n	8008b8a <__smakebuf_r+0x18>
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	f043 0302 	orr.w	r3, r3, #2
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	e7e3      	b.n	8008b7e <__smakebuf_r+0xc>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	6020      	str	r0, [r4, #0]
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	6120      	str	r0, [r4, #16]
 8008bc8:	b15b      	cbz	r3, 8008be2 <__smakebuf_r+0x70>
 8008bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f8fe 	bl	8008dd0 <_isatty_r>
 8008bd4:	b128      	cbz	r0, 8008be2 <__smakebuf_r+0x70>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	431d      	orrs	r5, r3
 8008be6:	81a5      	strh	r5, [r4, #12]
 8008be8:	e7cf      	b.n	8008b8a <__smakebuf_r+0x18>

08008bea <_putc_r>:
 8008bea:	b570      	push	{r4, r5, r6, lr}
 8008bec:	460d      	mov	r5, r1
 8008bee:	4614      	mov	r4, r2
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	b118      	cbz	r0, 8008bfc <_putc_r+0x12>
 8008bf4:	6a03      	ldr	r3, [r0, #32]
 8008bf6:	b90b      	cbnz	r3, 8008bfc <_putc_r+0x12>
 8008bf8:	f7ff f896 	bl	8007d28 <__sinit>
 8008bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bfe:	07d8      	lsls	r0, r3, #31
 8008c00:	d405      	bmi.n	8008c0e <_putc_r+0x24>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	0599      	lsls	r1, r3, #22
 8008c06:	d402      	bmi.n	8008c0e <_putc_r+0x24>
 8008c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0a:	f7ff faac 	bl	8008166 <__retarget_lock_acquire_recursive>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	60a3      	str	r3, [r4, #8]
 8008c16:	da05      	bge.n	8008c24 <_putc_r+0x3a>
 8008c18:	69a2      	ldr	r2, [r4, #24]
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	db12      	blt.n	8008c44 <_putc_r+0x5a>
 8008c1e:	b2eb      	uxtb	r3, r5
 8008c20:	2b0a      	cmp	r3, #10
 8008c22:	d00f      	beq.n	8008c44 <_putc_r+0x5a>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	6022      	str	r2, [r4, #0]
 8008c2a:	701d      	strb	r5, [r3, #0]
 8008c2c:	b2ed      	uxtb	r5, r5
 8008c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c30:	07da      	lsls	r2, r3, #31
 8008c32:	d405      	bmi.n	8008c40 <_putc_r+0x56>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	059b      	lsls	r3, r3, #22
 8008c38:	d402      	bmi.n	8008c40 <_putc_r+0x56>
 8008c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c3c:	f7ff fa94 	bl	8008168 <__retarget_lock_release_recursive>
 8008c40:	4628      	mov	r0, r5
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	4629      	mov	r1, r5
 8008c46:	4622      	mov	r2, r4
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f000 f81a 	bl	8008c82 <__swbuf_r>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	e7ed      	b.n	8008c2e <_putc_r+0x44>

08008c52 <__srget_r>:
 8008c52:	b538      	push	{r3, r4, r5, lr}
 8008c54:	460c      	mov	r4, r1
 8008c56:	4605      	mov	r5, r0
 8008c58:	b118      	cbz	r0, 8008c62 <__srget_r+0x10>
 8008c5a:	6a03      	ldr	r3, [r0, #32]
 8008c5c:	b90b      	cbnz	r3, 8008c62 <__srget_r+0x10>
 8008c5e:	f7ff f863 	bl	8007d28 <__sinit>
 8008c62:	4621      	mov	r1, r4
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 f8e9 	bl	8008e3c <__srefill_r>
 8008c6a:	b938      	cbnz	r0, 8008c7c <__srget_r+0x2a>
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	6022      	str	r2, [r4, #0]
 8008c78:	7818      	ldrb	r0, [r3, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e7fb      	b.n	8008c7a <__srget_r+0x28>

08008c82 <__swbuf_r>:
 8008c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c84:	460e      	mov	r6, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	4605      	mov	r5, r0
 8008c8a:	b118      	cbz	r0, 8008c94 <__swbuf_r+0x12>
 8008c8c:	6a03      	ldr	r3, [r0, #32]
 8008c8e:	b90b      	cbnz	r3, 8008c94 <__swbuf_r+0x12>
 8008c90:	f7ff f84a 	bl	8007d28 <__sinit>
 8008c94:	69a3      	ldr	r3, [r4, #24]
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	071a      	lsls	r2, r3, #28
 8008c9c:	d525      	bpl.n	8008cea <__swbuf_r+0x68>
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	b31b      	cbz	r3, 8008cea <__swbuf_r+0x68>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	1a98      	subs	r0, r3, r2
 8008ca8:	6963      	ldr	r3, [r4, #20]
 8008caa:	b2f6      	uxtb	r6, r6
 8008cac:	4283      	cmp	r3, r0
 8008cae:	4637      	mov	r7, r6
 8008cb0:	dc04      	bgt.n	8008cbc <__swbuf_r+0x3a>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7ff fed1 	bl	8008a5c <_fflush_r>
 8008cba:	b9e0      	cbnz	r0, 8008cf6 <__swbuf_r+0x74>
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	701e      	strb	r6, [r3, #0]
 8008cca:	6962      	ldr	r2, [r4, #20]
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d004      	beq.n	8008cdc <__swbuf_r+0x5a>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	07db      	lsls	r3, r3, #31
 8008cd6:	d506      	bpl.n	8008ce6 <__swbuf_r+0x64>
 8008cd8:	2e0a      	cmp	r6, #10
 8008cda:	d104      	bne.n	8008ce6 <__swbuf_r+0x64>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7ff febc 	bl	8008a5c <_fflush_r>
 8008ce4:	b938      	cbnz	r0, 8008cf6 <__swbuf_r+0x74>
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cea:	4621      	mov	r1, r4
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 f805 	bl	8008cfc <__swsetup_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d0d5      	beq.n	8008ca2 <__swbuf_r+0x20>
 8008cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8008cfa:	e7f4      	b.n	8008ce6 <__swbuf_r+0x64>

08008cfc <__swsetup_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <__swsetup_r+0xac>)
 8008d00:	4605      	mov	r5, r0
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	460c      	mov	r4, r1
 8008d06:	b118      	cbz	r0, 8008d10 <__swsetup_r+0x14>
 8008d08:	6a03      	ldr	r3, [r0, #32]
 8008d0a:	b90b      	cbnz	r3, 8008d10 <__swsetup_r+0x14>
 8008d0c:	f7ff f80c 	bl	8007d28 <__sinit>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d16:	0718      	lsls	r0, r3, #28
 8008d18:	d422      	bmi.n	8008d60 <__swsetup_r+0x64>
 8008d1a:	06d9      	lsls	r1, r3, #27
 8008d1c:	d407      	bmi.n	8008d2e <__swsetup_r+0x32>
 8008d1e:	2309      	movs	r3, #9
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e034      	b.n	8008d98 <__swsetup_r+0x9c>
 8008d2e:	0758      	lsls	r0, r3, #29
 8008d30:	d512      	bpl.n	8008d58 <__swsetup_r+0x5c>
 8008d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d34:	b141      	cbz	r1, 8008d48 <__swsetup_r+0x4c>
 8008d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	d002      	beq.n	8008d44 <__swsetup_r+0x48>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7ff fa32 	bl	80081a8 <_free_r>
 8008d44:	2300      	movs	r3, #0
 8008d46:	6363      	str	r3, [r4, #52]	; 0x34
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	2300      	movs	r3, #0
 8008d52:	6063      	str	r3, [r4, #4]
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f043 0308 	orr.w	r3, r3, #8
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	b94b      	cbnz	r3, 8008d78 <__swsetup_r+0x7c>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6e:	d003      	beq.n	8008d78 <__swsetup_r+0x7c>
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f7ff fefd 	bl	8008b72 <__smakebuf_r>
 8008d78:	89a0      	ldrh	r0, [r4, #12]
 8008d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d7e:	f010 0301 	ands.w	r3, r0, #1
 8008d82:	d00a      	beq.n	8008d9a <__swsetup_r+0x9e>
 8008d84:	2300      	movs	r3, #0
 8008d86:	60a3      	str	r3, [r4, #8]
 8008d88:	6963      	ldr	r3, [r4, #20]
 8008d8a:	425b      	negs	r3, r3
 8008d8c:	61a3      	str	r3, [r4, #24]
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	b943      	cbnz	r3, 8008da4 <__swsetup_r+0xa8>
 8008d92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d96:	d1c4      	bne.n	8008d22 <__swsetup_r+0x26>
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	0781      	lsls	r1, r0, #30
 8008d9c:	bf58      	it	pl
 8008d9e:	6963      	ldrpl	r3, [r4, #20]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	e7f4      	b.n	8008d8e <__swsetup_r+0x92>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e7f7      	b.n	8008d98 <__swsetup_r+0x9c>
 8008da8:	200000b4 	.word	0x200000b4

08008dac <_fstat_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d07      	ldr	r5, [pc, #28]	; (8008dcc <_fstat_r+0x20>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	f7f8 fb87 	bl	80014cc <_fstat>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d102      	bne.n	8008dc8 <_fstat_r+0x1c>
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	b103      	cbz	r3, 8008dc8 <_fstat_r+0x1c>
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	bd38      	pop	{r3, r4, r5, pc}
 8008dca:	bf00      	nop
 8008dcc:	200003e0 	.word	0x200003e0

08008dd0 <_isatty_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_isatty_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7f8 fae4 	bl	80013a8 <_isatty>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_isatty_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_isatty_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	200003e0 	.word	0x200003e0

08008df0 <_sbrk_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d06      	ldr	r5, [pc, #24]	; (8008e0c <_sbrk_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f8 fd78 	bl	80018f0 <_sbrk>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_sbrk_r+0x1a>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_sbrk_r+0x1a>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200003e0 	.word	0x200003e0

08008e10 <abort>:
 8008e10:	b508      	push	{r3, lr}
 8008e12:	2006      	movs	r0, #6
 8008e14:	f000 f8b2 	bl	8008f7c <raise>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	f7f8 fd5f 	bl	80018dc <_exit>
	...

08008e20 <lflush>:
 8008e20:	898b      	ldrh	r3, [r1, #12]
 8008e22:	f003 0309 	and.w	r3, r3, #9
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d103      	bne.n	8008e32 <lflush+0x12>
 8008e2a:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <lflush+0x18>)
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f7ff be15 	b.w	8008a5c <_fflush_r>
 8008e32:	2000      	movs	r0, #0
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	200000b4 	.word	0x200000b4

08008e3c <__srefill_r>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4605      	mov	r5, r0
 8008e42:	b118      	cbz	r0, 8008e4c <__srefill_r+0x10>
 8008e44:	6a03      	ldr	r3, [r0, #32]
 8008e46:	b90b      	cbnz	r3, 8008e4c <__srefill_r+0x10>
 8008e48:	f7fe ff6e 	bl	8007d28 <__sinit>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e56:	069e      	lsls	r6, r3, #26
 8008e58:	d502      	bpl.n	8008e60 <__srefill_r+0x24>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	e05c      	b.n	8008f1a <__srefill_r+0xde>
 8008e60:	0758      	lsls	r0, r3, #29
 8008e62:	d448      	bmi.n	8008ef6 <__srefill_r+0xba>
 8008e64:	06d9      	lsls	r1, r3, #27
 8008e66:	d405      	bmi.n	8008e74 <__srefill_r+0x38>
 8008e68:	2309      	movs	r3, #9
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	e7f2      	b.n	8008e5a <__srefill_r+0x1e>
 8008e74:	071a      	lsls	r2, r3, #28
 8008e76:	d50b      	bpl.n	8008e90 <__srefill_r+0x54>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f7ff fdee 	bl	8008a5c <_fflush_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1ea      	bne.n	8008e5a <__srefill_r+0x1e>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	60a0      	str	r0, [r4, #8]
 8008e88:	f023 0308 	bic.w	r3, r3, #8
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	61a0      	str	r0, [r4, #24]
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f043 0304 	orr.w	r3, r3, #4
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	b91b      	cbnz	r3, 8008ea4 <__srefill_r+0x68>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f7ff fe67 	bl	8008b72 <__smakebuf_r>
 8008ea4:	89a6      	ldrh	r6, [r4, #12]
 8008ea6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008eaa:	07b3      	lsls	r3, r6, #30
 8008eac:	d00f      	beq.n	8008ece <__srefill_r+0x92>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <__srefill_r+0xe4>)
 8008eb2:	491c      	ldr	r1, [pc, #112]	; (8008f24 <__srefill_r+0xe8>)
 8008eb4:	481c      	ldr	r0, [pc, #112]	; (8008f28 <__srefill_r+0xec>)
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	f006 0609 	and.w	r6, r6, #9
 8008ebc:	f7fe ff4c 	bl	8007d58 <_fwalk_sglue>
 8008ec0:	2e09      	cmp	r6, #9
 8008ec2:	81a7      	strh	r7, [r4, #12]
 8008ec4:	d103      	bne.n	8008ece <__srefill_r+0x92>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7ff fd41 	bl	8008950 <__sflush_r>
 8008ece:	6922      	ldr	r2, [r4, #16]
 8008ed0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ed2:	6963      	ldr	r3, [r4, #20]
 8008ed4:	6a21      	ldr	r1, [r4, #32]
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	2800      	cmp	r0, #0
 8008ede:	6060      	str	r0, [r4, #4]
 8008ee0:	dc1c      	bgt.n	8008f1c <__srefill_r+0xe0>
 8008ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee6:	bf17      	itett	ne
 8008ee8:	2200      	movne	r2, #0
 8008eea:	f043 0320 	orreq.w	r3, r3, #32
 8008eee:	6062      	strne	r2, [r4, #4]
 8008ef0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008ef4:	e7bc      	b.n	8008e70 <__srefill_r+0x34>
 8008ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d0cd      	beq.n	8008e98 <__srefill_r+0x5c>
 8008efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f00:	4299      	cmp	r1, r3
 8008f02:	d002      	beq.n	8008f0a <__srefill_r+0xce>
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7ff f94f 	bl	80081a8 <_free_r>
 8008f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	2000      	movs	r0, #0
 8008f10:	6360      	str	r0, [r4, #52]	; 0x34
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0c0      	beq.n	8008e98 <__srefill_r+0x5c>
 8008f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7fc      	b.n	8008f1a <__srefill_r+0xde>
 8008f20:	2000005c 	.word	0x2000005c
 8008f24:	08008e21 	.word	0x08008e21
 8008f28:	20000068 	.word	0x20000068

08008f2c <_raise_r>:
 8008f2c:	291f      	cmp	r1, #31
 8008f2e:	b538      	push	{r3, r4, r5, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	d904      	bls.n	8008f40 <_raise_r+0x14>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f42:	b112      	cbz	r2, 8008f4a <_raise_r+0x1e>
 8008f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f48:	b94b      	cbnz	r3, 8008f5e <_raise_r+0x32>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f830 	bl	8008fb0 <_getpid_r>
 8008f50:	462a      	mov	r2, r5
 8008f52:	4601      	mov	r1, r0
 8008f54:	4620      	mov	r0, r4
 8008f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f5a:	f000 b817 	b.w	8008f8c <_kill_r>
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d00a      	beq.n	8008f78 <_raise_r+0x4c>
 8008f62:	1c59      	adds	r1, r3, #1
 8008f64:	d103      	bne.n	8008f6e <_raise_r+0x42>
 8008f66:	2316      	movs	r3, #22
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	e7e7      	b.n	8008f3e <_raise_r+0x12>
 8008f6e:	2400      	movs	r4, #0
 8008f70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f74:	4628      	mov	r0, r5
 8008f76:	4798      	blx	r3
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e7e0      	b.n	8008f3e <_raise_r+0x12>

08008f7c <raise>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <raise+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff bfd3 	b.w	8008f2c <_raise_r>
 8008f86:	bf00      	nop
 8008f88:	200000b4 	.word	0x200000b4

08008f8c <_kill_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	; (8008fac <_kill_r+0x20>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f7f8 fc8f 	bl	80018bc <_kill>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <_kill_r+0x1c>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b103      	cbz	r3, 8008fa8 <_kill_r+0x1c>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	200003e0 	.word	0x200003e0

08008fb0 <_getpid_r>:
 8008fb0:	f7f8 bc7c 	b.w	80018ac <_getpid>

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
